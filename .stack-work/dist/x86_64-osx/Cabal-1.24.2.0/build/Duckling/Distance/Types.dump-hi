
==================== FINAL INTERFACE ====================
2019-03-14 03:00:37.197545 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types [family instance module] 8002
  interface hash: fd9e8fb36ebc00172161194a765f3a08
  ABI hash: 9896bb4befae688e072673e0e486da8d
  export-list hash: 23b1a80c558bfd60ea16f2f89103940d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 54b7aa1fcc19816f790646389db8ee22
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Distance.Types.above
  Duckling.Distance.Types.between
  Duckling.Distance.Types.openInterval
  Duckling.Distance.Types.simple
  Duckling.Distance.Types.single
  Duckling.Distance.Types.under
  Duckling.Distance.Types.DistanceData{Duckling.Distance.Types.DistanceData maxValue minValue unit value}
  Duckling.Distance.Types.DistanceValue{Duckling.Distance.Types.IntervalValue Duckling.Distance.Types.OpenIntervalValue Duckling.Distance.Types.SimpleValue}
  Duckling.Distance.Types.IntervalDirection{Duckling.Distance.Types.Above Duckling.Distance.Types.Under}
  Duckling.Distance.Types.SingleValue{Duckling.Distance.Types.SingleValue vUnit vValue}
  Duckling.Distance.Types.Unit{Duckling.Distance.Types.Centimetre Duckling.Distance.Types.Foot Duckling.Distance.Types.Inch Duckling.Distance.Types.Kilometre Duckling.Distance.Types.M Duckling.Distance.Types.Metre Duckling.Distance.Types.Mile Duckling.Distance.Types.Millimetre Duckling.Distance.Types.Yard}
module dependencies: Duckling.Locale Duckling.Region
                     Duckling.Resolve
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
5f72aa94a003e16c032acf5100e0311f
  $fEqDistanceData ::
    GHC.Classes.Eq Duckling.Distance.Types.DistanceData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fEqDistanceData_$c==
                  Duckling.Distance.Types.$fEqDistanceData_$c/= -}
5f72aa94a003e16c032acf5100e0311f
  $fEqDistanceData_$c/= ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.DistanceData)
                   (b :: Duckling.Distance.Types.DistanceData) ->
                 case Duckling.Distance.Types.$fEqDistanceData_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5f72aa94a003e16c032acf5100e0311f
  $fEqDistanceData_$c== ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fEqDistanceValue ::
    GHC.Classes.Eq Duckling.Distance.Types.DistanceValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceValue
                  Duckling.Distance.Types.$fEqDistanceValue_$c==
                  Duckling.Distance.Types.$fEqDistanceValue_$c/= -}
ed108df899e481b8207b9b4913d2f706
  $fEqDistanceValue_$c/= ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case Duckling.Distance.Types.$fEqDistanceValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ed108df899e481b8207b9b4913d2f706
  $fEqDistanceValue_$c== ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Distance.Types.DistanceValue)
                   (ds1 :: Duckling.Distance.Types.DistanceValue) ->
                 case ds of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fEqDistanceValue_$c==2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Distance.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Distance.Types.SingleValue ww11 ww12 ->
                           case Duckling.Distance.Types.$w$c==1 ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Distance.Types.$fEqDistanceValue_$c==2
                                  ww2
                                  ww5 } } } } } }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Distance.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Distance.Types.SingleValue ww11 ww12 ->
                           case Duckling.Distance.Types.$w$c==1 ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Distance.Types.$fEqDistanceValue_$c==1
                                  ww2
                                  ww5 } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fEqDistanceValue_$c==1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Distance.Types.IntervalDirection)
                   (ds1 :: Duckling.Distance.Types.IntervalDirection) ->
                 case ds of wild {
                   Duckling.Distance.Types.Above
                   -> case ds1 of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.True
                        Duckling.Distance.Types.Under -> GHC.Types.False }
                   Duckling.Distance.Types.Under
                   -> case ds1 of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.False
                        Duckling.Distance.Types.Under -> GHC.Types.True } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fEqDistanceValue_$c==2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
6ab08a13545203e1527793a85e250a7e
  $fEqIntervalDirection ::
    GHC.Classes.Eq Duckling.Distance.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.IntervalDirection
                  Duckling.Distance.Types.$fEqDistanceValue_$c==1
                  Duckling.Distance.Types.$fEqIntervalDirection_$c/= -}
6ab08a13545203e1527793a85e250a7e
  $fEqIntervalDirection_$c/= ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.False
                        Duckling.Distance.Types.Under -> GHC.Types.True }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.True
                        Duckling.Distance.Types.Under -> GHC.Types.False } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fEqSingleValue ::
    GHC.Classes.Eq Duckling.Distance.Types.SingleValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.SingleValue
                  Duckling.Distance.Types.$fEqDistanceValue_$c==2
                  Duckling.Distance.Types.$fEqSingleValue_$c/= -}
7c5e09a2def86294d8ef045e29daa5a4
  $fEqSingleValue_$c/= ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.SingleValue)
                   (b :: Duckling.Distance.Types.SingleValue) ->
                 case Duckling.Distance.Types.$fEqDistanceValue_$c==2 a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fEqUnit :: GHC.Classes.Eq Duckling.Distance.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fEqUnit_$c==
                  Duckling.Distance.Types.$fEqUnit_$c/= -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fEqUnit_$c/= ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of wild {
                   Duckling.Distance.Types.Centimetre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Centimetre -> GHC.Types.False }
                   Duckling.Distance.Types.Foot
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Foot -> GHC.Types.False }
                   Duckling.Distance.Types.Inch
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Inch -> GHC.Types.False }
                   Duckling.Distance.Types.Kilometre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Kilometre -> GHC.Types.False }
                   Duckling.Distance.Types.M
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.M -> GHC.Types.False }
                   Duckling.Distance.Types.Metre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Metre -> GHC.Types.False }
                   Duckling.Distance.Types.Mile
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Mile -> GHC.Types.False }
                   Duckling.Distance.Types.Millimetre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Millimetre -> GHC.Types.False }
                   Duckling.Distance.Types.Yard
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.Yard -> GHC.Types.False } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fEqUnit_$c== ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Distance.Types.Unit)
                   (ds1 :: Duckling.Distance.Types.Unit) ->
                 case ds of wild {
                   Duckling.Distance.Types.Centimetre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Centimetre -> GHC.Types.True }
                   Duckling.Distance.Types.Foot
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Foot -> GHC.Types.True }
                   Duckling.Distance.Types.Inch
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Inch -> GHC.Types.True }
                   Duckling.Distance.Types.Kilometre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Kilometre -> GHC.Types.True }
                   Duckling.Distance.Types.M
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.M -> GHC.Types.True }
                   Duckling.Distance.Types.Metre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Metre -> GHC.Types.True }
                   Duckling.Distance.Types.Mile
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Mile -> GHC.Types.True }
                   Duckling.Distance.Types.Millimetre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Millimetre -> GHC.Types.True }
                   Duckling.Distance.Types.Yard
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Yard -> GHC.Types.True } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fGenericDistanceData ::
    GHC.Generics.Generic Duckling.Distance.Types.DistanceData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fGenericDistanceData_$cfrom
                  Duckling.Distance.Types.$fGenericDistanceData_$cto -}
5f72aa94a003e16c032acf5100e0311f
  $fGenericDistanceData1 ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "unit")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R (GHC.Base.Maybe Duckling.Distance.Types.Unit))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "value")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "minValue")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "maxValue")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe GHC.Types.Double))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Distance.Types.DistanceData) ->
                 case x1 of wild { Duckling.Distance.Types.DistanceData g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "unit")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "value")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "minValue")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "maxValue")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "unit")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Duckling.Distance.Types.Unit)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "value")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P
                                      <GHC.Base.Maybe Duckling.Distance.Types.Unit>_R
                                      <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "unit")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe Duckling.Distance.Types.Unit)>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "value")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "minValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "maxValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "minValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N))
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "maxValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "unit")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "value")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe GHC.Types.Double)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "minValue")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "maxValue")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       GHC.Types.Double)))>_R) <x>_N) }) -}
5f72aa94a003e16c032acf5100e0311f
  $fGenericDistanceData_$cfrom ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Generics.Rep Duckling.Distance.Types.DistanceData x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fGenericDistanceData1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Distance.Types.DistanceData>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "DistanceData"
                                       "Duckling.Distance.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "unit")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "value")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Double)))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "minValue")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Double))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "maxValue")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   GHC.Types.Double))))>_R))
                          (Sub (Sym (Duckling.Distance.Types.Rep_DistanceData[0]))) <x>_N) -}
5f72aa94a003e16c032acf5100e0311f
  $fGenericDistanceData_$cto ::
    GHC.Generics.Rep Duckling.Distance.Types.DistanceData x
    -> Duckling.Distance.Types.DistanceData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Distance.Types.DistanceData x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Distance.Types.Rep_DistanceData[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "DistanceData"
                                        "Duckling.Distance.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "unit")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "value")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Double)))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "minValue")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Double))
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "maxValue")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    GHC.Types.Double))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "unit")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "value")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Double)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "minValue")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Double))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "maxValue")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 GHC.Types.Double)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Duckling.Distance.Types.DistanceData
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "unit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R
                                (GHC.Base.Maybe Duckling.Distance.Types.Unit)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe Duckling.Distance.Types.Unit>_R
                             <x>_P))
                   ds4
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "minValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "maxValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe GHC.Types.Double>_R
                             <x>_P)) } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fGenericIntervalDirection ::
    GHC.Generics.Generic Duckling.Distance.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.IntervalDirection
                  Duckling.Distance.Types.$fGenericIntervalDirection_$cfrom
                  Duckling.Distance.Types.$fGenericIntervalDirection_$cto -}
6ab08a13545203e1527793a85e250a7e
  $fGenericIntervalDirection1 ::
    Duckling.Distance.Types.IntervalDirection
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Distance.Types.IntervalDirection) ->
                 case x1 of wild {
                   Duckling.Distance.Types.Above
                   -> Duckling.Distance.Types.$fGenericIntervalDirection3 @ x
                   Duckling.Distance.Types.Under
                   -> Duckling.Distance.Types.$fGenericIntervalDirection2 @ x }) -}
b7052ff2cc2d0afa6ca123fa303be039
  $fGenericIntervalDirection2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
5a5982e8927f12fec27b08509df97412
  $fGenericIntervalDirection3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Above" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
6ab08a13545203e1527793a85e250a7e
  $fGenericIntervalDirection_$cfrom ::
    Duckling.Distance.Types.IntervalDirection
    -> GHC.Generics.Rep Duckling.Distance.Types.IntervalDirection x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fGenericIntervalDirection1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Distance.Types.IntervalDirection>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "IntervalDirection"
                                       "Duckling.Distance.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "Under"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R))
                          (Sub (Sym (Duckling.Distance.Types.Rep_IntervalDirection[0]))) <x>_N) -}
6ab08a13545203e1527793a85e250a7e
  $fGenericIntervalDirection_$cto ::
    GHC.Generics.Rep Duckling.Distance.Types.IntervalDirection x
    -> Duckling.Distance.Types.IntervalDirection
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Duckling.Distance.Types.IntervalDirection x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Distance.Types.Rep_IntervalDirection[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "IntervalDirection"
                                   "Duckling.Distance.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "Under"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Distance.Types.Above }
                   GHC.Generics.R1 ds1
                   -> case ds1 of tpl { DEFAULT ->
                      Duckling.Distance.Types.Under } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fGenericUnit :: GHC.Generics.Generic Duckling.Distance.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fGenericUnit_$cfrom
                  Duckling.Distance.Types.$fGenericUnit_$cto -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fGenericUnit1 ::
    Duckling.Distance.Types.Unit
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
             GHC.Generics.U1
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1)
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "Kilometre"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
             GHC.Generics.U1
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1)
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: (GHC.Generics.M1
                                                GHC.Generics.C
                                                ('GHC.Generics.MetaCons
                                                   "Millimetre"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.False)
                                                GHC.Generics.U1
                                              GHC.Generics.:+: GHC.Generics.M1
                                                                 GHC.Generics.C
                                                                 ('GHC.Generics.MetaCons
                                                                    "Yard"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x (x1 :: Duckling.Distance.Types.Unit) ->
                 case x1 of wild {
                   Duckling.Distance.Types.Centimetre
                   -> Duckling.Distance.Types.$fGenericUnit28 @ x
                   Duckling.Distance.Types.Foot
                   -> Duckling.Distance.Types.$fGenericUnit25 @ x
                   Duckling.Distance.Types.Inch
                   -> Duckling.Distance.Types.$fGenericUnit22 @ x
                   Duckling.Distance.Types.Kilometre
                   -> Duckling.Distance.Types.$fGenericUnit19 @ x
                   Duckling.Distance.Types.M
                   -> Duckling.Distance.Types.$fGenericUnit16 @ x
                   Duckling.Distance.Types.Metre
                   -> Duckling.Distance.Types.$fGenericUnit13 @ x
                   Duckling.Distance.Types.Mile
                   -> Duckling.Distance.Types.$fGenericUnit10 @ x
                   Duckling.Distance.Types.Millimetre
                   -> Duckling.Distance.Types.$fGenericUnit6 @ x
                   Duckling.Distance.Types.Yard
                   -> Duckling.Distance.Types.$fGenericUnit2 @ x }) -}
afc5762f5354aee6e7eadd9e8642912e
  $fGenericUnit10 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit11 @ x)) -}
f1a8a34dffabd5da66f171c957c57b0f
  $fGenericUnit11 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Yard"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit12 @ x)) -}
023ecae552d446c909061f5e833044a3
  $fGenericUnit12 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
201a549726879e44cdbd175f669d60ec
  $fGenericUnit13 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit14 @ x)) -}
5be3ee453814dc515a33c228d70fcefa
  $fGenericUnit14 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Yard"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit15 @ x)) -}
da044a7279b30e05cc365597c6853daf
  $fGenericUnit15 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
373e47430394d1d90057c3bef9174193
  $fGenericUnit16 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit17 @ x)) -}
7364cd581a5d6b4b10555f061f107175
  $fGenericUnit17 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Yard"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit18 @ x)) -}
17e1c361a2dbe1a5ee8befef57889992
  $fGenericUnit18 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "M" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
93c444dcdede1318a270faa819f9fea6
  $fGenericUnit19 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit20 @ x)) -}
f53fc3766c178cb9f073f539dbfcdddd
  $fGenericUnit2 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit3 @ x)) -}
167d7e4ef4d26ee3ca4c95ad9fc5f382
  $fGenericUnit20 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit21 @ x)) -}
e6ca768401dffb750a25ee0a8d7c3e28
  $fGenericUnit21 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
e030d6149643f406d50972851d1e4b79
  $fGenericUnit22 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit23 @ x)) -}
9a4004bf1640ec0790967f12f8a5f7ea
  $fGenericUnit23 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit24 @ x)) -}
9609a497f298bfc5803887b5d92f260c
  $fGenericUnit24 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
b76fc00fb180bb5bdb093edc6259ea67
  $fGenericUnit25 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit26 @ x)) -}
af676bcc0ab442b53635754cd43816f1
  $fGenericUnit26 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit27 @ x)) -}
b1b86f0d2df7e98821e06e683855efa7
  $fGenericUnit27 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
cb6c77bcf76c4129c99dd5b0f9aa5960
  $fGenericUnit28 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit29 @ x)) -}
4c555236d6f45fe201a22e3f45dc89a1
  $fGenericUnit29 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit30 @ x)) -}
edada467a2f74e031caa444557504d26
  $fGenericUnit3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Yard"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit4 @ x)) -}
655ea558fed66304607b46cee54c1daa
  $fGenericUnit30 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
2aca46ce7fe27979d0f74f8cd81961ca
  $fGenericUnit4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit5 @ x)) -}
58c2f6b3f48b6eb8753220311fcbed79
  $fGenericUnit5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
de830163a58b5b470d4395f2cfe62e7f
  $fGenericUnit6 ::
    (GHC.Generics.:+:)
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons
             "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      ((GHC.Generics.M1
          GHC.Generics.C
          ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1)
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: (GHC.Generics.M1
                                             GHC.Generics.C
                                             ('GHC.Generics.MetaCons
                                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: GHC.Generics.M1
                                                              GHC.Generics.C
                                                              ('GHC.Generics.MetaCons
                                                                 "Yard"
                                                                 'GHC.Generics.PrefixI
                                                                 'GHC.Types.False)
                                                              GHC.Generics.U1)))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons
                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Kilometre"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ ((GHC.Generics.M1
                         GHC.Generics.C
                         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                         GHC.Generics.U1
                       GHC.Generics.:+: GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1)
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: (GHC.Generics.M1
                                                            GHC.Generics.C
                                                            ('GHC.Generics.MetaCons
                                                               "Millimetre"
                                                               'GHC.Generics.PrefixI
                                                               'GHC.Types.False)
                                                            GHC.Generics.U1
                                                          GHC.Generics.:+: GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "Yard"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.False)
                                                                             GHC.Generics.U1)))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit7 @ x)) -}
85ec08c26e45a3ecd34d6e2045c65d9a
  $fGenericUnit7 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "Yard"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit8 @ x)) -}
540fee2e2c9201ce21807c3086c33788
  $fGenericUnit8 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Distance.Types.$fGenericUnit9 @ x)) -}
066420ebdf80e2461163427321005e88
  $fGenericUnit9 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fGenericUnit_$cfrom ::
    Duckling.Distance.Types.Unit
    -> GHC.Generics.Rep Duckling.Distance.Types.Unit x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fGenericUnit1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Distance.Types.Unit>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Unit"
                                       "Duckling.Distance.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <((GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1
                                       GHC.Generics.:+: GHC.Generics.M1
                                                          GHC.Generics.C
                                                          ('GHC.Generics.MetaCons
                                                             "Foot"
                                                             'GHC.Generics.PrefixI
                                                             'GHC.Types.False)
                                                          GHC.Generics.U1)
                                      GHC.Generics.:+: (GHC.Generics.M1
                                                          GHC.Generics.C
                                                          ('GHC.Generics.MetaCons
                                                             "Inch"
                                                             'GHC.Generics.PrefixI
                                                             'GHC.Types.False)
                                                          GHC.Generics.U1
                                                        GHC.Generics.:+: GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Kilometre"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1))
                                     GHC.Generics.:+: ((GHC.Generics.M1
                                                          GHC.Generics.C
                                                          ('GHC.Generics.MetaCons
                                                             "M"
                                                             'GHC.Generics.PrefixI
                                                             'GHC.Types.False)
                                                          GHC.Generics.U1
                                                        GHC.Generics.:+: GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Metre"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1)
                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                           GHC.Generics.C
                                                                           ('GHC.Generics.MetaCons
                                                                              "Mile"
                                                                              'GHC.Generics.PrefixI
                                                                              'GHC.Types.False)
                                                                           GHC.Generics.U1
                                                                         GHC.Generics.:+: (GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "Millimetre"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.False)
                                                                                             GHC.Generics.U1
                                                                                           GHC.Generics.:+: GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "Yard"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              GHC.Generics.U1)))>_R))
                          (Sub (Sym (Duckling.Distance.Types.Rep_Unit[0]))) <x>_N) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fGenericUnit_$cto ::
    GHC.Generics.Rep Duckling.Distance.Types.Unit x
    -> Duckling.Distance.Types.Unit
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Distance.Types.Unit x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Distance.Types.Rep_Unit[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "Unit"
                                   "Duckling.Distance.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <((GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Foot"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1)
                                  GHC.Generics.:+: (GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Inch"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1
                                                    GHC.Generics.:+: GHC.Generics.M1
                                                                       GHC.Generics.C
                                                                       ('GHC.Generics.MetaCons
                                                                          "Kilometre"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1))
                                 GHC.Generics.:+: ((GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                      GHC.Generics.U1
                                                    GHC.Generics.:+: GHC.Generics.M1
                                                                       GHC.Generics.C
                                                                       ('GHC.Generics.MetaCons
                                                                          "Metre"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1)
                                                   GHC.Generics.:+: (GHC.Generics.M1
                                                                       GHC.Generics.C
                                                                       ('GHC.Generics.MetaCons
                                                                          "Mile"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.False)
                                                                       GHC.Generics.U1
                                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                                         GHC.Generics.C
                                                                                         ('GHC.Generics.MetaCons
                                                                                            "Millimetre"
                                                                                            'GHC.Generics.PrefixI
                                                                                            'GHC.Types.False)
                                                                                         GHC.Generics.U1
                                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                                          GHC.Generics.C
                                                                                                          ('GHC.Generics.MetaCons
                                                                                                             "Yard"
                                                                                                             'GHC.Generics.PrefixI
                                                                                                             'GHC.Types.False)
                                                                                                          GHC.Generics.U1)))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3 of tpl { DEFAULT ->
                                Duckling.Distance.Types.Centimetre }
                             GHC.Generics.R1 ds3
                             -> case ds3 of tpl { DEFAULT -> Duckling.Distance.Types.Foot } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3 of tpl { DEFAULT -> Duckling.Distance.Types.Inch }
                             GHC.Generics.R1 ds3
                             -> case ds3 of tpl { DEFAULT ->
                                Duckling.Distance.Types.Kilometre } } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3 of tpl { DEFAULT -> Duckling.Distance.Types.M }
                             GHC.Generics.R1 ds3
                             -> case ds3 of tpl { DEFAULT -> Duckling.Distance.Types.Metre } }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3 of tpl { DEFAULT -> Duckling.Distance.Types.Mile }
                             GHC.Generics.R1 ds3
                             -> case ds3 of wild3 {
                                  GHC.Generics.L1 ds4
                                  -> case ds4 of tpl { DEFAULT ->
                                     Duckling.Distance.Types.Millimetre }
                                  GHC.Generics.R1 ds4
                                  -> case ds4 of tpl { DEFAULT ->
                                     Duckling.Distance.Types.Yard } } } } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fHashableDistanceData ::
    Data.Hashable.Class.Hashable Duckling.Distance.Types.DistanceData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fHashableDistanceData_$chashWithSalt
                  Duckling.Distance.Types.$fHashableDistanceData_$chash -}
5f72aa94a003e16c032acf5100e0311f
  $fHashableDistanceData_$chash ::
    Duckling.Distance.Types.DistanceData -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Distance.Types.$fHashableDistanceData_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
5f72aa94a003e16c032acf5100e0311f
  $fHashableDistanceData_$chashWithSalt ::
    GHC.Types.Int
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(SSSS),1*U(1*U,1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Distance.Types.DistanceData ww3 ww4 ww5 ww6 ->
                 case Duckling.Distance.Types.$w$dGHashable1
                        @ GHC.Prim.Any
                        ww1
                        ww3
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe Duckling.Distance.Types.Unit>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "unit")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             Duckling.Distance.Types.Unit)>_R) <GHC.Prim.Any>_N))
                        ww4
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "value")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             GHC.Types.Double)>_R) <GHC.Prim.Any>_N)) of ww7 { DEFAULT ->
                 case Duckling.Distance.Types.$w$dGHashable
                        @ GHC.Prim.Any
                        ww7
                        ww5
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "minValue")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe GHC.Types.Double)>_R) <GHC.Prim.Any>_N))
                        ww6
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "maxValue")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             GHC.Types.Double)>_R) <GHC.Prim.Any>_N)) of ww8 { DEFAULT ->
                 GHC.Types.I# ww8 } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fHashableIntervalDirection ::
    Data.Hashable.Class.Hashable
      Duckling.Distance.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.IntervalDirection
                  Duckling.Distance.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
                  Duckling.Distance.Types.$fHashableIntervalDirection_$chash -}
d10f4a0027b87ff3b1c2411dbd901073
  $fHashableIntervalDirection1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Distance.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fHashableIntervalDirection2
                  `cast`
                (Sym (Data.Hashable.Class.N:GHashable[0]
                          <Data.Hashable.Class.Zero>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Distance.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
3a40d26a5572c07a8bd4e61b5041ef7d
  $fHashableIntervalDirection2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> GHC.Generics.M1
         GHC.Generics.D
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Distance.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (targs :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (salt :: GHC.Types.Int)
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case salt of ww { GHC.Types.I# ww1 ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#) }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                           16777619#) } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fHashableIntervalDirection_$chash ::
    Duckling.Distance.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Distance.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Distance.Types.Above -> GHC.Types.I# -7234408896634655932#
                   Duckling.Distance.Types.Under
                   -> GHC.Types.I# -7234408896617878313# }) -}
6ab08a13545203e1527793a85e250a7e
  $fHashableIntervalDirection_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Distance.Types.IntervalDirection) ->
                 Duckling.Distance.Types.$fHashableIntervalDirection1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Distance.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Distance.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fHashableUnit ::
    Data.Hashable.Class.Hashable Duckling.Distance.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fHashableUnit_$chashWithSalt
                  Duckling.Distance.Types.$fHashableUnit_$chash -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fHashableUnit_$chash ::
    Duckling.Distance.Types.Unit -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Distance.Types.$fHashableUnit_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fHashableUnit_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Distance.Types.Unit -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Distance.Types.Unit) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Duckling.Distance.Types.$w$chashWithSalt
                        ww1
                        w1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fNFDataDistanceData ::
    Control.DeepSeq.NFData Duckling.Distance.Types.DistanceData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Distance.Types.$fNFDataDistanceData_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Distance.Types.DistanceData>_N)) -}
ae5d070989b14abad2236d95511a649e
  $fNFDataDistanceData1 ::
    (GHC.Generics.:+:)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.C1
                           ('GHC.Generics.MetaCons
                              "Millimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.C1
                                            ('GHC.Generics.MetaCons
                                               "Yard" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a1
                   (ds :: (GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Millimetre"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Yard"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            a1) ->
                 case ds of wild {
                   GHC.Generics.L1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }
                   GHC.Generics.R1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1
                        -> case x1 of wild2 {
                             GHC.Generics.L1 x2 -> case x2 of tpl { DEFAULT -> GHC.Tuple.() }
                             GHC.Generics.R1 x2
                             -> case x2 of tpl { DEFAULT -> GHC.Tuple.() } } } }) -}
10979b07e67ac9559595f1cc86fe45cf
  $fNFDataDistanceData2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a1
                   (ds :: (GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Kilometre"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.False)
                                                GHC.Generics.U1)
                            a1) ->
                 case ds of wild {
                   GHC.Generics.L1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }
                   GHC.Generics.R1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1
                        -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fNFDataDistanceData_$crnf ::
    Duckling.Distance.Types.DistanceData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 Duckling.Distance.Types.$w$crnf ww1 ww2 ww3 ww4 }) -}
6ab08a13545203e1527793a85e250a7e
  $fNFDataIntervalDirection ::
    Control.DeepSeq.NFData Duckling.Distance.Types.IntervalDirection
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Distance.Types.$fNFDataIntervalDirection_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Distance.Types.IntervalDirection>_N)) -}
b89e1dfcc20e1fdbc675857c4670c324
  $fNFDataIntervalDirection1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Distance.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fNFDataIntervalDirection2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Distance.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
b376888567d2352629f1e7ac21a6c716
  $fNFDataIntervalDirection2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "IntervalDirection"
         "Duckling.Distance.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }) -}
6ab08a13545203e1527793a85e250a7e
  $fNFDataIntervalDirection_$s$dmrnf ::
    Duckling.Distance.Types.IntervalDirection -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Distance.Types.IntervalDirection) ->
                 Duckling.Distance.Types.$fNFDataIntervalDirection1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N
                      (Sym (Duckling.Distance.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Duckling.Distance.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fNFDataUnit :: Control.DeepSeq.NFData Duckling.Distance.Types.Unit
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Distance.Types.$fNFDataUnit_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Distance.Types.Unit>_N)) -}
14332f4858ee240c66aa868353cae235
  $fNFDataUnit1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "Unit"
            "Duckling.Distance.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (((GHC.Generics.C1
              ('GHC.Generics.MetaCons
                 "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
              GHC.Generics.U1
            GHC.Generics.:+: GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1)
           GHC.Generics.:+: (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Kilometre"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.False)
                                                GHC.Generics.U1))
          GHC.Generics.:+: ((GHC.Generics.C1
                               ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1)
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1
                                              GHC.Generics.:+: (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Millimetre"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: GHC.Generics.C1
                                                                                   ('GHC.Generics.MetaCons
                                                                                      "Yard"
                                                                                      'GHC.Generics.PrefixI
                                                                                      'GHC.Types.False)
                                                                                   GHC.Generics.U1)))))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.$fNFDataUnit2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "Unit"
                                "Duckling.Distance.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  GHC.Generics.U1
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                   GHC.Generics.U1)
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                   GHC.Generics.U1
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "Kilometre"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1))
                              GHC.Generics.:+: ((GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                   GHC.Generics.U1
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "Metre"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)
                                                GHC.Generics.:+: (GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "Mile"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1
                                                                  GHC.Generics.:+: (GHC.Generics.C1
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "Millimetre"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False)
                                                                                      GHC.Generics.U1
                                                                                    GHC.Generics.:+: GHC.Generics.C1
                                                                                                       ('GHC.Generics.MetaCons
                                                                                                          "Yard"
                                                                                                          'GHC.Generics.PrefixI
                                                                                                          'GHC.Types.False)
                                                                                                       GHC.Generics.U1))))>_N)) -}
4fafd95b9e78688bf396b116dff159a9
  $fNFDataUnit2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "Unit"
         "Duckling.Distance.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (((GHC.Generics.C1
           ('GHC.Generics.MetaCons
              "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
           GHC.Generics.U1
         GHC.Generics.:+: GHC.Generics.C1
                            ('GHC.Generics.MetaCons
                               "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            GHC.Generics.U1)
        GHC.Generics.:+: (GHC.Generics.C1
                            ('GHC.Generics.MetaCons
                               "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            GHC.Generics.U1
                          GHC.Generics.:+: GHC.Generics.C1
                                             ('GHC.Generics.MetaCons
                                                "Kilometre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1))
       GHC.Generics.:+: ((GHC.Generics.C1
                            ('GHC.Generics.MetaCons "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                            GHC.Generics.U1
                          GHC.Generics.:+: GHC.Generics.C1
                                             ('GHC.Generics.MetaCons
                                                "Metre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1)
                         GHC.Generics.:+: (GHC.Generics.C1
                                             ('GHC.Generics.MetaCons
                                                "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                             GHC.Generics.U1
                                           GHC.Generics.:+: (GHC.Generics.C1
                                                               ('GHC.Generics.MetaCons
                                                                  "Millimetre"
                                                                  'GHC.Generics.PrefixI
                                                                  'GHC.Types.False)
                                                               GHC.Generics.U1
                                                             GHC.Generics.:+: GHC.Generics.C1
                                                                                ('GHC.Generics.MetaCons
                                                                                   "Yard"
                                                                                   'GHC.Generics.PrefixI
                                                                                   'GHC.Types.False)
                                                                                GHC.Generics.U1))))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "Unit"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (((GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Kilometre"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            GHC.Generics.:+: ((GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Metre"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1)
                                              GHC.Generics.:+: (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Mile"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: (GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Millimetre"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1
                                                                                  GHC.Generics.:+: GHC.Generics.C1
                                                                                                     ('GHC.Generics.MetaCons
                                                                                                        "Yard"
                                                                                                        'GHC.Generics.PrefixI
                                                                                                        'GHC.Types.False)
                                                                                                     GHC.Generics.U1))))
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "Unit"
                              "Duckling.Distance.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <((GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Kilometre"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            GHC.Generics.:+: ((GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Metre"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1)
                                              GHC.Generics.:+: (GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Mile"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1
                                                                GHC.Generics.:+: (GHC.Generics.C1
                                                                                    ('GHC.Generics.MetaCons
                                                                                       "Millimetre"
                                                                                       'GHC.Generics.PrefixI
                                                                                       'GHC.Types.False)
                                                                                    GHC.Generics.U1
                                                                                  GHC.Generics.:+: GHC.Generics.C1
                                                                                                     ('GHC.Generics.MetaCons
                                                                                                        "Yard"
                                                                                                        'GHC.Generics.PrefixI
                                                                                                        'GHC.Types.False)
                                                                                                     GHC.Generics.U1)))>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> Duckling.Distance.Types.$fNFDataDistanceData2 @ a1 x1
                   GHC.Generics.R1 x1
                   -> Duckling.Distance.Types.$fNFDataDistanceData1 @ a1 x1 }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fNFDataUnit_$s$dmrnf :: Duckling.Distance.Types.Unit -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Distance.Types.Unit) ->
                 Duckling.Distance.Types.$fNFDataUnit1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N (Sym (Duckling.Distance.Types.Rep_Unit[0])))
                   @ GHC.Prim.Any
                   (Duckling.Distance.Types.$fGenericUnit_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData ::
    GHC.Classes.Ord Duckling.Distance.Types.DistanceData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fEqDistanceData
                  Duckling.Distance.Types.$fOrdDistanceData_$ccompare
                  Duckling.Distance.Types.$fOrdDistanceData_$c<
                  Duckling.Distance.Types.$fOrdDistanceData_$c<=
                  Duckling.Distance.Types.$fOrdDistanceData_$c>
                  Duckling.Distance.Types.$fOrdDistanceData_$c>=
                  Duckling.Distance.Types.$fOrdDistanceData_$cmax
                  Duckling.Distance.Types.$fOrdDistanceData_$cmin -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$c< ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$c<
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$c<= ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$c<=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$c> ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$c>
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$c>= ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$c>=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$ccompare ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceData)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Distance.Types.DistanceData ww6 ww7 ww8 ww9 ->
                 Duckling.Distance.Types.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$cmax ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.DistanceData)
                   (y :: Duckling.Distance.Types.DistanceData) ->
                 case Duckling.Distance.Types.$fOrdDistanceData_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5f72aa94a003e16c032acf5100e0311f
  $fOrdDistanceData_$cmin ::
    Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData
    -> Duckling.Distance.Types.DistanceData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.DistanceData)
                   (y :: Duckling.Distance.Types.DistanceData) ->
                 case Duckling.Distance.Types.$fOrdDistanceData_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue ::
    GHC.Classes.Ord Duckling.Distance.Types.DistanceValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceValue
                  Duckling.Distance.Types.$fEqDistanceValue
                  Duckling.Distance.Types.$fOrdDistanceValue_$ccompare
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<=
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>=
                  Duckling.Distance.Types.$fOrdDistanceValue_$cmax
                  Duckling.Distance.Types.$fOrdDistanceValue_$cmin -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$c< ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case a of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fOrdDistanceValue_$c<2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case b of wild1 {
                        Duckling.Distance.Types.SimpleValue ds -> GHC.Types.False
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c<2
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.True } } } }
                             GHC.Types.True -> GHC.Types.True } } } } }
                        Duckling.Distance.Types.OpenIntervalValue ipv -> GHC.Types.True }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c<1
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.True } } } }
                             GHC.Types.True -> GHC.Types.True } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdDistanceValue_$c<1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.False
                        Duckling.Distance.Types.Under -> GHC.Types.True }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdDistanceValue_$c<2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$c<1 ww1 ww2 ww4 ww5 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$c<= ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case a of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fOrdDistanceValue_$c<=2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case b of wild1 {
                        Duckling.Distance.Types.SimpleValue ds -> GHC.Types.False
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c<=2
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.True } } } }
                             GHC.Types.True -> GHC.Types.True } } } } }
                        Duckling.Distance.Types.OpenIntervalValue ipv -> GHC.Types.True }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c<=1
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.True } } } }
                             GHC.Types.True -> GHC.Types.True } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdDistanceValue_$c<=1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.False
                        Duckling.Distance.Types.Under -> GHC.Types.True } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdDistanceValue_$c<=2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$c<=1 ww1 ww2 ww4 ww5 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$c> ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case a of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fOrdDistanceValue_$c>2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case b of wild1 {
                        Duckling.Distance.Types.SimpleValue ds -> GHC.Types.True
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c>2
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.False } } } }
                             GHC.Types.True -> GHC.Types.False } } } } }
                        Duckling.Distance.Types.OpenIntervalValue ipv -> GHC.Types.False }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c>1
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.False } } } }
                             GHC.Types.True -> GHC.Types.False } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdDistanceValue_$c>1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.True
                        Duckling.Distance.Types.Under -> GHC.Types.False } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdDistanceValue_$c>2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$c>1 ww1 ww2 ww4 ww5 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$c>= ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case a of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fOrdDistanceValue_$c>=2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case b of wild1 {
                        Duckling.Distance.Types.SimpleValue ds -> GHC.Types.True
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c>=2
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.False } } } }
                             GHC.Types.True -> GHC.Types.False } } } } }
                        Duckling.Distance.Types.OpenIntervalValue ipv -> GHC.Types.False }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$c>=1
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.False } } } }
                             GHC.Types.True -> GHC.Types.False } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdDistanceValue_$c>=1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.True
                        Duckling.Distance.Types.Under -> GHC.Types.False }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdDistanceValue_$c>=2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$c>=1 ww1 ww2 ww4 ww5 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$ccompare ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Distance.Types.DistanceValue)
                   (b :: Duckling.Distance.Types.DistanceValue) ->
                 case a of wild {
                   Duckling.Distance.Types.SimpleValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Duckling.Distance.Types.SimpleValue b1
                        -> Duckling.Distance.Types.$fOrdDistanceValue_$ccompare2 a1 b1 }
                   Duckling.Distance.Types.IntervalValue a1
                   -> case b of wild1 {
                        Duckling.Distance.Types.SimpleValue ds -> GHC.Types.GT
                        Duckling.Distance.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$ccompare2
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.LT } } } }
                             GHC.Types.True -> GHC.Types.LT } } } } }
                        Duckling.Distance.Types.OpenIntervalValue ipv -> GHC.Types.LT }
                   Duckling.Distance.Types.OpenIntervalValue a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Distance.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { Duckling.Distance.Types.SingleValue a2 a3 ->
                           case ww4 of wild3 { Duckling.Distance.Types.SingleValue b2 b3 ->
                           let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b2
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild5 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True
                                  -> case a3 of wild6 { GHC.Types.D# x ->
                                     case b3 of wild7 { GHC.Types.D# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<## x y) of wild8 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x y) of wild9 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True
                                            -> Duckling.Distance.Types.$fOrdDistanceValue_$ccompare1
                                                 ww2
                                                 ww5 }
                                       GHC.Types.True -> GHC.Types.LT } } } }
                             GHC.Types.True -> GHC.Types.LT } } } } } } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdDistanceValue_$ccompare1 ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.IntervalDirection)
                   (b :: Duckling.Distance.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Distance.Types.Above
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.EQ
                        Duckling.Distance.Types.Under -> GHC.Types.LT }
                   Duckling.Distance.Types.Under
                   -> case b of wild1 {
                        Duckling.Distance.Types.Above -> GHC.Types.GT
                        Duckling.Distance.Types.Under -> GHC.Types.EQ } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdDistanceValue_$ccompare2 ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 Duckling.Distance.Types.$w$ccompare1 ww1 ww2 ww4 ww5 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$cmax ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.DistanceValue)
                   (y :: Duckling.Distance.Types.DistanceValue) ->
                 case Duckling.Distance.Types.$fOrdDistanceValue_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
ed108df899e481b8207b9b4913d2f706
  $fOrdDistanceValue_$cmin ::
    Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue
    -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.DistanceValue)
                   (y :: Duckling.Distance.Types.DistanceValue) ->
                 case Duckling.Distance.Types.$fOrdDistanceValue_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdIntervalDirection ::
    GHC.Classes.Ord Duckling.Distance.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.IntervalDirection
                  Duckling.Distance.Types.$fEqIntervalDirection
                  Duckling.Distance.Types.$fOrdDistanceValue_$ccompare1
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<1
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<=1
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>1
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>=1
                  Duckling.Distance.Types.$fOrdIntervalDirection_$cmax
                  Duckling.Distance.Types.$fOrdIntervalDirection_$cmin -}
6ab08a13545203e1527793a85e250a7e
  $fOrdIntervalDirection_$cmax ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.IntervalDirection)
                   (y :: Duckling.Distance.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Distance.Types.Above -> y
                   Duckling.Distance.Types.Under
                   -> case y of wild1 { DEFAULT ->
                      Duckling.Distance.Types.Under } }) -}
6ab08a13545203e1527793a85e250a7e
  $fOrdIntervalDirection_$cmin ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.IntervalDirection)
                   (y :: Duckling.Distance.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Distance.Types.Above
                   -> case y of wild1 { DEFAULT -> Duckling.Distance.Types.Above }
                   Duckling.Distance.Types.Under -> y }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdSingleValue ::
    GHC.Classes.Ord Duckling.Distance.Types.SingleValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.SingleValue
                  Duckling.Distance.Types.$fEqSingleValue
                  Duckling.Distance.Types.$fOrdDistanceValue_$ccompare2
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<2
                  Duckling.Distance.Types.$fOrdDistanceValue_$c<=2
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>2
                  Duckling.Distance.Types.$fOrdDistanceValue_$c>=2
                  Duckling.Distance.Types.$fOrdSingleValue_$cmax
                  Duckling.Distance.Types.$fOrdSingleValue_$cmin -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdSingleValue_$cmax ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U))><S(SL),1*U(U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww4
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> Duckling.Distance.Types.SingleValue ww1 ww2
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.D# x ->
                           case ww5 of wild3 { GHC.Types.D# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## x y) of wild4 {
                             GHC.Types.False -> Duckling.Distance.Types.SingleValue ww1 wild2
                             GHC.Types.True
                             -> Duckling.Distance.Types.SingleValue ww4 wild3 } } } }
                   GHC.Types.True
                   -> Duckling.Distance.Types.SingleValue ww4 ww5 } } }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fOrdSingleValue_$cmin ::
    Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue
    -> Duckling.Distance.Types.SingleValue
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U))><S(SL),1*U(U,U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Distance.Types.SingleValue ww4 ww5 ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww4
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> Duckling.Distance.Types.SingleValue ww4 ww5
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.D# x ->
                           case ww5 of wild3 { GHC.Types.D# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=## x y) of wild4 {
                             GHC.Types.False -> Duckling.Distance.Types.SingleValue ww4 wild3
                             GHC.Types.True
                             -> Duckling.Distance.Types.SingleValue ww1 wild2 } } } }
                   GHC.Types.True
                   -> Duckling.Distance.Types.SingleValue ww1 ww2 } } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit :: GHC.Classes.Ord Duckling.Distance.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fEqUnit
                  Duckling.Distance.Types.$fOrdUnit_$ccompare
                  Duckling.Distance.Types.$fOrdUnit_$c<
                  Duckling.Distance.Types.$fOrdUnit_$c<=
                  Duckling.Distance.Types.$fOrdUnit_$c>
                  Duckling.Distance.Types.$fOrdUnit_$c>=
                  Duckling.Distance.Types.$fOrdUnit_$cmax
                  Duckling.Distance.Types.$fOrdUnit_$cmin -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$c< ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<#
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$c<= ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.<=#
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$c> ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>#
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$c>= ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.>=#
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                      (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$ccompare ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Distance.Types.Unit)
                   (b :: Duckling.Distance.Types.Unit) ->
                 case a of x1 { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$cmax ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> Duckling.Distance.Types.Unit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.Unit)
                   (y :: Duckling.Distance.Types.Unit) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                           (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) of wild {
                   GHC.Types.False -> x1 GHC.Types.True -> x2 } } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fOrdUnit_$cmin ::
    Duckling.Distance.Types.Unit
    -> Duckling.Distance.Types.Unit -> Duckling.Distance.Types.Unit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Distance.Types.Unit)
                   (y :: Duckling.Distance.Types.Unit) ->
                 case x of x1 { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=#
                           (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x1)
                           (GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit x2)) of wild {
                   GHC.Types.False -> x2 GHC.Types.True -> x1 } } }) -}
5f72aa94a003e16c032acf5100e0311f
  $fResolveDistanceData ::
    Duckling.Resolve.Resolve Duckling.Distance.Types.DistanceData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fEqDistanceValue
                    `cast`
                  (GHC.Classes.Eq
                     (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))_R
                  Duckling.Distance.Types.$fShowDistanceValue
                    `cast`
                  (GHC.Show.Show
                     (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))_R
                  Duckling.Distance.Types.$fToJSONDistanceValue
                    `cast`
                  (Data.Aeson.Types.ToJSON.ToJSON
                     (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))_R
                  Duckling.Distance.Types.$fResolveDistanceData_$cresolve -}
5f72aa94a003e16c032acf5100e0311f
  $fResolveDistanceData_$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Distance.Types.DistanceData
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue
            Duckling.Distance.Types.DistanceData,
          GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(SLLL),1*U(U,U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Resolve.Context)
                   (w1 :: Duckling.Resolve.Options)
                   (w2 :: Duckling.Distance.Types.DistanceData) ->
                 case w2 of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 Duckling.Distance.Types.$w$cresolve ww1 ww2 ww3 ww4 }) -}
5f72aa94a003e16c032acf5100e0311f
  $fShowDistanceData ::
    GHC.Show.Show Duckling.Distance.Types.DistanceData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceData
                  Duckling.Distance.Types.$fShowDistanceData_$cshowsPrec
                  Duckling.Distance.Types.$fShowDistanceData_$cshow
                  Duckling.Distance.Types.$fShowDistanceData_$cshowList -}
5f72aa94a003e16c032acf5100e0311f
  $fShowDistanceData1 ::
    Duckling.Distance.Types.DistanceData -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { Duckling.Distance.Types.DistanceData ww1 ww2 ww3 ww4 ->
                 Duckling.Distance.Types.$w$cshowsPrec3 0# ww1 ww2 ww3 ww4 }) -}
887d54dde036d59e94d4cda7a0820f20
  $fShowDistanceData2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "maxValue = "#) -}
4729cfe9ec9580403dfba5f035938a90
  $fShowDistanceData3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "minValue = "#) -}
ec9d2db4294369a37324293b5533b4e2
  $fShowDistanceData4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "value = "#) -}
f7d8abf1b29ec4bc9230e509bbce2b13
  $fShowDistanceData5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unit = "#) -}
7d3825a56843a629eb9db283813b86bb
  $fShowDistanceData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DistanceData {"#) -}
5f72aa94a003e16c032acf5100e0311f
  $fShowDistanceData_$cshow ::
    Duckling.Distance.Types.DistanceData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Distance.Types.DistanceData) ->
                 Duckling.Distance.Types.$fShowDistanceData_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5f72aa94a003e16c032acf5100e0311f
  $fShowDistanceData_$cshowList ::
    [Duckling.Distance.Types.DistanceData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Distance.Types.DistanceData
                   Duckling.Distance.Types.$fShowDistanceData1) -}
5f72aa94a003e16c032acf5100e0311f
  $fShowDistanceData_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Distance.Types.DistanceData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Distance.Types.DistanceData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Distance.Types.DistanceData ww3 ww4 ww5 ww6 ->
                 Duckling.Distance.Types.$w$cshowsPrec3 ww1 ww3 ww4 ww5 ww6 } }) -}
ed108df899e481b8207b9b4913d2f706
  $fShowDistanceValue ::
    GHC.Show.Show Duckling.Distance.Types.DistanceValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceValue
                  Duckling.Distance.Types.$fShowDistanceValue_$cshowsPrec
                  Duckling.Distance.Types.$fShowDistanceValue_$cshow
                  Duckling.Distance.Types.$fShowDistanceValue_$cshowList -}
ed108df899e481b8207b9b4913d2f706
  $fShowDistanceValue1 ::
    Duckling.Distance.Types.DistanceValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Distance.Types.DistanceValue) ->
                 Duckling.Distance.Types.$w$cshowsPrec1 0# w) -}
79556676d532d07acff3073fe8a34611
  $fShowDistanceValue10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vUnit = "#) -}
e2c2546e24f640bd7eb997a1f3d21c86
  $fShowDistanceValue11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SingleValue {"#) -}
74e39a0c9c09a8453ab3621089ebfc29
  $fShowDistanceValue12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
81a21f19c26d991694c6dcfc74588c4e
  $fShowDistanceValue13 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bbd17bb20c38946b654e39d0e16d9bd0
  $fShowDistanceValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Under"#) -}
4b80fbdcff0844847e130c40e5eec05d
  $fShowDistanceValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Above"#) -}
8fd8e7c0472826c923b715fc2efc8e12
  $fShowDistanceValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OpenIntervalValue "#) -}
df33b5b9a7c224bd2a62215a0730c3fc
  $fShowDistanceValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IntervalValue "#) -}
7088d176b0be463c4c8f4946b11f7676
  $fShowDistanceValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SimpleValue "#) -}
43bcf8cd71077c8d209915107da7bde2
  $fShowDistanceValue7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
2f25dd03a88384410d286ff76060a667
  $fShowDistanceValue8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vValue = "#) -}
9e4c7d4096bdd4388e4daeed267ed5bb
  $fShowDistanceValue9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
ed108df899e481b8207b9b4913d2f706
  $fShowDistanceValue_$cshow ::
    Duckling.Distance.Types.DistanceValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Duckling.Distance.Types.DistanceValue) ->
                 case x of wild {
                   Duckling.Distance.Types.SimpleValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fShowDistanceValue6
                        (case b1 of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                         Duckling.Distance.Types.$w$cshowsPrec2
                           11#
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Duckling.Distance.Types.IntervalValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fShowDistanceValue5
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { Duckling.Distance.Types.SingleValue ww5 ww6 ->
                            Duckling.Distance.Types.$w$cshowsPrec2
                              0#
                              ww5
                              ww6
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows5
                                 (GHC.Show.$fShow(,)_$sgo
                                    Duckling.Distance.Types.$fShowDistanceValue13
                                    (case ww2 of ww7 { Duckling.Distance.Types.SingleValue ww8 ww9 ->
                                     Duckling.Distance.Types.$w$cshowsPrec2 0# ww8 ww9 })
                                    (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                   Duckling.Distance.Types.OpenIntervalValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fShowDistanceValue4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { Duckling.Distance.Types.SingleValue ww5 ww6 ->
                            Duckling.Distance.Types.$w$cshowsPrec2
                              0#
                              ww5
                              ww6
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows5
                                 (GHC.Show.$fShow(,)_$sgo
                                    Duckling.Distance.Types.$fShowDistanceValue13
                                    (\ (eta :: GHC.Base.String) ->
                                     case ww2 of wild1 {
                                       Duckling.Distance.Types.Above
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Distance.Types.$fShowDistanceValue3
                                            eta
                                       Duckling.Distance.Types.Under
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Distance.Types.$fShowDistanceValue2
                                            eta })
                                    (GHC.Types.[] @ GHC.Show.ShowS))) }) }) }) -}
ed108df899e481b8207b9b4913d2f706
  $fShowDistanceValue_$cshowList ::
    [Duckling.Distance.Types.DistanceValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Distance.Types.DistanceValue
                   Duckling.Distance.Types.$fShowDistanceValue1) -}
ed108df899e481b8207b9b4913d2f706
  $fShowDistanceValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Distance.Types.DistanceValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Distance.Types.DistanceValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Distance.Types.$w$cshowsPrec1 ww1 w1 }) -}
6ab08a13545203e1527793a85e250a7e
  $fShowIntervalDirection ::
    GHC.Show.Show Duckling.Distance.Types.IntervalDirection
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.IntervalDirection
                  Duckling.Distance.Types.$fShowIntervalDirection_$cshowsPrec
                  Duckling.Distance.Types.$fShowIntervalDirection_$cshow
                  Duckling.Distance.Types.$fShowIntervalDirection_$cshowList -}
6ab08a13545203e1527793a85e250a7e
  $fShowIntervalDirection1 ::
    Duckling.Distance.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Distance.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Distance.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Distance.Types.$fShowDistanceValue3)
                        eta
                   Duckling.Distance.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Distance.Types.$fShowDistanceValue2)
                        eta }) -}
6ab08a13545203e1527793a85e250a7e
  $fShowIntervalDirection_$cshow ::
    Duckling.Distance.Types.IntervalDirection -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Distance.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Distance.Types.Above
                   -> Duckling.Distance.Types.$fShowDistanceValue3
                   Duckling.Distance.Types.Under
                   -> Duckling.Distance.Types.$fShowDistanceValue2 }) -}
6ab08a13545203e1527793a85e250a7e
  $fShowIntervalDirection_$cshowList ::
    [Duckling.Distance.Types.IntervalDirection] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Distance.Types.IntervalDirection
                   Duckling.Distance.Types.$fShowIntervalDirection1) -}
6ab08a13545203e1527793a85e250a7e
  $fShowIntervalDirection_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Distance.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Distance.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Distance.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Distance.Types.$fShowDistanceValue3)
                        eta
                   Duckling.Distance.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Distance.Types.$fShowDistanceValue2)
                        eta }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fShowSingleValue ::
    GHC.Show.Show Duckling.Distance.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.SingleValue
                  Duckling.Distance.Types.$fShowSingleValue_$cshowsPrec
                  Duckling.Distance.Types.$fShowSingleValue_$cshow
                  Duckling.Distance.Types.$fShowSingleValue_$cshowList -}
7c5e09a2def86294d8ef045e29daa5a4
  $fShowSingleValue1 ::
    Duckling.Distance.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 Duckling.Distance.Types.$w$cshowsPrec2 0# ww1 ww2 }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fShowSingleValue_$cshow ::
    Duckling.Distance.Types.SingleValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Distance.Types.SingleValue) ->
                 Duckling.Distance.Types.$fShowSingleValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fShowSingleValue_$cshowList ::
    [Duckling.Distance.Types.SingleValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Distance.Types.SingleValue
                   Duckling.Distance.Types.$fShowSingleValue1) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fShowSingleValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Distance.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Distance.Types.SingleValue ww3 ww4 ->
                 Duckling.Distance.Types.$w$cshowsPrec2 ww1 ww3 ww4 } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fShowUnit :: GHC.Show.Show Duckling.Distance.Types.Unit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fShowUnit_$cshowsPrec
                  Duckling.Distance.Types.$fShowUnit_$cshow
                  Duckling.Distance.Types.$fShowUnit_$cshowList -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fShowUnit_$cshow ::
    Duckling.Distance.Types.Unit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Distance.Types.Unit) ->
                 Duckling.Distance.Types.$fShowUnit_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fShowUnit_$cshowList ::
    [Duckling.Distance.Types.Unit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Distance.Types.Unit
                   Duckling.Distance.Types.$w$cshowsPrec) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fShowUnit_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Distance.Types.Unit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Distance.Types.Unit)
                   (w2 :: GHC.Base.String) ->
                 Duckling.Distance.Types.$w$cshowsPrec w1 w2) -}
ed108df899e481b8207b9b4913d2f706
  $fToJSONDistanceValue ::
    Data.Aeson.Types.ToJSON.ToJSON
      Duckling.Distance.Types.DistanceValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.DistanceValue
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoEncoding
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSONList
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoEncodingList -}
a25c7a6476e6bda49eb2c1cb09763808
  $fToJSONDistanceValue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "to"#) -}
f433e5a6ad10e81616e56686450f22ea
  $fToJSONDistanceValue10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Centimetre"#) -}
ce7f089b9eb3da47698783b83d687dfc
  $fToJSONDistanceValue11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "unit"#) -}
ca2d2ebaba4a6063a8c3cf1d33958859
  $fToJSONDistanceValue12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
d10d232aaa9cafc9b5ec49dc96720e69
  $fToJSONDistanceValue13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "from"#) -}
9d4b599f720fd881b02d6eba154d94bd
  $fToJSONDistanceValue14 :: Data.Aeson.Types.Internal.Pair
  {- Strictness: m,
     Unfolding: ((Duckling.Distance.Types.$fToJSONDistanceValue16,
                  Duckling.Distance.Types.$fToJSONDistanceValue15)) -}
faf312622cf193a9215c14669cc670a2
  $fToJSONDistanceValue15 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "interval"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
7335973ac70a4aa1bce5a1d3e02e5f02
  $fToJSONDistanceValue16 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "type"#) -}
3e4bba157884cab9e2bdffc326780f87
  $fToJSONDistanceValue17 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
314d5c58895ae6f3f544d981bc18a6ff
  $fToJSONDistanceValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Yard"#) -}
ff2a783cc804800eaab5b8251e56638e
  $fToJSONDistanceValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Millimetre"#) -}
614cfe431ff7f748d88bf1195fe9bd26
  $fToJSONDistanceValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Mile"#) -}
dd4cbc774485506cda162cfaa5ffdefb
  $fToJSONDistanceValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Metre"#) -}
d4f7674c36ace4eb596ba57e9875bba5
  $fToJSONDistanceValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "M"#) -}
6fe428bebdf7e28c6e3a2cfb65ea7ad6
  $fToJSONDistanceValue7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Kilometre"#) -}
7594207b9c3648dc86d73b8d474a9307
  $fToJSONDistanceValue8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Inch"#) -}
acad3a2b689bf8c7e80deeb205dfde6f
  $fToJSONDistanceValue9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Foot"#) -}
ed108df899e481b8207b9b4913d2f706
  $fToJSONDistanceValue_$ctoEncoding ::
    Duckling.Distance.Types.DistanceValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Distance.Types.DistanceValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON eta)) -}
ed108df899e481b8207b9b4913d2f706
  $fToJSONDistanceValue_$ctoEncodingList ::
    [Duckling.Distance.Types.DistanceValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.DistanceValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Distance.Types.DistanceValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Distance.Types.DistanceValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Distance.Types.DistanceValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
ed108df899e481b8207b9b4913d2f706
  $fToJSONDistanceValue_$ctoJSON ::
    Duckling.Distance.Types.DistanceValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Distance.Types.DistanceValue) ->
                 case Duckling.Distance.Types.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fToJSONDistanceValue_$ctoJSON1 ::
    Duckling.Distance.Types.SingleValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Distance.Types.SingleValue) ->
                 case w of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Duckling.Distance.Types.$fToJSONDistanceValue12,
                            Data.Aeson.Types.ToJSON.$fToJSONDouble_$srealFloatToJSON ww2)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Distance.Types.$fToJSONDistanceValue11,
                               Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2 ww1)
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fToJSONDistanceValue_$ctoJSON2 ::
    Duckling.Distance.Types.Unit -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Distance.Types.Unit) ->
                 case Duckling.Distance.Types.$w$ctoJSON1 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.String ww1 }) -}
ed108df899e481b8207b9b4913d2f706
  $fToJSONDistanceValue_$ctoJSONList ::
    [Duckling.Distance.Types.DistanceValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.DistanceValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Distance.Types.DistanceValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Distance.Types.DistanceValue
                                       c
                                       Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fToJSONSingleValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Distance.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.SingleValue
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1
                  Duckling.Distance.Types.$fToJSONSingleValue_$ctoEncoding
                  Duckling.Distance.Types.$fToJSONSingleValue_$ctoJSONList
                  Duckling.Distance.Types.$fToJSONSingleValue_$ctoEncodingList -}
7c5e09a2def86294d8ef045e29daa5a4
  $fToJSONSingleValue_$ctoEncoding ::
    Duckling.Distance.Types.SingleValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Distance.Types.SingleValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1 eta)) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fToJSONSingleValue_$ctoEncodingList ::
    [Duckling.Distance.Types.SingleValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.SingleValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Distance.Types.SingleValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Distance.Types.SingleValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Distance.Types.SingleValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
7c5e09a2def86294d8ef045e29daa5a4
  $fToJSONSingleValue_$ctoJSONList ::
    [Duckling.Distance.Types.SingleValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.SingleValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Distance.Types.SingleValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Distance.Types.SingleValue
                                       c
                                       Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fToJSONUnit ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Distance.Types.Unit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Distance.Types.Unit
                  Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2
                  Duckling.Distance.Types.$fToJSONUnit_$ctoEncoding
                  Duckling.Distance.Types.$fToJSONUnit_$ctoJSONList
                  Duckling.Distance.Types.$fToJSONUnit_$ctoEncodingList -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fToJSONUnit_$ctoEncoding ::
    Duckling.Distance.Types.Unit
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Distance.Types.Unit) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2 eta)) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fToJSONUnit_$ctoEncodingList ::
    [Duckling.Distance.Types.Unit]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.Unit]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Distance.Types.Unit
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Distance.Types.Unit)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Distance.Types.Unit>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $fToJSONUnit_$ctoJSONList ::
    [Duckling.Distance.Types.Unit] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Distance.Types.Unit]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Distance.Types.Unit
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Distance.Types.Unit
                                       c
                                       Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
dbf085bdf4106c9645bf37ddb0d96d52
  $tc'Above :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11538869740108685685##
                   13555522029186747181##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Above1) -}
fe0cf9880c009182c9ae62b17226a9c4
  $tc'Above1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Above"#) -}
1185cf04dc14542201ccdc5ac5f015b3
  $tc'Centimetre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7372435794788449756##
                   13770668659663565954##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Centimetre1) -}
1aae1fb7d066f62b22716176c8c8f92c
  $tc'Centimetre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Centimetre"#) -}
ed687803527cba2596f46bec58b8158c
  $tc'DistanceData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17194297047993686278##
                   6152501059451590293##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'DistanceData1) -}
69e62a91ef32ce79f44b3220b8ac6b64
  $tc'DistanceData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DistanceData"#) -}
d2fa73640a1117d3c335b680bab221f5
  $tc'Foot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11084511297741396386##
                   14178590380902254465##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Foot1) -}
ab8be630102a145a1d800db564e71826
  $tc'Foot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Foot"#) -}
7045a905110258f6cb943f2737fc1eb1
  $tc'Inch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16835990612368114027##
                   15364307592809847954##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Inch1) -}
ddd6ef7934a8a832b95e76ce14fcd48f
  $tc'Inch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Inch"#) -}
91602e88995328a465167c25f23a83be
  $tc'IntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1594056475364667923##
                   6772169900701514403##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'IntervalValue1) -}
b9c9d3421e422d3457cd90755cb37f70
  $tc'IntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntervalValue"#) -}
e23f6f648856a4ffe7d9a5c050122e70
  $tc'Kilometre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14591706314007259196##
                   8204046712126692376##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Kilometre1) -}
8413fa70c8524e20d6944da0ae04c0cd
  $tc'Kilometre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Kilometre"#) -}
4e840e6a2060be5a67648c4e3059ca2f
  $tc'M :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3263313377188026996##
                   12951004715803910995##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'M1) -}
7721a32dad8ef37c506d0f642323124b
  $tc'M1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'M"#) -}
96508c200c3c5f8992ad2fccd854bd5c
  $tc'Metre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14532353989260141129##
                   5310607271199381624##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Metre1) -}
f5a23393637d00bbd95049219cefa074
  $tc'Metre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Metre"#) -}
671f67a8ac8fedec70834a036dd52c54
  $tc'Mile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13933715291339273550##
                   14724271460035202765##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Mile1) -}
104300d6fe95eb376f24c06839594bff
  $tc'Mile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mile"#) -}
421f657e23794890bf01bbf2c8d76849
  $tc'Millimetre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2074252794332059996##
                   13094863139005762039##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Millimetre1) -}
5b00239eedb20b4b5307a777316dcd12
  $tc'Millimetre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Millimetre"#) -}
91bce8628c1c51f0a2735f20f46cbe3e
  $tc'OpenIntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14903406034898701001##
                   4382325555621443476##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'OpenIntervalValue1) -}
a953a436c24e67a23934b54d692e744f
  $tc'OpenIntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpenIntervalValue"#) -}
b2746b88f1e6a4e031fe662beaaf7e6f
  $tc'SimpleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13040682712425700026##
                   2376582542012596894##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'SimpleValue1) -}
68f5de754e622a78c9fde3a085051b81
  $tc'SimpleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SimpleValue"#) -}
2769ea4cafc56ff7cd6d4af2898cd302
  $tc'SingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8537972168633826382##
                   13524277294612861141##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'SingleValue1) -}
6c58bb7ecf6800fd25ba9c8b36943dd0
  $tc'SingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SingleValue"#) -}
13cde4f4ebec62560116f5dd54b01cd2
  $tc'Under :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12681023270978348426##
                   11588768154542577905##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Under1) -}
4d2d7537e809539d9ef13d213bc34991
  $tc'Under1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Under"#) -}
a2ffd88c9633d6d8db6353b09e6e18d0
  $tc'Yard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16433312946421461279##
                   16111450233397767925##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tc'Yard1) -}
4ecd9ee7d334e461d9d7ceefe20ee1c6
  $tc'Yard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Yard"#) -}
2481e7152cb174e65f07a9282dc29a6b
  $tcDistanceData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12299922538514398546##
                   8692333449971513913##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tcDistanceData1) -}
0f9767942d58b85cdd7b13c42e462211
  $tcDistanceData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DistanceData"#) -}
7748b8084d00af0619df89f0d4033ed2
  $tcDistanceValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6105926942921471735##
                   9750254620420884709##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tcDistanceValue1) -}
c3106888897b7fa120f682ddc9f0d5ae
  $tcDistanceValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DistanceValue"#) -}
1bf75cd099a0b2345b653287d013a50f
  $tcIntervalDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4550072345534133451##
                   15950612393344712733##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tcIntervalDirection1) -}
b52cfc038aa463b0ca7931ffda53b0cc
  $tcIntervalDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntervalDirection"#) -}
f6e9f99ede88d2f27d90db26583f3345
  $tcSingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10979300930741957175##
                   10413787087774239278##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tcSingleValue1) -}
a8dcb9e0548c946f41e60bada7142973
  $tcSingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SingleValue"#) -}
1118126543bf2a6b42bbcf2fccffbaca
  $tcUnit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6163980703149684969##
                   10629821228387777261##
                   Duckling.Distance.Types.$trModule
                   Duckling.Distance.Types.$tcUnit1) -}
013982e1fc0def316b8551dbbb9c7a4b
  $tcUnit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Unit"#) -}
868539ab487ad9745cc22269343e34cd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Distance.Types.$trModule2
                   Duckling.Distance.Types.$trModule1) -}
e88191cd65446be82288332a5eb4b362
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Distance.Types"#) -}
7c43d25ff501324f57563465f9c81a4f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
ba82579ed8207c890c97a1eb08aa01f3
  $w$c< ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just ipv -> GHC.Types.True }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> GHC.Classes.$fOrdDouble_$c< a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<## x y) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==## x y) of wild5 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.True } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.D# x ->
                               case b1 of wild3 { GHC.Types.D# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<## x y) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==## x y) of wild5 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.True } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> GHC.Types.True } } }) -}
dc0a46ded93bdf898f5a274b68108f20
  $w$c<1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.$fOrdDouble_$c< ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
8f618c1a8ab1f63146574363967af2be
  $w$c<= ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing
                                -> case ww3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case ww7 of wild3 { DEFAULT -> GHC.Types.True }
                                     GHC.Base.Just a2
                                     -> case ww7 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b1 -> GHC.Classes.$fOrdDouble_$c<= a2 b1 } }
                                GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<## x y) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==## x y) of wild5 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True
                                          -> case ww3 of wild6 {
                                               GHC.Base.Nothing
                                               -> case ww7 of wild7 { DEFAULT -> GHC.Types.True }
                                               GHC.Base.Just a1
                                               -> case ww7 of wild7 {
                                                    GHC.Base.Nothing -> GHC.Types.False
                                                    GHC.Base.Just b2
                                                    -> GHC.Classes.$fOrdDouble_$c<= a1 b2 } } }
                                     GHC.Types.True -> GHC.Types.True } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.D# x ->
                               case b1 of wild3 { GHC.Types.D# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<## x y) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==## x y) of wild5 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.True } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> GHC.Types.True } } }) -}
71e906030119551b1826d4afa974a1d6
  $w$c<=1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.$fOrdDouble_$c<= ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
a219684db711cd159cf7c84591575fab
  $w$c== ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
777cd00ca8d0e1fe496941f92cf02bb2
  $w$c==1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 case ww of wild {
                   Duckling.Distance.Types.Centimetre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Centimetre
                        -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Foot
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Foot -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Inch
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Inch -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Kilometre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Kilometre -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.M
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.M -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Metre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Metre -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Mile
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Mile -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Millimetre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Millimetre
                        -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Distance.Types.Yard
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Distance.Types.Yard
                        -> GHC.Classes.eqDouble ww1 ww3 } }) -}
67a855b05a5cdb87812be1c70071a45c
  $w$c> ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing
                                -> case ww3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case ww7 of wild3 { DEFAULT -> GHC.Types.False }
                                     GHC.Base.Just a2
                                     -> case ww7 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.True
                                          GHC.Base.Just b1 -> GHC.Classes.$fOrdDouble_$c> a2 b1 } }
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.True
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<## x y) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==## x y) of wild5 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True
                                          -> case ww3 of wild6 {
                                               GHC.Base.Nothing
                                               -> case ww7 of wild7 { DEFAULT -> GHC.Types.False }
                                               GHC.Base.Just a1
                                               -> case ww7 of wild7 {
                                                    GHC.Base.Nothing -> GHC.Types.True
                                                    GHC.Base.Just b2
                                                    -> GHC.Classes.$fOrdDouble_$c> a1 b2 } } }
                                     GHC.Types.True -> GHC.Types.False } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.True
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.D# x ->
                               case b1 of wild3 { GHC.Types.D# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<## x y) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==## x y) of wild5 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.False } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> GHC.Types.False } } }) -}
0d86361f4a273e3c1d5a317eb4fb66e1
  $w$c>1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.$fOrdDouble_$c> ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
da1109332be004a1c7a08b4e7b3438d4
  $w$c>= ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just b1 -> GHC.Classes.$fOrdDouble_$c>= a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.True
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<## x y) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==## x y) of wild5 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.False } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.True
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.D# x ->
                               case b1 of wild3 { GHC.Types.D# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<## x y) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==## x y) of wild5 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.False } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> GHC.Types.False } } }) -}
c6ecb921e120bba1a74f3b664e0baceb
  $w$c>=1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.$fOrdDouble_$c>= ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
55524e024a70f451386479259dcae487
  $w$ccompare ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Ordering
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Ordering
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.EQ
                                    GHC.Base.Just ipv -> GHC.Types.LT }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.GT
                                    GHC.Base.Just b1 -> GHC.Classes.$fOrdDouble_$ccompare a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.LT }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.GT
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<## x y) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==## x y) of wild5 {
                                          GHC.Types.False -> GHC.Types.GT
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.LT } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.LT }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.GT
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.D# x ->
                               case b1 of wild3 { GHC.Types.D# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<## x y) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==## x y) of wild5 {
                                      GHC.Types.False -> GHC.Types.GT
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.LT } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> let {
                             a# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit a2
                           } in
                           let {
                             b# :: GHC.Prim.Int#
                             = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit b1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# a# b#) of wild2 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# a# b#) of wild3 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True -> $j GHC.Prim.void# }
                             GHC.Types.True -> GHC.Types.LT } } }) -}
4e0f762288630a357cb1f051362e8cd8
  $w$ccompare1 ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Distance.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww
                 } in
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.Distance.Types.Unit ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.$fOrdDouble_$ccompare ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $w$chashWithSalt ::
    GHC.Prim.Int# -> Duckling.Distance.Types.Unit -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Distance.Types.Unit) ->
                 case Duckling.Distance.Types.$fGenericUnit1
                        @ GHC.Prim.Any
                        w of wild {
                   GHC.Generics.L1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1
                        -> case x1 of wild2 {
                             GHC.Generics.L1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619# }
                             GHC.Generics.R1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#)
                                  16777619# } }
                        GHC.Generics.R1 x1
                        -> case x1 of wild2 {
                             GHC.Generics.L1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 2#)
                                  16777619# }
                             GHC.Generics.R1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 3#)
                                  16777619# } } }
                   GHC.Generics.R1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1
                        -> case x1 of wild2 {
                             GHC.Generics.L1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 4#)
                                  16777619# }
                             GHC.Generics.R1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 5#)
                                  16777619# } }
                        GHC.Generics.R1 x1
                        -> case x1 of wild2 {
                             GHC.Generics.L1 x2
                             -> case x2 of tpl { DEFAULT ->
                                GHC.Prim.*#
                                  (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6#)
                                  16777619# }
                             GHC.Generics.R1 x2
                             -> case x2 of wild3 {
                                  GHC.Generics.L1 x3
                                  -> case x3 of tpl { DEFAULT ->
                                     GHC.Prim.*#
                                       (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 7#)
                                       16777619# }
                                  GHC.Generics.R1 x3
                                  -> case x3 of tpl { DEFAULT ->
                                     GHC.Prim.*#
                                       (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 8#)
                                       16777619# } } } } }) -}
5f72aa94a003e16c032acf5100e0311f
  $w$cresolve ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue
            Duckling.Distance.Types.DistanceData,
          GHC.Types.Bool)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   fail :: GHC.Prim.Void#
                           -> GHC.Base.Maybe
                                (Duckling.Resolve.ResolvedValue
                                   Duckling.Distance.Types.DistanceData,
                                 GHC.Types.Bool)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     case ww of wild {
                       GHC.Base.Nothing
                       -> (GHC.Base.Nothing
                             @ (Duckling.Distance.Types.DistanceValue, GHC.Types.Bool))
                            `cast`
                          (GHC.Base.Maybe
                             ((,)
                                (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                <GHC.Types.Bool>_R)_R)_R
                       GHC.Base.Just unit1
                       -> case ww1 of wild1 {
                            GHC.Base.Nothing
                            -> case ww2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case ww3 of wild3 {
                                      GHC.Base.Nothing
                                      -> (GHC.Base.Nothing
                                            @ (Duckling.Distance.Types.DistanceValue,
                                               GHC.Types.Bool))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                               <GHC.Types.Bool>_R)_R)_R
                                      GHC.Base.Just to
                                      -> (GHC.Base.Just
                                            @ (Duckling.Distance.Types.DistanceValue,
                                               GHC.Types.Bool)
                                            (Duckling.Distance.Types.OpenIntervalValue
                                               (Duckling.Distance.Types.SingleValue unit1 to,
                                                Duckling.Distance.Types.Under),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                               <GHC.Types.Bool>_R)_R)_R }
                                 GHC.Base.Just from
                                 -> case ww3 of wild3 {
                                      GHC.Base.Nothing
                                      -> (GHC.Base.Just
                                            @ (Duckling.Distance.Types.DistanceValue,
                                               GHC.Types.Bool)
                                            (Duckling.Distance.Types.OpenIntervalValue
                                               (Duckling.Distance.Types.SingleValue unit1 from,
                                                Duckling.Distance.Types.Above),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                               <GHC.Types.Bool>_R)_R)_R
                                      GHC.Base.Just to
                                      -> (GHC.Base.Just
                                            @ (Duckling.Distance.Types.DistanceValue,
                                               GHC.Types.Bool)
                                            (Duckling.Distance.Types.IntervalValue
                                               (Duckling.Distance.Types.SingleValue unit1 from,
                                                Duckling.Distance.Types.SingleValue unit1 to),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                               <GHC.Types.Bool>_R)_R)_R } }
                            GHC.Base.Just ipv
                            -> (GHC.Base.Nothing
                                  @ (Duckling.Distance.Types.DistanceValue, GHC.Types.Bool))
                                 `cast`
                               (GHC.Base.Maybe
                                  ((,)
                                     (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                     <GHC.Types.Bool>_R)_R)_R } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> fail GHC.Prim.void#
                   GHC.Base.Just unit1
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing -> fail GHC.Prim.void#
                        GHC.Base.Just val
                        -> (GHC.Base.Just
                              @ (Duckling.Distance.Types.DistanceValue, GHC.Types.Bool)
                              (Duckling.Distance.Types.SimpleValue
                                 (Duckling.Distance.Types.SingleValue unit1 val),
                               GHC.Types.False))
                             `cast`
                           (GHC.Base.Maybe
                              ((,)
                                 (Sub (Sym (Duckling.Distance.Types.D:R:ResolvedValueDistanceData[0])))
                                 <GHC.Types.Bool>_R)_R)_R } }) -}
3db7ce641afeed0c95876338955cdd34
  $w$crnf ::
    GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double) ->
                 case case ww of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> case Duckling.Distance.Types.$fGenericUnit1
                                  @ GHC.Prim.Any
                                  x of wild1 {
                             GHC.Generics.L1 x1
                             -> Duckling.Distance.Types.$fNFDataDistanceData2 @ GHC.Prim.Any x1
                             GHC.Generics.R1 x1
                             -> Duckling.Distance.Types.$fNFDataDistanceData1
                                  @ GHC.Prim.Any
                                  x1 } } of wild1 { () ->
                 case case ww1 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataDouble_$crnf x } of wild2 { () ->
                 case case ww2 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataDouble_$crnf x } of wild3 { () ->
                 case ww3 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Control.DeepSeq.$fNFDataDouble_$crnf x } } } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $w$cshowsPrec ::
    Duckling.Distance.Types.Unit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Distance.Types.Unit)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Duckling.Distance.Types.Centimetre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue10
                        w1
                   Duckling.Distance.Types.Foot
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue9
                        w1
                   Duckling.Distance.Types.Inch
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue8
                        w1
                   Duckling.Distance.Types.Kilometre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue7
                        w1
                   Duckling.Distance.Types.M
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue6
                        w1
                   Duckling.Distance.Types.Metre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue5
                        w1
                   Duckling.Distance.Types.Mile
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue4
                        w1
                   Duckling.Distance.Types.Millimetre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue3
                        w1
                   Duckling.Distance.Types.Yard
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Distance.Types.$fToJSONDistanceValue2
                        w1 }) -}
ed108df899e481b8207b9b4913d2f706
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Distance.Types.DistanceValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Distance.Types.DistanceValue) ->
                 case w of wild {
                   Duckling.Distance.Types.SimpleValue b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Duckling.Distance.Types.SingleValue ww2 ww3 ->
                          Duckling.Distance.Types.$w$cshowsPrec2 11# ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Duckling.Distance.Types.$fShowDistanceValue6
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Distance.Types.$fShowDistanceValue6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Duckling.Distance.Types.IntervalValue b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Distance.Types.$fShowDistanceValue5
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { Duckling.Distance.Types.SingleValue ww5 ww6 ->
                                Duckling.Distance.Types.$w$cshowsPrec2
                                  0#
                                  ww5
                                  ww6
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows5
                                     (GHC.Show.$fShow(,)_$sgo
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                        (case ww3 of ww7 { Duckling.Distance.Types.SingleValue ww8 ww9 ->
                                         Duckling.Distance.Types.$w$cshowsPrec2 0# ww8 ww9 })
                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Duckling.Distance.Types.OpenIntervalValue b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Distance.Types.$fShowDistanceValue4
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { Duckling.Distance.Types.SingleValue ww5 ww6 ->
                                Duckling.Distance.Types.$w$cshowsPrec2
                                  0#
                                  ww5
                                  ww6
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows5
                                     (GHC.Show.$fShow(,)_$sgo
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                        (\ (eta :: GHC.Base.String) ->
                                         case ww3 of wild1 {
                                           Duckling.Distance.Types.Above
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Duckling.Distance.Types.$fShowDistanceValue3
                                                eta
                                           Duckling.Distance.Types.Under
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Duckling.Distance.Types.$fShowDistanceValue2
                                                eta })
                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
aa7870eaef37949125e4fd2ffe6f4e5a
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Distance.Types.Unit)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Distance.Types.$fShowDistanceValue12
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Distance.Types.$fShowDistanceValue11
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Distance.Types.$fShowDistanceValue10
                          (Duckling.Distance.Types.$w$cshowsPrec
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Distance.Types.$fShowDistanceValue9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Distance.Types.$fShowDistanceValue8
                                   (f (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Distance.Types.$fShowDistanceValue7
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
8d40c3d897103f0592c673279e27bf71
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe Duckling.Distance.Types.Unit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Duckling.Distance.Types.Unit
                       Duckling.Distance.Types.$fShowUnit
                       Duckling.Distance.Types.$fShowDistanceValue12
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Distance.Types.$fShowDistanceValue12
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Distance.Types.$fShowDistanceValue12
                       ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Distance.Types.$fShowDistanceValue12
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Distance.Types.$fShowDistanceData6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Distance.Types.$fShowDistanceData5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Distance.Types.$fShowDistanceValue9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Distance.Types.$fShowDistanceData4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Distance.Types.$fShowDistanceValue9
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Distance.Types.$fShowDistanceData3
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Distance.Types.$fShowDistanceValue9
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Duckling.Distance.Types.$fShowDistanceData2
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Duckling.Distance.Types.$fShowDistanceValue7
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
ed108df899e481b8207b9b4913d2f706
  $w$ctoJSON ::
    Duckling.Distance.Types.DistanceValue
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Distance.Types.DistanceValue) ->
                 case w of wild {
                   Duckling.Distance.Types.SimpleValue value1
                   -> case value1 of ww { Duckling.Distance.Types.SingleValue ww1 ww2 ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                (Duckling.Distance.Types.$fToJSONDistanceValue12,
                                 Data.Aeson.Types.ToJSON.$fToJSONDouble_$srealFloatToJSON ww2)
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Distance.Types.$fToJSONDistanceValue11,
                                    Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON2 ww1)
                                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      case Duckling.Distance.Types.$fToJSONDistanceValue17 of v2 { DEFAULT ->
                      case Duckling.Distance.Types.$fToJSONDistanceValue16 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                      case Duckling.Distance.Types.$w$sinsert
                             @ Data.Aeson.Types.Internal.Value
                             ww4
                             ww5
                             ww6
                             v2
                             dt of dt1 { DEFAULT ->
                      (# dt1 #) } } } } }
                   Duckling.Distance.Types.IntervalValue ds
                   -> case ds of wild1 { (,) from to ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                Duckling.Distance.Types.$fToJSONDistanceValue14
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Distance.Types.$fToJSONDistanceValue13,
                                    Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1 from)
                                   (GHC.Types.:
                                      @ Data.Aeson.Types.Internal.Pair
                                      (Duckling.Distance.Types.$fToJSONDistanceValue1,
                                       Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1 to)
                                      (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      (# dt #) } }
                   Duckling.Distance.Types.OpenIntervalValue ds
                   -> case ds of wild1 { (,) from ds1 ->
                      case ds1 of wild2 {
                        Duckling.Distance.Types.Above
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Distance.Types.$fToJSONDistanceValue14
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Distance.Types.$fToJSONDistanceValue13,
                                         Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1
                                           from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) }
                        Duckling.Distance.Types.Under
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Distance.Types.$fToJSONDistanceValue14
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Distance.Types.$fToJSONDistanceValue1,
                                         Duckling.Distance.Types.$fToJSONDistanceValue_$ctoJSON1
                                           from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) } } } }) -}
ef9ddd2870b0e6a18ee3c381ae768a25
  $w$ctoJSON1 ::
    Duckling.Distance.Types.Unit -> (# Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Distance.Types.Unit) ->
                 case Duckling.Distance.Types.$w$cshowsPrec
                        w
                        (GHC.Types.[] @ GHC.Types.Char) of dt { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         Duckling.Distance.Types.$wouter
                           ipv1
                           4#
                           dt
                           '\NUL'#
                           '\NUL'#
                           0#
                           ipv }) of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of dt1 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                 (# dt1 #) } } }) -}
6ee16e910589a9d426034fa49c301f01
  $w$dGHashable ::
    GHC.Prim.Int#
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "minValue")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "maxValue")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "minValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1)
                   (ww2 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "maxValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Prim.Int# {- Arity: 1 -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot] ->
                     case ww2
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "maxValue")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe GHC.Types.Double>_R
                                    <a1>_P)) of wild {
                       GHC.Base.Nothing -> GHC.Prim.*# ww3 16777619#
                       GHC.Base.Just a2
                       -> case a2 of ww4 { GHC.Types.D# ww5 ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Word.Word64
                                 (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newAlignedPinnedByteArray#
                                         @ GHC.Prim.RealWorld
                                         8#
                                         8#
                                         eta of ds2 { (#,#) ipv ipv1 ->
                                  case GHC.Prim.unsafeFreezeByteArray#
                                         @ GHC.Prim.RealWorld
                                         ipv1
                                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                                  let {
                                    ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                                  } in
                                  case GHC.Prim.writeDoubleOffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         ww5
                                         ipv2 of s2 { DEFAULT ->
                                  case GHC.Prim.readWord64OffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         s2 of ds1 { (#,#) ipv4 ipv5 ->
                                  case GHC.Prim.touch#
                                         @ 'GHC.Types.PtrRepUnlifted
                                         @ GHC.Prim.ByteArray#
                                         ipv3
                                         ipv4 of s4 { DEFAULT ->
                                  (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of wild1 { GHC.Word.W64# x# ->
                          GHC.Prim.xorI#
                            (GHC.Prim.*#
                               (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619#) 6148914691236517205#)
                               16777619#)
                            (GHC.Prim.word2Int# x#) } } } }
                 } in
                 case ww1
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "minValue")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Base.Maybe GHC.Types.Double>_R
                                <a1>_P)) of wild {
                   GHC.Base.Nothing -> $j (GHC.Prim.*# ww 16777619#)
                   GHC.Base.Just a2
                   -> case a2 of ww3 { GHC.Types.D# ww4 ->
                      case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Word.Word64
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newAlignedPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     8#
                                     eta of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     ipv of ds3 { (#,#) ipv2 ipv3 ->
                              let {
                                ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                              } in
                              case GHC.Prim.writeDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     ww4
                                     ipv2 of s2 { DEFAULT ->
                              case GHC.Prim.readWord64OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     s2 of ds1 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepUnlifted
                                     @ GHC.Prim.ByteArray#
                                     ipv3
                                     ipv4 of s4 { DEFAULT ->
                              (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 { GHC.Word.W64# x# ->
                      $j
                        (GHC.Prim.xorI#
                           (GHC.Prim.*#
                              (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6148914691236517205#)
                              16777619#)
                           (GHC.Prim.word2Int# x#)) } } } }) -}
684b2afe2209b215ef47b1da3fe1b99c
  $w$dGHashable1 ::
    GHC.Prim.Int#
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "unit")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Distance.Types.Unit))
         a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "value")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "unit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                             a1)
                   (ww2 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Prim.Int# {- Arity: 1 -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot] ->
                     case ww2
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "value")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe GHC.Types.Double>_R
                                    <a1>_P)) of wild {
                       GHC.Base.Nothing -> GHC.Prim.*# ww3 16777619#
                       GHC.Base.Just a2
                       -> case a2 of ww4 { GHC.Types.D# ww5 ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Word.Word64
                                 (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newAlignedPinnedByteArray#
                                         @ GHC.Prim.RealWorld
                                         8#
                                         8#
                                         eta of ds2 { (#,#) ipv ipv1 ->
                                  case GHC.Prim.unsafeFreezeByteArray#
                                         @ GHC.Prim.RealWorld
                                         ipv1
                                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                                  let {
                                    ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                                  } in
                                  case GHC.Prim.writeDoubleOffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         ww5
                                         ipv2 of s2 { DEFAULT ->
                                  case GHC.Prim.readWord64OffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         s2 of ds1 { (#,#) ipv4 ipv5 ->
                                  case GHC.Prim.touch#
                                         @ 'GHC.Types.PtrRepUnlifted
                                         @ GHC.Prim.ByteArray#
                                         ipv3
                                         ipv4 of s4 { DEFAULT ->
                                  (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of wild1 { GHC.Word.W64# x# ->
                          GHC.Prim.xorI#
                            (GHC.Prim.*#
                               (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619#) 6148914691236517205#)
                               16777619#)
                            (GHC.Prim.word2Int# x#) } } } }
                 } in
                 case ww1
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "unit")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.K1
                                   GHC.Generics.R
                                   (GHC.Base.Maybe Duckling.Distance.Types.Unit)>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Base.Maybe Duckling.Distance.Types.Unit>_R
                                <a1>_P)) of wild {
                   GHC.Base.Nothing -> $j (GHC.Prim.*# ww 16777619#)
                   GHC.Base.Just a2
                   -> case Duckling.Distance.Types.$fGenericUnit1
                             @ GHC.Prim.Any
                             a2 of wild1 {
                        GHC.Generics.L1 x
                        -> case x of wild2 {
                             GHC.Generics.L1 x1
                             -> case x1 of wild3 {
                                  GHC.Generics.L1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.*#
                                             (GHC.Prim.xorI#
                                                (GHC.Prim.*# ww 16777619#)
                                                6148914691236517205#)
                                             16777619#)
                                          16777619#) }
                                  GHC.Generics.R1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             1#)
                                          16777619#) } }
                             GHC.Generics.R1 x1
                             -> case x1 of wild3 {
                                  GHC.Generics.L1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             2#)
                                          16777619#) }
                                  GHC.Generics.R1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             3#)
                                          16777619#) } } }
                        GHC.Generics.R1 x
                        -> case x of wild2 {
                             GHC.Generics.L1 x1
                             -> case x1 of wild3 {
                                  GHC.Generics.L1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             4#)
                                          16777619#) }
                                  GHC.Generics.R1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             5#)
                                          16777619#) } }
                             GHC.Generics.R1 x1
                             -> case x1 of wild3 {
                                  GHC.Generics.L1 x2
                                  -> case x2 of tpl { DEFAULT ->
                                     $j
                                       (GHC.Prim.*#
                                          (GHC.Prim.xorI#
                                             (GHC.Prim.*#
                                                (GHC.Prim.xorI#
                                                   (GHC.Prim.*# ww 16777619#)
                                                   6148914691236517205#)
                                                16777619#)
                                             6#)
                                          16777619#) }
                                  GHC.Generics.R1 x2
                                  -> case x2 of wild4 {
                                       GHC.Generics.L1 x3
                                       -> case x3 of tpl { DEFAULT ->
                                          $j
                                            (GHC.Prim.*#
                                               (GHC.Prim.xorI#
                                                  (GHC.Prim.*#
                                                     (GHC.Prim.xorI#
                                                        (GHC.Prim.*# ww 16777619#)
                                                        6148914691236517205#)
                                                     16777619#)
                                                  7#)
                                               16777619#) }
                                       GHC.Generics.R1 x3
                                       -> case x3 of tpl { DEFAULT ->
                                          $j
                                            (GHC.Prim.*#
                                               (GHC.Prim.xorI#
                                                  (GHC.Prim.*#
                                                     (GHC.Prim.xorI#
                                                        (GHC.Prim.*# ww 16777619#)
                                                        6148914691236517205#)
                                                     16777619#)
                                                  8#)
                                               16777619#) } } } } } }) -}
b513971e3f2d7eba485f4013885b8b59
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
a409153707ff466f7853c4a4a802324f
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Duckling.Distance.Types.$wpoly_go1
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
87019d22abb424c88f26836c4524aa72
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 7, Strictness: <L,U><L,U><S,U><S,U><L,U><L,U><S,U>,
     Inline: [0] -}
4f52e556f753fa4cc5a63d05cd9c1340
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
5f72aa94a003e16c032acf5100e0311f
  axiom D:R:ResolvedValueDistanceData::
      Duckling.Resolve.ResolvedValue Duckling.Distance.Types.DistanceData
        = Duckling.Distance.Types.DistanceValue
5f72aa94a003e16c032acf5100e0311f
  data DistanceData
    = DistanceData {unit :: GHC.Base.Maybe
                              Duckling.Distance.Types.Unit,
                    value :: GHC.Base.Maybe GHC.Types.Double,
                    minValue :: GHC.Base.Maybe GHC.Types.Double,
                    maxValue :: GHC.Base.Maybe GHC.Types.Double}
ed108df899e481b8207b9b4913d2f706
  data DistanceValue
    = SimpleValue Duckling.Distance.Types.SingleValue
    | IntervalValue (Duckling.Distance.Types.SingleValue,
                     Duckling.Distance.Types.SingleValue)
    | OpenIntervalValue (Duckling.Distance.Types.SingleValue,
                         Duckling.Distance.Types.IntervalDirection)
6ab08a13545203e1527793a85e250a7e
  data IntervalDirection = Above | Under
5f72aa94a003e16c032acf5100e0311f
  axiom Rep_DistanceData::
      GHC.Generics.Rep Duckling.Distance.Types.DistanceData
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "DistanceData"
               "Duckling.Distance.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "DistanceData" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "unit")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Distance.Types.Unit))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "value")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "minValue")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "maxValue")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe GHC.Types.Double)))))
6ab08a13545203e1527793a85e250a7e
  axiom Rep_IntervalDirection::
      GHC.Generics.Rep Duckling.Distance.Types.IntervalDirection
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IntervalDirection"
               "Duckling.Distance.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
ef9ddd2870b0e6a18ee3c381ae768a25
  axiom Rep_Unit::
      GHC.Generics.Rep Duckling.Distance.Types.Unit
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Unit"
               "Duckling.Distance.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "Centimetre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 GHC.Generics.U1
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "Foot" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  GHC.Generics.U1)
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "Inch" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  GHC.Generics.U1
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Kilometre"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   GHC.Generics.U1))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "M" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  GHC.Generics.U1
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Metre"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   GHC.Generics.U1)
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "Mile" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                   GHC.Generics.U1
                                                 GHC.Generics.:+: (GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "Millimetre"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     GHC.Generics.U1
                                                                   GHC.Generics.:+: GHC.Generics.C1
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "Yard"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False)
                                                                                      GHC.Generics.U1))))
7c5e09a2def86294d8ef045e29daa5a4
  data SingleValue
    = SingleValue {vUnit :: Duckling.Distance.Types.Unit,
                   vValue :: GHC.Types.Double}
ef9ddd2870b0e6a18ee3c381ae768a25
  data Unit
    = Centimetre
    | Foot
    | Inch
    | Kilometre
    | M
    | Metre
    | Mile
    | Millimetre
    | Yard
adab1aa9a64cc7d36040ab1488204c2d
  above ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Distance.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Distance.Types.OpenIntervalValue
                   (Duckling.Distance.Types.SingleValue u v,
                    Duckling.Distance.Types.Above)) -}
0315ae52c5d069de014bdaf89db910d0
  between ::
    Duckling.Distance.Types.Unit
    -> (GHC.Types.Double, GHC.Types.Double)
    -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Distance.Types.Unit)
                   (ds :: (GHC.Types.Double, GHC.Types.Double)) ->
                 case ds of wild { (,) from to ->
                 Duckling.Distance.Types.IntervalValue
                   (Duckling.Distance.Types.SingleValue u from,
                    Duckling.Distance.Types.SingleValue u to) }) -}
ba58cd68eb26f6f2b247b97bb74d166f
  maxValue ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Distance.Types.DistanceData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.DistanceData) ->
                 case ds of wild { Duckling.Distance.Types.DistanceData ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
482328df725f642528e9c02674a6f561
  minValue ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Distance.Types.DistanceData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.DistanceData) ->
                 case ds of wild { Duckling.Distance.Types.DistanceData ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
436d266bed249677485c3dae0540690b
  openInterval ::
    Duckling.Distance.Types.IntervalDirection
    -> Duckling.Distance.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Distance.Types.DistanceValue
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m3,
     Unfolding: InlineRule (3, True, False)
                (\ (direction :: Duckling.Distance.Types.IntervalDirection)
                   (u :: Duckling.Distance.Types.Unit)
                   (v :: GHC.Types.Double) ->
                 Duckling.Distance.Types.OpenIntervalValue
                   (Duckling.Distance.Types.SingleValue u v, direction)) -}
ce983d79f38861bf768f0680a37cf431
  simple ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Distance.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Distance.Types.SimpleValue
                   (Duckling.Distance.Types.SingleValue u v)) -}
5653874b74463811979eb78bfe3bdfda
  single ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double -> Duckling.Distance.Types.SingleValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Distance.Types.SingleValue -}
8fdb5e24b1562d85d1c6141ee1ce5c57
  under ::
    Duckling.Distance.Types.Unit
    -> GHC.Types.Double -> Duckling.Distance.Types.DistanceValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Distance.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Distance.Types.OpenIntervalValue
                   (Duckling.Distance.Types.SingleValue u v,
                    Duckling.Distance.Types.Under)) -}
48714cbffd478ba26bda5f7653015430
  unit ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Base.Maybe Duckling.Distance.Types.Unit
  RecSel Left Duckling.Distance.Types.DistanceData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.DistanceData) ->
                 case ds of wild { Duckling.Distance.Types.DistanceData ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
4d9e0a22a87294568ce18c0de4d01886
  vUnit ::
    Duckling.Distance.Types.SingleValue -> Duckling.Distance.Types.Unit
  RecSel Left Duckling.Distance.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.SingleValue) ->
                 case ds of wild { Duckling.Distance.Types.SingleValue ds1 ds2 ->
                 ds1 }) -}
5956e345a4c0cb901a4bebcaac76f29b
  vValue :: Duckling.Distance.Types.SingleValue -> GHC.Types.Double
  RecSel Left Duckling.Distance.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.SingleValue) ->
                 case ds of wild { Duckling.Distance.Types.SingleValue ds1 ds2 ->
                 ds2 }) -}
02daef832f01a41fb8d4b0289fbd44e5
  value ::
    Duckling.Distance.Types.DistanceData
    -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Distance.Types.DistanceData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Distance.Types.DistanceData) ->
                 case ds of wild { Duckling.Distance.Types.DistanceData ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
instance GHC.Classes.Eq [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fEqDistanceData
instance GHC.Classes.Eq [Duckling.Distance.Types.DistanceValue]
  = Duckling.Distance.Types.$fEqDistanceValue
instance GHC.Classes.Eq [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fEqIntervalDirection
instance GHC.Classes.Eq [Duckling.Distance.Types.SingleValue]
  = Duckling.Distance.Types.$fEqSingleValue
instance GHC.Classes.Eq [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fEqUnit
instance GHC.Generics.Generic [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fGenericDistanceData
instance GHC.Generics.Generic [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fGenericIntervalDirection
instance GHC.Generics.Generic [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fGenericUnit
instance Data.Hashable.Class.Hashable [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fHashableDistanceData
instance Data.Hashable.Class.Hashable [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fHashableIntervalDirection
instance Data.Hashable.Class.Hashable [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fHashableUnit
instance Control.DeepSeq.NFData [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fNFDataDistanceData
instance Control.DeepSeq.NFData [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fNFDataIntervalDirection
instance Control.DeepSeq.NFData [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fNFDataUnit
instance GHC.Classes.Ord [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fOrdDistanceData
instance GHC.Classes.Ord [Duckling.Distance.Types.DistanceValue]
  = Duckling.Distance.Types.$fOrdDistanceValue
instance GHC.Classes.Ord [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fOrdIntervalDirection
instance GHC.Classes.Ord [Duckling.Distance.Types.SingleValue]
  = Duckling.Distance.Types.$fOrdSingleValue
instance GHC.Classes.Ord [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fOrdUnit
instance Duckling.Resolve.Resolve [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fResolveDistanceData
instance GHC.Show.Show [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.$fShowDistanceData
instance GHC.Show.Show [Duckling.Distance.Types.DistanceValue]
  = Duckling.Distance.Types.$fShowDistanceValue
instance GHC.Show.Show [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.$fShowIntervalDirection
instance GHC.Show.Show [Duckling.Distance.Types.SingleValue]
  = Duckling.Distance.Types.$fShowSingleValue
instance GHC.Show.Show [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fShowUnit
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Distance.Types.DistanceValue]
  = Duckling.Distance.Types.$fToJSONDistanceValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Distance.Types.SingleValue]
  = Duckling.Distance.Types.$fToJSONSingleValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.$fToJSONUnit
family instance GHC.Generics.Rep [Duckling.Distance.Types.IntervalDirection]
  = Duckling.Distance.Types.Rep_IntervalDirection
family instance GHC.Generics.Rep [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.Rep_DistanceData
family instance GHC.Generics.Rep [Duckling.Distance.Types.Unit]
  = Duckling.Distance.Types.Rep_Unit
family instance Duckling.Resolve.ResolvedValue [Duckling.Distance.Types.DistanceData]
  = Duckling.Distance.Types.D:R:ResolvedValueDistanceData
"SPEC/Duckling.Distance.Types $dmhashWithSalt @ IntervalDirection" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                                     Data.Hashable.Class.Zero
                                                                                                     (GHC.Generics.Rep
                                                                                                        Duckling.Distance.Types.IntervalDirection))
                                                                                   ($dGeneric :: GHC.Generics.Generic
                                                                                                   Duckling.Distance.Types.IntervalDirection)
                                                                                   ($dHashable :: Data.Hashable.Class.Hashable
                                                                                                    Duckling.Distance.Types.IntervalDirection)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Distance.Types.IntervalDirection
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Distance.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
"SPEC/Duckling.Distance.Types $dmrnf @ IntervalDirection" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                                          (GHC.Generics.Rep
                                                                                             Duckling.Distance.Types.IntervalDirection))
                                                                          ($dGeneric :: GHC.Generics.Generic
                                                                                          Duckling.Distance.Types.IntervalDirection)
                                                                          ($dNFData :: Control.DeepSeq.NFData
                                                                                         Duckling.Distance.Types.IntervalDirection)
  Control.DeepSeq.$dmrnf @ Duckling.Distance.Types.IntervalDirection
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Distance.Types.$fNFDataIntervalDirection_$s$dmrnf
"SPEC/Duckling.Distance.Types $dmrnf @ Unit" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                             (GHC.Generics.Rep
                                                                                Duckling.Distance.Types.Unit))
                                                             ($dGeneric :: GHC.Generics.Generic
                                                                             Duckling.Distance.Types.Unit)
                                                             ($dNFData :: Control.DeepSeq.NFData
                                                                            Duckling.Distance.Types.Unit)
  Control.DeepSeq.$dmrnf @ Duckling.Distance.Types.Unit
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Distance.Types.$fNFDataUnit_$s$dmrnf
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

