
==================== FINAL INTERFACE ====================
2019-01-30 07:24:21.345899 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types [family instance module] 8002
  interface hash: 9a9d0419f354c3656643dc3bc67655de
  ABI hash: c7f3dc789a62dec5378beb28bc64479a
  export-list hash: 3608a96fa6a5d7edada240602ba19e6c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3822f8cd2dfcac5294c356754f4e693c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Temperature.Types.above
  Duckling.Temperature.Types.between
  Duckling.Temperature.Types.openInterval
  Duckling.Temperature.Types.simple
  Duckling.Temperature.Types.single
  Duckling.Temperature.Types.under
  Duckling.Temperature.Types.unitsAreCompatible
  Duckling.Temperature.Types.IntervalDirection{Duckling.Temperature.Types.Above Duckling.Temperature.Types.Under}
  Duckling.Temperature.Types.SingleValue{Duckling.Temperature.Types.SingleValue vUnit vValue}
  Duckling.Temperature.Types.TemperatureData{Duckling.Temperature.Types.TemperatureData maxValue minValue unit value}
  Duckling.Temperature.Types.TemperatureUnit{Duckling.Temperature.Types.Celsius Duckling.Temperature.Types.Degree Duckling.Temperature.Types.Fahrenheit}
  Duckling.Temperature.Types.TemperatureValue{Duckling.Temperature.Types.IntervalValue Duckling.Temperature.Types.OpenIntervalValue Duckling.Temperature.Types.SimpleValue}
module dependencies: Duckling.Locale Duckling.Region
                     Duckling.Resolve
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
5740021d98ff92f4e1fbda904276c301
  $fEqIntervalDirection ::
    GHC.Classes.Eq Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.IntervalDirection
                  Duckling.Temperature.Types.$fEqIntervalDirection_$c==
                  Duckling.Temperature.Types.$fEqIntervalDirection_$c/= -}
5740021d98ff92f4e1fbda904276c301
  $fEqIntervalDirection_$c/= ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.False
                        Duckling.Temperature.Types.Under -> GHC.Types.True }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.True
                        Duckling.Temperature.Types.Under -> GHC.Types.False } }) -}
5740021d98ff92f4e1fbda904276c301
  $fEqIntervalDirection_$c== ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Temperature.Types.IntervalDirection)
                   (ds1 :: Duckling.Temperature.Types.IntervalDirection) ->
                 case ds of wild {
                   Duckling.Temperature.Types.Above
                   -> case ds1 of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.True
                        Duckling.Temperature.Types.Under -> GHC.Types.False }
                   Duckling.Temperature.Types.Under
                   -> case ds1 of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.False
                        Duckling.Temperature.Types.Under -> GHC.Types.True } }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fEqSingleValue ::
    GHC.Classes.Eq Duckling.Temperature.Types.SingleValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.SingleValue
                  Duckling.Temperature.Types.$fEqSingleValue_$c==
                  Duckling.Temperature.Types.$fEqSingleValue_$c/= -}
a7861b77024e3a7adc73acf872f24ec1
  $fEqSingleValue_$c/= ::
    Duckling.Temperature.Types.SingleValue
    -> Duckling.Temperature.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.SingleValue)
                   (b :: Duckling.Temperature.Types.SingleValue) ->
                 case Duckling.Temperature.Types.$fEqSingleValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fEqSingleValue_$c== ::
    Duckling.Temperature.Types.SingleValue
    -> Duckling.Temperature.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.SingleValue)
                   (w1 :: Duckling.Temperature.Types.SingleValue) ->
                 case w of ww { Duckling.Temperature.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Temperature.Types.SingleValue ww4 ww5 ->
                 Duckling.Temperature.Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fEqTemperatureData ::
    GHC.Classes.Eq Duckling.Temperature.Types.TemperatureData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fEqTemperatureData_$c==
                  Duckling.Temperature.Types.$fEqTemperatureData_$c/= -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fEqTemperatureData_$c/= ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureData)
                   (b :: Duckling.Temperature.Types.TemperatureData) ->
                 case Duckling.Temperature.Types.$fEqTemperatureData_$c==
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fEqTemperatureData_$c== ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fEqTemperatureUnit ::
    GHC.Classes.Eq Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fEqTemperatureUnit_$c==
                  Duckling.Temperature.Types.$fEqTemperatureUnit_$c/= -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fEqTemperatureUnit_$c/= ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Temperature.Types.Degree -> GHC.Types.False }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Temperature.Types.Celsius -> GHC.Types.False }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fEqTemperatureUnit_$c== ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Temperature.Types.TemperatureUnit)
                   (ds1 :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case ds of wild {
                   Duckling.Temperature.Types.Degree
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Degree -> GHC.Types.True }
                   Duckling.Temperature.Types.Celsius
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Celsius -> GHC.Types.True }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True } }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fEqTemperatureValue ::
    GHC.Classes.Eq Duckling.Temperature.Types.TemperatureValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureValue
                  Duckling.Temperature.Types.$fEqTemperatureValue_$c==
                  Duckling.Temperature.Types.$fEqTemperatureValue_$c/= -}
0b99c7b5036e054e63ff20ee0a83808c
  $fEqTemperatureValue_$c/= ::
    Duckling.Temperature.Types.TemperatureValue
    -> Duckling.Temperature.Types.TemperatureValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureValue)
                   (b :: Duckling.Temperature.Types.TemperatureValue) ->
                 case Duckling.Temperature.Types.$fEqTemperatureValue_$c==
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fEqTemperatureValue_$c== ::
    Duckling.Temperature.Types.TemperatureValue
    -> Duckling.Temperature.Types.TemperatureValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Temperature.Types.TemperatureValue)
                   (ds1 :: Duckling.Temperature.Types.TemperatureValue) ->
                 case ds of wild {
                   Duckling.Temperature.Types.SimpleValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.SimpleValue b1
                        -> Duckling.Temperature.Types.$fEqSingleValue_$c== a1 b1 }
                   Duckling.Temperature.Types.IntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Temperature.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Temperature.Types.SingleValue ww11 ww12 ->
                           case Duckling.Temperature.Types.$w$c== ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Temperature.Types.$fEqSingleValue_$c==
                                  ww2
                                  ww5 } } } } } }
                   Duckling.Temperature.Types.OpenIntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Temperature.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Temperature.Types.SingleValue ww11 ww12 ->
                           case Duckling.Temperature.Types.$w$c== ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Temperature.Types.$fEqIntervalDirection_$c==
                                  ww2
                                  ww5 } } } } } } }) -}
5740021d98ff92f4e1fbda904276c301
  $fGenericIntervalDirection ::
    GHC.Generics.Generic Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.IntervalDirection
                  Duckling.Temperature.Types.$fGenericIntervalDirection_$cfrom
                  Duckling.Temperature.Types.$fGenericIntervalDirection_$cto -}
5740021d98ff92f4e1fbda904276c301
  $fGenericIntervalDirection1 ::
    Duckling.Temperature.Types.IntervalDirection
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Temperature.Types.IntervalDirection) ->
                 case x1 of wild {
                   Duckling.Temperature.Types.Above
                   -> Duckling.Temperature.Types.$fGenericIntervalDirection3 @ x
                   Duckling.Temperature.Types.Under
                   -> Duckling.Temperature.Types.$fGenericIntervalDirection2 @ x }) -}
c2fd46e0aedbba418583514db40fde0f
  $fGenericIntervalDirection2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
152e08f86f9d401025c545d3c5272abd
  $fGenericIntervalDirection3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Above" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
5740021d98ff92f4e1fbda904276c301
  $fGenericIntervalDirection_$cfrom ::
    Duckling.Temperature.Types.IntervalDirection
    -> GHC.Generics.Rep Duckling.Temperature.Types.IntervalDirection x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fGenericIntervalDirection1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Temperature.Types.IntervalDirection>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "IntervalDirection"
                                       "Duckling.Temperature.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "Under"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R))
                          (Sub (Sym (Duckling.Temperature.Types.Rep_IntervalDirection[0]))) <x>_N) -}
5740021d98ff92f4e1fbda904276c301
  $fGenericIntervalDirection_$cto ::
    GHC.Generics.Rep Duckling.Temperature.Types.IntervalDirection x
    -> Duckling.Temperature.Types.IntervalDirection
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Duckling.Temperature.Types.IntervalDirection x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Temperature.Types.Rep_IntervalDirection[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "IntervalDirection"
                                   "Duckling.Temperature.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "Under"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Temperature.Types.Above }
                   GHC.Generics.R1 ds1
                   -> case ds1 of tpl { DEFAULT ->
                      Duckling.Temperature.Types.Under } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fGenericTemperatureData ::
    GHC.Generics.Generic Duckling.Temperature.Types.TemperatureData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fGenericTemperatureData_$cfrom
                  Duckling.Temperature.Types.$fGenericTemperatureData_$cto -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fGenericTemperatureData1 ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "unit")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "value")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "minValue")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "maxValue")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case x1 of wild { Duckling.Temperature.Types.TemperatureData g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "unit")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "value")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "minValue")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "maxValue")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "unit")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "value")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P
                                      <GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit>_R
                                      <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "unit")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe
                                            Duckling.Temperature.Types.TemperatureUnit)>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "value")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "minValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "maxValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "minValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R) <x>_N))
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "maxValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "unit")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "value")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "minValue")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "maxValue")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       GHC.Types.Int)))>_R) <x>_N) }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fGenericTemperatureData_$cfrom ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Generics.Rep Duckling.Temperature.Types.TemperatureData x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fGenericTemperatureData1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Temperature.Types.TemperatureData>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "TemperatureData"
                                       "Duckling.Temperature.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "unit")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (GHC.Base.Maybe
                                                 Duckling.Temperature.Types.TemperatureUnit))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "value")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Int)))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "minValue")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Int))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "maxValue")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   GHC.Types.Int))))>_R))
                          (Sub (Sym (Duckling.Temperature.Types.Rep_TemperatureData[0]))) <x>_N) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fGenericTemperatureData_$cto ::
    GHC.Generics.Rep Duckling.Temperature.Types.TemperatureData x
    -> Duckling.Temperature.Types.TemperatureData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Duckling.Temperature.Types.TemperatureData x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Temperature.Types.Rep_TemperatureData[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "TemperatureData"
                                        "Duckling.Temperature.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "unit")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               (GHC.Base.Maybe
                                                  Duckling.Temperature.Types.TemperatureUnit))
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "value")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Int)))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "minValue")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Int))
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "maxValue")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    GHC.Types.Int))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "unit")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (GHC.Base.Maybe
                                               Duckling.Temperature.Types.TemperatureUnit))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "value")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Int)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "minValue")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Int))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "maxValue")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 GHC.Types.Int)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Duckling.Temperature.Types.TemperatureData
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "unit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R
                                (GHC.Base.Maybe
                                   Duckling.Temperature.Types.TemperatureUnit)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit>_R
                             <x>_P))
                   ds4
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "minValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "maxValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe GHC.Types.Int>_R
                             <x>_P)) } } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fGenericTemperatureUnit ::
    GHC.Generics.Generic Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fGenericTemperatureUnit_$cfrom
                  Duckling.Temperature.Types.$fGenericTemperatureUnit_$cto -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fGenericTemperatureUnit1 ::
    Duckling.Temperature.Types.TemperatureUnit
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case x1 of wild {
                   Duckling.Temperature.Types.Degree
                   -> Duckling.Temperature.Types.$fGenericTemperatureUnit6 @ x
                   Duckling.Temperature.Types.Celsius
                   -> Duckling.Temperature.Types.$fGenericTemperatureUnit4 @ x
                   Duckling.Temperature.Types.Fahrenheit
                   -> Duckling.Temperature.Types.$fGenericTemperatureUnit2 @ x }) -}
52ebf398d90da4ae82e24254fed37422
  $fGenericTemperatureUnit2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Temperature.Types.$fGenericTemperatureUnit3 @ x)) -}
b295e20be68cc06886ecac8b4b7a81f9
  $fGenericTemperatureUnit3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
f3b7e7c827d26774fe1d6b84d4d60a41
  $fGenericTemperatureUnit4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Temperature.Types.$fGenericTemperatureUnit5 @ x)) -}
31ad5d227c015a5c1175aaffc7593692
  $fGenericTemperatureUnit5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
fd4690982d0ba1b20d8c5483d6023d42
  $fGenericTemperatureUnit6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fGenericTemperatureUnit_$cfrom ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Generics.Rep Duckling.Temperature.Types.TemperatureUnit x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fGenericTemperatureUnit1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Temperature.Types.TemperatureUnit>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "TemperatureUnit"
                                       "Duckling.Temperature.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: (GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "Celsius"
                                                            'GHC.Generics.PrefixI
                                                            'GHC.Types.False)
                                                         GHC.Generics.U1
                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                          GHC.Generics.C
                                                                          ('GHC.Generics.MetaCons
                                                                             "Fahrenheit"
                                                                             'GHC.Generics.PrefixI
                                                                             'GHC.Types.False)
                                                                          GHC.Generics.U1)>_R))
                          (Sub (Sym (Duckling.Temperature.Types.Rep_TemperatureUnit[0]))) <x>_N) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fGenericTemperatureUnit_$cto ::
    GHC.Generics.Rep Duckling.Temperature.Types.TemperatureUnit x
    -> Duckling.Temperature.Types.TemperatureUnit
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Duckling.Temperature.Types.TemperatureUnit x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Temperature.Types.Rep_TemperatureUnit[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "TemperatureUnit"
                                   "Duckling.Temperature.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: (GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Celsius"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1
                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                      GHC.Generics.C
                                                                      ('GHC.Generics.MetaCons
                                                                         "Fahrenheit"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Temperature.Types.Degree }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of tpl { DEFAULT ->
                           Duckling.Temperature.Types.Celsius }
                        GHC.Generics.R1 ds2
                        -> case ds2 of tpl { DEFAULT ->
                           Duckling.Temperature.Types.Fahrenheit } } }) -}
5740021d98ff92f4e1fbda904276c301
  $fHashableIntervalDirection ::
    Data.Hashable.Class.Hashable
      Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.IntervalDirection
                  Duckling.Temperature.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
                  Duckling.Temperature.Types.$fHashableIntervalDirection_$chash -}
ef3d35fa8a7718e7d5310d028793b98f
  $fHashableIntervalDirection1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fHashableIntervalDirection2
                  `cast`
                (Sym (Data.Hashable.Class.N:GHashable[0]
                          <Data.Hashable.Class.Zero>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Temperature.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
c234600f0bf9e8df5c8f68d9c7a06cb5
  $fHashableIntervalDirection2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> GHC.Generics.M1
         GHC.Generics.D
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (targs :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (salt :: GHC.Types.Int)
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case salt of ww { GHC.Types.I# ww1 ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#) }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                           16777619#) } } }) -}
5740021d98ff92f4e1fbda904276c301
  $fHashableIntervalDirection_$chash ::
    Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Temperature.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Temperature.Types.Above
                   -> GHC.Types.I# -7234408896634655932#
                   Duckling.Temperature.Types.Under
                   -> GHC.Types.I# -7234408896617878313# }) -}
5740021d98ff92f4e1fbda904276c301
  $fHashableIntervalDirection_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Temperature.Types.IntervalDirection) ->
                 Duckling.Temperature.Types.$fHashableIntervalDirection1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Temperature.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Temperature.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fHashableTemperatureData ::
    Data.Hashable.Class.Hashable
      Duckling.Temperature.Types.TemperatureData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fHashableTemperatureData_$chashWithSalt
                  Duckling.Temperature.Types.$fHashableTemperatureData_$chash -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fHashableTemperatureData_$chash ::
    Duckling.Temperature.Types.TemperatureData -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Temperature.Types.$fHashableTemperatureData_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fHashableTemperatureData_$chashWithSalt ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(SSSS),1*U(1*U,1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Temperature.Types.TemperatureData ww3 ww4 ww5 ww6 ->
                 case Duckling.Temperature.Types.$w$chashWithSalt
                        ww1
                        ww3
                        ww4
                        ww5
                        ww6 of ww7 { DEFAULT ->
                 GHC.Types.I# ww7 } } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fHashableTemperatureUnit ::
    Data.Hashable.Class.Hashable
      Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fHashableTemperatureUnit_$s$dmhashWithSalt
                  Duckling.Temperature.Types.$fHashableTemperatureUnit_$chash -}
def3378bdedca367ee8f8c6fb646f16d
  $fHashableTemperatureUnit1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "TemperatureUnit"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Fahrenheit"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1)))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fHashableTemperatureUnit2
                  `cast`
                (Sym (Data.Hashable.Class.N:GHashable[0]
                          <Data.Hashable.Class.Zero>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "TemperatureUnit"
                                "Duckling.Temperature.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: (GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Celsius"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1
                                                GHC.Generics.:+: GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Fahrenheit"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1))>_N)) -}
31d8656677ae2fac559d75d404c6604e
  $fHashableTemperatureUnit2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> GHC.Generics.M1
         GHC.Generics.D
         ('GHC.Generics.MetaData
            "TemperatureUnit"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Fahrenheit"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1))
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Generics.M1
                            GHC.Generics.D
                            ('GHC.Generics.MetaData
                               "TemperatureUnit"
                               "Duckling.Temperature.Types"
                               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                               'GHC.Types.False)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: (GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Celsius"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 GHC.Generics.U1
                                               GHC.Generics.:+: GHC.Generics.C1
                                                                  ('GHC.Generics.MetaCons
                                                                     "Fahrenheit"
                                                                     'GHC.Generics.PrefixI
                                                                     'GHC.Types.False)
                                                                  GHC.Generics.U1))
                            a1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2
                        `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "TemperatureUnit"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1
                                              GHC.Generics.:+: GHC.Generics.C1
                                                                 ('GHC.Generics.MetaCons
                                                                    "Fahrenheit"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1)>_R <a1>_N) of wild {
                   GHC.Generics.L1 x
                   -> case x of tpl { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#) }
                   GHC.Generics.R1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1
                        -> case x1 of tpl { DEFAULT ->
                           GHC.Types.I#
                             (GHC.Prim.*#
                                (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                                16777619#) }
                        GHC.Generics.R1 x1
                        -> case x1 of tpl { DEFAULT ->
                           GHC.Types.I#
                             (GHC.Prim.*#
                                (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 2#)
                                16777619#) } } } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fHashableTemperatureUnit_$chash ::
    Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case x of wild {
                   Duckling.Temperature.Types.Degree
                   -> GHC.Types.I# -7234408896634655932#
                   Duckling.Temperature.Types.Celsius
                   -> GHC.Types.I# -7234408896617878313#
                   Duckling.Temperature.Types.Fahrenheit
                   -> GHC.Types.I# -7234408896601100694# }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fHashableTemperatureUnit_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Temperature.Types.TemperatureUnit) ->
                 Duckling.Temperature.Types.$fHashableTemperatureUnit1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Temperature.Types.Rep_TemperatureUnit[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Temperature.Types.$fGenericTemperatureUnit_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
5740021d98ff92f4e1fbda904276c301
  $fNFDataIntervalDirection ::
    Control.DeepSeq.NFData Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Temperature.Types.$fNFDataIntervalDirection_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Temperature.Types.IntervalDirection>_N)) -}
e7f2691503ec0d7f866f8314807f6a04
  $fNFDataIntervalDirection1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fNFDataIntervalDirection2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Temperature.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
b3485c84b4d678d57bbb063433f490a4
  $fNFDataIntervalDirection2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "IntervalDirection"
         "Duckling.Temperature.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }) -}
5740021d98ff92f4e1fbda904276c301
  $fNFDataIntervalDirection_$s$dmrnf ::
    Duckling.Temperature.Types.IntervalDirection -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Temperature.Types.IntervalDirection) ->
                 Duckling.Temperature.Types.$fNFDataIntervalDirection1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N
                      (Sym (Duckling.Temperature.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Duckling.Temperature.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fNFDataTemperatureData ::
    Control.DeepSeq.NFData Duckling.Temperature.Types.TemperatureData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Temperature.Types.$fNFDataTemperatureData_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Temperature.Types.TemperatureData>_N)) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fNFDataTemperatureData_$crnf ::
    Duckling.Temperature.Types.TemperatureData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 Duckling.Temperature.Types.$w$crnf ww1 ww2 ww3 ww4 }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fNFDataTemperatureUnit ::
    Control.DeepSeq.NFData Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Temperature.Types.$fNFDataTemperatureUnit_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Temperature.Types.TemperatureUnit>_N)) -}
17f8c65d8b743612fd79d7042b618475
  $fNFDataTemperatureUnit1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "TemperatureUnit"
            "Duckling.Temperature.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Fahrenheit"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1)))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.$fNFDataTemperatureUnit2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "TemperatureUnit"
                                "Duckling.Temperature.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: (GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Celsius"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1
                                                GHC.Generics.:+: GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "Fahrenheit"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1))>_N)) -}
9207fd97e7e413bbdf0cdbafc50bc34c
  $fNFDataTemperatureUnit2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "TemperatureUnit"
         "Duckling.Temperature.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.C1
                           ('GHC.Generics.MetaCons
                              "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.C1
                                            ('GHC.Generics.MetaCons
                                               "Fahrenheit" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "TemperatureUnit"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1
                                              GHC.Generics.:+: GHC.Generics.C1
                                                                 ('GHC.Generics.MetaCons
                                                                    "Fahrenheit"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1))
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "TemperatureUnit"
                              "Duckling.Temperature.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                GHC.Generics.U1
                                              GHC.Generics.:+: GHC.Generics.C1
                                                                 ('GHC.Generics.MetaCons
                                                                    "Fahrenheit"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1)>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                   GHC.Generics.R1 x1
                   -> case x1 of wild1 {
                        GHC.Generics.L1 x2 -> case x2 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x2
                        -> case x2 of tpl { DEFAULT -> GHC.Tuple.() } } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fNFDataTemperatureUnit_$s$dmrnf ::
    Duckling.Temperature.Types.TemperatureUnit -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Temperature.Types.TemperatureUnit) ->
                 Duckling.Temperature.Types.$fNFDataTemperatureUnit1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N
                      (Sym (Duckling.Temperature.Types.Rep_TemperatureUnit[0])))
                   @ GHC.Prim.Any
                   (Duckling.Temperature.Types.$fGenericTemperatureUnit_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection ::
    GHC.Classes.Ord Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.IntervalDirection
                  Duckling.Temperature.Types.$fEqIntervalDirection
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$ccompare
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$c<
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$c<=
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$c>
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$c>=
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$cmax
                  Duckling.Temperature.Types.$fOrdIntervalDirection_$cmin -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$c< ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.False
                        Duckling.Temperature.Types.Under -> GHC.Types.True }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$c<= ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.False
                        Duckling.Temperature.Types.Under -> GHC.Types.True } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$c> ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.True
                        Duckling.Temperature.Types.Under -> GHC.Types.False } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$c>= ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.True
                        Duckling.Temperature.Types.Under -> GHC.Types.False }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$ccompare ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.IntervalDirection)
                   (b :: Duckling.Temperature.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Temperature.Types.Above
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.EQ
                        Duckling.Temperature.Types.Under -> GHC.Types.LT }
                   Duckling.Temperature.Types.Under
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Above -> GHC.Types.GT
                        Duckling.Temperature.Types.Under -> GHC.Types.EQ } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$cmax ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.IntervalDirection)
                   (y :: Duckling.Temperature.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Temperature.Types.Above -> y
                   Duckling.Temperature.Types.Under
                   -> case y of wild1 { DEFAULT ->
                      Duckling.Temperature.Types.Under } }) -}
5740021d98ff92f4e1fbda904276c301
  $fOrdIntervalDirection_$cmin ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.IntervalDirection)
                   (y :: Duckling.Temperature.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Temperature.Types.Above
                   -> case y of wild1 { DEFAULT -> Duckling.Temperature.Types.Above }
                   Duckling.Temperature.Types.Under -> y }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData ::
    GHC.Classes.Ord Duckling.Temperature.Types.TemperatureData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fEqTemperatureData
                  Duckling.Temperature.Types.$fOrdTemperatureData_$ccompare
                  Duckling.Temperature.Types.$fOrdTemperatureData_$c<
                  Duckling.Temperature.Types.$fOrdTemperatureData_$c<=
                  Duckling.Temperature.Types.$fOrdTemperatureData_$c>
                  Duckling.Temperature.Types.$fOrdTemperatureData_$c>=
                  Duckling.Temperature.Types.$fOrdTemperatureData_$cmax
                  Duckling.Temperature.Types.$fOrdTemperatureData_$cmin -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$c< ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$c<
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$c<= ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$c<=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$c> ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$c>
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$c>= ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$c>=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$ccompare ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureData)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Temperature.Types.TemperatureData ww6 ww7 ww8 ww9 ->
                 Duckling.Temperature.Types.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$cmax ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureData)
                   (y :: Duckling.Temperature.Types.TemperatureData) ->
                 case Duckling.Temperature.Types.$fOrdTemperatureData_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fOrdTemperatureData_$cmin ::
    Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData
    -> Duckling.Temperature.Types.TemperatureData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureData)
                   (y :: Duckling.Temperature.Types.TemperatureData) ->
                 case Duckling.Temperature.Types.$fOrdTemperatureData_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit ::
    GHC.Classes.Ord Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fEqTemperatureUnit
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$ccompare
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$c<
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$c<=
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$c>
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$c>=
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$cmax
                  Duckling.Temperature.Types.$fOrdTemperatureUnit_$cmin -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$c< ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.False
                        Duckling.Temperature.Types.Celsius -> GHC.Types.True
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$c<= ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.False
                        Duckling.Temperature.Types.Celsius -> GHC.Types.True
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$c> ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.True
                        Duckling.Temperature.Types.Celsius -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$c>= ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.True
                        Duckling.Temperature.Types.Celsius -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$ccompare ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Temperature.Types.TemperatureUnit)
                   (b :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case a of wild {
                   Duckling.Temperature.Types.Degree
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.EQ
                        Duckling.Temperature.Types.Celsius -> GHC.Types.LT
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.LT }
                   Duckling.Temperature.Types.Celsius
                   -> case b of wild1 {
                        Duckling.Temperature.Types.Degree -> GHC.Types.GT
                        Duckling.Temperature.Types.Celsius -> GHC.Types.EQ
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.LT }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Temperature.Types.Fahrenheit -> GHC.Types.EQ } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$cmax ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureUnit)
                   (y :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case x of wild {
                   Duckling.Temperature.Types.Degree -> y
                   Duckling.Temperature.Types.Celsius
                   -> case y of wild1 {
                        DEFAULT -> Duckling.Temperature.Types.Celsius
                        Duckling.Temperature.Types.Fahrenheit
                        -> Duckling.Temperature.Types.Fahrenheit }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case y of wild1 { DEFAULT ->
                      Duckling.Temperature.Types.Fahrenheit } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fOrdTemperatureUnit_$cmin ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureUnit)
                   (y :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case x of wild {
                   Duckling.Temperature.Types.Degree
                   -> case y of wild1 { DEFAULT -> Duckling.Temperature.Types.Degree }
                   Duckling.Temperature.Types.Celsius
                   -> case y of wild1 {
                        Duckling.Temperature.Types.Degree
                        -> Duckling.Temperature.Types.Degree
                        Duckling.Temperature.Types.Celsius
                        -> Duckling.Temperature.Types.Celsius
                        Duckling.Temperature.Types.Fahrenheit
                        -> Duckling.Temperature.Types.Celsius }
                   Duckling.Temperature.Types.Fahrenheit -> y }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fResolveTemperatureData ::
    Duckling.Resolve.Resolve Duckling.Temperature.Types.TemperatureData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fEqTemperatureValue
                    `cast`
                  (GHC.Classes.Eq
                     (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))_R
                  Duckling.Temperature.Types.$fShowTemperatureValue
                    `cast`
                  (GHC.Show.Show
                     (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))_R
                  Duckling.Temperature.Types.$fToJSONTemperatureValue
                    `cast`
                  (Data.Aeson.Types.ToJSON.ToJSON
                     (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))_R
                  Duckling.Temperature.Types.$fResolveTemperatureData_$cresolve -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fResolveTemperatureData_$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Temperature.Types.TemperatureData
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue
            Duckling.Temperature.Types.TemperatureData,
          GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(SLLL),1*U(1*U,1*U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Resolve.Context)
                   (w1 :: Duckling.Resolve.Options)
                   (w2 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w2 of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 Duckling.Temperature.Types.$w$cresolve ww1 ww2 ww3 ww4 }) -}
5740021d98ff92f4e1fbda904276c301
  $fShowIntervalDirection ::
    GHC.Show.Show Duckling.Temperature.Types.IntervalDirection
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.IntervalDirection
                  Duckling.Temperature.Types.$fShowIntervalDirection_$cshowsPrec
                  Duckling.Temperature.Types.$fShowIntervalDirection_$cshow
                  Duckling.Temperature.Types.$fShowIntervalDirection_$cshowList -}
5740021d98ff92f4e1fbda904276c301
  $fShowIntervalDirection1 ::
    Duckling.Temperature.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Temperature.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Temperature.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Temperature.Types.$fShowIntervalDirection3)
                        eta
                   Duckling.Temperature.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Temperature.Types.$fShowIntervalDirection2)
                        eta }) -}
b921bca951a91ae550931cf114017ca1
  $fShowIntervalDirection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Under"#) -}
4f1297dbe2b2736c86917eecac7b4225
  $fShowIntervalDirection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Above"#) -}
5740021d98ff92f4e1fbda904276c301
  $fShowIntervalDirection_$cshow ::
    Duckling.Temperature.Types.IntervalDirection -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Temperature.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Temperature.Types.Above
                   -> Duckling.Temperature.Types.$fShowIntervalDirection3
                   Duckling.Temperature.Types.Under
                   -> Duckling.Temperature.Types.$fShowIntervalDirection2 }) -}
5740021d98ff92f4e1fbda904276c301
  $fShowIntervalDirection_$cshowList ::
    [Duckling.Temperature.Types.IntervalDirection] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Temperature.Types.IntervalDirection
                   Duckling.Temperature.Types.$fShowIntervalDirection1) -}
5740021d98ff92f4e1fbda904276c301
  $fShowIntervalDirection_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Temperature.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Temperature.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Temperature.Types.$fShowIntervalDirection3)
                        eta
                   Duckling.Temperature.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Temperature.Types.$fShowIntervalDirection2)
                        eta }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fShowSingleValue ::
    GHC.Show.Show Duckling.Temperature.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.SingleValue
                  Duckling.Temperature.Types.$fShowSingleValue_$cshowsPrec
                  Duckling.Temperature.Types.$fShowSingleValue_$cshow
                  Duckling.Temperature.Types.$fShowSingleValue_$cshowList -}
a7861b77024e3a7adc73acf872f24ec1
  $fShowSingleValue1 ::
    Duckling.Temperature.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Temperature.Types.SingleValue)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Duckling.Temperature.Types.SingleValue ww1 ww2 ->
                 Duckling.Temperature.Types.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
3fe74e664b404c83dc75122087de1ba9
  $fShowSingleValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SingleValue {"#) -}
0ba81476c32625e27a3965c32904fed3
  $fShowSingleValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
581153032010821cdd2d2fa7ae282eac
  $fShowSingleValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vValue = "#) -}
7e6ae4f46d8c0ddde95db1c8e20b6486
  $fShowSingleValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
e17baa66c982b0ba4f098386800585ae
  $fShowSingleValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vUnit = "#) -}
a7861b77024e3a7adc73acf872f24ec1
  $fShowSingleValue_$cshow ::
    Duckling.Temperature.Types.SingleValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Temperature.Types.SingleValue) ->
                 Duckling.Temperature.Types.$fShowSingleValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a7861b77024e3a7adc73acf872f24ec1
  $fShowSingleValue_$cshowList ::
    [Duckling.Temperature.Types.SingleValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Temperature.Types.SingleValue
                   Duckling.Temperature.Types.$fShowSingleValue1) -}
a7861b77024e3a7adc73acf872f24ec1
  $fShowSingleValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Temperature.Types.SingleValue)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Temperature.Types.SingleValue ww3 ww4 ->
                 Duckling.Temperature.Types.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fShowTemperatureData ::
    GHC.Show.Show Duckling.Temperature.Types.TemperatureData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureData
                  Duckling.Temperature.Types.$fShowTemperatureData_$cshowsPrec
                  Duckling.Temperature.Types.$fShowTemperatureData_$cshow
                  Duckling.Temperature.Types.$fShowTemperatureData_$cshowList -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fShowTemperatureData1 ::
    Duckling.Temperature.Types.TemperatureData -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { Duckling.Temperature.Types.TemperatureData ww1 ww2 ww3 ww4 ->
                 Duckling.Temperature.Types.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 }) -}
3c88e2af6ca0d0290605815e53213a34
  $fShowTemperatureData2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "maxValue = "#) -}
66713ef78401efd88173993a559c49dc
  $fShowTemperatureData3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "minValue = "#) -}
2cc94fafb69d9e0519b995d77d2bb96f
  $fShowTemperatureData4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "value = "#) -}
047920ff156fdaf241e80f74cbe3beee
  $fShowTemperatureData5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unit = "#) -}
9a4261e1f115c82e47ed43daaa75dba9
  $fShowTemperatureData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TemperatureData {"#) -}
ab062f3b0b6d09f7e7840eee36f2e591
  $fShowTemperatureData7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fShowTemperatureData_$cshow ::
    Duckling.Temperature.Types.TemperatureData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureData) ->
                 Duckling.Temperature.Types.$fShowTemperatureData_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fShowTemperatureData_$cshowList ::
    [Duckling.Temperature.Types.TemperatureData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Temperature.Types.TemperatureData
                   Duckling.Temperature.Types.$fShowTemperatureData1) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $fShowTemperatureData_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Temperature.Types.TemperatureData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Temperature.Types.TemperatureData ww3 ww4 ww5 ww6 ->
                 Duckling.Temperature.Types.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fShowTemperatureUnit ::
    GHC.Show.Show Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fShowTemperatureUnit_$cshowsPrec
                  Duckling.Temperature.Types.$fShowTemperatureUnit_$cshow
                  Duckling.Temperature.Types.$fShowTemperatureUnit_$cshowList -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fShowTemperatureUnit_$cshow ::
    Duckling.Temperature.Types.TemperatureUnit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case x of wild {
                   Duckling.Temperature.Types.Degree
                   -> Duckling.Temperature.Types.$fToJSONTemperatureValue7
                   Duckling.Temperature.Types.Celsius
                   -> Duckling.Temperature.Types.$fToJSONTemperatureValue5
                   Duckling.Temperature.Types.Fahrenheit
                   -> Duckling.Temperature.Types.$fToJSONTemperatureValue3 }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fShowTemperatureUnit_$cshowList ::
    [Duckling.Temperature.Types.TemperatureUnit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Temperature.Types.TemperatureUnit
                   Duckling.Temperature.Types.$w$cshowsPrec3) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fShowTemperatureUnit_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Temperature.Types.TemperatureUnit)
                   (w2 :: GHC.Base.String) ->
                 Duckling.Temperature.Types.$w$cshowsPrec3 w1 w2) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fShowTemperatureValue ::
    GHC.Show.Show Duckling.Temperature.Types.TemperatureValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureValue
                  Duckling.Temperature.Types.$fShowTemperatureValue_$cshowsPrec
                  Duckling.Temperature.Types.$fShowTemperatureValue_$cshow
                  Duckling.Temperature.Types.$fShowTemperatureValue_$cshowList -}
0b99c7b5036e054e63ff20ee0a83808c
  $fShowTemperatureValue1 ::
    Duckling.Temperature.Types.TemperatureValue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Temperature.Types.TemperatureValue)
                   (w1 :: GHC.Base.String) ->
                 Duckling.Temperature.Types.$w$cshowsPrec 0# w w1) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fShowTemperatureValue_$cshow ::
    Duckling.Temperature.Types.TemperatureValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Temperature.Types.TemperatureValue) ->
                 Duckling.Temperature.Types.$fShowTemperatureValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fShowTemperatureValue_$cshowList ::
    [Duckling.Temperature.Types.TemperatureValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Temperature.Types.TemperatureValue
                   Duckling.Temperature.Types.$fShowTemperatureValue1) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fShowTemperatureValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureValue -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Temperature.Types.TemperatureValue)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Temperature.Types.$w$cshowsPrec ww1 w1 w2 }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fToJSONSingleValue ::
    Data.Aeson.Types.ToJSON.ToJSON
      Duckling.Temperature.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.SingleValue
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                  Duckling.Temperature.Types.$fToJSONSingleValue_$ctoEncoding
                  Duckling.Temperature.Types.$fToJSONSingleValue_$ctoJSONList
                  Duckling.Temperature.Types.$fToJSONSingleValue_$ctoEncodingList -}
a7861b77024e3a7adc73acf872f24ec1
  $fToJSONSingleValue_$ctoEncoding ::
    Duckling.Temperature.Types.SingleValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Temperature.Types.SingleValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                      eta)) -}
a7861b77024e3a7adc73acf872f24ec1
  $fToJSONSingleValue_$ctoEncodingList ::
    [Duckling.Temperature.Types.SingleValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.SingleValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Temperature.Types.SingleValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Temperature.Types.SingleValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Temperature.Types.SingleValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fToJSONSingleValue_$ctoJSONList ::
    [Duckling.Temperature.Types.SingleValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.SingleValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Temperature.Types.SingleValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Temperature.Types.SingleValue
                                       c
                                       Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fToJSONTemperatureUnit ::
    Data.Aeson.Types.ToJSON.ToJSON
      Duckling.Temperature.Types.TemperatureUnit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureUnit
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2
                  Duckling.Temperature.Types.$fToJSONTemperatureUnit_$ctoEncoding
                  Duckling.Temperature.Types.$fToJSONTemperatureUnit_$ctoJSONList
                  Duckling.Temperature.Types.$fToJSONTemperatureUnit_$ctoEncodingList -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fToJSONTemperatureUnit_$ctoEncoding ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Temperature.Types.TemperatureUnit) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2
                      eta)) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fToJSONTemperatureUnit_$ctoEncodingList ::
    [Duckling.Temperature.Types.TemperatureUnit]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.TemperatureUnit]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Temperature.Types.TemperatureUnit
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Temperature.Types.TemperatureUnit)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Temperature.Types.TemperatureUnit>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fToJSONTemperatureUnit_$ctoJSONList ::
    [Duckling.Temperature.Types.TemperatureUnit]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.TemperatureUnit]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Temperature.Types.TemperatureUnit
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Temperature.Types.TemperatureUnit
                                       c
                                       Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fToJSONTemperatureValue ::
    Data.Aeson.Types.ToJSON.ToJSON
      Duckling.Temperature.Types.TemperatureValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Temperature.Types.TemperatureValue
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoEncoding
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSONList
                  Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoEncodingList -}
c1b209877169f391a9da12bef05e92cb
  $fToJSONTemperatureValue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "to"#) -}
c88aed7527dae4f649b2ca7edaf18c1b
  $fToJSONTemperatureValue10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "from"#) -}
f05e33bb92dbc6dcddf0653cb6c7b366
  $fToJSONTemperatureValue11 :: Data.Aeson.Types.Internal.Pair
  {- Strictness: m,
     Unfolding: ((Duckling.Temperature.Types.$fToJSONTemperatureValue13,
                  Duckling.Temperature.Types.$fToJSONTemperatureValue12)) -}
8f46e25e319bdcd5129d13771d801d20
  $fToJSONTemperatureValue12 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "interval"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
8eb5f2c19075c9b2673d4708ed58b28f
  $fToJSONTemperatureValue13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "type"#) -}
a33cbf2342545eca03cb2349fe188b4b
  $fToJSONTemperatureValue14 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
926c53ff121b9f69a3a4fd4ea4375b7b
  $fToJSONTemperatureValue2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Duckling.Temperature.Types.$wouter
                   ipv1
                   4#
                   Duckling.Temperature.Types.$fToJSONTemperatureValue3
                   '\NUL'#
                   '\NUL'#
                   0#
                   ipv }) -}
f5e8853df2f55e2557a2c6db3235c982
  $fToJSONTemperatureValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fahrenheit"#) -}
8c0eb57c226ae0b199c0e39a3035055a
  $fToJSONTemperatureValue4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Duckling.Temperature.Types.$wouter1
                   ipv1
                   4#
                   Duckling.Temperature.Types.$fToJSONTemperatureValue5
                   '\NUL'#
                   '\NUL'#
                   0#
                   ipv }) -}
519f029002b8536110e4c7f0413d3233
  $fToJSONTemperatureValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Celsius"#) -}
6aa8f2c5eb9b2e73276bf32f1698f5aa
  $fToJSONTemperatureValue6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 Duckling.Temperature.Types.$wouter2
                   ipv1
                   4#
                   Duckling.Temperature.Types.$fToJSONTemperatureValue7
                   '\NUL'#
                   '\NUL'#
                   0#
                   ipv }) -}
2438ed43f166d6e11defa44984b07d10
  $fToJSONTemperatureValue7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Degree"#) -}
1fd2f6545bc4052157421333fd9740e1
  $fToJSONTemperatureValue8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "unit"#) -}
bfc943cab986e9730d2547d05e7ea0be
  $fToJSONTemperatureValue9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fToJSONTemperatureValue_$ctoEncoding ::
    Duckling.Temperature.Types.TemperatureValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Temperature.Types.TemperatureValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON
                      eta)) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fToJSONTemperatureValue_$ctoEncodingList ::
    [Duckling.Temperature.Types.TemperatureValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.TemperatureValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Temperature.Types.TemperatureValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Temperature.Types.TemperatureValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON
                                              v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Temperature.Types.TemperatureValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fToJSONTemperatureValue_$ctoJSON ::
    Duckling.Temperature.Types.TemperatureValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureValue) ->
                 case Duckling.Temperature.Types.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
a7861b77024e3a7adc73acf872f24ec1
  $fToJSONTemperatureValue_$ctoJSON1 ::
    Duckling.Temperature.Types.SingleValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Temperature.Types.SingleValue) ->
                 case w of ww { Duckling.Temperature.Types.SingleValue ww1 ww2 ->
                 case Duckling.Temperature.Types.$w$ctoJSON1
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $fToJSONTemperatureValue_$ctoJSON2 ::
    Duckling.Temperature.Types.TemperatureUnit
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case Duckling.Temperature.Types.$w$ctoJSON2 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.String ww1 }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $fToJSONTemperatureValue_$ctoJSONList ::
    [Duckling.Temperature.Types.TemperatureValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Temperature.Types.TemperatureValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Temperature.Types.TemperatureValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Temperature.Types.TemperatureValue
                                       c
                                       Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
dedc39647659c7cc6d739c8851e4d619
  $tc'Above :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10387487342171053015##
                   16173372252356718578##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'Above1) -}
59829e7fb08b138e3a0306d243cbfdd5
  $tc'Above1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Above"#) -}
b2abf4d31102d44426fbcde327f307c0
  $tc'Celsius :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3059027744195739366##
                   13726693427719414615##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'Celsius1) -}
2ddd7cd812da4d00af08de93e34ce63e
  $tc'Celsius1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Celsius"#) -}
f07a6221ab1e6f4f89af560721018fde
  $tc'Degree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18046471177478327763##
                   3972244042502819793##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'Degree1) -}
41ef2bfae846b7342ffbd31f8453a18e
  $tc'Degree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Degree"#) -}
865efc5815beca7e15cd36239cd0b03e
  $tc'Fahrenheit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11912715612524095058##
                   15520977838722223572##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'Fahrenheit1) -}
31b23d2c76899547bc2737eaab6b4f1f
  $tc'Fahrenheit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fahrenheit"#) -}
dc59eee66893866ed90922528e88c60d
  $tc'IntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13852572141424782079##
                   223486452405468106##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'IntervalValue1) -}
4fb5bca6fa984c0387ab6de70f4712c2
  $tc'IntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntervalValue"#) -}
0e84e9c766a98b95f706b70d3d5d8806
  $tc'OpenIntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10780524825670184731##
                   5361929431306841446##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'OpenIntervalValue1) -}
544f67c3baf4b86af8250f3ff0abdd7f
  $tc'OpenIntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpenIntervalValue"#) -}
72b9807746965b4e9f2899575ed1a6db
  $tc'SimpleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1021425836349386687##
                   16171467584608913436##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'SimpleValue1) -}
1d937a48bc390319b7e413bd9c503c10
  $tc'SimpleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SimpleValue"#) -}
b9700932d8e2ad9ce49f56e15fccd722
  $tc'SingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8097359179838073959##
                   2294384076897914380##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'SingleValue1) -}
3d6bde04e979cb7c95d6ea687bbc843d
  $tc'SingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SingleValue"#) -}
ee8d25167119a953fe7e019b56f24d09
  $tc'TemperatureData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17541122287681345314##
                   13884946934390141440##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'TemperatureData1) -}
84c9665c505a4f28df5ddfeb7c3e2a1a
  $tc'TemperatureData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TemperatureData"#) -}
2c7941b60780012ee2d87656619b2b27
  $tc'Under :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8256963011992563206##
                   15322897378498140416##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tc'Under1) -}
8226e9619359c89a1b230f47aaf5ce5a
  $tc'Under1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Under"#) -}
b265bfb03875269ac5024c29cbc65dac
  $tcIntervalDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3909418172713873608##
                   8126142176190429677##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tcIntervalDirection1) -}
d3d1e2ba8084e1293ae3acd5f02533a1
  $tcIntervalDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntervalDirection"#) -}
5e01112031627d2708147f1264177cdf
  $tcSingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12563094124288577676##
                   12638419809469086176##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tcSingleValue1) -}
06f544fb27b96bbdd669e7276928f91b
  $tcSingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SingleValue"#) -}
cb833841b610cd9eae82e0e58c55efbc
  $tcTemperatureData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3077864143925048663##
                   9326874995587522868##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tcTemperatureData1) -}
72b39dc2100f04babb9a782fa65cdbd4
  $tcTemperatureData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TemperatureData"#) -}
5aab5af102939d20ba58539c0015e838
  $tcTemperatureUnit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9295123862341747762##
                   2443558726428250770##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tcTemperatureUnit1) -}
f02fc9995746510f5e277879257fd285
  $tcTemperatureUnit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TemperatureUnit"#) -}
bf3ade87442e76d65b129b662fb4004e
  $tcTemperatureValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1340904379515783107##
                   14338263231975573663##
                   Duckling.Temperature.Types.$trModule
                   Duckling.Temperature.Types.$tcTemperatureValue1) -}
1e8ba3a729f30f9493384145467ca7fb
  $tcTemperatureValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TemperatureValue"#) -}
ca80ce0ec49e7d0225afda82b7043c5d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Temperature.Types.$trModule2
                   Duckling.Temperature.Types.$trModule1) -}
a47a17cc1ae65f27543b1a4f4f7335b0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Temperature.Types"#) -}
c28b0e9b5290fe138a80e52ac09a4078
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
3e53ce0a8ed8e7ce659a23416de592b2
  $w$c< ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just ipv -> GHC.Types.True }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> GHC.Classes.ltInt a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.I# x# ->
                                   case b1 of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.True } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.I# x# ->
                               case b1 of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.True } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a2 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Celsius -> GHC.Types.True
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> GHC.Types.False
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
3f6d07b478fbece2408190ca9741af1b
  $w$c<= ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing
                                -> case ww3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case ww7 of wild3 { DEFAULT -> GHC.Types.True }
                                     GHC.Base.Just a2
                                     -> case ww7 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.False
                                          GHC.Base.Just b1 -> GHC.Classes.leInt a2 b1 } }
                                GHC.Base.Just ipv -> GHC.Types.True }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.I# x# ->
                                   case b1 of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True
                                          -> case ww3 of wild6 {
                                               GHC.Base.Nothing
                                               -> case ww7 of wild7 { DEFAULT -> GHC.Types.True }
                                               GHC.Base.Just a1
                                               -> case ww7 of wild7 {
                                                    GHC.Base.Nothing -> GHC.Types.False
                                                    GHC.Base.Just b2
                                                    -> GHC.Classes.leInt a1 b2 } } }
                                     GHC.Types.True -> GHC.Types.True } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.True }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.I# x# ->
                               case b1 of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.True } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a2 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Celsius -> GHC.Types.True
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> GHC.Types.False
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.True }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
c6b03ae093734bb395fe43a92164f81a
  $w$c== ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Temperature.Types.TemperatureUnit)
                   (ww3 :: GHC.Types.Int) ->
                 case ww of wild {
                   Duckling.Temperature.Types.Degree
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Degree -> GHC.Classes.eqInt ww1 ww3 }
                   Duckling.Temperature.Types.Celsius
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Celsius -> GHC.Classes.eqInt ww1 ww3 }
                   Duckling.Temperature.Types.Fahrenheit
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Temperature.Types.Fahrenheit
                        -> GHC.Classes.eqInt ww1 ww3 } }) -}
40f08a1e359561fa3903bb1c1af730b8
  $w$c==1 ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a1
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> GHC.Classes.eqInt a1 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a1
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a1 of wild2 { GHC.Types.I# x ->
                                   case b1 of wild3 { GHC.Types.I# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.==# x y) of wild4 {
                                     GHC.Types.False -> GHC.Types.False
                                     GHC.Types.True -> $j2 GHC.Prim.void# } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a1
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a1 of wild2 { GHC.Types.I# x ->
                               case b1 of wild3 { GHC.Types.I# y ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# x y) of wild4 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True -> $j1 GHC.Prim.void# } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void# }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void# }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
b9823e9f9188474488a091c41d4761a3
  $w$c> ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing
                                -> case ww3 of wild2 {
                                     GHC.Base.Nothing
                                     -> case ww7 of wild3 { DEFAULT -> GHC.Types.False }
                                     GHC.Base.Just a2
                                     -> case ww7 of wild3 {
                                          GHC.Base.Nothing -> GHC.Types.True
                                          GHC.Base.Just b1 -> GHC.Classes.gtInt a2 b1 } }
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.True
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.I# x# ->
                                   case b1 of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True
                                          -> case ww3 of wild6 {
                                               GHC.Base.Nothing
                                               -> case ww7 of wild7 { DEFAULT -> GHC.Types.False }
                                               GHC.Base.Just a1
                                               -> case ww7 of wild7 {
                                                    GHC.Base.Nothing -> GHC.Types.True
                                                    GHC.Base.Just b2
                                                    -> GHC.Classes.gtInt a1 b2 } } }
                                     GHC.Types.True -> GHC.Types.False } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.True
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.I# x# ->
                               case b1 of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.False } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case a2 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Celsius -> GHC.Types.False
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> GHC.Types.True
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
28e24b7458c1f8469efac1020d74592f
  $w$c>= ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just b1 -> GHC.Classes.geInt a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.True
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.I# x# ->
                                   case b1 of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> GHC.Types.True
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.False } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.True
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.I# x# ->
                               case b1 of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.False } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case a2 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Celsius -> GHC.Types.False
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> GHC.Types.True
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.False }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.True
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
2143ddfeec60cf9a453019b04a8acedc
  $w$ccompare ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Ordering
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Ordering
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.EQ
                                    GHC.Base.Just ipv -> GHC.Types.LT }
                               GHC.Base.Just a2
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.GT
                                    GHC.Base.Just b1 -> GHC.Classes.compareInt a2 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.LT }
                           GHC.Base.Just a2
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.GT
                                GHC.Base.Just b1
                                -> case a2 of wild2 { GHC.Types.I# x# ->
                                   case b1 of wild3 { GHC.Types.I# y# ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<# x# y#) of wild4 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x# y#) of wild5 {
                                          GHC.Types.False -> GHC.Types.GT
                                          GHC.Types.True -> $j2 GHC.Prim.void# }
                                     GHC.Types.True -> GHC.Types.LT } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.LT }
                       GHC.Base.Just a2
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.GT
                            GHC.Base.Just b1
                            -> case a2 of wild2 { GHC.Types.I# x# ->
                               case b1 of wild3 { GHC.Types.I# y# ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# x# y#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# x# y#) of wild5 {
                                      GHC.Types.False -> GHC.Types.GT
                                      GHC.Types.True -> $j1 GHC.Prim.void# }
                                 GHC.Types.True -> GHC.Types.LT } } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case a2 of wild2 {
                             Duckling.Temperature.Types.Degree
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Celsius -> GHC.Types.LT
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.LT }
                             Duckling.Temperature.Types.Celsius
                             -> case b1 of wild3 {
                                  Duckling.Temperature.Types.Degree -> GHC.Types.GT
                                  Duckling.Temperature.Types.Celsius -> $j GHC.Prim.void#
                                  Duckling.Temperature.Types.Fahrenheit -> GHC.Types.LT }
                             Duckling.Temperature.Types.Fahrenheit
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Duckling.Temperature.Types.Fahrenheit
                                  -> $j GHC.Prim.void# } } } }) -}
74306390c49dce9a0c01c52c21adf6cc
  $w$chashWithSalt ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Prim.Int#
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U><S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Prim.Int# {- Arity: 1 -}
                   = \ (ww5 :: GHC.Prim.Int#)[OneShot] ->
                     case ww2 of wild {
                       GHC.Base.Nothing
                       -> case ww3 of wild1 {
                            GHC.Base.Nothing
                            -> case ww4 of wild2 {
                                 GHC.Base.Nothing
                                 -> GHC.Prim.*#
                                      (GHC.Prim.*# (GHC.Prim.*# ww5 16777619#) 16777619#)
                                      16777619#
                                 GHC.Base.Just a1
                                 -> case a1 of wild3 { GHC.Types.I# y# ->
                                    GHC.Prim.xorI#
                                      (GHC.Prim.*#
                                         (GHC.Prim.xorI#
                                            (GHC.Prim.*#
                                               (GHC.Prim.*# (GHC.Prim.*# ww5 16777619#) 16777619#)
                                               16777619#)
                                            6148914691236517205#)
                                         16777619#)
                                      y# } }
                            GHC.Base.Just a1
                            -> case a1 of wild2 { GHC.Types.I# y# ->
                               case ww4 of wild3 {
                                 GHC.Base.Nothing
                                 -> GHC.Prim.*#
                                      (GHC.Prim.xorI#
                                         (GHC.Prim.*#
                                            (GHC.Prim.xorI#
                                               (GHC.Prim.*# (GHC.Prim.*# ww5 16777619#) 16777619#)
                                               6148914691236517205#)
                                            16777619#)
                                         y#)
                                      16777619#
                                 GHC.Base.Just a2
                                 -> case a2 of wild4 { GHC.Types.I# y#1 ->
                                    GHC.Prim.xorI#
                                      (GHC.Prim.*#
                                         (GHC.Prim.xorI#
                                            (GHC.Prim.*#
                                               (GHC.Prim.xorI#
                                                  (GHC.Prim.*#
                                                     (GHC.Prim.xorI#
                                                        (GHC.Prim.*#
                                                           (GHC.Prim.*# ww5 16777619#)
                                                           16777619#)
                                                        6148914691236517205#)
                                                     16777619#)
                                                  y#)
                                               16777619#)
                                            6148914691236517205#)
                                         16777619#)
                                      y#1 } } } }
                       GHC.Base.Just a1
                       -> case a1 of wild1 { GHC.Types.I# y# ->
                          case ww3 of wild2 {
                            GHC.Base.Nothing
                            -> case ww4 of wild3 {
                                 GHC.Base.Nothing
                                 -> GHC.Prim.*#
                                      (GHC.Prim.*#
                                         (GHC.Prim.xorI#
                                            (GHC.Prim.*#
                                               (GHC.Prim.xorI#
                                                  (GHC.Prim.*# ww5 16777619#)
                                                  6148914691236517205#)
                                               16777619#)
                                            y#)
                                         16777619#)
                                      16777619#
                                 GHC.Base.Just a2
                                 -> case a2 of wild4 { GHC.Types.I# y#1 ->
                                    GHC.Prim.xorI#
                                      (GHC.Prim.*#
                                         (GHC.Prim.xorI#
                                            (GHC.Prim.*#
                                               (GHC.Prim.*#
                                                  (GHC.Prim.xorI#
                                                     (GHC.Prim.*#
                                                        (GHC.Prim.xorI#
                                                           (GHC.Prim.*# ww5 16777619#)
                                                           6148914691236517205#)
                                                        16777619#)
                                                     y#)
                                                  16777619#)
                                               16777619#)
                                            6148914691236517205#)
                                         16777619#)
                                      y#1 } }
                            GHC.Base.Just a2
                            -> case a2 of wild3 { GHC.Types.I# y#1 ->
                               case ww4 of wild4 {
                                 GHC.Base.Nothing
                                 -> GHC.Prim.*#
                                      (GHC.Prim.xorI#
                                         (GHC.Prim.*#
                                            (GHC.Prim.xorI#
                                               (GHC.Prim.*#
                                                  (GHC.Prim.xorI#
                                                     (GHC.Prim.*#
                                                        (GHC.Prim.xorI#
                                                           (GHC.Prim.*# ww5 16777619#)
                                                           6148914691236517205#)
                                                        16777619#)
                                                     y#)
                                                  16777619#)
                                               6148914691236517205#)
                                            16777619#)
                                         y#1)
                                      16777619#
                                 GHC.Base.Just a3
                                 -> case a3 of wild5 { GHC.Types.I# y#2 ->
                                    GHC.Prim.xorI#
                                      (GHC.Prim.*#
                                         (GHC.Prim.xorI#
                                            (GHC.Prim.*#
                                               (GHC.Prim.xorI#
                                                  (GHC.Prim.*#
                                                     (GHC.Prim.xorI#
                                                        (GHC.Prim.*#
                                                           (GHC.Prim.xorI#
                                                              (GHC.Prim.*#
                                                                 (GHC.Prim.xorI#
                                                                    (GHC.Prim.*# ww5 16777619#)
                                                                    6148914691236517205#)
                                                                 16777619#)
                                                              y#)
                                                           16777619#)
                                                        6148914691236517205#)
                                                     16777619#)
                                                  y#1)
                                               16777619#)
                                            6148914691236517205#)
                                         16777619#)
                                      y#2 } } } } } }
                 } in
                 case ww1 of wild {
                   GHC.Base.Nothing -> $j (GHC.Prim.*# ww 16777619#)
                   GHC.Base.Just a1
                   -> case a1 of wild1 {
                        Duckling.Temperature.Types.Degree
                        -> $j
                             (GHC.Prim.*#
                                (GHC.Prim.*#
                                   (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6148914691236517205#)
                                   16777619#)
                                16777619#)
                        Duckling.Temperature.Types.Celsius
                        -> $j
                             (GHC.Prim.*#
                                (GHC.Prim.xorI#
                                   (GHC.Prim.*#
                                      (GHC.Prim.xorI#
                                         (GHC.Prim.*# ww 16777619#)
                                         6148914691236517205#)
                                      16777619#)
                                   1#)
                                16777619#)
                        Duckling.Temperature.Types.Fahrenheit
                        -> $j
                             (GHC.Prim.*#
                                (GHC.Prim.xorI#
                                   (GHC.Prim.*#
                                      (GHC.Prim.xorI#
                                         (GHC.Prim.*# ww 16777619#)
                                         6148914691236517205#)
                                      16777619#)
                                   2#)
                                16777619#) } }) -}
fd189d271518f110bff3b4ccf3ee2cb7
  $w$cresolve ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue
            Duckling.Temperature.Types.TemperatureData,
          GHC.Types.Bool)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> (GHC.Base.Nothing
                         @ (Duckling.Temperature.Types.TemperatureValue, GHC.Types.Bool))
                        `cast`
                      (GHC.Base.Maybe
                         ((,)
                            (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                            <GHC.Types.Bool>_R)_R)_R
                   GHC.Base.Just ipv
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> let {
                             fail :: GHC.Prim.Void#
                                     -> GHC.Base.Maybe
                                          (Duckling.Resolve.ResolvedValue
                                             Duckling.Temperature.Types.TemperatureData,
                                           GHC.Types.Bool)
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case ww3 of wild3 {
                                      GHC.Base.Nothing
                                      -> (GHC.Base.Nothing
                                            @ (Duckling.Temperature.Types.TemperatureValue,
                                               GHC.Types.Bool))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                                               <GHC.Types.Bool>_R)_R)_R
                                      GHC.Base.Just to
                                      -> (GHC.Base.Just
                                            @ (Duckling.Temperature.Types.TemperatureValue,
                                               GHC.Types.Bool)
                                            (Duckling.Temperature.Types.OpenIntervalValue
                                               (Duckling.Temperature.Types.SingleValue ipv to,
                                                Duckling.Temperature.Types.Under),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                                               <GHC.Types.Bool>_R)_R)_R }
                                 GHC.Base.Just from
                                 -> (GHC.Base.Just
                                       @ (Duckling.Temperature.Types.TemperatureValue,
                                          GHC.Types.Bool)
                                       (Duckling.Temperature.Types.OpenIntervalValue
                                          (Duckling.Temperature.Types.SingleValue ipv from,
                                           Duckling.Temperature.Types.Above),
                                        GHC.Types.False))
                                      `cast`
                                    (GHC.Base.Maybe
                                       ((,)
                                          (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                                          <GHC.Types.Bool>_R)_R)_R }
                           } in
                           case ww2 of wild2 {
                             GHC.Base.Nothing -> fail GHC.Prim.void#
                             GHC.Base.Just from
                             -> case ww3 of wild3 {
                                  GHC.Base.Nothing -> fail GHC.Prim.void#
                                  GHC.Base.Just to
                                  -> (GHC.Base.Just
                                        @ (Duckling.Temperature.Types.TemperatureValue,
                                           GHC.Types.Bool)
                                        (Duckling.Temperature.Types.IntervalValue
                                           (Duckling.Temperature.Types.SingleValue ipv from,
                                            Duckling.Temperature.Types.SingleValue ipv to),
                                         GHC.Types.False))
                                       `cast`
                                     (GHC.Base.Maybe
                                        ((,)
                                           (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                                           <GHC.Types.Bool>_R)_R)_R } }
                        GHC.Base.Just value1
                        -> (GHC.Base.Just
                              @ (Duckling.Temperature.Types.TemperatureValue, GHC.Types.Bool)
                              (Duckling.Temperature.Types.SimpleValue
                                 (Duckling.Temperature.Types.SingleValue ipv value1),
                               GHC.Types.False))
                             `cast`
                           (GHC.Base.Maybe
                              ((,)
                                 (Sub (Sym (Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData[0])))
                                 <GHC.Types.Bool>_R)_R)_R } }) -}
13e7905de34b495baaa90be9ad8a1d89
  $w$crnf ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int) ->
                 case case ww of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> case x of wild1 { DEFAULT -> GHC.Tuple.() } } of wild1 { () ->
                 case case ww1 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataInt_$crnf x } of wild2 { () ->
                 case case ww2 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataInt_$crnf x } of wild3 { () ->
                 case ww3 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x -> Control.DeepSeq.$fNFDataInt_$crnf x } } } }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Duckling.Temperature.Types.TemperatureValue
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
98d1f287ffd86747a9769ad527808db3
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Temperature.Types.TemperatureUnit)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Temperature.Types.$fShowSingleValue6
                       (let {
                          eta :: GHC.Base.String
                          = GHC.Base.++
                              @ GHC.Types.Char
                              Duckling.Temperature.Types.$fShowSingleValue5
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 Duckling.Temperature.Types.$fShowSingleValue4
                                 (case ww2 of ww3 { GHC.Types.I# ww4 ->
                                  case GHC.Show.$wshowSignedInt
                                         0#
                                         ww4
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Temperature.Types.$fShowSingleValue3
                                            x) of ww5 { (#,#) ww6 ww7 ->
                                  GHC.Types.: @ GHC.Types.Char ww6 ww7 } }))
                        } in
                        case ww1 of wild {
                          Duckling.Temperature.Types.Degree
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               Duckling.Temperature.Types.$fToJSONTemperatureValue7
                               eta
                          Duckling.Temperature.Types.Celsius
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               Duckling.Temperature.Types.$fToJSONTemperatureValue5
                               eta
                          Duckling.Temperature.Types.Fahrenheit
                          -> GHC.Base.++
                               @ GHC.Types.Char
                               Duckling.Temperature.Types.$fToJSONTemperatureValue3
                               eta })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Temperature.Types.$fShowSingleValue2
                        (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Duckling.Temperature.Types.$fShowSingleValue2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
4565fdea26ad254d77b4bdfff7054cbc
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww4 :: GHC.Base.Maybe GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Duckling.Temperature.Types.TemperatureUnit
                       Duckling.Temperature.Types.$fShowTemperatureUnit
                       Duckling.Temperature.Types.$fShowTemperatureData7
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Duckling.Temperature.Types.$fShowTemperatureData7
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Duckling.Temperature.Types.$fShowTemperatureData7
                       ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Duckling.Temperature.Types.$fShowTemperatureData7
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Temperature.Types.$fShowTemperatureData6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Temperature.Types.$fShowTemperatureData5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Temperature.Types.$fShowSingleValue5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Temperature.Types.$fShowTemperatureData4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Temperature.Types.$fShowSingleValue5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Temperature.Types.$fShowTemperatureData3
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Temperature.Types.$fShowSingleValue5
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Duckling.Temperature.Types.$fShowTemperatureData2
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Duckling.Temperature.Types.$fShowSingleValue3
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $w$cshowsPrec3 ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Temperature.Types.TemperatureUnit)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Duckling.Temperature.Types.Degree
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Temperature.Types.$fToJSONTemperatureValue7
                        w1
                   Duckling.Temperature.Types.Celsius
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Temperature.Types.$fToJSONTemperatureValue5
                        w1
                   Duckling.Temperature.Types.Fahrenheit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Temperature.Types.$fToJSONTemperatureValue3
                        w1 }) -}
0b99c7b5036e054e63ff20ee0a83808c
  $w$ctoJSON ::
    Duckling.Temperature.Types.TemperatureValue
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Temperature.Types.TemperatureValue) ->
                 case w of wild {
                   Duckling.Temperature.Types.SimpleValue value1
                   -> case value1 of ww { Duckling.Temperature.Types.SingleValue ww1 ww2 ->
                      case Duckling.Temperature.Types.$w$ctoJSON1
                             ww1
                             ww2 of ww3 { Unit# ww4 ->
                      case Duckling.Temperature.Types.$fToJSONTemperatureValue14 of v2 { DEFAULT ->
                      case Duckling.Temperature.Types.$fToJSONTemperatureValue13 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                      case Duckling.Temperature.Types.$w$sinsert
                             @ Data.Aeson.Types.Internal.Value
                             ww6
                             ww7
                             ww8
                             v2
                             ww4 of dt { DEFAULT ->
                      (# dt #) } } } } }
                   Duckling.Temperature.Types.IntervalValue ds
                   -> case ds of wild1 { (,) from to ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                Duckling.Temperature.Types.$fToJSONTemperatureValue11
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Temperature.Types.$fToJSONTemperatureValue10,
                                    Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                                      from)
                                   (GHC.Types.:
                                      @ Data.Aeson.Types.Internal.Pair
                                      (Duckling.Temperature.Types.$fToJSONTemperatureValue1,
                                       Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                                         to)
                                      (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      (# dt #) } }
                   Duckling.Temperature.Types.OpenIntervalValue ds
                   -> case ds of wild1 { (,) from ds1 ->
                      case ds1 of wild2 {
                        Duckling.Temperature.Types.Above
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Temperature.Types.$fToJSONTemperatureValue11
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Temperature.Types.$fToJSONTemperatureValue10,
                                         Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                                           from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) }
                        Duckling.Temperature.Types.Under
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Temperature.Types.$fToJSONTemperatureValue11
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Temperature.Types.$fToJSONTemperatureValue1,
                                         Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON1
                                           from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) } } } }) -}
73ebabda3ce918c48509f7de53455676
  $w$ctoJSON1 ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Temperature.Types.TemperatureUnit)
                   (ww1 :: GHC.Types.Int) ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Duckling.Temperature.Types.$fToJSONTemperatureValue9,
                            case ww1 of wild { GHC.Types.I# i ->
                            case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                            Data.Aeson.Types.Internal.Number
                              (Data.Scientific.Scientific dt 0#) } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Temperature.Types.$fToJSONTemperatureValue8,
                               Duckling.Temperature.Types.$fToJSONTemperatureValue_$ctoJSON2 ww)
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
2a30d47bf82b31b1d1a5736be8b1b907
  $w$ctoJSON2 ::
    Duckling.Temperature.Types.TemperatureUnit
    -> (# Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case case w of wild {
                        Duckling.Temperature.Types.Degree
                        -> case GHC.Magic.runRW#
                                  @ 'GHC.Types.PtrRepLifted
                                  @ Data.Text.Internal.Text
                                  Duckling.Temperature.Types.$fToJSONTemperatureValue6 of ds1 { (#,#) ipv ipv1 ->
                           ipv1 }
                        Duckling.Temperature.Types.Celsius
                        -> case GHC.Magic.runRW#
                                  @ 'GHC.Types.PtrRepLifted
                                  @ Data.Text.Internal.Text
                                  Duckling.Temperature.Types.$fToJSONTemperatureValue4 of ds1 { (#,#) ipv ipv1 ->
                           ipv1 }
                        Duckling.Temperature.Types.Fahrenheit
                        -> case GHC.Magic.runRW#
                                  @ 'GHC.Types.PtrRepLifted
                                  @ Data.Text.Internal.Text
                                  Duckling.Temperature.Types.$fToJSONTemperatureValue2 of ds1 { (#,#) ipv ipv1 ->
                           ipv1 } } of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 (# dt #) }) -}
dd8a4b4bc554a49eed47e199d0c01314
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
f18ae819ced28a02dccf6185c52d9224
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Duckling.Temperature.Types.$wpoly_go1
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
cde809b1ab6abe7ea9a2d5f41c6998f0
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 7, Strictness: <L,U><L,U><S,U><S,U><L,U><L,U><S,U>,
     Inline: [0] -}
305c8d41dc86714181edd3de184f6a07
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 7, Strictness: <L,U><L,U><S,U><S,U><L,U><L,U><S,U>,
     Inline: [0] -}
01c4d62763987a16a1ee79f916e15ad1
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 7, Strictness: <L,U><L,U><S,U><S,U><L,U><L,U><S,U>,
     Inline: [0] -}
405d1040bc1743f94de35317d8a9d846
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
fd189d271518f110bff3b4ccf3ee2cb7
  axiom D:R:ResolvedValueTemperatureData::
      Duckling.Resolve.ResolvedValue
        Duckling.Temperature.Types.TemperatureData
        = Duckling.Temperature.Types.TemperatureValue
5740021d98ff92f4e1fbda904276c301
  data IntervalDirection = Above | Under
5740021d98ff92f4e1fbda904276c301
  axiom Rep_IntervalDirection::
      GHC.Generics.Rep Duckling.Temperature.Types.IntervalDirection
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IntervalDirection"
               "Duckling.Temperature.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
fd189d271518f110bff3b4ccf3ee2cb7
  axiom Rep_TemperatureData::
      GHC.Generics.Rep Duckling.Temperature.Types.TemperatureData
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "TemperatureData"
               "Duckling.Temperature.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "TemperatureData" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "unit")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "value")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "minValue")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "maxValue")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe GHC.Types.Int)))))
2a30d47bf82b31b1d1a5736be8b1b907
  axiom Rep_TemperatureUnit::
      GHC.Generics.Rep Duckling.Temperature.Types.TemperatureUnit
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "TemperatureUnit"
               "Duckling.Temperature.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Degree" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Celsius" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Fahrenheit"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
a7861b77024e3a7adc73acf872f24ec1
  data SingleValue
    = SingleValue {vUnit :: Duckling.Temperature.Types.TemperatureUnit,
                   vValue :: GHC.Types.Int}
fd189d271518f110bff3b4ccf3ee2cb7
  data TemperatureData
    = TemperatureData {unit :: GHC.Base.Maybe
                                 Duckling.Temperature.Types.TemperatureUnit,
                       value :: GHC.Base.Maybe GHC.Types.Int,
                       minValue :: GHC.Base.Maybe GHC.Types.Int,
                       maxValue :: GHC.Base.Maybe GHC.Types.Int}
2a30d47bf82b31b1d1a5736be8b1b907
  data TemperatureUnit = Degree | Celsius | Fahrenheit
0b99c7b5036e054e63ff20ee0a83808c
  data TemperatureValue
    = SimpleValue Duckling.Temperature.Types.SingleValue
    | IntervalValue (Duckling.Temperature.Types.SingleValue,
                     Duckling.Temperature.Types.SingleValue)
    | OpenIntervalValue (Duckling.Temperature.Types.SingleValue,
                         Duckling.Temperature.Types.IntervalDirection)
bbe2905fd95c47878f5e62cf35be53e1
  above ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int -> Duckling.Temperature.Types.TemperatureValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Temperature.Types.TemperatureUnit)
                   (v :: GHC.Types.Int) ->
                 Duckling.Temperature.Types.OpenIntervalValue
                   (Duckling.Temperature.Types.SingleValue u v,
                    Duckling.Temperature.Types.Above)) -}
34553cc2aee1e903b873ecced6708d36
  between ::
    Duckling.Temperature.Types.TemperatureUnit
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Duckling.Temperature.Types.TemperatureValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Temperature.Types.TemperatureUnit)
                   (ds :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ds of wild { (,) from to ->
                 Duckling.Temperature.Types.IntervalValue
                   (Duckling.Temperature.Types.SingleValue u from,
                    Duckling.Temperature.Types.SingleValue u to) }) -}
e10ff0f235a2fdd2d2c0bdf7d3910735
  maxValue ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Temperature.Types.TemperatureData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.TemperatureData) ->
                 case ds of wild { Duckling.Temperature.Types.TemperatureData ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
e61a850d1fc4c7a9185b037a3ac22030
  minValue ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Temperature.Types.TemperatureData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.TemperatureData) ->
                 case ds of wild { Duckling.Temperature.Types.TemperatureData ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
8646d7959caf6c8384cbd72d04a350b1
  openInterval ::
    Duckling.Temperature.Types.IntervalDirection
    -> Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int
    -> Duckling.Temperature.Types.TemperatureValue
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m3,
     Unfolding: InlineRule (3, True, False)
                (\ (direction :: Duckling.Temperature.Types.IntervalDirection)
                   (u :: Duckling.Temperature.Types.TemperatureUnit)
                   (v :: GHC.Types.Int) ->
                 Duckling.Temperature.Types.OpenIntervalValue
                   (Duckling.Temperature.Types.SingleValue u v, direction)) -}
e23de80d9fcc13a90010500f0a436b94
  simple ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int -> Duckling.Temperature.Types.TemperatureValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Temperature.Types.TemperatureUnit)
                   (v :: GHC.Types.Int) ->
                 Duckling.Temperature.Types.SimpleValue
                   (Duckling.Temperature.Types.SingleValue u v)) -}
1e6d943986c2c9687cde85b2fdcb7556
  single ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int -> Duckling.Temperature.Types.SingleValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Temperature.Types.SingleValue -}
15f85c461f7a341115462067bc810ad2
  under ::
    Duckling.Temperature.Types.TemperatureUnit
    -> GHC.Types.Int -> Duckling.Temperature.Types.TemperatureValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Temperature.Types.TemperatureUnit)
                   (v :: GHC.Types.Int) ->
                 Duckling.Temperature.Types.OpenIntervalValue
                   (Duckling.Temperature.Types.SingleValue u v,
                    Duckling.Temperature.Types.Under)) -}
df1033092281d49b0b172fa7a98d99a6
  unit ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
  RecSel Left Duckling.Temperature.Types.TemperatureData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.TemperatureData) ->
                 case ds of wild { Duckling.Temperature.Types.TemperatureData ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
36e1f9d57859f0b26a5c5fb9e93b4602
  unitsAreCompatible ::
    GHC.Base.Maybe Duckling.Temperature.Types.TemperatureUnit
    -> Duckling.Temperature.Types.TemperatureUnit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe
                            Duckling.Temperature.Types.TemperatureUnit)
                   (u2 :: Duckling.Temperature.Types.TemperatureUnit) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just u1
                   -> Duckling.Temperature.Types.$fEqTemperatureUnit_$c== u1 u2 }) -}
62b5e1fada9b6443b51f2f96f597ab96
  vUnit ::
    Duckling.Temperature.Types.SingleValue
    -> Duckling.Temperature.Types.TemperatureUnit
  RecSel Left Duckling.Temperature.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.SingleValue) ->
                 case ds of wild { Duckling.Temperature.Types.SingleValue ds1 ds2 ->
                 ds1 }) -}
a5c4d6dabe7986166183a2f28b582942
  vValue :: Duckling.Temperature.Types.SingleValue -> GHC.Types.Int
  RecSel Left Duckling.Temperature.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.SingleValue) ->
                 case ds of wild { Duckling.Temperature.Types.SingleValue ds1 ds2 ->
                 ds2 }) -}
37fe467bd89a01802b59831381ffadbc
  value ::
    Duckling.Temperature.Types.TemperatureData
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Temperature.Types.TemperatureData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Temperature.Types.TemperatureData) ->
                 case ds of wild { Duckling.Temperature.Types.TemperatureData ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
instance GHC.Classes.Eq [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fEqIntervalDirection
instance GHC.Classes.Eq [Duckling.Temperature.Types.SingleValue]
  = Duckling.Temperature.Types.$fEqSingleValue
instance GHC.Classes.Eq [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fEqTemperatureData
instance GHC.Classes.Eq [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fEqTemperatureUnit
instance GHC.Classes.Eq [Duckling.Temperature.Types.TemperatureValue]
  = Duckling.Temperature.Types.$fEqTemperatureValue
instance GHC.Generics.Generic [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fGenericIntervalDirection
instance GHC.Generics.Generic [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fGenericTemperatureData
instance GHC.Generics.Generic [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fGenericTemperatureUnit
instance Data.Hashable.Class.Hashable [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fHashableIntervalDirection
instance Data.Hashable.Class.Hashable [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fHashableTemperatureData
instance Data.Hashable.Class.Hashable [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fHashableTemperatureUnit
instance Control.DeepSeq.NFData [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fNFDataIntervalDirection
instance Control.DeepSeq.NFData [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fNFDataTemperatureData
instance Control.DeepSeq.NFData [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fNFDataTemperatureUnit
instance GHC.Classes.Ord [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fOrdIntervalDirection
instance GHC.Classes.Ord [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fOrdTemperatureData
instance GHC.Classes.Ord [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fOrdTemperatureUnit
instance Duckling.Resolve.Resolve [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fResolveTemperatureData
instance GHC.Show.Show [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.$fShowIntervalDirection
instance GHC.Show.Show [Duckling.Temperature.Types.SingleValue]
  = Duckling.Temperature.Types.$fShowSingleValue
instance GHC.Show.Show [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.$fShowTemperatureData
instance GHC.Show.Show [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fShowTemperatureUnit
instance GHC.Show.Show [Duckling.Temperature.Types.TemperatureValue]
  = Duckling.Temperature.Types.$fShowTemperatureValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Temperature.Types.SingleValue]
  = Duckling.Temperature.Types.$fToJSONSingleValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.$fToJSONTemperatureUnit
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Temperature.Types.TemperatureValue]
  = Duckling.Temperature.Types.$fToJSONTemperatureValue
family instance GHC.Generics.Rep [Duckling.Temperature.Types.IntervalDirection]
  = Duckling.Temperature.Types.Rep_IntervalDirection
family instance GHC.Generics.Rep [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.Rep_TemperatureData
family instance GHC.Generics.Rep [Duckling.Temperature.Types.TemperatureUnit]
  = Duckling.Temperature.Types.Rep_TemperatureUnit
family instance Duckling.Resolve.ResolvedValue [Duckling.Temperature.Types.TemperatureData]
  = Duckling.Temperature.Types.D:R:ResolvedValueTemperatureData
"SPEC/Duckling.Temperature.Types $dmhashWithSalt @ IntervalDirection" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                                        Data.Hashable.Class.Zero
                                                                                                        (GHC.Generics.Rep
                                                                                                           Duckling.Temperature.Types.IntervalDirection))
                                                                                      ($dGeneric :: GHC.Generics.Generic
                                                                                                      Duckling.Temperature.Types.IntervalDirection)
                                                                                      ($dHashable :: Data.Hashable.Class.Hashable
                                                                                                       Duckling.Temperature.Types.IntervalDirection)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Temperature.Types.IntervalDirection
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Temperature.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
"SPEC/Duckling.Temperature.Types $dmhashWithSalt @ TemperatureUnit" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                                      Data.Hashable.Class.Zero
                                                                                                      (GHC.Generics.Rep
                                                                                                         Duckling.Temperature.Types.TemperatureUnit))
                                                                                    ($dGeneric :: GHC.Generics.Generic
                                                                                                    Duckling.Temperature.Types.TemperatureUnit)
                                                                                    ($dHashable :: Data.Hashable.Class.Hashable
                                                                                                     Duckling.Temperature.Types.TemperatureUnit)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Temperature.Types.TemperatureUnit
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Temperature.Types.$fHashableTemperatureUnit_$s$dmhashWithSalt
"SPEC/Duckling.Temperature.Types $dmrnf @ IntervalDirection" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                                             (GHC.Generics.Rep
                                                                                                Duckling.Temperature.Types.IntervalDirection))
                                                                             ($dGeneric :: GHC.Generics.Generic
                                                                                             Duckling.Temperature.Types.IntervalDirection)
                                                                             ($dNFData :: Control.DeepSeq.NFData
                                                                                            Duckling.Temperature.Types.IntervalDirection)
  Control.DeepSeq.$dmrnf @ Duckling.Temperature.Types.IntervalDirection
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Temperature.Types.$fNFDataIntervalDirection_$s$dmrnf
"SPEC/Duckling.Temperature.Types $dmrnf @ TemperatureUnit" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                                           (GHC.Generics.Rep
                                                                                              Duckling.Temperature.Types.TemperatureUnit))
                                                                           ($dGeneric :: GHC.Generics.Generic
                                                                                           Duckling.Temperature.Types.TemperatureUnit)
                                                                           ($dNFData :: Control.DeepSeq.NFData
                                                                                          Duckling.Temperature.Types.TemperatureUnit)
  Control.DeepSeq.$dmrnf @ Duckling.Temperature.Types.TemperatureUnit
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Temperature.Types.$fNFDataTemperatureUnit_$s$dmrnf
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

