
==================== FINAL INTERFACE ====================
2019-03-14 03:01:04.831956 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Rules 8002
  interface hash: c51a8dd762cb4b3955c346374a9f604e
  ABI hash: b738d8b3a8583f060ea00c72719cbd79
  export-list hash: 49fc8d29552b12ad7cfe73a1249f46e9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3541a644a8de1b5fef5fc160ae4463a0
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Volume.Rules.rules
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Dimensions.Types
                     Duckling.Distance.Types Duckling.Duration.Types
                     Duckling.Email.Types Duckling.Gender.Types Duckling.Identity.Types
                     Duckling.Locale Duckling.Numeral.Helpers Duckling.Numeral.Types
                     Duckling.Ordinal.Types Duckling.PhoneNumber.Types
                     Duckling.Quantity.Types Duckling.Regex.Types Duckling.Region
                     Duckling.Resolve Duckling.Temperature.Types Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Helpers Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Numeral.Helpers bd0dabecd11987616dc666a3e43dd924
  exports: e7d47526dd2b06e4e1d94c237fe469a9
  isPositive 833c10b9c2bf07ab2b69a2d355712775
import  -/  Duckling.Numeral.Types 5130bfd045a9ca6085fec0a42ae9c523
  exports: 94344b1dfc906561c4234f30cd403539
  NumeralData eed9cb1fe0950cfcb945c3cf09694611
  value 8ada7f17e1d24c76a72ee8a3669186b6
import  -/  Duckling.Regex.Types 02ee061ffbed7bfe03850219af82e91c
  exports: d44c9c4af09e2c2530be2e20de544b1d
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  Numeral 37ea753945466ebddfe8bb90136c8911
  Predicate 7b23b72c5da11bf15a4943a8b0a1fdb3
  Rule 68f6ad16b93bf0573b6e6f063820cf0e
  Rule 876893268fb58123567a47e946b5b6ba
  Token ed5ab3414f0516bc6b6fd996e839d3c3
  Volume 1bbe3c6f98dd4b6af5e1c3ee1583b7c5
  dimension d0737f4b2a091d17072dfde26c2eb47c
  name 76f427769b73e82db2c2df59caa60288
  pattern 6666cdf07a41b137593bc737023ac7f1
  prod a4c6750bd517e049c9ce8428e1e5dff2
  regex c51097368a8c266ad9942dc9e3370fd5
import  -/  Duckling.Volume.Helpers c86e605b7f3630d1400f24f2ecc2bc6f
  exports: 994c8120e734bff867adbdd5b8c75da0
  isSimpleVolume 78dced32c1195525d4a2cac362cbafbe
  isUnitOnly c43136bd4b791329a980753e60c42a00
  unitOnly f1e777ea48851bbaf133f3c996252831
  valueOnly 823a963bd18c4e7a2ebe05f9b70df582
  volume c51180581f8eee8a54082e3554b15b2b
  withInterval 46856163a94ed68c6f4296dcb5026dc0
  withMax f742cb0ac26054dc62fb575436dcd584
  withMin 2b595febdb79e318f9c6205472891aab
import  -/  Duckling.Volume.Types 8412d0594bcecaf2ab681fc053d8728a
  exports: 062fe928140f44e90221a1822b5f6fc9
  Gallon 0df1ea37b8f3d7f0a8b6458e9fa869a9
  Hectolitre 44ed037e2aed8137139a7164fa48b8d2
  Litre 174fa3d10c7c32593e4f7aaf2edc2237
  Millilitre 0fc06f52472d6f725d5e4d29d06c4a0c
  Unit 5738d6f6e95b9f3dd848988e75dc6877
  VolumeData 7b7725bd78a4d6c5656281f451641b45
  unit d2a7897ebb2bfb47c9173cd12f0da302
  value 3347c4e3a544a76ba8e4ec0df6371309
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
3247141289ddd694c4bca88a1c4af1ff
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Volume.Rules.$trModule2
                   Duckling.Volume.Rules.$trModule1) -}
7dc3b6c1edfc4227a948819be4492631
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Volume.Rules"#) -}
47c494f4ab69d41133264d64d266ee3e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
952cd5e5dbf53512f5c6a30c1ff1b014
  $wc ::
    Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Types.Double
    -> (# Data.Text.Internal.Text, Duckling.Types.Pattern,
          Duckling.Types.Production #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Double) ->
                 (# ww,
                    GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww1)
                      Duckling.Volume.Rules.rules23,
                    \ (ds :: [Duckling.Types.Token]) ->
                    case ds of wild {
                      [] -> GHC.Base.Nothing @ Duckling.Types.Token
                      : ds1 ds2
                      -> case ds2 of wild1 {
                           [] -> GHC.Base.Nothing @ Duckling.Types.Token
                           : ds3 ds4
                           -> case ds3 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 ds6 ->
                              case ds5 of wild3 {
                                DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                Duckling.Types.Volume cobox0
                                -> case ds6
                                          `cast`
                                        (Sub cobox0) of wild4 { Duckling.Volume.Types.VolumeData ds7 ds8 ds9 ds10 ->
                                   case ds8 of wild5 {
                                     GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                     GHC.Base.Just u
                                     -> GHC.Base.Just
                                          @ Duckling.Types.Token
                                          (Duckling.Types.Token
                                             @ Duckling.Volume.Types.VolumeData
                                             $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                             $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                             $dHashable
                                               `cast`
                                             (Data.Hashable.Class.Hashable cobox0)_R
                                             $dShow `cast` (GHC.Show.Show cobox0)_R
                                             $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                             Duckling.Types.$WVolume
                                             (Duckling.Volume.Helpers.volume
                                                u
                                                ww2)) } } } } } } #)) -}
29f91272f6b59a7078105ee23d33e11e
  rules :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules142
                   Duckling.Volume.Rules.rules1) -}
b23e7b804fd5606c1dabd2c9ab5a5993
  rules1 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules138
                   Duckling.Volume.Rules.rules2) -}
e7bf77edf965337944e5f8e26ebd8b66
  rules10 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules64
                   Duckling.Volume.Rules.rules11) -}
b204319b1f392a6978254a815cc427f7
  rules100 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules106
                   Duckling.Volume.Rules.rules101) -}
090b8f95845ef46dff1b047554c1604e
  rules101 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules86
                   Duckling.Volume.Rules.rules102) -}
3d7393639d78b13ff660bd14bd505488
  rules102 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules103
                   Duckling.Volume.Rules.rules85) -}
d67f6d26491c6fa7f6db8b6e17dbd96d
  rules103 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules104) -}
2b7df66be82d791883c28facf057ac69
  rules104 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules105) -}
d622d4df819ee16f0a8dd65f3537b700
  rules105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "to|and"#) -}
455bbe74a7135909a6b8a4e12695bf58
  rules106 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules107) -}
3dbe1659b3b496cb10077b82844d2263
  rules107 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules108) -}
dcc4d0cc2cb4fecee6b954b9d181c812
  rules108 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "between|from"#) -}
5ca1f8c896be51de14942f9beadc24d3
  rules109 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "between|from <volume> to|and <volume>"#) -}
10fab227a6152cb5fad3c18ade13309a
  rules11 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules54
                   Duckling.Volume.Rules.rules12) -}
7f36f16e4317111e01a21697c3597845
  rules110 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules115
                   Duckling.Volume.Rules.rules112
                   Duckling.Volume.Rules.rules111) -}
79da7edb7fc2c2b40b8abbea6c13c053
  rules111 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds3 ds4
                        -> case ds3 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 ds6 ->
                           case ds5 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Numeral cobox0
                             -> case ds6
                                       `cast`
                                     (Sub cobox0) of wild4 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                case ds4 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds11 ds12
                                  -> case ds12 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds13 ds14
                                       -> case ds13 of wild7 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds15 ds16 ->
                                          case ds15 of wild8 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Volume cobox1
                                            -> case ds16
                                                      `cast`
                                                    (Sub cobox1) of wild9 { Duckling.Volume.Types.VolumeData ds17 ds18 ds19 ds20 ->
                                               case ds17 of wild10 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just to
                                                 -> case ds18 of wild11 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just u
                                                      -> case ds7 of wild12 { GHC.Types.D# x ->
                                                         case to of wild13 { GHC.Types.D# y ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.<## x y) of wild14 {
                                                           GHC.Types.False
                                                           -> GHC.Base.Nothing
                                                                @ Duckling.Types.Token
                                                           GHC.Types.True
                                                           -> GHC.Base.Just
                                                                @ Duckling.Types.Token
                                                                (Duckling.Types.Token
                                                                   @ Duckling.Volume.Types.VolumeData
                                                                   $dResolve1
                                                                     `cast`
                                                                   (Duckling.Resolve.Resolve
                                                                      cobox1)_R
                                                                   $dEq1
                                                                     `cast`
                                                                   (GHC.Classes.Eq cobox1)_R
                                                                   $dHashable1
                                                                     `cast`
                                                                   (Data.Hashable.Class.Hashable
                                                                      cobox1)_R
                                                                   $dShow1
                                                                     `cast`
                                                                   (GHC.Show.Show cobox1)_R
                                                                   $dNFData1
                                                                     `cast`
                                                                   (Control.DeepSeq.NFData cobox1)_R
                                                                   Duckling.Types.$WVolume
                                                                   (Duckling.Volume.Types.VolumeData
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Double)
                                                                      wild11
                                                                      (GHC.Base.Just
                                                                         @ GHC.Types.Double
                                                                         wild12)
                                                                      wild10)) } } } } } } } } } } } } } } }) -}
1e817d6e4b0db978079c037d2c9da8f8
  rules112 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules106
                   Duckling.Volume.Rules.rules113) -}
25bc1abc9ab3e3659ece0468dce446f6
  rules113 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules114
                   Duckling.Volume.Rules.rules102) -}
f5f91d0a412cff92250a2b576e873f9a
  rules114 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Numeral.Helpers.isPositive) -}
92dda4a5e3a792c777a34925b1d957f0
  rules115 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "between|from <numeral> and|to <volume>"#) -}
6539a480a66a583914727820db317688
  rules116 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules125
                   Duckling.Volume.Rules.rules118
                   Duckling.Volume.Rules.rules117) -}
5569866d16fb24677f098e0eb090d72a
  rules117 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds3 -> GHC.Base.Just @ Duckling.Types.Token token } }) -}
79bc55eda66c9cd36086ec47b781e3fc
  rules118 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules122
                   Duckling.Volume.Rules.rules119) -}
42b7f9410a367e71e39ed1c53085525b
  rules119 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules120
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
17da4c049c4909130c8e7cbc1280968a
  rules12 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules45
                   Duckling.Volume.Rules.rules13) -}
ddb547e7f5f17d156228e0ca06685446
  rules120 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Volume.Rules.rules121) -}
1955299eef5725d16bd29ad9406278c5
  rules121 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Volume cobox1 -> GHC.Types.True } }) -}
8d7912170b287f75b52598abe7f9d422
  rules122 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules123) -}
697df91da24def1c216c98ac261471e4
  rules123 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules124) -}
7e496f4f248b28bba063d147a1d500bb
  rules124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\\~|exactly|precisely|about|approx(\\.|imately)?|close to|near( to)?|around|almost"#) -}
e93bc38689299dc0333cab980895c24c
  rules125 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "about <volume>"#) -}
e6092be5646235a7ffde34ec60f2761f
  rules126 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules133
                   Duckling.Volume.Rules.rules128
                   Duckling.Volume.Rules.rules127) -}
87ce4869b5340041904c23282546ac92
  rules127 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds1 of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 ds4 ->
                      case ds3 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Volume cobox0
                        -> case ds4
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Volume.Types.VolumeData ds5 ds6 ds7 ds8 ->
                           case ds5 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just from
                             -> case ds6 of wild5 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just u1
                                  -> case ds2 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds9 ds10
                                       -> case ds10 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds11 ds12
                                            -> case ds11 of wild8 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds13 ds14 ->
                                               case ds13 of wild9 {
                                                 DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 Duckling.Types.Volume cobox1
                                                 -> case ds14
                                                           `cast`
                                                         (Sub cobox1) of wild10 { Duckling.Volume.Types.VolumeData ds15 ds16 ds17 ds18 ->
                                                    case ds15 of wild11 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just to
                                                      -> case ds16 of wild12 {
                                                           GHC.Base.Nothing
                                                           -> GHC.Base.Nothing
                                                                @ Duckling.Types.Token
                                                           GHC.Base.Just u2
                                                           -> case from of wild13 { GHC.Types.D# x ->
                                                              case to of wild14 { GHC.Types.D# y ->
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.<## x y) of wild15 {
                                                                GHC.Types.False
                                                                -> GHC.Base.Nothing
                                                                     @ Duckling.Types.Token
                                                                GHC.Types.True
                                                                -> case u1 of wild16 {
                                                                     Duckling.Volume.Types.Gallon
                                                                     -> case u2 of wild17 {
                                                                          DEFAULT
                                                                          -> GHC.Base.Nothing
                                                                               @ Duckling.Types.Token
                                                                          Duckling.Volume.Types.Gallon
                                                                          -> GHC.Base.Just
                                                                               @ Duckling.Types.Token
                                                                               (Duckling.Types.Token
                                                                                  @ Duckling.Volume.Types.VolumeData
                                                                                  $dResolve
                                                                                    `cast`
                                                                                  (Duckling.Resolve.Resolve
                                                                                     cobox0)_R
                                                                                  $dEq
                                                                                    `cast`
                                                                                  (GHC.Classes.Eq
                                                                                     cobox0)_R
                                                                                  $dHashable
                                                                                    `cast`
                                                                                  (Data.Hashable.Class.Hashable
                                                                                     cobox0)_R
                                                                                  $dShow
                                                                                    `cast`
                                                                                  (GHC.Show.Show
                                                                                     cobox0)_R
                                                                                  $dNFData
                                                                                    `cast`
                                                                                  (Control.DeepSeq.NFData
                                                                                     cobox0)_R
                                                                                  Duckling.Types.$WVolume
                                                                                  (Duckling.Volume.Types.VolumeData
                                                                                     (GHC.Base.Nothing
                                                                                        @ GHC.Types.Double)
                                                                                     Duckling.Volume.Rules.rules50
                                                                                     wild4
                                                                                     wild11)) }
                                                                     Duckling.Volume.Types.Hectolitre
                                                                     -> case u2 of wild17 {
                                                                          DEFAULT
                                                                          -> GHC.Base.Nothing
                                                                               @ Duckling.Types.Token
                                                                          Duckling.Volume.Types.Hectolitre
                                                                          -> GHC.Base.Just
                                                                               @ Duckling.Types.Token
                                                                               (Duckling.Types.Token
                                                                                  @ Duckling.Volume.Types.VolumeData
                                                                                  $dResolve
                                                                                    `cast`
                                                                                  (Duckling.Resolve.Resolve
                                                                                     cobox0)_R
                                                                                  $dEq
                                                                                    `cast`
                                                                                  (GHC.Classes.Eq
                                                                                     cobox0)_R
                                                                                  $dHashable
                                                                                    `cast`
                                                                                  (Data.Hashable.Class.Hashable
                                                                                     cobox0)_R
                                                                                  $dShow
                                                                                    `cast`
                                                                                  (GHC.Show.Show
                                                                                     cobox0)_R
                                                                                  $dNFData
                                                                                    `cast`
                                                                                  (Control.DeepSeq.NFData
                                                                                     cobox0)_R
                                                                                  Duckling.Types.$WVolume
                                                                                  (Duckling.Volume.Types.VolumeData
                                                                                     (GHC.Base.Nothing
                                                                                        @ GHC.Types.Double)
                                                                                     Duckling.Volume.Rules.rules69
                                                                                     wild4
                                                                                     wild11)) }
                                                                     Duckling.Volume.Types.Litre
                                                                     -> case u2 of wild17 {
                                                                          DEFAULT
                                                                          -> GHC.Base.Nothing
                                                                               @ Duckling.Types.Token
                                                                          Duckling.Volume.Types.Litre
                                                                          -> GHC.Base.Just
                                                                               @ Duckling.Types.Token
                                                                               (Duckling.Types.Token
                                                                                  @ Duckling.Volume.Types.VolumeData
                                                                                  $dResolve
                                                                                    `cast`
                                                                                  (Duckling.Resolve.Resolve
                                                                                     cobox0)_R
                                                                                  $dEq
                                                                                    `cast`
                                                                                  (GHC.Classes.Eq
                                                                                     cobox0)_R
                                                                                  $dHashable
                                                                                    `cast`
                                                                                  (Data.Hashable.Class.Hashable
                                                                                     cobox0)_R
                                                                                  $dShow
                                                                                    `cast`
                                                                                  (GHC.Show.Show
                                                                                     cobox0)_R
                                                                                  $dNFData
                                                                                    `cast`
                                                                                  (Control.DeepSeq.NFData
                                                                                     cobox0)_R
                                                                                  Duckling.Types.$WVolume
                                                                                  (Duckling.Volume.Types.VolumeData
                                                                                     (GHC.Base.Nothing
                                                                                        @ GHC.Types.Double)
                                                                                     Duckling.Volume.Rules.rules59
                                                                                     wild4
                                                                                     wild11)) }
                                                                     Duckling.Volume.Types.Millilitre
                                                                     -> case u2 of wild17 {
                                                                          DEFAULT
                                                                          -> GHC.Base.Nothing
                                                                               @ Duckling.Types.Token
                                                                          Duckling.Volume.Types.Millilitre
                                                                          -> GHC.Base.Just
                                                                               @ Duckling.Types.Token
                                                                               (Duckling.Types.Token
                                                                                  @ Duckling.Volume.Types.VolumeData
                                                                                  $dResolve
                                                                                    `cast`
                                                                                  (Duckling.Resolve.Resolve
                                                                                     cobox0)_R
                                                                                  $dEq
                                                                                    `cast`
                                                                                  (GHC.Classes.Eq
                                                                                     cobox0)_R
                                                                                  $dHashable
                                                                                    `cast`
                                                                                  (Data.Hashable.Class.Hashable
                                                                                     cobox0)_R
                                                                                  $dShow
                                                                                    `cast`
                                                                                  (GHC.Show.Show
                                                                                     cobox0)_R
                                                                                  $dNFData
                                                                                    `cast`
                                                                                  (Control.DeepSeq.NFData
                                                                                     cobox0)_R
                                                                                  Duckling.Types.$WVolume
                                                                                  (Duckling.Volume.Types.VolumeData
                                                                                     (GHC.Base.Nothing
                                                                                        @ GHC.Types.Double)
                                                                                     Duckling.Volume.Rules.rules78
                                                                                     wild4
                                                                                     wild11)) } } } } } } } } } } } } } } } } } }) -}
a4ac4085af0b146b2360aa8c89d1acb0
  rules128 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules86
                   Duckling.Volume.Rules.rules129) -}
f7b408b23c3366fbdc8a3a6c6664b704
  rules129 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules130
                   Duckling.Volume.Rules.rules85) -}
517d113e9f1d2b50d10731473924699a
  rules13 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules41
                   Duckling.Volume.Rules.rules14) -}
bfa12ab83e3471acf24b372824784ba4
  rules130 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules131) -}
1612e13a44ab78e5ad706eedbcc47843
  rules131 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules132) -}
cfbdcace6b9dd5c31d34be769f55150e
  rules132 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\\-"#) -}
0cccb81124a94196dd8b9e8862e89aa0
  rules133 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<volume> - <volume>"#) -}
9714a72870bc8f7979cca0f3214a8118
  rules134 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules137
                   Duckling.Volume.Rules.rules136
                   Duckling.Volume.Rules.rules135) -}
ec6e2dd5f6c37462f8a2d3fa3fe9c42b
  rules135 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds1 of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 ds4 ->
                      case ds3 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds4
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                           case ds2 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds9 ds10
                             -> case ds10 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds11 ds12
                                  -> case ds11 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds13 ds14 ->
                                     case ds13 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Volume cobox1
                                       -> case ds14
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.Volume.Types.VolumeData ds15 ds16 ds17 ds18 ->
                                          case ds15 of wild9 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just to
                                            -> case ds16 of wild10 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just u
                                                 -> case ds5 of wild11 { GHC.Types.D# x ->
                                                    case to of wild12 { GHC.Types.D# y ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<## x y) of wild13 {
                                                      GHC.Types.False
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Types.True
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Volume.Types.VolumeData
                                                              $dResolve1
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox1)_R
                                                              $dEq1 `cast` (GHC.Classes.Eq cobox1)_R
                                                              $dHashable1
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox1)_R
                                                              $dShow1
                                                                `cast`
                                                              (GHC.Show.Show cobox1)_R
                                                              $dNFData1
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox1)_R
                                                              Duckling.Types.$WVolume
                                                              (Duckling.Volume.Types.VolumeData
                                                                 (GHC.Base.Nothing
                                                                    @ GHC.Types.Double)
                                                                 wild10
                                                                 (GHC.Base.Just
                                                                    @ GHC.Types.Double
                                                                    wild11)
                                                                 wild9)) } } } } } } } } } } } } } }) -}
23c46ad790642fc4dcefc06d41fd0f7c
  rules136 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules114
                   Duckling.Volume.Rules.rules129) -}
500783463f8ea6ca337ed9df9c4bc474
  rules137 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<numeral> - <volume>"#) -}
0d3d77d2b5d39a3d25fb205c372d336f
  rules138 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules141
                   Duckling.Volume.Rules.rules140
                   Duckling.Volume.Rules.rules139) -}
f8a44b34b8ef532b497a14df0efa5200
  rules139 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds1 of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 ds4 ->
                      case ds3 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds4
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                           case ds2 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds9 ds10
                             -> case ds9 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds11 ds12 ->
                                case ds11 of wild6 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Volume cobox1
                                  -> case ds12
                                            `cast`
                                          (Sub cobox1) of wild7 { Duckling.Volume.Types.VolumeData ds13 ds14 ds15 ds16 ->
                                     case ds14 of wild8 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just u
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Volume.Types.VolumeData
                                               $dResolve1 `cast` (Duckling.Resolve.Resolve cobox1)_R
                                               $dEq1 `cast` (GHC.Classes.Eq cobox1)_R
                                               $dHashable1
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox1)_R
                                               $dShow1 `cast` (GHC.Show.Show cobox1)_R
                                               $dNFData1 `cast` (Control.DeepSeq.NFData cobox1)_R
                                               Duckling.Types.$WVolume
                                               (Duckling.Volume.Helpers.volume
                                                  u
                                                  ds5)) } } } } } } } } }) -}
648f26e1058032cfec7f2288ab0abf40
  rules14 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules37
                   Duckling.Volume.Rules.rules15) -}
8acbe0dae169b07634ed4f0b89ea9ba5
  rules140 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules114
                   Duckling.Volume.Rules.rules23) -}
c1b0ade205a5b7d844e2982600e29f10
  rules141 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<number> <volume>"#) -}
7605393d1672e6a493a1fd5df3455fa1
  rules142 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules145
                   Duckling.Volume.Rules.rules144
                   Duckling.Volume.Rules.rules143) -}
19bee27b42c5c56830c1f791afeadba4
  rules143 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds1 of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 ds4 ->
                      case ds3 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds4
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                           GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Volume.Types.VolumeData
                                Duckling.Volume.Types.$fResolveVolumeData
                                Duckling.Volume.Types.$fEqVolumeData
                                Duckling.Volume.Types.$fHashableVolumeData
                                Duckling.Volume.Types.$fShowVolumeData
                                Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Volume.Types.VolumeData>_N))
                                Duckling.Types.$WVolume
                                (Duckling.Volume.Helpers.valueOnly ds5)) } } } }) -}
4fe357ba77bd6d7146425ed42b023295
  rules144 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules114
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e116f61438a885a9b8494ea26dbe08c1
  rules145 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "number as volume"#) -}
00dd045548c0ed403b6465d493e47e83
  rules15 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules33
                   Duckling.Volume.Rules.rules16) -}
d8a9369db67c21aac5e2fc5a2abbf7fb
  rules16 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules29
                   Duckling.Volume.Rules.rules17) -}
fb89bdd898c54bbcee8d6802ca4de8e9
  rules17 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules25
                   Duckling.Volume.Rules.rules18) -}
328494baf964bc9fe51bbca051eaf36e
  rules18 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules19
                   (GHC.Types.[] @ Duckling.Types.Rule)) -}
1483f85c4cc19c67f23b9daca603d684
  rules19 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules22
                        Duckling.Volume.Rules.rules21
                        Duckling.Volume.Rules.rules20 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
ced23676899698099b16e835433aeb27
  rules2 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules134
                   Duckling.Volume.Rules.rules3) -}
743c49208743e58a3b02d5bbbe674c56
  rules20 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.1##) -}
66b6749f11a5b11a5d7339bc4715b542
  rules21 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "tenth(-|(( of)?( a(n?))?))?"#) -}
98d3633e0b827706a07f0e6e85af7110
  rules22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tenth"#) -}
1f57bd72b5bf08922e2799699094df2d
  rules23 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules24
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
38978c10ac35b537212495541738031d
  rules24 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Volume.Helpers.isUnitOnly) -}
0ec3e002f42a7c49c263b3fa8aa2488c
  rules25 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules28
                        Duckling.Volume.Rules.rules27
                        Duckling.Volume.Rules.rules26 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
9f17a3a5fd40b95aa500e4416a11b4e5
  rules26 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.2##) -}
7e5cb14537414c10d277bfca6c3aa1cd
  rules27 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "fifth(-|(( of)?( a(n?))?))?"#) -}
c30f4b96d0de8773469bff56435dad29
  rules28 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "fifth"#) -}
0f49014c7cf286467a07dcab5a374bc9
  rules29 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules32
                        Duckling.Volume.Rules.rules31
                        Duckling.Volume.Rules.rules30 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
0bbc3be9c452f79f392745dede2b95ac
  rules3 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules126
                   Duckling.Volume.Rules.rules4) -}
2606df8513849be55a80814706669240
  rules30 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.25##) -}
2eb6076b9a4459593020abb4f3842b8b
  rules31 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "(quarter|fourth)(-|(( of)?( a(n?))?))?"#) -}
28e4a0a00cbe669a8e71f86f04bdbab2
  rules32 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "fourth"#) -}
fd499ad0083ea5d0b034c6b30ba36e24
  rules33 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules36
                        Duckling.Volume.Rules.rules35
                        Duckling.Volume.Rules.rules34 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
9e5490cf6242a19b7e07172907961e93
  rules34 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.3333333333333333##) -}
a5a438452fe5c0c5ef35c1b612b4454c
  rules35 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "third(-|(( of)?( a(n?))?))?"#) -}
194acf2b622649702f5ede516e5e7535
  rules36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "third"#) -}
1b9053b9cb470b769a83ae99f389beaa
  rules37 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules40
                        Duckling.Volume.Rules.rules39
                        Duckling.Volume.Rules.rules38 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
bbe2abe580d0666ff9859b5f9a9e981b
  rules38 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 0.5##) -}
a89f31c09a6279b58bb41610b91fc440
  rules39 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "half(-|(( of)?( a(n?))?))?"#) -}
75d325399f70447b03abccd9c82571f0
  rules4 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules116
                   Duckling.Volume.Rules.rules5) -}
de93d321a9b7c53f96a9994b56fc7214
  rules40 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "half"#) -}
778ea13145ae051466da5b980b511caf
  rules41 :: Duckling.Types.Rule
  {- Unfolding: (case Duckling.Volume.Rules.$wc
                        Duckling.Volume.Rules.rules44
                        Duckling.Volume.Rules.rules43
                        Duckling.Volume.Rules.rules42 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Types.Rule ww1 ww2 ww3 }) -}
0226ffa044b966061bab9bb911a2cd69
  rules42 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
c3da5f0ff268f4a66f2afd95b50b3012
  rules43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "an? "#) -}
8f5aea1f13e7c2d84154df20f224eb99
  rules44 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "one"#) -}
fe1fad416f1ebbab5baf02ca85928c74
  rules45 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules_name
                   Duckling.Volume.Rules.rules51
                   Duckling.Volume.Rules.rules46) -}
cc8d7d69fcd0da3eb679e2a22039a5fa
  rules46 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Volume.Rules.rules47) -}
c06ed98b6514d5313c4815a98b4a8c5f
  rules47 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Volume.Rules.rules48) -}
97a5f79074607594f722ff2e8483e22b
  rules48 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Volume.Types.VolumeData
                   Duckling.Volume.Types.$fResolveVolumeData
                   Duckling.Volume.Types.$fEqVolumeData
                   Duckling.Volume.Types.$fHashableVolumeData
                   Duckling.Volume.Types.$fShowVolumeData
                   Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Volume.Types.VolumeData>_N))
                   Duckling.Types.$WVolume
                   Duckling.Volume.Rules.rules49) -}
d1715114bf3b761a82e7a6a8dbbef936
  rules49 :: Duckling.Volume.Types.VolumeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Volume.Types.VolumeData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.Volume.Rules.rules50
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)) -}
61b5ff44f5889e15fa47b55f4e3f6c88
  rules5 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules110
                   Duckling.Volume.Rules.rules6) -}
f07f738db049960af6033da2b06bc898
  rules50 :: GHC.Base.Maybe Duckling.Volume.Types.Unit
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Volume.Types.Unit
                   Duckling.Volume.Types.Gallon) -}
efbc0f358aed6d99e57257ac114c8a05
  rules51 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules52
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
7ee9a9c290403267ada667d7a6f29465
  rules52 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules53) -}
5f9bc189e9c79806c501d1cff5398ad1
  rules53 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules_regexPattern) -}
e7bf7d3de43585cc7c1f48f0e965d7a9
  rules54 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules63
                   Duckling.Volume.Rules.rules60
                   Duckling.Volume.Rules.rules55) -}
39a207d2ba430f19d16d96abee814520
  rules55 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Volume.Rules.rules56) -}
95f3eaeaf051a3a12d05637a41e562a2
  rules56 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Volume.Rules.rules57) -}
ff9ae02bab5fef83bc96c125f4fbba59
  rules57 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Volume.Types.VolumeData
                   Duckling.Volume.Types.$fResolveVolumeData
                   Duckling.Volume.Types.$fEqVolumeData
                   Duckling.Volume.Types.$fHashableVolumeData
                   Duckling.Volume.Types.$fShowVolumeData
                   Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Volume.Types.VolumeData>_N))
                   Duckling.Types.$WVolume
                   Duckling.Volume.Rules.rules58) -}
dbd93c81d8157252744ca13ed192ca6a
  rules58 :: Duckling.Volume.Types.VolumeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Volume.Types.VolumeData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.Volume.Rules.rules59
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)) -}
508ee4934cd5deaa74b2e274030d955c
  rules59 :: GHC.Base.Maybe Duckling.Volume.Types.Unit
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Volume.Types.Unit
                   Duckling.Volume.Types.Litre) -}
2d27e3827833c4de4a1a877d177933a1
  rules6 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules98
                   Duckling.Volume.Rules.rules7) -}
76662ca28c403b4ce05d8644c4378e69
  rules60 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules61
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
9c9a7b2afb3e281259ecb928fecd68a1
  rules61 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules62) -}
5195ed3ef386dde4c2c41ebbed47368e
  rules62 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules_regexPattern1) -}
a9d8f17bba205384331fee04f868a93e
  rules63 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<vol> liters"#) -}
22da207f7dc096e5c01ccc9e66c84147
  rules64 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules_name1
                   Duckling.Volume.Rules.rules70
                   Duckling.Volume.Rules.rules65) -}
e78a6815ffc0a8f133c2a1ce5ed17c8c
  rules65 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Volume.Rules.rules66) -}
4e38af495acae55b86dfd144bc168435
  rules66 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Volume.Rules.rules67) -}
ba3cd475b25709f3a2661d1cad528cf6
  rules67 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Volume.Types.VolumeData
                   Duckling.Volume.Types.$fResolveVolumeData
                   Duckling.Volume.Types.$fEqVolumeData
                   Duckling.Volume.Types.$fHashableVolumeData
                   Duckling.Volume.Types.$fShowVolumeData
                   Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Volume.Types.VolumeData>_N))
                   Duckling.Types.$WVolume
                   Duckling.Volume.Rules.rules68) -}
2ba9d5eae2ab0fbd09eb9afa5aeea0e2
  rules68 :: Duckling.Volume.Types.VolumeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Volume.Types.VolumeData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.Volume.Rules.rules69
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)) -}
58dcef18a711f3c6842991600589ca0b
  rules69 :: GHC.Base.Maybe Duckling.Volume.Types.Unit
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Volume.Types.Unit
                   Duckling.Volume.Types.Hectolitre) -}
ff3ee413a367ef71fa747266ea4898fe
  rules7 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules91
                   Duckling.Volume.Rules.rules8) -}
298d7e3726fbc5ca73a57f093f6e350a
  rules70 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules71
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
850f5ae8c901eefd6896f1875f7b734c
  rules71 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules72) -}
60324f0a0ddb39b10a61dc6f8444be07
  rules72 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules_regexPattern2) -}
f0f5757d7d37eda53df12781ad42a134
  rules73 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules_name2
                   Duckling.Volume.Rules.rules79
                   Duckling.Volume.Rules.rules74) -}
9b4a26faff0ec77b99928f42aded9c19
  rules74 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Volume.Rules.rules75) -}
75d3f800b4ca98124b0b474632e7d080
  rules75 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Volume.Rules.rules76) -}
3f87af20bc02f9f0cb8d7674217c19c7
  rules76 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Volume.Types.VolumeData
                   Duckling.Volume.Types.$fResolveVolumeData
                   Duckling.Volume.Types.$fEqVolumeData
                   Duckling.Volume.Types.$fHashableVolumeData
                   Duckling.Volume.Types.$fShowVolumeData
                   Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Volume.Types.VolumeData>_N))
                   Duckling.Types.$WVolume
                   Duckling.Volume.Rules.rules77) -}
c48dfbcbc1a326643fa143a16c2f8972
  rules77 :: Duckling.Volume.Types.VolumeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Volume.Types.VolumeData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.Volume.Rules.rules78
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)) -}
60c1bc47122503bb981784ef4788081e
  rules78 :: GHC.Base.Maybe Duckling.Volume.Types.Unit
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Volume.Types.Unit
                   Duckling.Volume.Types.Millilitre) -}
771fa43765ea861ec78c4a361335dca6
  rules79 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules80
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
25f0a5740dd9bb4b995a24176c1c0098
  rules8 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules82
                   Duckling.Volume.Rules.rules9) -}
9c66d85a3916ae9a14b090d3f33e5a74
  rules80 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules81) -}
09f81c2c70be16dc40c30f616d06d592
  rules81 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules_regexPattern3) -}
d271f9dc2ebaa3595152301a0fae8ae2
  rules82 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules90
                   Duckling.Volume.Rules.rules84
                   Duckling.Volume.Rules.rules83) -}
5d9d53ee264854dedd36cc42c357ea27
  rules83 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds3 ds4
                        -> case ds3 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 ds6 ->
                           case ds5 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Volume cobox0
                             -> case ds6
                                       `cast`
                                     (Sub cobox0) of wild4 { Duckling.Volume.Types.VolumeData ds7 ds8 ds9 ds10 ->
                                case ds7 of wild5 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just from
                                  -> case ds8 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just u
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Volume.Types.VolumeData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WVolume
                                               (Duckling.Volume.Types.VolumeData
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  wild6
                                                  wild5
                                                  (GHC.Base.Nothing
                                                     @ GHC.Types.Double))) } } } } } } }) -}
f199259af44ed375a5a2568dcbba367b
  rules84 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules87
                   Duckling.Volume.Rules.rules85) -}
3a6a38c4023c29ccde87f2623f6d61aa
  rules85 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules86
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
a9ad1b24e4d9375a72da130bb34bbc2c
  rules86 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Volume.Helpers.isSimpleVolume) -}
ffc2319edee50fd4bd8efa4fbf3f926b
  rules87 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules88) -}
8533a7e3eec099a5fac4e730c4635cb8
  rules88 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules89) -}
189e594e390418d4e5e1c98190d0762b
  rules89 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "over|above|exceeding|beyond|at least|(more|larger|bigger|heavier) than"#) -}
c14d2522cf375ef9e9f0564a6a8d8c42
  rules9 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Volume.Rules.rules73
                   Duckling.Volume.Rules.rules10) -}
a50b3b650ea3f650c5580316223f4c91
  rules90 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "more than <volume>"#) -}
d8cf8b0544dcbc49375c82c0f104dcbd
  rules91 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules97
                   Duckling.Volume.Rules.rules93
                   Duckling.Volume.Rules.rules92) -}
3ff78670aea8dd152a52f1569f7e1974
  rules92 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds3 ds4
                        -> case ds3 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 ds6 ->
                           case ds5 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Volume cobox0
                             -> case ds6
                                       `cast`
                                     (Sub cobox0) of wild4 { Duckling.Volume.Types.VolumeData ds7 ds8 ds9 ds10 ->
                                case ds7 of wild5 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just to
                                  -> case ds8 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just u
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Volume.Types.VolumeData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WVolume
                                               (Duckling.Volume.Types.VolumeData
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  wild6
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  wild5)) } } } } } } }) -}
f063675bbbb2a30fdef92601f3854bf8
  rules93 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Volume.Rules.rules94
                   Duckling.Volume.Rules.rules85) -}
c5bc40c4441d595dcdf047566119e41e
  rules94 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex Duckling.Volume.Rules.rules95) -}
49d91bff6f72af8b01d1d6eb180c89be
  rules95 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Volume.Rules.rules96) -}
f4ee2852418c4b5b54b0fb4d22ed918f
  rules96 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "under|below|at most|(less|lower|not? more) than"#) -}
d82eac00e62376a76d8aa46f813952ca
  rules97 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "at most <volume>"#) -}
28b11784ed9f26a14e1d98e3475a9b96
  rules98 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.Volume.Rules.rules109
                   Duckling.Volume.Rules.rules100
                   Duckling.Volume.Rules.rules99) -}
09bff8093d7d9a6a67cf7d9ee2f3163e
  rules99 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 case ds of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds1 ds2
                   -> case ds2 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds3 ds4
                        -> case ds3 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 ds6 ->
                           case ds5 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Volume cobox0
                             -> case ds6
                                       `cast`
                                     (Sub cobox0) of wild4 { Duckling.Volume.Types.VolumeData ds7 ds8 ds9 ds10 ->
                                case ds7 of wild5 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just from
                                  -> case ds8 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just u1
                                       -> case ds4 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds11 ds12
                                            -> case ds12 of wild8 {
                                                 [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 : ds13 ds14
                                                 -> case ds13 of wild9 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds15 ds16 ->
                                                    case ds15 of wild10 {
                                                      DEFAULT
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      Duckling.Types.Volume cobox1
                                                      -> case ds16
                                                                `cast`
                                                              (Sub cobox1) of wild11 { Duckling.Volume.Types.VolumeData ds17 ds18 ds19 ds20 ->
                                                         case ds17 of wild12 {
                                                           GHC.Base.Nothing
                                                           -> GHC.Base.Nothing
                                                                @ Duckling.Types.Token
                                                           GHC.Base.Just to
                                                           -> case ds18 of wild13 {
                                                                GHC.Base.Nothing
                                                                -> GHC.Base.Nothing
                                                                     @ Duckling.Types.Token
                                                                GHC.Base.Just u2
                                                                -> case from of wild14 { GHC.Types.D# x ->
                                                                   case to of wild15 { GHC.Types.D# y ->
                                                                   case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.<##
                                                                             x
                                                                             y) of wild16 {
                                                                     GHC.Types.False
                                                                     -> GHC.Base.Nothing
                                                                          @ Duckling.Types.Token
                                                                     GHC.Types.True
                                                                     -> case u1 of wild17 {
                                                                          Duckling.Volume.Types.Gallon
                                                                          -> case u2 of wild18 {
                                                                               DEFAULT
                                                                               -> GHC.Base.Nothing
                                                                                    @ Duckling.Types.Token
                                                                               Duckling.Volume.Types.Gallon
                                                                               -> GHC.Base.Just
                                                                                    @ Duckling.Types.Token
                                                                                    (Duckling.Types.Token
                                                                                       @ Duckling.Volume.Types.VolumeData
                                                                                       $dResolve
                                                                                         `cast`
                                                                                       (Duckling.Resolve.Resolve
                                                                                          cobox0)_R
                                                                                       $dEq
                                                                                         `cast`
                                                                                       (GHC.Classes.Eq
                                                                                          cobox0)_R
                                                                                       $dHashable
                                                                                         `cast`
                                                                                       (Data.Hashable.Class.Hashable
                                                                                          cobox0)_R
                                                                                       $dShow
                                                                                         `cast`
                                                                                       (GHC.Show.Show
                                                                                          cobox0)_R
                                                                                       $dNFData
                                                                                         `cast`
                                                                                       (Control.DeepSeq.NFData
                                                                                          cobox0)_R
                                                                                       Duckling.Types.$WVolume
                                                                                       (Duckling.Volume.Types.VolumeData
                                                                                          (GHC.Base.Nothing
                                                                                             @ GHC.Types.Double)
                                                                                          Duckling.Volume.Rules.rules50
                                                                                          wild5
                                                                                          wild12)) }
                                                                          Duckling.Volume.Types.Hectolitre
                                                                          -> case u2 of wild18 {
                                                                               DEFAULT
                                                                               -> GHC.Base.Nothing
                                                                                    @ Duckling.Types.Token
                                                                               Duckling.Volume.Types.Hectolitre
                                                                               -> GHC.Base.Just
                                                                                    @ Duckling.Types.Token
                                                                                    (Duckling.Types.Token
                                                                                       @ Duckling.Volume.Types.VolumeData
                                                                                       $dResolve
                                                                                         `cast`
                                                                                       (Duckling.Resolve.Resolve
                                                                                          cobox0)_R
                                                                                       $dEq
                                                                                         `cast`
                                                                                       (GHC.Classes.Eq
                                                                                          cobox0)_R
                                                                                       $dHashable
                                                                                         `cast`
                                                                                       (Data.Hashable.Class.Hashable
                                                                                          cobox0)_R
                                                                                       $dShow
                                                                                         `cast`
                                                                                       (GHC.Show.Show
                                                                                          cobox0)_R
                                                                                       $dNFData
                                                                                         `cast`
                                                                                       (Control.DeepSeq.NFData
                                                                                          cobox0)_R
                                                                                       Duckling.Types.$WVolume
                                                                                       (Duckling.Volume.Types.VolumeData
                                                                                          (GHC.Base.Nothing
                                                                                             @ GHC.Types.Double)
                                                                                          Duckling.Volume.Rules.rules69
                                                                                          wild5
                                                                                          wild12)) }
                                                                          Duckling.Volume.Types.Litre
                                                                          -> case u2 of wild18 {
                                                                               DEFAULT
                                                                               -> GHC.Base.Nothing
                                                                                    @ Duckling.Types.Token
                                                                               Duckling.Volume.Types.Litre
                                                                               -> GHC.Base.Just
                                                                                    @ Duckling.Types.Token
                                                                                    (Duckling.Types.Token
                                                                                       @ Duckling.Volume.Types.VolumeData
                                                                                       $dResolve
                                                                                         `cast`
                                                                                       (Duckling.Resolve.Resolve
                                                                                          cobox0)_R
                                                                                       $dEq
                                                                                         `cast`
                                                                                       (GHC.Classes.Eq
                                                                                          cobox0)_R
                                                                                       $dHashable
                                                                                         `cast`
                                                                                       (Data.Hashable.Class.Hashable
                                                                                          cobox0)_R
                                                                                       $dShow
                                                                                         `cast`
                                                                                       (GHC.Show.Show
                                                                                          cobox0)_R
                                                                                       $dNFData
                                                                                         `cast`
                                                                                       (Control.DeepSeq.NFData
                                                                                          cobox0)_R
                                                                                       Duckling.Types.$WVolume
                                                                                       (Duckling.Volume.Types.VolumeData
                                                                                          (GHC.Base.Nothing
                                                                                             @ GHC.Types.Double)
                                                                                          Duckling.Volume.Rules.rules59
                                                                                          wild5
                                                                                          wild12)) }
                                                                          Duckling.Volume.Types.Millilitre
                                                                          -> case u2 of wild18 {
                                                                               DEFAULT
                                                                               -> GHC.Base.Nothing
                                                                                    @ Duckling.Types.Token
                                                                               Duckling.Volume.Types.Millilitre
                                                                               -> GHC.Base.Just
                                                                                    @ Duckling.Types.Token
                                                                                    (Duckling.Types.Token
                                                                                       @ Duckling.Volume.Types.VolumeData
                                                                                       $dResolve
                                                                                         `cast`
                                                                                       (Duckling.Resolve.Resolve
                                                                                          cobox0)_R
                                                                                       $dEq
                                                                                         `cast`
                                                                                       (GHC.Classes.Eq
                                                                                          cobox0)_R
                                                                                       $dHashable
                                                                                         `cast`
                                                                                       (Data.Hashable.Class.Hashable
                                                                                          cobox0)_R
                                                                                       $dShow
                                                                                         `cast`
                                                                                       (GHC.Show.Show
                                                                                          cobox0)_R
                                                                                       $dNFData
                                                                                         `cast`
                                                                                       (Control.DeepSeq.NFData
                                                                                          cobox0)_R
                                                                                       Duckling.Types.$WVolume
                                                                                       (Duckling.Volume.Types.VolumeData
                                                                                          (GHC.Base.Nothing
                                                                                             @ GHC.Types.Double)
                                                                                          Duckling.Volume.Rules.rules78
                                                                                          wild5
                                                                                          wild12)) } } } } } } } } } } } } } } } } } } }) -}
095a9bdb8e66003ed14a654bccba5e9d
  rules_name :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<latent vol> gallon"#) -}
5a5088680aedb46c30ca3da1805219cd
  rules_name1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<vol> hectoliters"#) -}
ff008b460afb427e13f038940e58c5a2
  rules_name2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<latent vol> ml"#) -}
906302881565d930ab9d4ca35cd1d8f9
  rules_regexPattern :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "gal((l?ons?)|s)?"#) -}
a1b257e0a1f6591cb079f28029816767
  rules_regexPattern1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "l(it(er|re)s?)?"#) -}
4963b61985d62f6036d7895511c36096
  rules_regexPattern2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "hectolit(er|re)s?"#) -}
e4a5d264e1574ce66d82cd97dc4a6d73
  rules_regexPattern3 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "m(l(s?)|illilit(er|re)s?)"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

