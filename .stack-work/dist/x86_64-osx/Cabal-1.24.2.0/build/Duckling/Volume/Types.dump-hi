
==================== FINAL INTERFACE ====================
2019-03-14 03:00:29.414307 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types [family instance module] 8002
  interface hash: ee1d256831d35873401de8279d62818d
  ABI hash: 8412d0594bcecaf2ab681fc053d8728a
  export-list hash: 062fe928140f44e90221a1822b5f6fc9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 05147b672ac09664ed63ff021ba550f2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Volume.Types.above
  Duckling.Volume.Types.between
  Duckling.Volume.Types.openInterval
  Duckling.Volume.Types.simple
  Duckling.Volume.Types.single
  Duckling.Volume.Types.under
  Duckling.Volume.Types.IntervalDirection{Duckling.Volume.Types.Above Duckling.Volume.Types.Under}
  Duckling.Volume.Types.SingleValue{Duckling.Volume.Types.SingleValue vUnit vValue}
  Duckling.Volume.Types.Unit{Duckling.Volume.Types.Gallon Duckling.Volume.Types.Hectolitre Duckling.Volume.Types.Litre Duckling.Volume.Types.Millilitre}
  Duckling.Volume.Types.VolumeData{Duckling.Volume.Types.VolumeData maxValue minValue unit value}
  Duckling.Volume.Types.VolumeValue{Duckling.Volume.Types.IntervalValue Duckling.Volume.Types.OpenIntervalValue Duckling.Volume.Types.SimpleValue}
module dependencies: Duckling.Locale Duckling.Region
                     Duckling.Resolve
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
79d603e2cc95b5c4207bfea8324014fc
  $fEqIntervalDirection ::
    GHC.Classes.Eq Duckling.Volume.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.IntervalDirection
                  Duckling.Volume.Types.$fEqIntervalDirection_$c==
                  Duckling.Volume.Types.$fEqIntervalDirection_$c/= -}
79d603e2cc95b5c4207bfea8324014fc
  $fEqIntervalDirection_$c/= ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.False
                        Duckling.Volume.Types.Under -> GHC.Types.True }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.True
                        Duckling.Volume.Types.Under -> GHC.Types.False } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fEqIntervalDirection_$c== ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Volume.Types.IntervalDirection)
                   (ds1 :: Duckling.Volume.Types.IntervalDirection) ->
                 case ds of wild {
                   Duckling.Volume.Types.Above
                   -> case ds1 of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.True
                        Duckling.Volume.Types.Under -> GHC.Types.False }
                   Duckling.Volume.Types.Under
                   -> case ds1 of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.False
                        Duckling.Volume.Types.Under -> GHC.Types.True } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqSingleValue :: GHC.Classes.Eq Duckling.Volume.Types.SingleValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.SingleValue
                  Duckling.Volume.Types.$fEqSingleValue_$c==
                  Duckling.Volume.Types.$fEqSingleValue_$c/= -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqSingleValue_$c/= ::
    Duckling.Volume.Types.SingleValue
    -> Duckling.Volume.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.SingleValue)
                   (b :: Duckling.Volume.Types.SingleValue) ->
                 case Duckling.Volume.Types.$fEqSingleValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqSingleValue_$c== ::
    Duckling.Volume.Types.SingleValue
    -> Duckling.Volume.Types.SingleValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.SingleValue)
                   (w1 :: Duckling.Volume.Types.SingleValue) ->
                 case w of ww { Duckling.Volume.Types.SingleValue ww1 ww2 ->
                 case w1 of ww3 { Duckling.Volume.Types.SingleValue ww4 ww5 ->
                 Duckling.Volume.Types.$w$c== ww1 ww2 ww4 ww5 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqUnit :: GHC.Classes.Eq Duckling.Volume.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fEqUnit_$c==
                  Duckling.Volume.Types.$fEqUnit_$c/= -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqUnit_$c/= ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Gallon -> GHC.Types.False }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.False }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Litre -> GHC.Types.False }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqUnit_$c== ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Volume.Types.Unit)
                   (ds1 :: Duckling.Volume.Types.Unit) ->
                 case ds of wild {
                   Duckling.Volume.Types.Gallon
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Gallon -> GHC.Types.True }
                   Duckling.Volume.Types.Hectolitre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.True }
                   Duckling.Volume.Types.Litre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Types.True }
                   Duckling.Volume.Types.Millilitre
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeData :: GHC.Classes.Eq Duckling.Volume.Types.VolumeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fEqVolumeData_$c==
                  Duckling.Volume.Types.$fEqVolumeData_$c/= -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeData_$c/= ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.VolumeData)
                   (b :: Duckling.Volume.Types.VolumeData) ->
                 case Duckling.Volume.Types.$fEqVolumeData_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeData_$c== ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeValue :: GHC.Classes.Eq Duckling.Volume.Types.VolumeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeValue
                  Duckling.Volume.Types.$fEqVolumeValue_$c==
                  Duckling.Volume.Types.$fEqVolumeValue_$c/= -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeValue_$c/= ::
    Duckling.Volume.Types.VolumeValue
    -> Duckling.Volume.Types.VolumeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.VolumeValue)
                   (b :: Duckling.Volume.Types.VolumeValue) ->
                 case Duckling.Volume.Types.$fEqVolumeValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fEqVolumeValue_$c== ::
    Duckling.Volume.Types.VolumeValue
    -> Duckling.Volume.Types.VolumeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Volume.Types.VolumeValue)
                   (ds1 :: Duckling.Volume.Types.VolumeValue) ->
                 case ds of wild {
                   Duckling.Volume.Types.SimpleValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.SimpleValue b1
                        -> Duckling.Volume.Types.$fEqSingleValue_$c== a1 b1 }
                   Duckling.Volume.Types.IntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Volume.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Volume.Types.SingleValue ww11 ww12 ->
                           case Duckling.Volume.Types.$w$c== ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Volume.Types.$fEqSingleValue_$c== ww2 ww5 } } } } } }
                   Duckling.Volume.Types.OpenIntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Volume.Types.SingleValue ww8 ww9 ->
                           case ww4 of ww10 { Duckling.Volume.Types.SingleValue ww11 ww12 ->
                           case Duckling.Volume.Types.$w$c== ww8 ww9 ww11 ww12 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Volume.Types.$fEqIntervalDirection_$c==
                                  ww2
                                  ww5 } } } } } } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fGenericIntervalDirection ::
    GHC.Generics.Generic Duckling.Volume.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.IntervalDirection
                  Duckling.Volume.Types.$fGenericIntervalDirection_$cfrom
                  Duckling.Volume.Types.$fGenericIntervalDirection_$cto -}
79d603e2cc95b5c4207bfea8324014fc
  $fGenericIntervalDirection1 ::
    Duckling.Volume.Types.IntervalDirection
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Volume.Types.IntervalDirection) ->
                 case x1 of wild {
                   Duckling.Volume.Types.Above
                   -> Duckling.Volume.Types.$fGenericIntervalDirection3 @ x
                   Duckling.Volume.Types.Under
                   -> Duckling.Volume.Types.$fGenericIntervalDirection2 @ x }) -}
7aecdb27afb20945c98837681868b1ab
  $fGenericIntervalDirection2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
fa504206eef4a3b3a4120381df5fdbe3
  $fGenericIntervalDirection3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Above" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
79d603e2cc95b5c4207bfea8324014fc
  $fGenericIntervalDirection_$cfrom ::
    Duckling.Volume.Types.IntervalDirection
    -> GHC.Generics.Rep Duckling.Volume.Types.IntervalDirection x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fGenericIntervalDirection1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Volume.Types.IntervalDirection>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "IntervalDirection"
                                       "Duckling.Volume.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "Under"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R))
                          (Sub (Sym (Duckling.Volume.Types.Rep_IntervalDirection[0]))) <x>_N) -}
79d603e2cc95b5c4207bfea8324014fc
  $fGenericIntervalDirection_$cto ::
    GHC.Generics.Rep Duckling.Volume.Types.IntervalDirection x
    -> Duckling.Volume.Types.IntervalDirection
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Duckling.Volume.Types.IntervalDirection x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Volume.Types.Rep_IntervalDirection[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "IntervalDirection"
                                   "Duckling.Volume.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "Under"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Volume.Types.Above }
                   GHC.Generics.R1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Volume.Types.Under } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericUnit :: GHC.Generics.Generic Duckling.Volume.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fGenericUnit_$cfrom
                  Duckling.Volume.Types.$fGenericUnit_$cto -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericUnit1 ::
    Duckling.Volume.Types.Unit
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Volume.Types.Unit) ->
                 case x1 of wild {
                   Duckling.Volume.Types.Gallon
                   -> Duckling.Volume.Types.$fGenericUnit8 @ x
                   Duckling.Volume.Types.Hectolitre
                   -> Duckling.Volume.Types.$fGenericUnit6 @ x
                   Duckling.Volume.Types.Litre
                   -> Duckling.Volume.Types.$fGenericUnit4 @ x
                   Duckling.Volume.Types.Millilitre
                   -> Duckling.Volume.Types.$fGenericUnit2 @ x }) -}
3488f65edebc306ad4a23e6be4ae7a4d
  $fGenericUnit2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Volume.Types.$fGenericUnit3 @ x)) -}
fd764b4f54498abaaa3de96979da6b78
  $fGenericUnit3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
60f5e055c3e89fbca02c2ba42d0c0dff
  $fGenericUnit4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Volume.Types.$fGenericUnit5 @ x)) -}
a8c77b7070c7e5ebefcc4e1d33c9c904
  $fGenericUnit5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
242cdfd1e8cc66a1270d471e8e026390
  $fGenericUnit6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Volume.Types.$fGenericUnit7 @ x)) -}
a927b4427befffa5c95d0b1170d84fc5
  $fGenericUnit7 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
5d9fff08202d5d68cb8833f474bcc888
  $fGenericUnit8 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Volume.Types.$fGenericUnit9 @ x)) -}
f1bad5fc3c706aa3a6caf6320c2c9a3f
  $fGenericUnit9 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericUnit_$cfrom ::
    Duckling.Volume.Types.Unit
    -> GHC.Generics.Rep Duckling.Volume.Types.Unit x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fGenericUnit1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Volume.Types.Unit>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Unit"
                                       "Duckling.Volume.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <(GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                        GHC.Generics.U1
                                      GHC.Generics.:+: GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "Hectolitre"
                                                            'GHC.Generics.PrefixI
                                                            'GHC.Types.False)
                                                         GHC.Generics.U1)
                                     GHC.Generics.:+: (GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "Litre"
                                                            'GHC.Generics.PrefixI
                                                            'GHC.Types.False)
                                                         GHC.Generics.U1
                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                          GHC.Generics.C
                                                                          ('GHC.Generics.MetaCons
                                                                             "Millilitre"
                                                                             'GHC.Generics.PrefixI
                                                                             'GHC.Types.False)
                                                                          GHC.Generics.U1)>_R))
                          (Sub (Sym (Duckling.Volume.Types.Rep_Unit[0]))) <x>_N) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericUnit_$cto ::
    GHC.Generics.Rep Duckling.Volume.Types.Unit x
    -> Duckling.Volume.Types.Unit
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Volume.Types.Unit x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Volume.Types.Rep_Unit[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "Unit"
                                   "Duckling.Volume.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <(GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Hectolitre"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1)
                                 GHC.Generics.:+: (GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Litre"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.False)
                                                     GHC.Generics.U1
                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                      GHC.Generics.C
                                                                      ('GHC.Generics.MetaCons
                                                                         "Millilitre"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of tpl { DEFAULT -> Duckling.Volume.Types.Gallon }
                        GHC.Generics.R1 ds2
                        -> case ds2 of tpl { DEFAULT ->
                           Duckling.Volume.Types.Hectolitre } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of tpl { DEFAULT -> Duckling.Volume.Types.Litre }
                        GHC.Generics.R1 ds2
                        -> case ds2 of tpl { DEFAULT ->
                           Duckling.Volume.Types.Millilitre } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericVolumeData ::
    GHC.Generics.Generic Duckling.Volume.Types.VolumeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fGenericVolumeData_$cfrom
                  Duckling.Volume.Types.$fGenericVolumeData_$cto -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericVolumeData1 ::
    Duckling.Volume.Types.VolumeData
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "value")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "unit")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R (GHC.Base.Maybe Duckling.Volume.Types.Unit)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "minValue")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "maxValue")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe GHC.Types.Double))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Volume.Types.VolumeData) ->
                 case x1 of wild { Duckling.Volume.Types.VolumeData g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "value")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "unit")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Duckling.Volume.Types.Unit)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "minValue")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "maxValue")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "value")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "unit")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Duckling.Volume.Types.Unit)))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "value")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P
                                      <GHC.Base.Maybe Duckling.Volume.Types.Unit>_R
                                      <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "unit")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe Duckling.Volume.Types.Unit)>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "minValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "maxValue")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "minValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N))
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "maxValue")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe GHC.Types.Double)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "value")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "unit")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe Duckling.Volume.Types.Unit)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "minValue")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "maxValue")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       GHC.Types.Double)))>_R) <x>_N) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericVolumeData_$cfrom ::
    Duckling.Volume.Types.VolumeData
    -> GHC.Generics.Rep Duckling.Volume.Types.VolumeData x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fGenericVolumeData1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Volume.Types.VolumeData>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "VolumeData"
                                       "Duckling.Volume.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "value")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "unit")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe
                                                                  Duckling.Volume.Types.Unit)))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "minValue")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Double))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "maxValue")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   GHC.Types.Double))))>_R))
                          (Sub (Sym (Duckling.Volume.Types.Rep_VolumeData[0]))) <x>_N) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fGenericVolumeData_$cto ::
    GHC.Generics.Rep Duckling.Volume.Types.VolumeData x
    -> Duckling.Volume.Types.VolumeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Volume.Types.VolumeData x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Volume.Types.Rep_VolumeData[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "VolumeData"
                                        "Duckling.Volume.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "value")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "unit")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe
                                                                   Duckling.Volume.Types.Unit)))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "minValue")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Double))
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "maxValue")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    GHC.Types.Double))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "value")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double))
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "unit")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Duckling.Volume.Types.Unit)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "minValue")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Double))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "maxValue")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 GHC.Types.Double)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Duckling.Volume.Types.VolumeData
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                   ds4
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "unit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R
                                (GHC.Base.Maybe Duckling.Volume.Types.Unit)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe Duckling.Volume.Types.Unit>_R
                             <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "minValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Double>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "maxValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe GHC.Types.Double>_R
                             <x>_P)) } } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fHashableIntervalDirection ::
    Data.Hashable.Class.Hashable
      Duckling.Volume.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.IntervalDirection
                  Duckling.Volume.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
                  Duckling.Volume.Types.$fHashableIntervalDirection_$chash -}
21211022b924ea56b40f2c53ad37c6c7
  $fHashableIntervalDirection1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Volume.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fHashableIntervalDirection2
                  `cast`
                (Sym (Data.Hashable.Class.N:GHashable[0]
                          <Data.Hashable.Class.Zero>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Volume.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
a9e2f8decf808cffd9e7a2597e9148f9
  $fHashableIntervalDirection2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> GHC.Generics.M1
         GHC.Generics.D
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Volume.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (targs :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (salt :: GHC.Types.Int)
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Volume.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case salt of ww { GHC.Types.I# ww1 ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Volume.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#) }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                           16777619#) } } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fHashableIntervalDirection_$chash ::
    Duckling.Volume.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Volume.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Volume.Types.Above -> GHC.Types.I# -7234408896634655932#
                   Duckling.Volume.Types.Under
                   -> GHC.Types.I# -7234408896617878313# }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fHashableIntervalDirection_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Volume.Types.IntervalDirection) ->
                 Duckling.Volume.Types.$fHashableIntervalDirection1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Volume.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Volume.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableUnit ::
    Data.Hashable.Class.Hashable Duckling.Volume.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fHashableUnit_$chashWithSalt
                  Duckling.Volume.Types.$fHashableUnit_$chash -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableUnit_$chash ::
    Duckling.Volume.Types.Unit -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Volume.Types.$fHashableUnit_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableUnit_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Volume.Types.Unit -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Volume.Types.Unit) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of wild {
                   Duckling.Volume.Types.Gallon
                   -> GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#)
                   Duckling.Volume.Types.Hectolitre
                   -> GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                           16777619#)
                   Duckling.Volume.Types.Litre
                   -> GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 2#)
                           16777619#)
                   Duckling.Volume.Types.Millilitre
                   -> GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 3#)
                           16777619#) } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableVolumeData ::
    Data.Hashable.Class.Hashable Duckling.Volume.Types.VolumeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fHashableVolumeData_$chashWithSalt
                  Duckling.Volume.Types.$fHashableVolumeData_$chash -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableVolumeData_$chash ::
    Duckling.Volume.Types.VolumeData -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Volume.Types.$fHashableVolumeData_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fHashableVolumeData_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Volume.Types.VolumeData -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(SSSS),1*U(1*U,1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Volume.Types.VolumeData ww3 ww4 ww5 ww6 ->
                 case Duckling.Volume.Types.$w$dGHashable1
                        @ GHC.Prim.Any
                        ww1
                        ww3
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "value")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe GHC.Types.Double)>_R) <GHC.Prim.Any>_N))
                        ww4
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe Duckling.Volume.Types.Unit>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "unit")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             Duckling.Volume.Types.Unit)>_R) <GHC.Prim.Any>_N)) of ww7 { DEFAULT ->
                 case Duckling.Volume.Types.$w$dGHashable
                        @ GHC.Prim.Any
                        ww7
                        ww5
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "minValue")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe GHC.Types.Double)>_R) <GHC.Prim.Any>_N))
                        ww6
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Double>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "maxValue")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             GHC.Types.Double)>_R) <GHC.Prim.Any>_N)) of ww8 { DEFAULT ->
                 GHC.Types.I# ww8 } } } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fNFDataIntervalDirection ::
    Control.DeepSeq.NFData Duckling.Volume.Types.IntervalDirection
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Volume.Types.$fNFDataIntervalDirection_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Volume.Types.IntervalDirection>_N)) -}
eb32f3b50835d2bb212e9d9fe14f2434
  $fNFDataIntervalDirection1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Volume.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fNFDataIntervalDirection2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Volume.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
529a8d05a06b6cb03eb37059352d7b30
  $fNFDataIntervalDirection2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "IntervalDirection"
         "Duckling.Volume.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Volume.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Volume.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fNFDataIntervalDirection_$s$dmrnf ::
    Duckling.Volume.Types.IntervalDirection -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Volume.Types.IntervalDirection) ->
                 Duckling.Volume.Types.$fNFDataIntervalDirection1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N
                      (Sym (Duckling.Volume.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Duckling.Volume.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fNFDataUnit :: Control.DeepSeq.NFData Duckling.Volume.Types.Unit
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Volume.Types.$fNFDataUnit_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Volume.Types.Unit>_N)) -}
3a12ead499819d58d9b916cbd6764775
  $fNFDataUnit1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "Unit"
            "Duckling.Volume.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         ((GHC.Generics.C1
             ('GHC.Generics.MetaCons
                "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
             GHC.Generics.U1
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1)
          GHC.Generics.:+: (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "Millilitre"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1)))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.$fNFDataUnit2
                  `cast`
                (Trans
                     (forall (a1 :: <GHC.Types.*>_N).
                      Sym (GHC.Generics.N:M1[0]
                               <GHC.Generics.D>_P
                               <'GHC.Generics.MetaData
                                  "Unit"
                                  "Duckling.Volume.Types"
                                  "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                  'GHC.Types.False>_P
                               <(GHC.Generics.C1
                                   ('GHC.Generics.MetaCons
                                      "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.C1
                                                    ('GHC.Generics.MetaCons
                                                       "Hectolitre"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1)
                                GHC.Generics.:+: (GHC.Generics.C1
                                                    ('GHC.Generics.MetaCons
                                                       "Litre"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1
                                                  GHC.Generics.:+: GHC.Generics.C1
                                                                     ('GHC.Generics.MetaCons
                                                                        "Millilitre"
                                                                        'GHC.Generics.PrefixI
                                                                        'GHC.Types.False)
                                                                     GHC.Generics.U1)>_R) <a1>_N
                      ->_R <()>_R)
                     (Sym (Control.DeepSeq.N:GNFData[0]
                               <GHC.Types.*>_N
                               <GHC.Generics.M1
                                  GHC.Generics.D
                                  ('GHC.Generics.MetaData
                                     "Unit"
                                     "Duckling.Volume.Types"
                                     "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                     'GHC.Types.False)
                                  ((GHC.Generics.C1
                                      ('GHC.Generics.MetaCons
                                         "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      GHC.Generics.U1
                                    GHC.Generics.:+: GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "Hectolitre"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1)
                                   GHC.Generics.:+: (GHC.Generics.C1
                                                       ('GHC.Generics.MetaCons
                                                          "Litre"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.C1
                                                                        ('GHC.Generics.MetaCons
                                                                           "Millilitre"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1))>_N))) -}
a4ab19233eed76b6690e71da843566d6
  $fNFDataUnit2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "Millilitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a1
                   (ds :: (GHC.Generics.:+:)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Hectolitre"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.False)
                                                GHC.Generics.U1)
                            (GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Millilitre"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.False)
                                                GHC.Generics.U1)
                            a1) ->
                 case ds of wild {
                   GHC.Generics.L1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }
                   GHC.Generics.R1 x
                   -> case x of wild1 {
                        GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x1
                        -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fNFDataUnit_$s$dmrnf :: Duckling.Volume.Types.Unit -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Volume.Types.Unit) ->
                 Duckling.Volume.Types.$fNFDataUnit1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N (Sym (Duckling.Volume.Types.Rep_Unit[0])))
                   @ GHC.Prim.Any
                   (Duckling.Volume.Types.$fGenericUnit_$cfrom @ GHC.Prim.Any eta)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fNFDataVolumeData ::
    Control.DeepSeq.NFData Duckling.Volume.Types.VolumeData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Volume.Types.$fNFDataVolumeData_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Volume.Types.VolumeData>_N)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fNFDataVolumeData_$crnf :: Duckling.Volume.Types.VolumeData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 Duckling.Volume.Types.$w$crnf ww1 ww2 ww3 ww4 }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection ::
    GHC.Classes.Ord Duckling.Volume.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.IntervalDirection
                  Duckling.Volume.Types.$fEqIntervalDirection
                  Duckling.Volume.Types.$fOrdIntervalDirection_$ccompare
                  Duckling.Volume.Types.$fOrdIntervalDirection_$c<
                  Duckling.Volume.Types.$fOrdIntervalDirection_$c<=
                  Duckling.Volume.Types.$fOrdIntervalDirection_$c>
                  Duckling.Volume.Types.$fOrdIntervalDirection_$c>=
                  Duckling.Volume.Types.$fOrdIntervalDirection_$cmax
                  Duckling.Volume.Types.$fOrdIntervalDirection_$cmin -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$c< ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.False
                        Duckling.Volume.Types.Under -> GHC.Types.True }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$c<= ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.False
                        Duckling.Volume.Types.Under -> GHC.Types.True } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$c> ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.True
                        Duckling.Volume.Types.Under -> GHC.Types.False } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$c>= ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.True
                        Duckling.Volume.Types.Under -> GHC.Types.False }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$ccompare ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Volume.Types.IntervalDirection)
                   (b :: Duckling.Volume.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Volume.Types.Above
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.EQ
                        Duckling.Volume.Types.Under -> GHC.Types.LT }
                   Duckling.Volume.Types.Under
                   -> case b of wild1 {
                        Duckling.Volume.Types.Above -> GHC.Types.GT
                        Duckling.Volume.Types.Under -> GHC.Types.EQ } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$cmax ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Volume.Types.IntervalDirection)
                   (y :: Duckling.Volume.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Volume.Types.Above -> y
                   Duckling.Volume.Types.Under
                   -> case y of wild1 { DEFAULT -> Duckling.Volume.Types.Under } }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fOrdIntervalDirection_$cmin ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Volume.Types.IntervalDirection)
                   (y :: Duckling.Volume.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Volume.Types.Above
                   -> case y of wild1 { DEFAULT -> Duckling.Volume.Types.Above }
                   Duckling.Volume.Types.Under -> y }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit :: GHC.Classes.Ord Duckling.Volume.Types.Unit
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fEqUnit
                  Duckling.Volume.Types.$fOrdUnit_$ccompare
                  Duckling.Volume.Types.$fOrdUnit_$c<
                  Duckling.Volume.Types.$fOrdUnit_$c<=
                  Duckling.Volume.Types.$fOrdUnit_$c>
                  Duckling.Volume.Types.$fOrdUnit_$c>=
                  Duckling.Volume.Types.$fOrdUnit_$cmax
                  Duckling.Volume.Types.$fOrdUnit_$cmin -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$c< ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.False
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.True
                        Duckling.Volume.Types.Litre -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$c<= ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.False
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.True
                        Duckling.Volume.Types.Litre -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.True } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$c> ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.True
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Litre -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$c>= ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.True
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Litre -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Volume.Types.Millilitre -> GHC.Types.False }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$ccompare ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Volume.Types.Unit)
                   (b :: Duckling.Volume.Types.Unit) ->
                 case a of wild {
                   Duckling.Volume.Types.Gallon
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.EQ
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.LT
                        Duckling.Volume.Types.Litre -> GHC.Types.LT
                        Duckling.Volume.Types.Millilitre -> GHC.Types.LT }
                   Duckling.Volume.Types.Hectolitre
                   -> case b of wild1 {
                        Duckling.Volume.Types.Gallon -> GHC.Types.GT
                        Duckling.Volume.Types.Hectolitre -> GHC.Types.EQ
                        Duckling.Volume.Types.Litre -> GHC.Types.LT
                        Duckling.Volume.Types.Millilitre -> GHC.Types.LT }
                   Duckling.Volume.Types.Litre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Volume.Types.Litre -> GHC.Types.EQ
                        Duckling.Volume.Types.Millilitre -> GHC.Types.LT }
                   Duckling.Volume.Types.Millilitre
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Volume.Types.Millilitre -> GHC.Types.EQ } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$cmax ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> Duckling.Volume.Types.Unit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Duckling.Volume.Types.Unit)
                   (y :: Duckling.Volume.Types.Unit) ->
                 case x of wild {
                   Duckling.Volume.Types.Gallon -> y
                   Duckling.Volume.Types.Hectolitre
                   -> case y of wild1 {
                        DEFAULT -> Duckling.Volume.Types.Hectolitre
                        Duckling.Volume.Types.Litre -> Duckling.Volume.Types.Litre
                        Duckling.Volume.Types.Millilitre
                        -> Duckling.Volume.Types.Millilitre }
                   Duckling.Volume.Types.Litre
                   -> case y of wild1 {
                        DEFAULT -> Duckling.Volume.Types.Litre
                        Duckling.Volume.Types.Millilitre
                        -> Duckling.Volume.Types.Millilitre }
                   Duckling.Volume.Types.Millilitre
                   -> case y of wild1 { DEFAULT ->
                      Duckling.Volume.Types.Millilitre } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdUnit_$cmin ::
    Duckling.Volume.Types.Unit
    -> Duckling.Volume.Types.Unit -> Duckling.Volume.Types.Unit
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Duckling.Volume.Types.Unit)
                   (y :: Duckling.Volume.Types.Unit) ->
                 case x of wild {
                   Duckling.Volume.Types.Gallon
                   -> case y of wild1 { DEFAULT -> Duckling.Volume.Types.Gallon }
                   Duckling.Volume.Types.Hectolitre
                   -> case y of wild1 {
                        Duckling.Volume.Types.Gallon -> Duckling.Volume.Types.Gallon
                        Duckling.Volume.Types.Hectolitre
                        -> Duckling.Volume.Types.Hectolitre
                        Duckling.Volume.Types.Litre -> Duckling.Volume.Types.Hectolitre
                        Duckling.Volume.Types.Millilitre
                        -> Duckling.Volume.Types.Hectolitre }
                   Duckling.Volume.Types.Litre
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Duckling.Volume.Types.Litre -> Duckling.Volume.Types.Litre
                        Duckling.Volume.Types.Millilitre -> Duckling.Volume.Types.Litre }
                   Duckling.Volume.Types.Millilitre -> y }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData :: GHC.Classes.Ord Duckling.Volume.Types.VolumeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fEqVolumeData
                  Duckling.Volume.Types.$fOrdVolumeData_$ccompare
                  Duckling.Volume.Types.$fOrdVolumeData_$c<
                  Duckling.Volume.Types.$fOrdVolumeData_$c<=
                  Duckling.Volume.Types.$fOrdVolumeData_$c>
                  Duckling.Volume.Types.$fOrdVolumeData_$c>=
                  Duckling.Volume.Types.$fOrdVolumeData_$cmax
                  Duckling.Volume.Types.$fOrdVolumeData_$cmin -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$c< ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$c< ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$c<= ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$c<=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$c> ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$c> ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$c>= ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$c>=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$ccompare ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U)><S(SLLL),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeData)
                   (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Duckling.Volume.Types.VolumeData ww6 ww7 ww8 ww9 ->
                 Duckling.Volume.Types.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$cmax ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Volume.Types.VolumeData)
                   (y :: Duckling.Volume.Types.VolumeData) ->
                 case Duckling.Volume.Types.$fOrdVolumeData_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fOrdVolumeData_$cmin ::
    Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData
    -> Duckling.Volume.Types.VolumeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),U(U,U,U,U)><S(SLLL),U(U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Volume.Types.VolumeData)
                   (y :: Duckling.Volume.Types.VolumeData) ->
                 case Duckling.Volume.Types.$fOrdVolumeData_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fResolveVolumeData ::
    Duckling.Resolve.Resolve Duckling.Volume.Types.VolumeData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fEqVolumeValue
                    `cast`
                  (GHC.Classes.Eq
                     (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))_R
                  Duckling.Volume.Types.$fShowVolumeValue
                    `cast`
                  (GHC.Show.Show
                     (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))_R
                  Duckling.Volume.Types.$fToJSONVolumeValue
                    `cast`
                  (Data.Aeson.Types.ToJSON.ToJSON
                     (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))_R
                  Duckling.Volume.Types.$fResolveVolumeData_$cresolve -}
5738d6f6e95b9f3dd848988e75dc6877
  $fResolveVolumeData_$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Volume.Types.VolumeData
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue Duckling.Volume.Types.VolumeData,
          GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(SLLL),1*U(U,U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Resolve.Context)
                   (w1 :: Duckling.Resolve.Options)
                   (w2 :: Duckling.Volume.Types.VolumeData) ->
                 case w2 of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 Duckling.Volume.Types.$w$cresolve ww1 ww2 ww3 ww4 }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fShowIntervalDirection ::
    GHC.Show.Show Duckling.Volume.Types.IntervalDirection
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.IntervalDirection
                  Duckling.Volume.Types.$fShowIntervalDirection_$cshowsPrec
                  Duckling.Volume.Types.$fShowIntervalDirection_$cshow
                  Duckling.Volume.Types.$fShowIntervalDirection_$cshowList -}
79d603e2cc95b5c4207bfea8324014fc
  $fShowIntervalDirection1 ::
    Duckling.Volume.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Volume.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Volume.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Volume.Types.$fShowVolumeValue3)
                        eta
                   Duckling.Volume.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Volume.Types.$fShowVolumeValue2)
                        eta }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fShowIntervalDirection_$cshow ::
    Duckling.Volume.Types.IntervalDirection -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Volume.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Volume.Types.Above
                   -> Duckling.Volume.Types.$fShowVolumeValue3
                   Duckling.Volume.Types.Under
                   -> Duckling.Volume.Types.$fShowVolumeValue2 }) -}
79d603e2cc95b5c4207bfea8324014fc
  $fShowIntervalDirection_$cshowList ::
    [Duckling.Volume.Types.IntervalDirection] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Volume.Types.IntervalDirection
                   Duckling.Volume.Types.$fShowIntervalDirection1) -}
79d603e2cc95b5c4207bfea8324014fc
  $fShowIntervalDirection_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Volume.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Volume.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Volume.Types.Above
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Volume.Types.$fShowVolumeValue3)
                        eta
                   Duckling.Volume.Types.Under
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Duckling.Volume.Types.$fShowVolumeValue2)
                        eta }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowSingleValue ::
    GHC.Show.Show Duckling.Volume.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.SingleValue
                  Duckling.Volume.Types.$fShowSingleValue_$cshowsPrec
                  Duckling.Volume.Types.$fShowSingleValue_$cshow
                  Duckling.Volume.Types.$fShowSingleValue_$cshowList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowSingleValue1 ::
    Duckling.Volume.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Volume.Types.SingleValue) ->
                 case w of ww { Duckling.Volume.Types.SingleValue ww1 ww2 ->
                 Duckling.Volume.Types.$w$cshowsPrec2 0# ww1 ww2 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowSingleValue_$cshow ::
    Duckling.Volume.Types.SingleValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Volume.Types.SingleValue) ->
                 Duckling.Volume.Types.$fShowSingleValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowSingleValue_$cshowList ::
    [Duckling.Volume.Types.SingleValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Volume.Types.SingleValue
                   Duckling.Volume.Types.$fShowSingleValue1) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowSingleValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Volume.Types.SingleValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Volume.Types.SingleValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Volume.Types.SingleValue ww3 ww4 ->
                 Duckling.Volume.Types.$w$cshowsPrec2 ww1 ww3 ww4 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowUnit :: GHC.Show.Show Duckling.Volume.Types.Unit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fShowUnit_$cshowsPrec
                  Duckling.Volume.Types.$fShowUnit_$cshow
                  Duckling.Volume.Types.$fShowUnit_$cshowList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowUnit_$cshow :: Duckling.Volume.Types.Unit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Volume.Types.Unit) ->
                 Duckling.Volume.Types.$fShowUnit_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowUnit_$cshowList ::
    [Duckling.Volume.Types.Unit] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Volume.Types.Unit
                   Duckling.Volume.Types.$w$cshowsPrec) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowUnit_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Volume.Types.Unit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Volume.Types.Unit)
                   (w2 :: GHC.Base.String) ->
                 Duckling.Volume.Types.$w$cshowsPrec w1 w2) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeData :: GHC.Show.Show Duckling.Volume.Types.VolumeData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeData
                  Duckling.Volume.Types.$fShowVolumeData_$cshowsPrec
                  Duckling.Volume.Types.$fShowVolumeData_$cshow
                  Duckling.Volume.Types.$fShowVolumeData_$cshowList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeData1 ::
    Duckling.Volume.Types.VolumeData -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { Duckling.Volume.Types.VolumeData ww1 ww2 ww3 ww4 ->
                 Duckling.Volume.Types.$w$cshowsPrec3 0# ww1 ww2 ww3 ww4 }) -}
c4ecd3b7165186c8e4418cbebedd4dfc
  $fShowVolumeData2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "maxValue = "#) -}
5774dce724f074aaf76a3fe6147d9b26
  $fShowVolumeData3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "minValue = "#) -}
056c16c56c6f270b3b73a4b7bbb196f9
  $fShowVolumeData4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unit = "#) -}
ec94082d34c0a352bf219bb5f41d0d15
  $fShowVolumeData5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "value = "#) -}
f5636d7279d2358862cb6e953ee11e98
  $fShowVolumeData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VolumeData {"#) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeData_$cshow ::
    Duckling.Volume.Types.VolumeData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Volume.Types.VolumeData) ->
                 Duckling.Volume.Types.$fShowVolumeData_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeData_$cshowList ::
    [Duckling.Volume.Types.VolumeData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Volume.Types.VolumeData
                   Duckling.Volume.Types.$fShowVolumeData1) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeData_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Volume.Types.VolumeData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Volume.Types.VolumeData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Volume.Types.VolumeData ww3 ww4 ww5 ww6 ->
                 Duckling.Volume.Types.$w$cshowsPrec3 ww1 ww3 ww4 ww5 ww6 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeValue ::
    GHC.Show.Show Duckling.Volume.Types.VolumeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeValue
                  Duckling.Volume.Types.$fShowVolumeValue_$cshowsPrec
                  Duckling.Volume.Types.$fShowVolumeValue_$cshow
                  Duckling.Volume.Types.$fShowVolumeValue_$cshowList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeValue1 ::
    Duckling.Volume.Types.VolumeValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Volume.Types.VolumeValue) ->
                 Duckling.Volume.Types.$w$cshowsPrec1 0# w) -}
84dcc59b8542be2695401299b12daed4
  $fShowVolumeValue10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vUnit = "#) -}
6e021ec623f07f53bebb3ec4815c7428
  $fShowVolumeValue11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SingleValue {"#) -}
c71a7f180192df69399614413568188c
  $fShowVolumeValue12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
61fc81f67d6a21f688a90ed7d8ebf96d
  $fShowVolumeValue13 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
db92319c4cedefed899ca25675b1e546
  $fShowVolumeValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Under"#) -}
05f1889bfae8e6624608a7e022ddb3b6
  $fShowVolumeValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Above"#) -}
a541df91a32c75bf4e55d5a35ecf0916
  $fShowVolumeValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OpenIntervalValue "#) -}
3028bd5d287d5959bd58b236cb41b96b
  $fShowVolumeValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "IntervalValue "#) -}
faaa621dba50bc2a9f377860692baf52
  $fShowVolumeValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SimpleValue "#) -}
b4f27e5d656e986d2f7a2a268c30a622
  $fShowVolumeValue7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
2226e0ef4934e4db5cbe5bb9f7624384
  $fShowVolumeValue8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vValue = "#) -}
8b937480b61bba9f275663f34436243d
  $fShowVolumeValue9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeValue_$cshow ::
    Duckling.Volume.Types.VolumeValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Duckling.Volume.Types.VolumeValue) ->
                 case x of wild {
                   Duckling.Volume.Types.SimpleValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fShowVolumeValue6
                        (case b1 of ww { Duckling.Volume.Types.SingleValue ww1 ww2 ->
                         Duckling.Volume.Types.$w$cshowsPrec2
                           11#
                           ww1
                           ww2
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Duckling.Volume.Types.IntervalValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fShowVolumeValue5
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { Duckling.Volume.Types.SingleValue ww5 ww6 ->
                            Duckling.Volume.Types.$w$cshowsPrec2
                              0#
                              ww5
                              ww6
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows5
                                 (GHC.Show.$fShow(,)_$sgo
                                    Duckling.Volume.Types.$fShowVolumeValue13
                                    (case ww2 of ww7 { Duckling.Volume.Types.SingleValue ww8 ww9 ->
                                     Duckling.Volume.Types.$w$cshowsPrec2 0# ww8 ww9 })
                                    (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                   Duckling.Volume.Types.OpenIntervalValue b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fShowVolumeValue4
                        (case b1 of ww { (,) ww1 ww2 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows7
                           (case ww1 of ww4 { Duckling.Volume.Types.SingleValue ww5 ww6 ->
                            Duckling.Volume.Types.$w$cshowsPrec2
                              0#
                              ww5
                              ww6
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.shows5
                                 (GHC.Show.$fShow(,)_$sgo
                                    Duckling.Volume.Types.$fShowVolumeValue13
                                    (\ (eta :: GHC.Base.String) ->
                                     case ww2 of wild1 {
                                       Duckling.Volume.Types.Above
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Volume.Types.$fShowVolumeValue3
                                            eta
                                       Duckling.Volume.Types.Under
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Volume.Types.$fShowVolumeValue2
                                            eta })
                                    (GHC.Types.[] @ GHC.Show.ShowS))) }) }) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeValue_$cshowList ::
    [Duckling.Volume.Types.VolumeValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Volume.Types.VolumeValue
                   Duckling.Volume.Types.$fShowVolumeValue1) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fShowVolumeValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Volume.Types.VolumeValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Volume.Types.VolumeValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Volume.Types.$w$cshowsPrec1 ww1 w1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONSingleValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Volume.Types.SingleValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.SingleValue
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1
                  Duckling.Volume.Types.$fToJSONSingleValue_$ctoEncoding
                  Duckling.Volume.Types.$fToJSONSingleValue_$ctoJSONList
                  Duckling.Volume.Types.$fToJSONSingleValue_$ctoEncodingList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONSingleValue_$ctoEncoding ::
    Duckling.Volume.Types.SingleValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Volume.Types.SingleValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 eta)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONSingleValue_$ctoEncodingList ::
    [Duckling.Volume.Types.SingleValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.SingleValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Volume.Types.SingleValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Volume.Types.SingleValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Volume.Types.SingleValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONSingleValue_$ctoJSONList ::
    [Duckling.Volume.Types.SingleValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.SingleValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Volume.Types.SingleValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Volume.Types.SingleValue
                                       c
                                       Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONUnit ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Volume.Types.Unit
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.Unit
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2
                  Duckling.Volume.Types.$fToJSONUnit_$ctoEncoding
                  Duckling.Volume.Types.$fToJSONUnit_$ctoJSONList
                  Duckling.Volume.Types.$fToJSONUnit_$ctoEncodingList -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONUnit_$ctoEncoding ::
    Duckling.Volume.Types.Unit -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Volume.Types.Unit) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2 eta)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONUnit_$ctoEncodingList ::
    [Duckling.Volume.Types.Unit]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.Unit]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Volume.Types.Unit
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Volume.Types.Unit)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2 v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Volume.Types.Unit>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONUnit_$ctoJSONList ::
    [Duckling.Volume.Types.Unit] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.Unit]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Volume.Types.Unit
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Volume.Types.Unit
                                       c
                                       Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Volume.Types.VolumeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Volume.Types.VolumeValue
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoEncoding
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSONList
                  Duckling.Volume.Types.$fToJSONVolumeValue_$ctoEncodingList -}
27d13b8ab7fcc8244a8373f53eae0ada
  $fToJSONVolumeValue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "to"#) -}
8a1bb841f45ed10809e57a9cbf203094
  $fToJSONVolumeValue10 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "interval"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
a1d1cf37e6a7da8af2fd974a7a9f921b
  $fToJSONVolumeValue11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "type"#) -}
ff0eeefef6b7ca5f9a27ff2a9ccf6249
  $fToJSONVolumeValue12 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
6ecbbf53056598707ecd1c98a331aa98
  $fToJSONVolumeValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Millilitre"#) -}
60dd091a4bdc224fd8c374d22986761a
  $fToJSONVolumeValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Litre"#) -}
e32e031831d955c7bd8a100a78584a91
  $fToJSONVolumeValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hectolitre"#) -}
d0e654b5ec3e9609659d8861cfecaac3
  $fToJSONVolumeValue5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gallon"#) -}
a9cef91ce183afc76178afdb7808a247
  $fToJSONVolumeValue6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "unit"#) -}
099d69421fe3465fc58f3accab42b331
  $fToJSONVolumeValue7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
c2ff93c5b7012e30897708d42ca854a6
  $fToJSONVolumeValue8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "from"#) -}
465fcbe3ee2843cb1918af653cb83590
  $fToJSONVolumeValue9 :: Data.Aeson.Types.Internal.Pair
  {- Strictness: m,
     Unfolding: ((Duckling.Volume.Types.$fToJSONVolumeValue11,
                  Duckling.Volume.Types.$fToJSONVolumeValue10)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoEncoding ::
    Duckling.Volume.Types.VolumeValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Volume.Types.VolumeValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON eta)) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoEncodingList ::
    [Duckling.Volume.Types.VolumeValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.VolumeValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Volume.Types.VolumeValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Volume.Types.VolumeValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Volume.Types.VolumeValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoJSON ::
    Duckling.Volume.Types.VolumeValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Volume.Types.VolumeValue) ->
                 case Duckling.Volume.Types.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoJSON1 ::
    Duckling.Volume.Types.SingleValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Volume.Types.SingleValue) ->
                 case w of ww { Duckling.Volume.Types.SingleValue ww1 ww2 ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Duckling.Volume.Types.$fToJSONVolumeValue7,
                            Data.Aeson.Types.ToJSON.$fToJSONDouble_$srealFloatToJSON ww2)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Volume.Types.$fToJSONVolumeValue6,
                               Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2 ww1)
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoJSON2 ::
    Duckling.Volume.Types.Unit -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Volume.Types.Unit) ->
                 case Duckling.Volume.Types.$w$ctoJSON1 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.String ww1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $fToJSONVolumeValue_$ctoJSONList ::
    [Duckling.Volume.Types.VolumeValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Volume.Types.VolumeValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Volume.Types.VolumeValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Volume.Types.VolumeValue
                                       c
                                       Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
5678a1e5453b3b3b1fd66012d91828c6
  $tc'Above :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5764851423508898015##
                   9189487159888553272##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Above1) -}
db9b42b3ef9bc879c31127ce1fb3f02f
  $tc'Above1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Above"#) -}
eba4d519828451abdecb6e1e32fdcc9e
  $tc'Gallon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14559951460025346557##
                   11999330760004842028##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Gallon1) -}
6f1fe3d2bba920f27cf49a72ce5fe530
  $tc'Gallon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gallon"#) -}
02ba3a84e53fe1b37b406382c38dbe6c
  $tc'Hectolitre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15409102395501373919##
                   12965446518360933426##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Hectolitre1) -}
1b016029c8e219ce5979b36ea95e37ef
  $tc'Hectolitre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Hectolitre"#) -}
8b252ff8ec7c56390f261ddf2abda244
  $tc'IntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15767454105289565246##
                   3238108470437374590##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'IntervalValue1) -}
8fe96e2213c8788ea880cc6a6fd4da22
  $tc'IntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntervalValue"#) -}
1180d172817c4b7ffd1765301f2d4d6a
  $tc'Litre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12151413735923985867##
                   11814109912910920593##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Litre1) -}
3e0f6d8394dfee749191d400cd695494
  $tc'Litre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Litre"#) -}
a421d289fde3f281a9a093453d62af3d
  $tc'Millilitre :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8190896485589124451##
                   640050936036449731##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Millilitre1) -}
d0fb5c4fc2930efda269e8235e38de9c
  $tc'Millilitre1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Millilitre"#) -}
45e075f39d913938df0a67b94f1cf3b5
  $tc'OpenIntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10790402884013245906##
                   419855951451777983##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'OpenIntervalValue1) -}
030c433e8d36ce5564850db6fdf449fe
  $tc'OpenIntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpenIntervalValue"#) -}
27509ca24e48c1058534bcc68edec4d5
  $tc'SimpleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5102247457476953753##
                   9622862844155673385##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'SimpleValue1) -}
58b814752ea4f0fce9fea54fae1215a1
  $tc'SimpleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SimpleValue"#) -}
562112b47fc26a3e9e2b637da99b33f6
  $tc'SingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9368080918697850862##
                   12037865439264427643##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'SingleValue1) -}
6955d4e7222b3ba5200b6b782e51b1d2
  $tc'SingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SingleValue"#) -}
4e835b2e38199affc9da8ce51b86b5d2
  $tc'Under :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11067799816072629038##
                   8395484812698279490##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'Under1) -}
c34ca6890d399b96f9c0728cb66c91a3
  $tc'Under1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Under"#) -}
299362402cc8eab29761065a6ef83ad3
  $tc'VolumeData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18148115932909277859##
                   2678386907099684621##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tc'VolumeData1) -}
c0796a6e27d21570ca39b3ac031b81ec
  $tc'VolumeData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VolumeData"#) -}
7dec5b1cf66d4702c61cde81ae8ae012
  $tcIntervalDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8623457911180789043##
                   7185373918370661414##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tcIntervalDirection1) -}
2dc528ac6b3d83b3b9fca5d4a8de3fd1
  $tcIntervalDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntervalDirection"#) -}
df91688a22a028dba49f3c7f061274b8
  $tcSingleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13802494463988135029##
                   15587506713674533110##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tcSingleValue1) -}
d38cb7eebfc7df60169a725262007b26
  $tcSingleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SingleValue"#) -}
f36efb10cebee78cdf1d73c92c8eddd4
  $tcUnit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5154045198162998479##
                   12915533393167176039##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tcUnit1) -}
78cdfda6309f79b565872d734f1095df
  $tcUnit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Unit"#) -}
cbc4b434d35a550336b27d8f0fba5e8d
  $tcVolumeData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6236653867265099136##
                   10906926920337686891##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tcVolumeData1) -}
b7099c30028a487843097090f1c171f4
  $tcVolumeData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VolumeData"#) -}
37d7463592bcb337abc82780972f5687
  $tcVolumeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11770425548684230593##
                   14504054191566364786##
                   Duckling.Volume.Types.$trModule
                   Duckling.Volume.Types.$tcVolumeValue1) -}
60637eebdd900b58c54f099af38877bb
  $tcVolumeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "VolumeValue"#) -}
bce9948ec141443c916d25340727666d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Volume.Types.$trModule2
                   Duckling.Volume.Types.$trModule1) -}
1c21a00d6ec6ee7da144853963a8961c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Volume.Types"#) -}
a4a6793646c90d83de77148f29f91849
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c< ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c<= ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c== ::
    Duckling.Volume.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Volume.Types.Unit
    -> GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Volume.Types.Unit)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Duckling.Volume.Types.Unit)
                   (ww3 :: GHC.Types.Double) ->
                 case ww of wild {
                   Duckling.Volume.Types.Gallon
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Gallon -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Volume.Types.Hectolitre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Hectolitre -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Volume.Types.Litre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Litre -> GHC.Classes.eqDouble ww1 ww3 }
                   Duckling.Volume.Types.Millilitre
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Volume.Types.Millilitre
                        -> GHC.Classes.eqDouble ww1 ww3 } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c==1 ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe GHC.Types.Double)
                   (ww1 :: GHC.Base.Maybe Duckling.Volume.Types.Unit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww5 :: GHC.Base.Maybe Duckling.Volume.Types.Unit)
                   (ww6 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww7 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   $j :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (w :: GHC.Prim.Void#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                         {- Arity: 1, Strictness: <L,A> -}
                       = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Void# -> GHC.Types.Bool
                             {- Arity: 1, Strictness: <L,A> -}
                           = \ (w2 :: GHC.Prim.Void#)[OneShot] ->
                             case ww3 of wild {
                               GHC.Base.Nothing
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.True
                                    GHC.Base.Just ipv -> GHC.Types.False }
                               GHC.Base.Just a1
                               -> case ww7 of wild1 {
                                    GHC.Base.Nothing -> GHC.Types.False
                                    GHC.Base.Just b1 -> GHC.Classes.eqDouble a1 b1 } }
                         } in
                         case ww2 of wild {
                           GHC.Base.Nothing
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> $j2 GHC.Prim.void#
                                GHC.Base.Just ipv -> GHC.Types.False }
                           GHC.Base.Just a1
                           -> case ww6 of wild1 {
                                GHC.Base.Nothing -> GHC.Types.False
                                GHC.Base.Just b1
                                -> case a1 of wild2 { GHC.Types.D# x ->
                                   case b1 of wild3 { GHC.Types.D# y ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.==## x y) of wild4 {
                                     GHC.Types.False -> GHC.Types.False
                                     GHC.Types.True -> $j2 GHC.Prim.void# } } } } }
                     } in
                     case ww1 of wild {
                       GHC.Base.Nothing
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> $j1 GHC.Prim.void#
                            GHC.Base.Just ipv -> GHC.Types.False }
                       GHC.Base.Just a1
                       -> case ww5 of wild1 {
                            GHC.Base.Nothing -> GHC.Types.False
                            GHC.Base.Just b1
                            -> case a1 of wild2 {
                                 Duckling.Volume.Types.Gallon
                                 -> case b1 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      Duckling.Volume.Types.Gallon -> $j1 GHC.Prim.void# }
                                 Duckling.Volume.Types.Hectolitre
                                 -> case b1 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      Duckling.Volume.Types.Hectolitre -> $j1 GHC.Prim.void# }
                                 Duckling.Volume.Types.Litre
                                 -> case b1 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      Duckling.Volume.Types.Litre -> $j1 GHC.Prim.void# }
                                 Duckling.Volume.Types.Millilitre
                                 -> case b1 of wild3 {
                                      DEFAULT -> GHC.Types.False
                                      Duckling.Volume.Types.Millilitre -> $j1 GHC.Prim.void# } } } }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> $j GHC.Prim.void#
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of wild2 { GHC.Types.D# x ->
                           case b1 of wild3 { GHC.Types.D# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> $j GHC.Prim.void# } } } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c> ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$c>= ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$ccompare ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$cresolve ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue Duckling.Volume.Types.VolumeData,
          GHC.Types.Bool)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe GHC.Types.Double)
                   (ww1 :: GHC.Base.Maybe Duckling.Volume.Types.Unit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   fail :: GHC.Prim.Void#
                           -> GHC.Base.Maybe
                                (Duckling.Resolve.ResolvedValue Duckling.Volume.Types.VolumeData,
                                 GHC.Types.Bool)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     case ww of wild {
                       GHC.Base.Nothing
                       -> case ww1 of wild1 {
                            GHC.Base.Nothing
                            -> (GHC.Base.Nothing
                                  @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool))
                                 `cast`
                               (GHC.Base.Maybe
                                  ((,)
                                     (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                     <GHC.Types.Bool>_R)_R)_R
                            GHC.Base.Just u
                            -> case ww2 of wild2 {
                                 GHC.Base.Nothing
                                 -> case ww3 of wild3 {
                                      GHC.Base.Nothing
                                      -> (GHC.Base.Nothing
                                            @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                               <GHC.Types.Bool>_R)_R)_R
                                      GHC.Base.Just v
                                      -> (GHC.Base.Just
                                            @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool)
                                            (Duckling.Volume.Types.OpenIntervalValue
                                               (Duckling.Volume.Types.SingleValue u v,
                                                Duckling.Volume.Types.Under),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                               <GHC.Types.Bool>_R)_R)_R }
                                 GHC.Base.Just from
                                 -> case ww3 of wild3 {
                                      GHC.Base.Nothing
                                      -> (GHC.Base.Just
                                            @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool)
                                            (Duckling.Volume.Types.OpenIntervalValue
                                               (Duckling.Volume.Types.SingleValue u from,
                                                Duckling.Volume.Types.Above),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                               <GHC.Types.Bool>_R)_R)_R
                                      GHC.Base.Just to
                                      -> (GHC.Base.Just
                                            @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool)
                                            (Duckling.Volume.Types.IntervalValue
                                               (Duckling.Volume.Types.SingleValue u from,
                                                Duckling.Volume.Types.SingleValue u to),
                                             GHC.Types.False))
                                           `cast`
                                         (GHC.Base.Maybe
                                            ((,)
                                               (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                               <GHC.Types.Bool>_R)_R)_R } } }
                       GHC.Base.Just ipv
                       -> (GHC.Base.Nothing
                             @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool))
                            `cast`
                          (GHC.Base.Maybe
                             ((,)
                                (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                <GHC.Types.Bool>_R)_R)_R }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> fail GHC.Prim.void#
                   GHC.Base.Just v
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing -> fail GHC.Prim.void#
                        GHC.Base.Just u
                        -> (GHC.Base.Just
                              @ (Duckling.Volume.Types.VolumeValue, GHC.Types.Bool)
                              (Duckling.Volume.Types.SimpleValue
                                 (Duckling.Volume.Types.SingleValue u v),
                               GHC.Types.False))
                             `cast`
                           (GHC.Base.Maybe
                              ((,)
                                 (Sub (Sym (Duckling.Volume.Types.D:R:ResolvedValueVolumeData[0])))
                                 <GHC.Types.Bool>_R)_R)_R } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$crnf ::
    GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe GHC.Types.Double)
                   (ww1 :: GHC.Base.Maybe Duckling.Volume.Types.Unit)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double) ->
                 case case ww of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataDouble_$crnf x } of wild1 { () ->
                 case case ww1 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> case x of wild2 { DEFAULT -> GHC.Tuple.() } } of wild2 { () ->
                 case case ww2 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataDouble_$crnf x } of wild3 { () ->
                 case ww3 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Control.DeepSeq.$fNFDataDouble_$crnf x } } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$cshowsPrec ::
    Duckling.Volume.Types.Unit -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Volume.Types.Unit)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Duckling.Volume.Types.Gallon
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fToJSONVolumeValue5
                        w1
                   Duckling.Volume.Types.Hectolitre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fToJSONVolumeValue4
                        w1
                   Duckling.Volume.Types.Litre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fToJSONVolumeValue3
                        w1
                   Duckling.Volume.Types.Millilitre
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Volume.Types.$fToJSONVolumeValue2
                        w1 }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Volume.Types.VolumeValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Volume.Types.VolumeValue) ->
                 case w of wild {
                   Duckling.Volume.Types.SimpleValue b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww1 { Duckling.Volume.Types.SingleValue ww2 ww3 ->
                          Duckling.Volume.Types.$w$cshowsPrec2 11# ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Duckling.Volume.Types.$fShowVolumeValue6
                             (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Volume.Types.$fShowVolumeValue6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Duckling.Volume.Types.IntervalValue b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Volume.Types.$fShowVolumeValue5
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { Duckling.Volume.Types.SingleValue ww5 ww6 ->
                                Duckling.Volume.Types.$w$cshowsPrec2
                                  0#
                                  ww5
                                  ww6
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows5
                                     (GHC.Show.$fShow(,)_$sgo
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                        (case ww3 of ww7 { Duckling.Volume.Types.SingleValue ww8 ww9 ->
                                         Duckling.Volume.Types.$w$cshowsPrec2 0# ww8 ww9 })
                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }
                   Duckling.Volume.Types.OpenIntervalValue b1
                   -> let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Volume.Types.$fShowVolumeValue4
                            (case b1 of ww1 { (,) ww2 ww3 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.shows7
                               (case ww2 of ww4 { Duckling.Volume.Types.SingleValue ww5 ww6 ->
                                Duckling.Volume.Types.$w$cshowsPrec2
                                  0#
                                  ww5
                                  ww6
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows5
                                     (GHC.Show.$fShow(,)_$sgo
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)
                                        (\ (eta :: GHC.Base.String) ->
                                         case ww3 of wild1 {
                                           Duckling.Volume.Types.Above
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Duckling.Volume.Types.$fShowVolumeValue3
                                                eta
                                           Duckling.Volume.Types.Under
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                Duckling.Volume.Types.$fShowVolumeValue2
                                                eta })
                                        (GHC.Types.[] @ GHC.Show.ShowS))) }) })
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Duckling.Volume.Types.Unit -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Volume.Types.Unit)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Volume.Types.$fShowVolumeValue12
                       ww4 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Volume.Types.$fShowVolumeValue11
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Volume.Types.$fShowVolumeValue10
                          (Duckling.Volume.Types.$w$cshowsPrec
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Volume.Types.$fShowVolumeValue9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Volume.Types.$fShowVolumeValue8
                                   (f (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Volume.Types.$fShowVolumeValue7
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Double
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe Duckling.Volume.Types.Unit)
                   (ww3 :: GHC.Base.Maybe GHC.Types.Double)
                   (ww4 :: GHC.Base.Maybe GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Volume.Types.$fShowVolumeValue12
                       ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Duckling.Volume.Types.Unit
                       Duckling.Volume.Types.$fShowUnit
                       Duckling.Volume.Types.$fShowVolumeValue12
                       ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Volume.Types.$fShowVolumeValue12
                       ww3
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Double
                       GHC.Float.$fShowDouble
                       Duckling.Volume.Types.$fShowVolumeValue12
                       ww4
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Volume.Types.$fShowVolumeData6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Volume.Types.$fShowVolumeData5
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Volume.Types.$fShowVolumeValue9
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Volume.Types.$fShowVolumeData4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Volume.Types.$fShowVolumeValue9
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Volume.Types.$fShowVolumeData3
                                            (f2
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Volume.Types.$fShowVolumeValue9
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Duckling.Volume.Types.$fShowVolumeData2
                                                     (f3
                                                        (GHC.Base.++
                                                           @ GHC.Types.Char
                                                           Duckling.Volume.Types.$fShowVolumeValue7
                                                           x))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$ctoJSON ::
    Duckling.Volume.Types.VolumeValue
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Volume.Types.VolumeValue) ->
                 case w of wild {
                   Duckling.Volume.Types.SimpleValue value1
                   -> case value1 of ww { Duckling.Volume.Types.SingleValue ww1 ww2 ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                (Duckling.Volume.Types.$fToJSONVolumeValue7,
                                 Data.Aeson.Types.ToJSON.$fToJSONDouble_$srealFloatToJSON ww2)
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Volume.Types.$fToJSONVolumeValue6,
                                    Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON2 ww1)
                                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      case Duckling.Volume.Types.$fToJSONVolumeValue12 of v2 { DEFAULT ->
                      case Duckling.Volume.Types.$fToJSONVolumeValue11 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                      case Duckling.Volume.Types.$w$sinsert
                             @ Data.Aeson.Types.Internal.Value
                             ww4
                             ww5
                             ww6
                             v2
                             dt of dt1 { DEFAULT ->
                      (# dt1 #) } } } } }
                   Duckling.Volume.Types.IntervalValue ds
                   -> case ds of wild1 { (,) from to ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                Duckling.Volume.Types.$fToJSONVolumeValue9
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Volume.Types.$fToJSONVolumeValue8,
                                    Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 from)
                                   (GHC.Types.:
                                      @ Data.Aeson.Types.Internal.Pair
                                      (Duckling.Volume.Types.$fToJSONVolumeValue1,
                                       Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 to)
                                      (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      (# dt #) } }
                   Duckling.Volume.Types.OpenIntervalValue ds
                   -> case ds of wild1 { (,) from ds1 ->
                      case ds1 of wild2 {
                        Duckling.Volume.Types.Above
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Volume.Types.$fToJSONVolumeValue9
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Volume.Types.$fToJSONVolumeValue8,
                                         Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) }
                        Duckling.Volume.Types.Under
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Volume.Types.$fToJSONVolumeValue9
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Volume.Types.$fToJSONVolumeValue1,
                                         Duckling.Volume.Types.$fToJSONVolumeValue_$ctoJSON1 from)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) } } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$ctoJSON1 ::
    Duckling.Volume.Types.Unit -> (# Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Volume.Types.Unit) ->
                 case Duckling.Volume.Types.$w$cshowsPrec
                        w
                        (GHC.Types.[] @ GHC.Types.Char) of dt { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         Duckling.Volume.Types.$wouter
                           ipv1
                           4#
                           dt
                           '\NUL'#
                           '\NUL'#
                           0#
                           ipv }) of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of dt1 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                 (# dt1 #) } } }) -}
e24f795087e5f3dac560c577ab247f54
  $w$dGHashable ::
    GHC.Prim.Int#
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "minValue")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "maxValue")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "minValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1)
                   (ww2 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "maxValue")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Prim.Int# {- Arity: 1 -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot] ->
                     case ww2
                            `cast`
                          (Trans
                               (GHC.Generics.N:M1[0]
                                    <GHC.Generics.S>_P
                                    <'GHC.Generics.MetaSel
                                       ('GHC.Base.Just "maxValue")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy>_P
                                    <GHC.Generics.K1
                                       GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                               (GHC.Generics.N:K1[0]
                                    <GHC.Generics.R>_P
                                    <GHC.Base.Maybe GHC.Types.Double>_R
                                    <a1>_P)) of wild {
                       GHC.Base.Nothing -> GHC.Prim.*# ww3 16777619#
                       GHC.Base.Just a2
                       -> case a2 of ww4 { GHC.Types.D# ww5 ->
                          case GHC.Magic.runRW#
                                 @ 'GHC.Types.PtrRepLifted
                                 @ GHC.Word.Word64
                                 (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newAlignedPinnedByteArray#
                                         @ GHC.Prim.RealWorld
                                         8#
                                         8#
                                         eta of ds2 { (#,#) ipv ipv1 ->
                                  case GHC.Prim.unsafeFreezeByteArray#
                                         @ GHC.Prim.RealWorld
                                         ipv1
                                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                                  let {
                                    ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                                  } in
                                  case GHC.Prim.writeDoubleOffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         ww5
                                         ipv2 of s2 { DEFAULT ->
                                  case GHC.Prim.readWord64OffAddr#
                                         @ GHC.Prim.RealWorld
                                         ptr
                                         0#
                                         s2 of ds1 { (#,#) ipv4 ipv5 ->
                                  case GHC.Prim.touch#
                                         @ 'GHC.Types.PtrRepUnlifted
                                         @ GHC.Prim.ByteArray#
                                         ipv3
                                         ipv4 of s4 { DEFAULT ->
                                  (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                          case ipv1 of wild1 { GHC.Word.W64# x# ->
                          GHC.Prim.xorI#
                            (GHC.Prim.*#
                               (GHC.Prim.xorI# (GHC.Prim.*# ww3 16777619#) 6148914691236517205#)
                               16777619#)
                            (GHC.Prim.word2Int# x#) } } } }
                 } in
                 case ww1
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "minValue")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Base.Maybe GHC.Types.Double>_R
                                <a1>_P)) of wild {
                   GHC.Base.Nothing -> $j (GHC.Prim.*# ww 16777619#)
                   GHC.Base.Just a2
                   -> case a2 of ww3 { GHC.Types.D# ww4 ->
                      case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Word.Word64
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newAlignedPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     8#
                                     eta of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     ipv of ds3 { (#,#) ipv2 ipv3 ->
                              let {
                                ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                              } in
                              case GHC.Prim.writeDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     ww4
                                     ipv2 of s2 { DEFAULT ->
                              case GHC.Prim.readWord64OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     s2 of ds1 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepUnlifted
                                     @ GHC.Prim.ByteArray#
                                     ipv3
                                     ipv4 of s4 { DEFAULT ->
                              (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 { GHC.Word.W64# x# ->
                      $j
                        (GHC.Prim.xorI#
                           (GHC.Prim.*#
                              (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6148914691236517205#)
                              16777619#)
                           (GHC.Prim.word2Int# x#)) } } } }) -}
5738d6f6e95b9f3dd848988e75dc6877
  $w$dGHashable1 ::
    GHC.Prim.Int#
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "value")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
         a1
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "unit")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Volume.Types.Unit))
         a1
    -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                             a1)
                   (ww2 :: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "unit")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Volume.Types.Unit))
                             a1) ->
                 case ww1
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "value")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Double)>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Base.Maybe GHC.Types.Double>_R
                                <a1>_P)) of wild {
                   GHC.Base.Nothing
                   -> case ww2
                             `cast`
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "unit")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1
                                        GHC.Generics.R
                                        (GHC.Base.Maybe Duckling.Volume.Types.Unit)>_R <a1>_N)
                                (GHC.Generics.N:K1[0]
                                     <GHC.Generics.R>_P
                                     <GHC.Base.Maybe Duckling.Volume.Types.Unit>_R
                                     <a1>_P)) of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#
                        GHC.Base.Just a2
                        -> case a2 of wild2 {
                             Duckling.Volume.Types.Gallon
                             -> GHC.Prim.*#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#)
                                        6148914691236517205#)
                                     16777619#)
                                  16777619#
                             Duckling.Volume.Types.Hectolitre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     1#)
                                  16777619#
                             Duckling.Volume.Types.Litre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     2#)
                                  16777619#
                             Duckling.Volume.Types.Millilitre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     3#)
                                  16777619# } }
                   GHC.Base.Just a2
                   -> case a2 of ww3 { GHC.Types.D# ww4 ->
                      case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Word.Word64
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newAlignedPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     8#
                                     eta of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     ipv of ds3 { (#,#) ipv2 ipv3 ->
                              let {
                                ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                              } in
                              case GHC.Prim.writeDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     ww4
                                     ipv2 of s2 { DEFAULT ->
                              case GHC.Prim.readWord64OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     s2 of ds1 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepUnlifted
                                     @ GHC.Prim.ByteArray#
                                     ipv3
                                     ipv4 of s4 { DEFAULT ->
                              (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 { GHC.Word.W64# x# ->
                      case ww2
                             `cast`
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "unit")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1
                                        GHC.Generics.R
                                        (GHC.Base.Maybe Duckling.Volume.Types.Unit)>_R <a1>_N)
                                (GHC.Generics.N:K1[0]
                                     <GHC.Generics.R>_P
                                     <GHC.Base.Maybe Duckling.Volume.Types.Unit>_R
                                     <a1>_P)) of wild2 {
                        GHC.Base.Nothing
                        -> GHC.Prim.*#
                             (GHC.Prim.xorI#
                                (GHC.Prim.*#
                                   (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6148914691236517205#)
                                   16777619#)
                                (GHC.Prim.word2Int# x#))
                             16777619#
                        GHC.Base.Just a3
                        -> case a3 of wild3 {
                             Duckling.Volume.Types.Gallon
                             -> GHC.Prim.*#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.xorI#
                                                    (GHC.Prim.*# ww 16777619#)
                                                    6148914691236517205#)
                                                 16777619#)
                                              (GHC.Prim.word2Int# x#))
                                           16777619#)
                                        6148914691236517205#)
                                     16777619#)
                                  16777619#
                             Duckling.Volume.Types.Hectolitre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.xorI#
                                                       (GHC.Prim.*# ww 16777619#)
                                                       6148914691236517205#)
                                                    16777619#)
                                                 (GHC.Prim.word2Int# x#))
                                              16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     1#)
                                  16777619#
                             Duckling.Volume.Types.Litre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.xorI#
                                                       (GHC.Prim.*# ww 16777619#)
                                                       6148914691236517205#)
                                                    16777619#)
                                                 (GHC.Prim.word2Int# x#))
                                              16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     2#)
                                  16777619#
                             Duckling.Volume.Types.Millilitre
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.xorI#
                                                       (GHC.Prim.*# ww 16777619#)
                                                       6148914691236517205#)
                                                    16777619#)
                                                 (GHC.Prim.word2Int# x#))
                                              16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     3#)
                                  16777619# } } } } } }) -}
8597ab11e6504cfb474db6cab9ed57ff
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
58688f468ebc9b8aac9901b6ac52ec73
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Duckling.Volume.Types.$wpoly_go1
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
fb2931b3d7b4d3743e620820d92fa88c
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Char#
    -> GHC.Prim.Char#
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 7, Strictness: <L,U><L,U><S,U><S,U><L,U><L,U><S,U>,
     Inline: [0] -}
481d4240b7ecaf560c0fb9f278f7027f
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
5738d6f6e95b9f3dd848988e75dc6877
  axiom D:R:ResolvedValueVolumeData::
      Duckling.Resolve.ResolvedValue Duckling.Volume.Types.VolumeData
        = Duckling.Volume.Types.VolumeValue
79d603e2cc95b5c4207bfea8324014fc
  data IntervalDirection = Above | Under
79d603e2cc95b5c4207bfea8324014fc
  axiom Rep_IntervalDirection::
      GHC.Generics.Rep Duckling.Volume.Types.IntervalDirection
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IntervalDirection"
               "Duckling.Volume.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Above" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Under" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
5738d6f6e95b9f3dd848988e75dc6877
  axiom Rep_Unit::
      GHC.Generics.Rep Duckling.Volume.Types.Unit
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Unit"
               "Duckling.Volume.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "Gallon" 'GHC.Generics.PrefixI 'GHC.Types.False)
                GHC.Generics.U1
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Hectolitre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Litre" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Millilitre"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
5738d6f6e95b9f3dd848988e75dc6877
  axiom Rep_VolumeData::
      GHC.Generics.Rep Duckling.Volume.Types.VolumeData
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "VolumeData"
               "Duckling.Volume.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "VolumeData" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "value")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "unit")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe Duckling.Volume.Types.Unit)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "minValue")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Double))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "maxValue")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe GHC.Types.Double)))))
5738d6f6e95b9f3dd848988e75dc6877
  data SingleValue
    = SingleValue {vUnit :: Duckling.Volume.Types.Unit,
                   vValue :: GHC.Types.Double}
5738d6f6e95b9f3dd848988e75dc6877
  data Unit = Gallon | Hectolitre | Litre | Millilitre
5738d6f6e95b9f3dd848988e75dc6877
  data VolumeData
    = VolumeData {value :: GHC.Base.Maybe GHC.Types.Double,
                  unit :: GHC.Base.Maybe Duckling.Volume.Types.Unit,
                  minValue :: GHC.Base.Maybe GHC.Types.Double,
                  maxValue :: GHC.Base.Maybe GHC.Types.Double}
5738d6f6e95b9f3dd848988e75dc6877
  data VolumeValue
    = SimpleValue Duckling.Volume.Types.SingleValue
    | IntervalValue (Duckling.Volume.Types.SingleValue,
                     Duckling.Volume.Types.SingleValue)
    | OpenIntervalValue (Duckling.Volume.Types.SingleValue,
                         Duckling.Volume.Types.IntervalDirection)
0271180f83ecc093f2c4da6e23b30370
  above ::
    Duckling.Volume.Types.Unit
    -> GHC.Types.Double -> Duckling.Volume.Types.VolumeValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Volume.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Volume.Types.OpenIntervalValue
                   (Duckling.Volume.Types.SingleValue u v,
                    Duckling.Volume.Types.Above)) -}
9d450634ec993c99df4fdd8ec5598a16
  between ::
    Duckling.Volume.Types.Unit
    -> (GHC.Types.Double, GHC.Types.Double)
    -> Duckling.Volume.Types.VolumeValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U)>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Volume.Types.Unit)
                   (ds :: (GHC.Types.Double, GHC.Types.Double)) ->
                 case ds of wild { (,) from to ->
                 Duckling.Volume.Types.IntervalValue
                   (Duckling.Volume.Types.SingleValue u from,
                    Duckling.Volume.Types.SingleValue u to) }) -}
55bb559d114a5fbf8e87d094d5900624
  maxValue ::
    Duckling.Volume.Types.VolumeData -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Volume.Types.VolumeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.VolumeData) ->
                 case ds of wild { Duckling.Volume.Types.VolumeData ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
52063fa8b6d4c9731b17f715b7b48a73
  minValue ::
    Duckling.Volume.Types.VolumeData -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Volume.Types.VolumeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.VolumeData) ->
                 case ds of wild { Duckling.Volume.Types.VolumeData ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
2020fbf5a1bb32134d1c3649b815bebf
  openInterval ::
    Duckling.Volume.Types.IntervalDirection
    -> Duckling.Volume.Types.Unit
    -> GHC.Types.Double
    -> Duckling.Volume.Types.VolumeValue
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m3,
     Unfolding: InlineRule (3, True, False)
                (\ (direction :: Duckling.Volume.Types.IntervalDirection)
                   (u :: Duckling.Volume.Types.Unit)
                   (v :: GHC.Types.Double) ->
                 Duckling.Volume.Types.OpenIntervalValue
                   (Duckling.Volume.Types.SingleValue u v, direction)) -}
1e274d28e51ad1b570fe6045905d9a24
  simple ::
    Duckling.Volume.Types.Unit
    -> GHC.Types.Double -> Duckling.Volume.Types.VolumeValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Volume.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Volume.Types.SimpleValue
                   (Duckling.Volume.Types.SingleValue u v)) -}
4518912d993882fe1b96b35794ef58f8
  single ::
    Duckling.Volume.Types.Unit
    -> GHC.Types.Double -> Duckling.Volume.Types.SingleValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Volume.Types.SingleValue -}
fdbbac74bbda3a21c36cea1a0b34010f
  under ::
    Duckling.Volume.Types.Unit
    -> GHC.Types.Double -> Duckling.Volume.Types.VolumeValue
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (u :: Duckling.Volume.Types.Unit) (v :: GHC.Types.Double) ->
                 Duckling.Volume.Types.OpenIntervalValue
                   (Duckling.Volume.Types.SingleValue u v,
                    Duckling.Volume.Types.Under)) -}
d2a7897ebb2bfb47c9173cd12f0da302
  unit ::
    Duckling.Volume.Types.VolumeData
    -> GHC.Base.Maybe Duckling.Volume.Types.Unit
  RecSel Left Duckling.Volume.Types.VolumeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.VolumeData) ->
                 case ds of wild { Duckling.Volume.Types.VolumeData ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
4de24e6293a7778a729e788dcaee5a00
  vUnit ::
    Duckling.Volume.Types.SingleValue -> Duckling.Volume.Types.Unit
  RecSel Left Duckling.Volume.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.SingleValue) ->
                 case ds of wild { Duckling.Volume.Types.SingleValue ds1 ds2 ->
                 ds1 }) -}
407239622693431f4db0a9027316e6e3
  vValue :: Duckling.Volume.Types.SingleValue -> GHC.Types.Double
  RecSel Left Duckling.Volume.Types.SingleValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.SingleValue) ->
                 case ds of wild { Duckling.Volume.Types.SingleValue ds1 ds2 ->
                 ds2 }) -}
3347c4e3a544a76ba8e4ec0df6371309
  value ::
    Duckling.Volume.Types.VolumeData -> GHC.Base.Maybe GHC.Types.Double
  RecSel Left Duckling.Volume.Types.VolumeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Volume.Types.VolumeData) ->
                 case ds of wild { Duckling.Volume.Types.VolumeData ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fEqIntervalDirection
instance GHC.Classes.Eq [Duckling.Volume.Types.SingleValue]
  = Duckling.Volume.Types.$fEqSingleValue
instance GHC.Classes.Eq [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fEqUnit
instance GHC.Classes.Eq [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fEqVolumeData
instance GHC.Classes.Eq [Duckling.Volume.Types.VolumeValue]
  = Duckling.Volume.Types.$fEqVolumeValue
instance GHC.Generics.Generic [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fGenericIntervalDirection
instance GHC.Generics.Generic [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fGenericUnit
instance GHC.Generics.Generic [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fGenericVolumeData
instance Data.Hashable.Class.Hashable [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fHashableIntervalDirection
instance Data.Hashable.Class.Hashable [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fHashableUnit
instance Data.Hashable.Class.Hashable [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fHashableVolumeData
instance Control.DeepSeq.NFData [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fNFDataIntervalDirection
instance Control.DeepSeq.NFData [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fNFDataUnit
instance Control.DeepSeq.NFData [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fNFDataVolumeData
instance GHC.Classes.Ord [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fOrdIntervalDirection
instance GHC.Classes.Ord [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fOrdUnit
instance GHC.Classes.Ord [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fOrdVolumeData
instance Duckling.Resolve.Resolve [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fResolveVolumeData
instance GHC.Show.Show [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.$fShowIntervalDirection
instance GHC.Show.Show [Duckling.Volume.Types.SingleValue]
  = Duckling.Volume.Types.$fShowSingleValue
instance GHC.Show.Show [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fShowUnit
instance GHC.Show.Show [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.$fShowVolumeData
instance GHC.Show.Show [Duckling.Volume.Types.VolumeValue]
  = Duckling.Volume.Types.$fShowVolumeValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Volume.Types.SingleValue]
  = Duckling.Volume.Types.$fToJSONSingleValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.$fToJSONUnit
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Volume.Types.VolumeValue]
  = Duckling.Volume.Types.$fToJSONVolumeValue
family instance GHC.Generics.Rep [Duckling.Volume.Types.IntervalDirection]
  = Duckling.Volume.Types.Rep_IntervalDirection
family instance GHC.Generics.Rep [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.Rep_VolumeData
family instance GHC.Generics.Rep [Duckling.Volume.Types.Unit]
  = Duckling.Volume.Types.Rep_Unit
family instance Duckling.Resolve.ResolvedValue [Duckling.Volume.Types.VolumeData]
  = Duckling.Volume.Types.D:R:ResolvedValueVolumeData
"SPEC/Duckling.Volume.Types $dmhashWithSalt @ IntervalDirection" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                                   Data.Hashable.Class.Zero
                                                                                                   (GHC.Generics.Rep
                                                                                                      Duckling.Volume.Types.IntervalDirection))
                                                                                 ($dGeneric :: GHC.Generics.Generic
                                                                                                 Duckling.Volume.Types.IntervalDirection)
                                                                                 ($dHashable :: Data.Hashable.Class.Hashable
                                                                                                  Duckling.Volume.Types.IntervalDirection)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Volume.Types.IntervalDirection
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Volume.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
"SPEC/Duckling.Volume.Types $dmrnf @ IntervalDirection" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                                        (GHC.Generics.Rep
                                                                                           Duckling.Volume.Types.IntervalDirection))
                                                                        ($dGeneric :: GHC.Generics.Generic
                                                                                        Duckling.Volume.Types.IntervalDirection)
                                                                        ($dNFData :: Control.DeepSeq.NFData
                                                                                       Duckling.Volume.Types.IntervalDirection)
  Control.DeepSeq.$dmrnf @ Duckling.Volume.Types.IntervalDirection
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Volume.Types.$fNFDataIntervalDirection_$s$dmrnf
"SPEC/Duckling.Volume.Types $dmrnf @ Unit" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                           (GHC.Generics.Rep
                                                                              Duckling.Volume.Types.Unit))
                                                           ($dGeneric :: GHC.Generics.Generic
                                                                           Duckling.Volume.Types.Unit)
                                                           ($dNFData :: Control.DeepSeq.NFData
                                                                          Duckling.Volume.Types.Unit)
  Control.DeepSeq.$dmrnf @ Duckling.Volume.Types.Unit
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Volume.Types.$fNFDataUnit_$s$dmrnf
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

