
==================== FINAL INTERFACE ====================
2019-01-30 07:24:08.191449 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ranking.Types 8002
  interface hash: 729f2bb5a625f1f14da4a22ffcbf8757
  ABI hash: 10cc0e8112128b4277fe9f1be9f50acb
  export-list hash: ce0114e3b7afd2d0a08633c718381a83
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 025762836b74287a95adcc3c6f9cf99f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Ranking.Types.infinity
  Duckling.Ranking.Types.BagOfFeatures
  Duckling.Ranking.Types.Class
  Duckling.Ranking.Types.ClassData{Duckling.Ranking.Types.ClassData likelihoods n prior unseen}
  Duckling.Ranking.Types.Classifier{Duckling.Ranking.Types.Classifier koData okData}
  Duckling.Ranking.Types.Classifiers
  Duckling.Ranking.Types.Dataset
  Duckling.Ranking.Types.Datum
  Duckling.Ranking.Types.Feature
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
34dd7c0d1f802b88b7877b538736a491
  $fEqClassData :: GHC.Classes.Eq Duckling.Ranking.Types.ClassData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Ranking.Types.ClassData
                  Duckling.Ranking.Types.$fEqClassData_$c==
                  Duckling.Ranking.Types.$fEqClassData_$c/= -}
34dd7c0d1f802b88b7877b538736a491
  $fEqClassData_$c/= ::
    Duckling.Ranking.Types.ClassData
    -> Duckling.Ranking.Types.ClassData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U,1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Ranking.Types.ClassData)
                   (b :: Duckling.Ranking.Types.ClassData) ->
                 case Duckling.Ranking.Types.$fEqClassData_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
34dd7c0d1f802b88b7877b538736a491
  $fEqClassData_$c== ::
    Duckling.Ranking.Types.ClassData
    -> Duckling.Ranking.Types.ClassData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U,1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Ranking.Types.ClassData)
                   (w1 :: Duckling.Ranking.Types.ClassData) ->
                 case w of ww { Duckling.Ranking.Types.ClassData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Ranking.Types.ClassData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Ranking.Types.$w$c==
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
e39c250308a9983c677294d225852273
  $fEqClassifier :: GHC.Classes.Eq Duckling.Ranking.Types.Classifier
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Ranking.Types.Classifier
                  Duckling.Ranking.Types.$fEqClassifier_$c==
                  Duckling.Ranking.Types.$fEqClassifier_$c/= -}
e39c250308a9983c677294d225852273
  $fEqClassifier_$c/= ::
    Duckling.Ranking.Types.Classifier
    -> Duckling.Ranking.Types.Classifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LLL)L),1*U(1*U(1*U(U),1*U(U),1*U,1*U(U)),1*U(1*U(U),1*U(U),1*U,1*U(U)))><S(S(S(S)LLL)L),1*U(1*U(1*U(U),1*U(U),1*U,1*U(U)),1*U(1*U(U),1*U(U),1*U,1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Ranking.Types.Classifier)
                   (w1 :: Duckling.Ranking.Types.Classifier) ->
                 case w of ww { Duckling.Ranking.Types.Classifier ww1 ww2 ->
                 case ww1 of ww3 { Duckling.Ranking.Types.ClassData ww4 ww5 ww6 ww7 ->
                 case ww4 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { Duckling.Ranking.Types.Classifier ww11 ww12 ->
                 case ww11 of ww13 { Duckling.Ranking.Types.ClassData ww14 ww15 ww16 ww17 ->
                 case ww14 of ww18 { GHC.Types.D# ww19 ->
                 Duckling.Ranking.Types.$w$c/=
                   ww9
                   ww5
                   ww6
                   ww7
                   ww2
                   ww19
                   ww15
                   ww16
                   ww17
                   ww12 } } } } } }) -}
e39c250308a9983c677294d225852273
  $fEqClassifier_$c== ::
    Duckling.Ranking.Types.Classifier
    -> Duckling.Ranking.Types.Classifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LLL)L),1*U(1*U(1*U(U),1*U(U),1*U,1*U(U)),1*U(1*U(U),1*U(U),1*U,1*U(U)))><S(S(S(S)LLL)L),1*U(1*U(1*U(U),1*U(U),1*U,1*U(U)),1*U(1*U(U),1*U(U),1*U,1*U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Ranking.Types.Classifier)
                   (w1 :: Duckling.Ranking.Types.Classifier) ->
                 case w of ww { Duckling.Ranking.Types.Classifier ww1 ww2 ->
                 case ww1 of ww3 { Duckling.Ranking.Types.ClassData ww4 ww5 ww6 ww7 ->
                 case ww4 of ww8 { GHC.Types.D# ww9 ->
                 case w1 of ww10 { Duckling.Ranking.Types.Classifier ww11 ww12 ->
                 case ww11 of ww13 { Duckling.Ranking.Types.ClassData ww14 ww15 ww16 ww17 ->
                 case ww14 of ww18 { GHC.Types.D# ww19 ->
                 Duckling.Ranking.Types.$w$c==1
                   ww9
                   ww5
                   ww6
                   ww7
                   ww2
                   ww19
                   ww15
                   ww16
                   ww17
                   ww12 } } } } } }) -}
34dd7c0d1f802b88b7877b538736a491
  $fShowClassData :: GHC.Show.Show Duckling.Ranking.Types.ClassData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Ranking.Types.ClassData
                  Duckling.Ranking.Types.$fShowClassData_$cshowsPrec
                  Duckling.Ranking.Types.$fShowClassData_$cshow
                  Duckling.Ranking.Types.$fShowClassData_$cshowList -}
34dd7c0d1f802b88b7877b538736a491
  $fShowClassData1 ::
    Duckling.Ranking.Types.ClassData -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Ranking.Types.ClassData) ->
                 case w of ww { Duckling.Ranking.Types.ClassData ww1 ww2 ww3 ww4 ->
                 Duckling.Ranking.Types.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 }) -}
46b488d268a5aa1d7cfcf21a954f5eeb
  $fShowClassData2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ClassData {"#) -}
d221f791bc2e3658722bf873f755d5bb
  $fShowClassData3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
2ffda1d5a2db6f7e1307d0bf6a7e7116
  $fShowClassData4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "n = "#) -}
db26a24205e537e4e53a8501762408bf
  $fShowClassData5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "likelihoods = "#) -}
d5147730c4aa4801fb4dc9fd20fec962
  $fShowClassData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unseen = "#) -}
10b6b3a57618c0e0fefdbc37bd0b5b7a
  $fShowClassData7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
6b23f08a2e0694f2d0c92b3b31531b0c
  $fShowClassData8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "prior = "#) -}
7b75619895587c0028311b56067ed9dd
  $fShowClassData9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
34dd7c0d1f802b88b7877b538736a491
  $fShowClassData_$cshow ::
    Duckling.Ranking.Types.ClassData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Ranking.Types.ClassData) ->
                 Duckling.Ranking.Types.$fShowClassData_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
34dd7c0d1f802b88b7877b538736a491
  $fShowClassData_$cshowList ::
    [Duckling.Ranking.Types.ClassData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Ranking.Types.ClassData
                   Duckling.Ranking.Types.$fShowClassData1) -}
34dd7c0d1f802b88b7877b538736a491
  $fShowClassData_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Ranking.Types.ClassData -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U,U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Ranking.Types.ClassData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Ranking.Types.ClassData ww3 ww4 ww5 ww6 ->
                 Duckling.Ranking.Types.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 } }) -}
e39c250308a9983c677294d225852273
  $fShowClassifier :: GHC.Show.Show Duckling.Ranking.Types.Classifier
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Ranking.Types.Classifier
                  Duckling.Ranking.Types.$fShowClassifier_$cshowsPrec
                  Duckling.Ranking.Types.$fShowClassifier_$cshow
                  Duckling.Ranking.Types.$fShowClassifier_$cshowList -}
e39c250308a9983c677294d225852273
  $fShowClassifier1 ::
    Duckling.Ranking.Types.Classifier -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Ranking.Types.Classifier) ->
                 case w of ww { Duckling.Ranking.Types.Classifier ww1 ww2 ->
                 Duckling.Ranking.Types.$w$cshowsPrec1 0# ww1 ww2 }) -}
b57b8b01132bde7a80ec1046b54ca5bf
  $fShowClassifier2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "koData = "#) -}
0022514b3c113604417d261ab39ac07f
  $fShowClassifier3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "okData = "#) -}
75566ca2b1b4e78250c20875238e27fa
  $fShowClassifier4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Classifier {"#) -}
e39c250308a9983c677294d225852273
  $fShowClassifier_$cshow ::
    Duckling.Ranking.Types.Classifier -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U),1*U,U(U)),1*U(1*U(U),1*U(U),1*U,U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Ranking.Types.Classifier) ->
                 Duckling.Ranking.Types.$fShowClassifier_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e39c250308a9983c677294d225852273
  $fShowClassifier_$cshowList ::
    [Duckling.Ranking.Types.Classifier] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Ranking.Types.Classifier
                   Duckling.Ranking.Types.$fShowClassifier1) -}
e39c250308a9983c677294d225852273
  $fShowClassifier_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Ranking.Types.Classifier -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U),1*U,U(U)),1*U(1*U(U),1*U(U),1*U,U(U)))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Ranking.Types.Classifier) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Ranking.Types.Classifier ww3 ww4 ->
                 Duckling.Ranking.Types.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
af21bc40e1e18d0888c2637e6f25544f
  $tc'ClassData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12631988643325815165##
                   6475033744744509631##
                   Duckling.Ranking.Types.$trModule
                   Duckling.Ranking.Types.$tc'ClassData1) -}
334e276b58e849f4bd4b4a08bca13c9b
  $tc'ClassData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ClassData"#) -}
64139f7d46132b7c418e3721d87876f8
  $tc'Classifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7212473383373496984##
                   11549316097289110805##
                   Duckling.Ranking.Types.$trModule
                   Duckling.Ranking.Types.$tc'Classifier1) -}
da5d8e76ccca5f77238c6092e1d583ea
  $tc'Classifier1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Classifier"#) -}
dc7e42284cd0b4fd2438bb2620d420a3
  $tcClassData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2410066000068264909##
                   784479986397686705##
                   Duckling.Ranking.Types.$trModule
                   Duckling.Ranking.Types.$tcClassData1) -}
e542b1096463e2e3bf0435f1d219fceb
  $tcClassData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ClassData"#) -}
fd2c188b3cc4e19750cd93bf380681be
  $tcClassifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13803334590928570834##
                   6863674025142376427##
                   Duckling.Ranking.Types.$trModule
                   Duckling.Ranking.Types.$tcClassifier1) -}
75f5806bfeb25a95d8297da9b0b713b4
  $tcClassifier1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Classifier"#) -}
8ef82755bec364202c8e1c994437babd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Ranking.Types.$trModule2
                   Duckling.Ranking.Types.$trModule1) -}
7f2a8e1c937fbf45ec85497803144a3e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Ranking.Types"#) -}
8ffa01ecf5d42c95ad8fab51318d271c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
cb27bd5bc99a735022ee590e3192545d
  $w$c/= ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> Duckling.Ranking.Types.ClassData
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> Duckling.Ranking.Types.ClassData
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(1*U(U),1*U(U),1*U,1*U(U))><S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(1*U(U),1*U(U),1*U,1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Duckling.Ranking.Types.ClassData)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Types.Double)
                   (ww7 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: Duckling.Ranking.Types.ClassData) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww5) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww6 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ Data.Text.Internal.Text
                                  @ Data.Text.Internal.Text
                                  @ GHC.Types.Double
                                  @ GHC.Types.Double
                                  Data.Text.$fEqText_$c==
                                  GHC.Classes.eqDouble
                                  ww2
                                  ww7 of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case ww3 of wild5 { GHC.Types.I# x1 ->
                                case ww8 of wild6 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild7 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case ww4 of ww10 { Duckling.Ranking.Types.ClassData ww11 ww12 ww13 ww14 ->
                                     case ww11 of ww15 { GHC.Types.D# ww16 ->
                                     case ww9 of ww17 { Duckling.Ranking.Types.ClassData ww18 ww19 ww20 ww21 ->
                                     case ww18 of ww22 { GHC.Types.D# ww23 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==## ww16 ww23) of wild8 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True
                                       -> case ww12 of wild9 { GHC.Types.D# x2 ->
                                          case ww19 of wild10 { GHC.Types.D# y2 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## x2 y2) of wild11 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> case Data.HashMap.Base.equal
                                                      @ Data.Text.Internal.Text
                                                      @ Data.Text.Internal.Text
                                                      @ GHC.Types.Double
                                                      @ GHC.Types.Double
                                                      Data.Text.$fEqText_$c==
                                                      GHC.Classes.eqDouble
                                                      ww13
                                                      ww20 of wild12 {
                                                 GHC.Types.False -> GHC.Types.True
                                                 GHC.Types.True
                                                 -> case ww14 of wild13 { GHC.Types.I# x3 ->
                                                    case ww21 of wild14 { GHC.Types.I# y3 ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.==# x3 y3) of wild15 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True
                                                      -> GHC.Types.False } } } } } } } } } } } } } } } } } } } }) -}
23546ab8cc9f2afff9ada157afd00a40
  $w$c== ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U(U)><S,U><L,1*U(U)><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Types.Double)
                   (ww6 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww7 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww5 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ Data.Text.Internal.Text
                                  @ Data.Text.Internal.Text
                                  @ GHC.Types.Double
                                  @ GHC.Types.Double
                                  Data.Text.$fEqText_$c==
                                  GHC.Classes.eqDouble
                                  ww2
                                  ww6 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt ww3 ww7 } } } } }) -}
ec84aea2ab11b1a076cda0ca75cff46e
  $w$c==1 ::
    GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> Duckling.Ranking.Types.ClassData
    -> GHC.Prim.Double#
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> Duckling.Ranking.Types.ClassData
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(1*U(U),1*U(U),1*U,1*U(U))><S,U><L,1*U(U)><L,1*U><L,1*U(U)><L,1*U(1*U(U),1*U(U),1*U,1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Duckling.Ranking.Types.ClassData)
                   (ww5 :: GHC.Prim.Double#)
                   (ww6 :: GHC.Types.Double)
                   (ww7 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: Duckling.Ranking.Types.ClassData) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww5) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.D# x ->
                      case ww6 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case Data.HashMap.Base.equal
                                  @ Data.Text.Internal.Text
                                  @ Data.Text.Internal.Text
                                  @ GHC.Types.Double
                                  @ GHC.Types.Double
                                  Data.Text.$fEqText_$c==
                                  GHC.Classes.eqDouble
                                  ww2
                                  ww7 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild5 { GHC.Types.I# x1 ->
                                case ww8 of wild6 { GHC.Types.I# y1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x1 y1) of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> Duckling.Ranking.Types.$fEqClassData_$c==
                                       ww4
                                       ww9 } } } } } } } }) -}
9886734cb2dd319d85a0e981213b174f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Types.Double
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Types.Double)
                   (ww3 :: Data.HashMap.Base.HashMap
                             Duckling.Ranking.Types.Feature GHC.Types.Double)
                   (ww4 :: GHC.Types.Int) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { GHC.Types.D# ww6 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Ranking.Types.$fShowClassData9
                       ww6 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww5 { GHC.Types.D# ww6 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Ranking.Types.$fShowClassData9
                       ww6 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.HashMap.Base.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ GHC.Types.Double
                       Data.Text.Show.$fShowText
                       GHC.Float.$fShowDouble
                       0#
                       ww3
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Ranking.Types.$fShowClassData8
                       (f (GHC.Base.++
                             @ GHC.Types.Char
                             Duckling.Ranking.Types.$fShowClassData7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Ranking.Types.$fShowClassData6
                                (f1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      Duckling.Ranking.Types.$fShowClassData7
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Ranking.Types.$fShowClassData5
                                         (f2
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               Duckling.Ranking.Types.$fShowClassData7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Ranking.Types.$fShowClassData4
                                                  (case ww4 of ww5 { GHC.Types.I# ww6 ->
                                                   case GHC.Show.$wshowSignedInt
                                                          0#
                                                          ww6
                                                          (GHC.Base.++
                                                             @ GHC.Types.Char
                                                             Duckling.Ranking.Types.$fShowClassData3
                                                             x) of ww7 { (#,#) ww8 ww9 ->
                                                   GHC.Types.:
                                                     @ GHC.Types.Char
                                                     ww8
                                                     ww9 } }))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Ranking.Types.$fShowClassData2
                        (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Duckling.Ranking.Types.$fShowClassData2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
824533848ed849a3896a1b7a2ecddca1
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Ranking.Types.ClassData
    -> Duckling.Ranking.Types.ClassData
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U),1*U,U(U))><L,1*U(1*U(U),1*U(U),1*U,U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Ranking.Types.ClassData)
                   (ww2 :: Duckling.Ranking.Types.ClassData) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww3 { Duckling.Ranking.Types.ClassData ww4 ww5 ww6 ww7 ->
                     Duckling.Ranking.Types.$w$cshowsPrec 0# ww4 ww5 ww6 ww7 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { Duckling.Ranking.Types.ClassData ww4 ww5 ww6 ww7 ->
                     Duckling.Ranking.Types.$w$cshowsPrec 0# ww4 ww5 ww6 ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Ranking.Types.$fShowClassifier4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Ranking.Types.$fShowClassifier3
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Ranking.Types.$fShowClassData7
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Ranking.Types.$fShowClassifier2
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Ranking.Types.$fShowClassData3
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
dcd3d0b0f7390edd41cabb215458fb63
  type BagOfFeatures =
    Data.HashMap.Base.HashMap
      Duckling.Ranking.Types.Feature GHC.Types.Int
e07aae08f4e6d83e9ff3c3461c58acbc
  type Class = GHC.Types.Bool
34dd7c0d1f802b88b7877b538736a491
  data ClassData
    = ClassData {prior :: GHC.Types.Double,
                 unseen :: GHC.Types.Double,
                 likelihoods :: Data.HashMap.Base.HashMap
                                  Duckling.Ranking.Types.Feature GHC.Types.Double,
                 n :: GHC.Types.Int}
e39c250308a9983c677294d225852273
  data Classifier
    = Classifier {okData :: Duckling.Ranking.Types.ClassData,
                  koData :: Duckling.Ranking.Types.ClassData}
43f9268d65d33b748832627d80f95d31
  type Classifiers =
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text Duckling.Ranking.Types.Classifier
93381ed192177deec0876ceda43688d8
  type Dataset =
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text [Duckling.Ranking.Types.Datum]
19d7f430bee164353debe1963aab6541
  type Datum =
    (Duckling.Ranking.Types.BagOfFeatures,
     Duckling.Ranking.Types.Class)
404751bfb3d000499a5909cd3af7713b
  type Feature = Data.Text.Internal.Text
da89d1341963e9aa1d9fb4c221bb458d
  infinity :: GHC.Types.Double
  {- Unfolding: (case GHC.Prim./## 1.0## 0.0## of wild2 { DEFAULT ->
                 GHC.Types.D# wild2 }) -}
30143051806b10dde5128c1258cf1b55
  koData ::
    Duckling.Ranking.Types.Classifier
    -> Duckling.Ranking.Types.ClassData
  RecSel Left Duckling.Ranking.Types.Classifier
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.Classifier) ->
                 case ds of wild { Duckling.Ranking.Types.Classifier ds1 ds2 ->
                 ds2 }) -}
1528290245ce5106f0d9214df115a1b9
  likelihoods ::
    Duckling.Ranking.Types.ClassData
    -> Data.HashMap.Base.HashMap
         Duckling.Ranking.Types.Feature GHC.Types.Double
  RecSel Left Duckling.Ranking.Types.ClassData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.ClassData) ->
                 case ds of wild { Duckling.Ranking.Types.ClassData ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
56209a9a087084ccc96a275d01a3bbd8
  n :: Duckling.Ranking.Types.ClassData -> GHC.Types.Int
  RecSel Left Duckling.Ranking.Types.ClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.ClassData) ->
                 case ds of wild { Duckling.Ranking.Types.ClassData ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
702e271daa38941a93fecdac2b0df294
  okData ::
    Duckling.Ranking.Types.Classifier
    -> Duckling.Ranking.Types.ClassData
  RecSel Left Duckling.Ranking.Types.Classifier
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U(U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.Classifier) ->
                 case ds of wild { Duckling.Ranking.Types.Classifier ds1 ds2 ->
                 ds1 }) -}
df940168cbd3cac44bc13c11563d8e70
  prior :: Duckling.Ranking.Types.ClassData -> GHC.Types.Double
  RecSel Left Duckling.Ranking.Types.ClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.ClassData) ->
                 case ds of wild { Duckling.Ranking.Types.ClassData ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
c070bc4b6a4f43c0da5404940ddf7e2d
  unseen :: Duckling.Ranking.Types.ClassData -> GHC.Types.Double
  RecSel Left Duckling.Ranking.Types.ClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Ranking.Types.ClassData) ->
                 case ds of wild { Duckling.Ranking.Types.ClassData ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
instance [safe] GHC.Classes.Eq [Duckling.Ranking.Types.ClassData]
  = Duckling.Ranking.Types.$fEqClassData
instance [safe] GHC.Classes.Eq [Duckling.Ranking.Types.Classifier]
  = Duckling.Ranking.Types.$fEqClassifier
instance [safe] GHC.Show.Show [Duckling.Ranking.Types.ClassData]
  = Duckling.Ranking.Types.$fShowClassData
instance [safe] GHC.Show.Show [Duckling.Ranking.Types.Classifier]
  = Duckling.Ranking.Types.$fShowClassifier
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

