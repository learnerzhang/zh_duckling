
==================== FINAL INTERFACE ====================
2019-03-14 03:01:06.346365 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Rules 8002
  interface hash: c38fc34221159d492db2927e7adf9d18
  ABI hash: 6922379a88af6144911ffa88aa34793b
  export-list hash: 085beed3ba0f5c2d3422ac569f51905f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 51a3b58f4d1e00221460770c29f53cc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.AmountOfMoney.Rules.rules
module dependencies: Duckling.AmountOfMoney.Helpers
                     Duckling.AmountOfMoney.Types Duckling.CreditCardNumber.Types
                     Duckling.Dimensions.Types Duckling.Distance.Types
                     Duckling.Duration.Types Duckling.Email.Types Duckling.Gender.Types
                     Duckling.Identity.Types Duckling.Locale Duckling.Numeral.Helpers
                     Duckling.Numeral.Types Duckling.Ordinal.Types
                     Duckling.PhoneNumber.Types Duckling.Quantity.Types
                     Duckling.Regex.Types Duckling.Region Duckling.Resolve
                     Duckling.Temperature.Types Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.AmountOfMoney.Helpers 5a3fbe49dcd955dddb9bdab8ceaa15ef
  exports: 843a8eaaefc62d8b0817b7cc97296eb9
  currencyOnly 3c0632290a17bdee5106d3a29944c0e5
  isCent c1ae229f2783b3bb51efd96e9ba98889
  isCents f565d2c1338d15853fd428ec015dadec
  isCurrencyOnly 89a636a673496359057147ea87e5960b
  isDime e490e945550d463f6ff45b274ca86f5a
  isMoneyWithValue 206dbaa136f17aece7ca3032f9e8b320
  isSimpleAmountOfMoney 0f7f4d83b900b67eff71d4da9ae1e941
  isWithoutCents 65db56c071ee596f56867141ba9b11ee
  mkLatent cd9c0d8631c7c43ebababba823b9a402
  valueOnly a25d5826a2f8ac1f4570d56b74d72172
  withCents 69a117bfad04acbd4ac28ad034aeb8f2
  withInterval 32a3e8a86a63fc24cd82a41c3b181185
  withMax f8f0dd5a7bdfc764440ce61a027f4993
  withMin d46379582453fb6b72658758e03d4abb
  withValue 02b3481995efecd4d0504cc157c492b2
import  -/  Duckling.AmountOfMoney.Types 7dc5ee03de042114275e6195f2ab63d3
  exports: e9b6dbd5d844108c1a8792ac6a374620
  AED 965aafb4151b05a55c4350bde0017a6a
  AUD d6be2ce5414076f5c8f3fa6b2d52d69a
  AmountOfMoneyData 191a90c8811db3d8e8a3f0209a5c6da3
  BGN 939231d6c6b3330c09a5d447ce694cf9
  BRL 432aac6cb963f8d3840b21a1872801c9
  BYN 75c5cf2d34e6e8dee7d233e6c0235bd3
  CAD 9cf0ec94ba6b6b3a7559ce2457a83fc7
  CHF 1ade869880b4d7277cf89966c5ecc4f6
  CNY c85b30caa93e36a9d3a668dce5481c55
  CZK 7a81dfbe0a67ad4bec5d6ec0c6a9afdf
  Cent 2cccc794a5534cc01c1b3d7cd1cab6bb
  Currency d9a1bfb9db27e54335f7a30e0f7481a2
  DKK 5a484f27d2db5a746057c6df25621f3e
  Dinar 86cb813f7e0e70422a02d775ef5bea61
  Dollar 5d8b00b6786cfc967994f62ad7ccceee
  EGP 915e88234c6873c09babd991fc2fdb34
  EUR 100b6310060461b301c5c9335667d5ab
  GBP 418692fe4edb4e578504719b11a53b11
  GEL 40462d4e80954a20725fa1b1325c1ca5
  HKD b0fef2a212a7dcdb124bf369294c1da3
  HRK 394c100457d539473146bc87e6852bd9
  IDR 2e6b0091c190a592bac5418ba4e62dce
  ILS 26bf29d54b67e455e877433e73a80982
  INR f3957a2faeedebd17a4fd3fe89b50744
  IQD 9b30d558028714dbe8a0aa54ac54ece5
  JMD e70f61242cef873e867677ad01eeb26b
  JOD 8108aa44799b366acd6a7fdeaec883da
  JPY b801439f14e9ae69d217583be8a9ff37
  KRW b6b2831d62e793e1c88ba59748ee486d
  KWD 1ae2b0e3395c3581eb2521809bd03c31
  LBP 251c5ed65e85220916bfd38508f376ae
  MAD c70562bad381524c1de6a569dbdd7403
  MYR b07a7e417182f838d85f3a4391d86af5
  NOK a59626425dc843ce10644ae47f70dbd3
  NZD 5e81637c70950866f9228121cebfb318
  PKR ad6835901bd7f5ca72aea5ca80e14810
  PLN 805a5384e19a5e2ffded4e7f8bca0732
  PTS e2c08063e9eb35b8afeffab10247a50a
  Pound 0bd4664b3dd7a88907804a25a314c5b6
  QAR 3f796b92261979505254fa9b92297e47
  RON a7eba900e3b47fb2ea083c6926fc1e2a
  RUB 0406bd0129f0da11ef9391afec02ce01
  Rial 59082506ffe0fd557e694c440665e240
  Riyal 91578f9a202d14e1591506548ea9ac0c
  SAR ed08ff82dbb40694a633fc1af2de9551
  SEK dbd9f11dd699ed2aeb3043b759e78c9d
  SGD 4f17485f7f2c6bcae4c8aa8c9b26c712
  THB ecafaf35624fcc79ba5dc85fc2868768
  TTD 83abe3cc9a8d9f47b0d3f370c8036684
  USD 97dc36443baab20803bac15e6c237af8
  VND d2e5c4bcce87c2aad9d093017983b6f2
  ZAR aee3436ad43ba328f9a4da39b12c138e
  currency 75b70af6a6582321b001d9c530d84314
  value 90a17efc96a83005575d3b1210dcd44e
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Numeral.Helpers bd0dabecd11987616dc666a3e43dd924
  exports: e7d47526dd2b06e4e1d94c237fe469a9
  isNatural 89930504bc6a7f71c3c428ec92f24412
  isPositive 833c10b9c2bf07ab2b69a2d355712775
  oneOf ee7042ed5e8334d122cf01192af38d89
import  -/  Duckling.Numeral.Types 5130bfd045a9ca6085fec0a42ae9c523
  exports: 94344b1dfc906561c4234f30cd403539
  NumeralData eed9cb1fe0950cfcb945c3cf09694611
  value 8ada7f17e1d24c76a72ee8a3669186b6
import  -/  Duckling.Regex.Types 02ee061ffbed7bfe03850219af82e91c
  exports: d44c9c4af09e2c2530be2e20de544b1d
  GroupMatch 537ad29f8ab71f1e1b7b5a2d9bd0ac47
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  AmountOfMoney ce33243db932587ab50a1bf646eab412
  Numeral 37ea753945466ebddfe8bb90136c8911
  Predicate 7b23b72c5da11bf15a4943a8b0a1fdb3
  RegexMatch 48a4c104f38c3a332becce55bbf47568
  Rule 68f6ad16b93bf0573b6e6f063820cf0e
  Rule 876893268fb58123567a47e946b5b6ba
  Token ed5ab3414f0516bc6b6fd996e839d3c3
  name 76f427769b73e82db2c2df59caa60288
  pattern 6666cdf07a41b137593bc737023ac7f1
  prod a4c6750bd517e049c9ce8428e1e5dff2
  regex c51097368a8c266ad9942dc9e3370fd5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
21aef184f15dfe42829b52953913bba1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.AmountOfMoney.Rules.$trModule2
                   Duckling.AmountOfMoney.Rules.$trModule1) -}
2fe796e495c6a960de4f26db346a637a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.AmountOfMoney.Rules"#) -}
18a85cd40cf3f6097219402655e46d6c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
1c61a9311c6c44a9589444286789ebc6
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
66a5354380125b28026814386938b567
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Duckling.AmountOfMoney.Rules.$wpoly_go2
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   0#
                   w }) -}
f71324177cb95ee663d7da850f02a588
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 case Duckling.AmountOfMoney.Rules.$wpoly_go3
                        @ GHC.Prim.RealWorld
                        @ v
                        (GHC.Prim.int2Word# ds2)
                        ww
                        ww1
                        ww2
                        w
                        0#
                        w1
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
c060e92611141930dee786c4fe37d390
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
79b1b4758007fe99ed5949b666e5a615
  $wpoly_go2 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
4a002a52c18a9b9fc6b8ef4e805462a0
  $wpoly_go3 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
8f7175a9711f285d503053810f77673e
  rules :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules179
                   Duckling.AmountOfMoney.Rules.rules1) -}
b7cdc3289fb55c67e07de545104c7fce
  rules1 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules176
                   Duckling.AmountOfMoney.Rules.rules2) -}
e11838d823cbd5db235108b6511c643c
  rules10 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules97
                   Duckling.AmountOfMoney.Rules.rules11) -}
5ba18ec1c4ac1587a487d559ea7a29fd
  rules100 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules101
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
9ffa58b9fcb8457b0a3f77161f1c2c5b
  rules101 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Numeral.Helpers.isNatural) -}
1c87819bc669ef4b3ea9b2ed4c46efe6
  rules102 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules103
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
382becf0cc0f74399f73b554be9a9487
  rules103 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go9
                   (Duckling.AmountOfMoney.Rules.rules_go8
                      Duckling.AmountOfMoney.Rules.rules81
                      x)) -}
2446e5adc53c19a3020d4af891c48122
  rules104 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect (implicit unitless dimes)"#) -}
af67759c3f9e7835e5a5913cae06dfd8
  rules105 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules110
                   Duckling.AmountOfMoney.Rules.rules107
                   Duckling.AmountOfMoney.Rules.rules106) -}
b0c283e63fd58ee24ac27138ddd89056
  rules106 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds4 ds5 ds6 ds7 ds8 ->
                           case ds4 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just v
                             -> case ds1 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds9 ds10
                                  -> case ds9 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds11 ds12 ->
                                     case ds11 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case ds12
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.Numeral.Types.NumeralData ds13 ds14 ds15 ds16 ->
                                          GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WAmountOfMoney
                                               (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                  (GHC.Base.Just
                                                     @ GHC.Types.Double
                                                     (case v of wild9 { GHC.Types.D# x ->
                                                      case ds13 of wild10 { GHC.Types.D# y ->
                                                      GHC.Types.D# (GHC.Prim.+## x y) } }))
                                                  Duckling.AmountOfMoney.Types.Cent
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  GHC.Types.False)) } } } } } } } } }) -}
c29eb41b595de9d62431514197e57f73
  rules107 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules108
                   Duckling.AmountOfMoney.Rules.rules100) -}
35b61573aa9a589358508205d9ccbfb5
  rules108 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules109
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
ef9a447cd7c4df5223ac880cb53e0699
  rules109 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go11
                   (Duckling.AmountOfMoney.Rules.rules_go10
                      Duckling.AmountOfMoney.Rules.rules94
                      x)) -}
5d8e8bedf2e584701c87c9b80abe483f
  rules11 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules84
                   Duckling.AmountOfMoney.Rules.rules12) -}
729739ad6b923d0c63650ec58a18d490
  rules110 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect (implicit unitless cents)"#) -}
7d3abc489b2bb5ef95961872ac0ef2e4
  rules111 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules125
                   Duckling.AmountOfMoney.Rules.rules113
                   Duckling.AmountOfMoney.Rules.rules112) -}
d664b475d6a4cbd0d88cbaee7cff4b91
  rules112 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 fd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds5 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 ds8 ->
                                     case ds7 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case ds8
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds9 ds10 ds11 ds12 ->
                                          GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WAmountOfMoney
                                               (Duckling.AmountOfMoney.Helpers.withCents
                                                  ds9
                                                  fd `cast` (Sub cobox0))) } } } } } } } }) -}
9049c0bf5b8d94615c2b591f03c8c11c
  rules113 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules123
                   Duckling.AmountOfMoney.Rules.rules114) -}
f95ae971ebd527f0b16e5f0cadf613a3
  rules114 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules120
                   Duckling.AmountOfMoney.Rules.rules115) -}
222d7f1b3c1c27ea9de33f7d5aa5bd20
  rules115 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules116
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
de2bf6b00b8224cd2381037e8eac6e6c
  rules116 :: Duckling.Types.PatternItem
  {- Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules117) -}
865f7de93c779e2b4687efc3a8445fa2
  rules117 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Token) ->
                 case x of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds ds1 ->
                 case ds of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case ds1
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      GHC.List.elem
                        @ GHC.Types.Double
                        GHC.Classes.$fEqDouble
                        ds2
                        Duckling.AmountOfMoney.Rules.rules_w } } }) -}
093c05ced843183cb535c31e1aa42f36
  rules118 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 9.0##) -}
d62b02b4a7ee54f3631b500ecb289634
  rules119 :: GHC.Types.Double
  {- HasNoCafRefs, Unfolding: (GHC.Types.D# 1.0##) -}
b2977aed2ca85365bd81a9f82080d618
  rules12 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules71
                   Duckling.AmountOfMoney.Rules.rules13) -}
f4530d99318012e416f42c0063d8a6de
  rules120 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules121) -}
27bb481c3193e886cf9800b469d5507d
  rules121 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules122) -}
b91fc8352b03993c99812e1f10d80e14
  rules122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "0|\\233\\155\\182|\\227\\128\\135"#) -}
ef925197c06887a8bf47dd24bbde5599
  rules123 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules124
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
33b907a7d5378180aae303d8db9f5917
  rules124 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go13
                   (Duckling.AmountOfMoney.Rules.rules_go12
                      Duckling.AmountOfMoney.Rules.rules81
                      x)) -}
6246a2a00c4688073608dda830ddf313
  rules125 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect (implicit 0 delimited cents)"#) -}
9a9b126cd14bcb2af80332c835a26f4a
  rules126 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules135
                   Duckling.AmountOfMoney.Rules.rules131
                   Duckling.AmountOfMoney.Rules.rules127) -}
182b6346e2cf8b5ebb0750f4041b9505
  rules127 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.AmountOfMoney.Rules.rules128) -}
85e22373d60549f7819f89355a86c312
  rules128 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.AmountOfMoney.Rules.rules129) -}
7c53dbaffa65ea4e70236718370d6dea
  rules129 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                   Duckling.Types.$WAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules130) -}
2b93b8907c49fb3bcbdb421a8ae6be00
  rules13 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules67
                   Duckling.AmountOfMoney.Rules.rules14) -}
0c3ced3d9d692974bedd998f86bd060c
  rules130 :: Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.AmountOfMoney.Types.Dollar
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   GHC.Types.False) -}
3c7a5b15ba29b0b2e9946e2967a49250
  rules131 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules132
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3d57085a1003f483e801134e1782cf4d
  rules132 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules133) -}
7745b1361f1aa1670e47a823c7dcbbaf
  rules133 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules134) -}
8551925c9e56ad2e53b3271acce20b78
  rules134 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\133\\131|\\229\\156\\134|\\229\\157\\151"#) -}
f528672460ba6a040b27924ffec268c1
  rules135 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "dollar"#) -}
545e095b05b585bba6d93b0c98b0edaf
  rules136 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules143
                   Duckling.AmountOfMoney.Rules.rules138
                   Duckling.AmountOfMoney.Rules.rules137) -}
8141c526f9fe45598c45399ca21094e3
  rules137 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds4 ds5 ds6 ds7 ->
                           GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                                Duckling.Types.$WAmountOfMoney
                                (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                   (GHC.Base.Just
                                      @ GHC.Types.Double
                                      (case ds4 of wild4 { GHC.Types.D# x ->
                                       GHC.Types.D# (GHC.Prim.*## x 10.0##) }))
                                   Duckling.AmountOfMoney.Types.Cent
                                   (GHC.Base.Nothing @ GHC.Types.Double)
                                   (GHC.Base.Nothing @ GHC.Types.Double)
                                   GHC.Types.False)) } } } }) -}
090e2f3c79eac8ebf39b442b50ea94f2
  rules138 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules65
                   Duckling.AmountOfMoney.Rules.rules139) -}
dbd6ce2f00b2a522175deab8551709f1
  rules139 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules140
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
a88ef3678147e89fa849de60682f39ae
  rules14 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules58
                   Duckling.AmountOfMoney.Rules.rules15) -}
3b24e683bd78d83d57ea0209e426b38b
  rules140 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules141) -}
f8c871dfb0c3afad73230625dfd56e0a
  rules141 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules142) -}
0bf3df9460d93f7817983147df49bd96
  rules142 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\167\\146|\\230\\175\\155"#) -}
e0fa47d0b7d58906d136fffd305874d7
  rules143 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "dime"#) -}
f89298b651f432a0896f286f816d3221
  rules144 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules151
                   Duckling.AmountOfMoney.Rules.rules146
                   Duckling.AmountOfMoney.Rules.rules145) -}
cef5fcee1d0437766a93da06fdf68b94
  rules145 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 ds5 ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Numeral cobox0
                             -> case ds5
                                       `cast`
                                     (Sub cobox0) of wild4 { Duckling.Numeral.Types.NumeralData ds6 ds7 ds8 ds9 ->
                                GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                     Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                                     Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                                     Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                                     Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                                     Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                                     Duckling.Types.$WAmountOfMoney
                                     (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                        (GHC.Base.Just @ GHC.Types.Double ds6)
                                        Duckling.AmountOfMoney.Types.CNY
                                        (GHC.Base.Nothing @ GHC.Types.Double)
                                        (GHC.Base.Nothing @ GHC.Types.Double)
                                        GHC.Types.False)) } } } } }) -}
8f51578240c13f99dd31145676f85228
  rules146 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules148
                   Duckling.AmountOfMoney.Rules.rules147) -}
0a2f688c797491aa803080c90f8835d2
  rules147 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules65
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
238e22afd7f3571cb786c56f7ca080e7
  rules148 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules149) -}
445943d3367da114281b0f90a0e075f2
  rules149 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules150) -}
6b05dce43ad66457676b061beecfd4a7
  rules15 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules47
                   Duckling.AmountOfMoney.Rules.rules16) -}
9c5f163488597704b523de874c450372
  rules150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\186\\186\\230\\176\\145\\229\\184\\129|\\228\\186\\186\\230\\176\\145\\229\\185\\163"#) -}
23348e4b2b6a2907ceaea6b60acbfe50
  rules151 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cny prefix"#) -}
ad7614f38cb3b3b37366ce0e98a0e4ff
  rules152 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules158
                   Duckling.AmountOfMoney.Rules.rules157
                   Duckling.AmountOfMoney.Rules.rules153) -}
785c4ac994a57e026667014b4df3e37d
  rules153 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.AmountOfMoney.Rules.rules154) -}
9f4da9bee17cf3bd00d88a8398e0691e
  rules154 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.AmountOfMoney.Rules.rules155) -}
a6999cfa4c9970bb786b28dadc44216d
  rules155 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                   Duckling.Types.$WAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules156) -}
35cb1149a0a894396144c2210dfe6131
  rules156 :: Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.AmountOfMoney.Types.CNY
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   GHC.Types.False) -}
3929cbc67ee2f741432df626b3f8cf9d
  rules157 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules148
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e65e1a762ad44a901a41af8a38e6aed4
  rules158 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cny"#) -}
777140311ebd7419809b986216539928
  rules159 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules168
                   Duckling.AmountOfMoney.Rules.rules164
                   Duckling.AmountOfMoney.Rules.rules160) -}
408cf67fd1a3a071b38bd5608a24daa3
  rules16 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules36
                   Duckling.AmountOfMoney.Rules.rules17) -}
045bd180571208e08da7ca2b9112f863
  rules160 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,A>m2,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.AmountOfMoney.Rules.rules161) -}
fcf21e2bdc97dff53e795f094f5b54c8
  rules161 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.AmountOfMoney.Rules.rules162) -}
b41d61f3f017fbcc4712f9c8af02f933
  rules162 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                   Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                   Duckling.Types.$WAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules163) -}
9c3901ac60343d44c64cdc9fdd7f949b
  rules163 :: Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   Duckling.AmountOfMoney.Types.Cent
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   GHC.Types.False) -}
2fd7d8661f5c4e54b638304ba40c61f1
  rules164 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules165
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
47b5c157c195432b940dd04899c78210
  rules165 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules166) -}
0a536e2e3a02b5be6151731985545b65
  rules166 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules167) -}
525bf8da9508e0d9a91432ecf1133e84
  rules167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\136\\134"#) -}
a3cd26b0aa41294a443a2abc0daf5e2c
  rules168 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "cent"#) -}
3e1bd948c2f2a6463dfed2904e5447ba
  rules169 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules175
                   Duckling.AmountOfMoney.Rules.rules171
                   Duckling.AmountOfMoney.Rules.rules170) -}
ce789bc1c6e8e65ef3a715b2f56685f3
  rules17 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules28
                   Duckling.AmountOfMoney.Rules.rules18) -}
58d2a263f334c899b50ad392c9a4e276
  rules170 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U> -}
73c43fe09b55cd32833e9dfaa6ac3cf7
  rules171 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules172
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
85af393b5526192e77956f92eac462cb
  rules172 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules173) -}
d735f11cac74937845248725cfcca543
  rules173 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules174) -}
3f91b26a2e04ae6c7b362fb400ad8bf7
  rules174 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(aed|aud|bgn|brl|byn|\\194\\162|c|cad|chf|cny|\\$|dinars?|dkk|dollars?|egp|(e|\\226\\130\\172)uro?s?|\\226\\130\\172|gbp|gel|\\226\\130\\190|hrk|idr|ils|inr|iqd|jmd|jod|\\194\\165|jpy|lari|krw|kwd|lbp|mad|myr|rm|nok|nzd|\\194\\163|pkr|pln|pta?s?|qar|\\226\\130\\189|rs\\.?|riy?als?|ron|rub|rupees?|sar|sek|sgb|shekels?|thb|ttd|us(d|\\$)|vnd|yen|yuan|zar)"#) -}
690019f5d758f9972d65bb2cd44f729e
  rules175 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "currencies"#) -}
1ca1204bbab3b033ecc939c3fb656ac8
  rules176 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules178
                   Duckling.AmountOfMoney.Rules.rules147
                   Duckling.AmountOfMoney.Rules.rules177) -}
740ef8094de4f80ab390fb2173c20386
  rules177 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds4 ds5 ds6 ds7 ->
                           GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fResolveAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fEqAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fHashableAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fShowAmountOfMoneyData
                                Duckling.AmountOfMoney.Types.$fNFDataAmountOfMoneyData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.AmountOfMoney.Types.AmountOfMoneyData>_N))
                                Duckling.Types.$WAmountOfMoney
                                (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                   (GHC.Base.Just @ GHC.Types.Double ds4)
                                   Duckling.AmountOfMoney.Types.Unnamed
                                   (GHC.Base.Nothing @ GHC.Types.Double)
                                   (GHC.Base.Nothing @ GHC.Types.Double)
                                   GHC.Types.True)) } } } }) -}
be818a3d5985b97eb4b970391c7ffdb1
  rules178 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<amount> (latent)"#) -}
883ae60672e8d34918d056ff3b1a51b0
  rules179 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules184
                   Duckling.AmountOfMoney.Rules.rules181
                   Duckling.AmountOfMoney.Rules.rules180) -}
c2513864f40f869dd3ef5113f0516763
  rules18 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules19
                   (GHC.Types.[] @ Duckling.Types.Rule)) -}
ef419ba15c5c9cd19433928884195921
  rules180 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds4 ds5 ds6 ds7 ->
                           case ds1 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds8 ds9
                             -> case ds8 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds10 ds11 ->
                                case ds10 of wild6 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.AmountOfMoney cobox1
                                  -> case ds11
                                            `cast`
                                          (Sub cobox1) of wild7 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds12 ds13 ds14 ds15 ds16 ->
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                          $dResolve1 `cast` (Duckling.Resolve.Resolve cobox1)_R
                                          $dEq1 `cast` (GHC.Classes.Eq cobox1)_R
                                          $dHashable1 `cast` (Data.Hashable.Class.Hashable cobox1)_R
                                          $dShow1 `cast` (GHC.Show.Show cobox1)_R
                                          $dNFData1 `cast` (Control.DeepSeq.NFData cobox1)_R
                                          Duckling.Types.$WAmountOfMoney
                                          (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                             (GHC.Base.Just @ GHC.Types.Double ds4)
                                             ds13
                                             (GHC.Base.Nothing @ GHC.Types.Double)
                                             (GHC.Base.Nothing @ GHC.Types.Double)
                                             GHC.Types.False)) } } } } } } } }) -}
e7d4819ca36a1d771b8e868b8ed3126d
  rules181 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules65
                   Duckling.AmountOfMoney.Rules.rules182) -}
97c20da91cc788671a5ce594a92058c2
  rules182 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules183
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6cc6df92bf77e3f730211f0a6570b102
  rules183 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Helpers.isCurrencyOnly) -}
704f34eb25a0445274a93de0608a766c
  rules184 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<amount> <unit>"#) -}
cf0ab1811e2ee2409637d8b42919fdc3
  rules19 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules27
                   Duckling.AmountOfMoney.Rules.rules21
                   Duckling.AmountOfMoney.Rules.rules20) -}
bb1877e7bd84305c01bce6ce41f1e2f6
  rules2 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules169
                   Duckling.AmountOfMoney.Rules.rules3) -}
4df1dcf6908f63271f0b918933ea0ba7
  rules20 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds -> GHC.Base.Just @ Duckling.Types.Token token }) -}
4520b65b0116357fb8aaf6ce22ccf245
  rules21 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules26
                   Duckling.AmountOfMoney.Rules.rules22) -}
0d41f51428f411799eb152a52b0d084c
  rules22 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules23
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
c07ec57ff9edbc0d4e7b97efdad8857f
  rules23 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules24) -}
6674d6a0a6c8221a1a85cdf325c38146
  rules24 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules25) -}
6bb03fc1eaf0d6f68a15eb5a18bc856c
  rules25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\183\\166\\229\\143\\179"#) -}
e5eb07710bcd2762e034379e15c6e3a5
  rules26 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Helpers.isMoneyWithValue) -}
d7030c2b3b8f6f3cd0a2224cfabf37ba
  rules27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "about <amount-of-money>"#) -}
34ffdf3287a3ebf0198cb65f2ad0a77f
  rules28 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules35
                   Duckling.AmountOfMoney.Rules.rules30
                   Duckling.AmountOfMoney.Rules.rules29) -}
409f12489a0eaf91dcf468b7eba63f30
  rules29 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds2 -> GHC.Base.Just @ Duckling.Types.Token token } }) -}
10c810168fd7eea001c86b1632b191c3
  rules3 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules159
                   Duckling.AmountOfMoney.Rules.rules4) -}
f6922e7ce2573a44387140960e67dfba
  rules30 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules32
                   Duckling.AmountOfMoney.Rules.rules31) -}
6f0a2409a3f87a1878c52aefd3587640
  rules31 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules26
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
211935891156576154be829d299b78d3
  rules32 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules33) -}
a14f7957ecd1de78cafda550bfecd473
  rules33 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules34) -}
6a0cb2a36f5fa380c28e210be7913529
  rules34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\136\\154\\229\\165\\189|\\230\\129\\176\\229\\165\\189|\\229\\164\\167\\230\\166\\130"#) -}
9ee34e43fbc2333663932ab9bd905b28
  rules35 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "exactly/about <amount-of-money>"#) -}
9b97f158eaf694124ba73ca53cd11421
  rules36 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules46
                   Duckling.AmountOfMoney.Rules.rules40
                   Duckling.AmountOfMoney.Rules.rules37) -}
8fb5505e6c8da3637714dce2f72a5664
  rules37 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds4 ds5 ds6 ds7 ds8 ->
                           case ds4 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just to
                             -> case ds1 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds9 ds10
                                  -> case ds9 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds11 ds12 ->
                                     case ds11 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.RegexMatch cobox1
                                       -> case ds12
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.Regex.Types.GroupMatch ds13 ->
                                          case ds13 of wild9 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : match ds14
                                            -> case match of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case Duckling.AmountOfMoney.Rules.rules39 of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               let {
                                                 $j :: GHC.Prim.Void#
                                                       -> GHC.Base.Maybe Duckling.Types.Token
                                                   {- Arity: 1, Strictness: <L,A> -}
                                                 = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                                   case Duckling.AmountOfMoney.Rules.rules38 of wild12 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==# dt2 dt9) of wild13 {
                                                     GHC.Types.False
                                                     -> GHC.Base.Nothing @ Duckling.Types.Token
                                                     GHC.Types.True
                                                     -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.ByteArray#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.State#
                                                                                                                                                GHC.Prim.RealWorld
                                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                                 GHC.Prim.Int# #)}
                                                               dt
                                                               (GHC.Prim.int2Word# dt1)
                                                               dt7
                                                               (GHC.Prim.int2Word# dt8)
                                                               (GHC.Prim.int2Word# dt2)
                                                               GHC.Prim.realWorld# of wild14 { (#,#) ds15 ds16 ->
                                                        case GHC.Prim.narrow32Int# ds16 of wild15 {
                                                          DEFAULT
                                                          -> GHC.Base.Nothing @ Duckling.Types.Token
                                                          0#
                                                          -> GHC.Base.Just
                                                               @ Duckling.Types.Token
                                                               (Duckling.Types.Token
                                                                  @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                  $dResolve
                                                                    `cast`
                                                                  (Duckling.Resolve.Resolve
                                                                     cobox0)_R
                                                                  $dEq
                                                                    `cast`
                                                                  (GHC.Classes.Eq cobox0)_R
                                                                  $dHashable
                                                                    `cast`
                                                                  (Data.Hashable.Class.Hashable
                                                                     cobox0)_R
                                                                  $dShow
                                                                    `cast`
                                                                  (GHC.Show.Show cobox0)_R
                                                                  $dNFData
                                                                    `cast`
                                                                  (Control.DeepSeq.NFData cobox0)_R
                                                                  Duckling.Types.$WAmountOfMoney
                                                                  (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                     (GHC.Base.Nothing
                                                                        @ GHC.Types.Double)
                                                                     ds5
                                                                     wild4
                                                                     (GHC.Base.Nothing
                                                                        @ GHC.Types.Double)
                                                                     GHC.Types.False)) } } } }
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==# dt2 dt5) of wild12 {
                                                 GHC.Types.False -> $j GHC.Prim.void#
                                                 GHC.Types.True
                                                 -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.State#
                                                                                                                                            GHC.Prim.RealWorld
                                                                                                                                       -> (# GHC.Prim.State#
                                                                                                                                               GHC.Prim.RealWorld,
                                                                                                                                             GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild13 { (#,#) ds15 ds16 ->
                                                    case GHC.Prim.narrow32Int# ds16 of wild14 {
                                                      DEFAULT -> $j GHC.Prim.void#
                                                      0#
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                              $dResolve
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox0)_R
                                                              $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                              $dHashable
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox0)_R
                                                              $dShow `cast` (GHC.Show.Show cobox0)_R
                                                              $dNFData
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox0)_R
                                                              Duckling.Types.$WAmountOfMoney
                                                              (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                 (GHC.Base.Nothing
                                                                    @ GHC.Types.Double)
                                                                 ds5
                                                                 (GHC.Base.Nothing
                                                                    @ GHC.Types.Double)
                                                                 wild4
                                                                 GHC.Types.False)) } } } } } } } } } } } } } } }) -}
f6b5cad8ed9148945e56d0103e956411
  rules38 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\228\\187\\165\\228\\184\\138"#) -}
645097efe641db92d9c931d8bf40399e
  rules39 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\228\\187\\165\\228\\184\\139"#) -}
23f9d3d32d103e68d3be7e877052d49a
  rules4 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules152
                   Duckling.AmountOfMoney.Rules.rules5) -}
674f8aa9dcb542d5bf9ac8bdeb764c03
  rules40 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules45
                   Duckling.AmountOfMoney.Rules.rules41) -}
99b6bfa99e85a164ff53fab5a5f073aa
  rules41 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules42
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e867c961ef0c5347bdd6bc8e0799dcba
  rules42 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules43) -}
f33a6fe43571566a1e672601f9fc3a94
  rules43 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules44) -}
c75844c0f63f5935e81e401d61643f66
  rules44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\187\\165\\228\\184\\139|\\228\\187\\165\\228\\184\\138)"#) -}
a37c77b877b6aca4a8989ed2e8f5af9a
  rules45 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney) -}
0e1c4df8e98b94369b8cfb13bc2e6bd0
  rules46 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "under/less/lower/no more than <amount-of-money> (\\228\\187\\165\\228\\184\\139|\\228\\187\\165\\228\\184\\138)"#) -}
7e37e8febcd1d4e89649718a225e766f
  rules47 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules57
                   Duckling.AmountOfMoney.Rules.rules52
                   Duckling.AmountOfMoney.Rules.rules48) -}
70f1f3ab02cc15ae38799d3f1d9d8d0b
  rules48 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : match ds5
                             -> case ds1 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds6 ds7
                                  -> case ds6 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds8 ds9 ->
                                     case ds8 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.AmountOfMoney cobox1
                                       -> case ds9
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds10 ds11 ds12 ds13 ds14 ->
                                          case ds10 of wild9 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just to
                                            -> case match of wild10 { Data.Text.Internal.Text dt dt1 dt2 ->
                                               case Duckling.AmountOfMoney.Rules.rules51 of wild11 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                               let {
                                                 $j :: GHC.Prim.Void#
                                                       -> GHC.Base.Maybe Duckling.Types.Token
                                                   {- Arity: 1, Strictness: <L,A> -}
                                                 = \ (w :: GHC.Prim.Void#)[OneShot] ->
                                                   case Duckling.AmountOfMoney.Rules.rules50 of wild12 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                                   let {
                                                     $j1 :: GHC.Prim.Void#
                                                            -> GHC.Base.Maybe Duckling.Types.Token
                                                       {- Arity: 1, Strictness: <L,A> -}
                                                     = \ (w1 :: GHC.Prim.Void#)[OneShot] ->
                                                       case Duckling.AmountOfMoney.Rules.rules49 of wild13 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.==# dt2 dt12) of wild14 {
                                                         GHC.Types.False
                                                         -> GHC.Base.Nothing @ Duckling.Types.Token
                                                         GHC.Types.True
                                                         -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                                               -> GHC.Prim.Word#
                                                                                                                                               -> GHC.Prim.ByteArray#
                                                                                                                                               -> GHC.Prim.Word#
                                                                                                                                               -> GHC.Prim.Word#
                                                                                                                                               -> GHC.Prim.State#
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                               -> (# GHC.Prim.State#
                                                                                                                                                       GHC.Prim.RealWorld,
                                                                                                                                                     GHC.Prim.Int# #)}
                                                                   dt
                                                                   (GHC.Prim.int2Word# dt1)
                                                                   dt10
                                                                   (GHC.Prim.int2Word# dt11)
                                                                   (GHC.Prim.int2Word# dt2)
                                                                   GHC.Prim.realWorld# of wild15 { (#,#) ds15 ds16 ->
                                                            case GHC.Prim.narrow32Int#
                                                                   ds16 of wild16 {
                                                              DEFAULT
                                                              -> GHC.Base.Nothing
                                                                   @ Duckling.Types.Token
                                                              0#
                                                              -> GHC.Base.Just
                                                                   @ Duckling.Types.Token
                                                                   (Duckling.Types.Token
                                                                      @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                      $dResolve1
                                                                        `cast`
                                                                      (Duckling.Resolve.Resolve
                                                                         cobox1)_R
                                                                      $dEq1
                                                                        `cast`
                                                                      (GHC.Classes.Eq cobox1)_R
                                                                      $dHashable1
                                                                        `cast`
                                                                      (Data.Hashable.Class.Hashable
                                                                         cobox1)_R
                                                                      $dShow1
                                                                        `cast`
                                                                      (GHC.Show.Show cobox1)_R
                                                                      $dNFData1
                                                                        `cast`
                                                                      (Control.DeepSeq.NFData
                                                                         cobox1)_R
                                                                      Duckling.Types.$WAmountOfMoney
                                                                      (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                         (GHC.Base.Nothing
                                                                            @ GHC.Types.Double)
                                                                         ds11
                                                                         wild9
                                                                         (GHC.Base.Nothing
                                                                            @ GHC.Types.Double)
                                                                         GHC.Types.False)) } } } }
                                                   } in
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==# dt2 dt9) of wild13 {
                                                     GHC.Types.False -> $j1 GHC.Prim.void#
                                                     GHC.Types.True
                                                     -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.ByteArray#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.Word#
                                                                                                                                           -> GHC.Prim.State#
                                                                                                                                                GHC.Prim.RealWorld
                                                                                                                                           -> (# GHC.Prim.State#
                                                                                                                                                   GHC.Prim.RealWorld,
                                                                                                                                                 GHC.Prim.Int# #)}
                                                               dt
                                                               (GHC.Prim.int2Word# dt1)
                                                               dt7
                                                               (GHC.Prim.int2Word# dt8)
                                                               (GHC.Prim.int2Word# dt2)
                                                               GHC.Prim.realWorld# of wild14 { (#,#) ds15 ds16 ->
                                                        case GHC.Prim.narrow32Int# ds16 of wild15 {
                                                          DEFAULT -> $j1 GHC.Prim.void#
                                                          0#
                                                          -> GHC.Base.Just
                                                               @ Duckling.Types.Token
                                                               (Duckling.Types.Token
                                                                  @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                  $dResolve1
                                                                    `cast`
                                                                  (Duckling.Resolve.Resolve
                                                                     cobox1)_R
                                                                  $dEq1
                                                                    `cast`
                                                                  (GHC.Classes.Eq cobox1)_R
                                                                  $dHashable1
                                                                    `cast`
                                                                  (Data.Hashable.Class.Hashable
                                                                     cobox1)_R
                                                                  $dShow1
                                                                    `cast`
                                                                  (GHC.Show.Show cobox1)_R
                                                                  $dNFData1
                                                                    `cast`
                                                                  (Control.DeepSeq.NFData cobox1)_R
                                                                  Duckling.Types.$WAmountOfMoney
                                                                  (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                     (GHC.Base.Nothing
                                                                        @ GHC.Types.Double)
                                                                     ds11
                                                                     wild9
                                                                     (GHC.Base.Nothing
                                                                        @ GHC.Types.Double)
                                                                     GHC.Types.False)) } } } }
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==# dt2 dt5) of wild12 {
                                                 GHC.Types.False -> $j GHC.Prim.void#
                                                 GHC.Types.True
                                                 -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.ByteArray#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.Word#
                                                                                                                                       -> GHC.Prim.State#
                                                                                                                                            GHC.Prim.RealWorld
                                                                                                                                       -> (# GHC.Prim.State#
                                                                                                                                               GHC.Prim.RealWorld,
                                                                                                                                             GHC.Prim.Int# #)}
                                                           dt
                                                           (GHC.Prim.int2Word# dt1)
                                                           dt3
                                                           (GHC.Prim.int2Word# dt4)
                                                           (GHC.Prim.int2Word# dt2)
                                                           GHC.Prim.realWorld# of wild13 { (#,#) ds15 ds16 ->
                                                    case GHC.Prim.narrow32Int# ds16 of wild14 {
                                                      DEFAULT -> $j GHC.Prim.void#
                                                      0#
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                              $dResolve1
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox1)_R
                                                              $dEq1 `cast` (GHC.Classes.Eq cobox1)_R
                                                              $dHashable1
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox1)_R
                                                              $dShow1
                                                                `cast`
                                                              (GHC.Show.Show cobox1)_R
                                                              $dNFData1
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox1)_R
                                                              Duckling.Types.$WAmountOfMoney
                                                              (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                 (GHC.Base.Nothing
                                                                    @ GHC.Types.Double)
                                                                 ds11
                                                                 (GHC.Base.Nothing
                                                                    @ GHC.Types.Double)
                                                                 wild9
                                                                 GHC.Types.False)) } } } } } } } } } } } } } } }) -}
567ad36f3270fc7c0a691d74a21be9b3
  rules49 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\232\\135\\179\\229\\176\\145"#) -}
a338df458381606003259eed9adeaf2d
  rules5 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules144
                   Duckling.AmountOfMoney.Rules.rules6) -}
a03facb1825c7a5529107ad56609c19a
  rules50 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\230\\156\\128\\229\\176\\145"#) -}
322aa43dcdd0f0020a810bcdd007a051
  rules51 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "\\230\\156\\128\\229\\164\\154"#) -}
c229c2f07fb49b7248cfab096f3cf688
  rules52 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules54
                   Duckling.AmountOfMoney.Rules.rules53) -}
79fc528093229de6c004f03a661c8590
  rules53 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules45
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
769a0455e81fa0d8bc0b0bd85e7e25d2
  rules54 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules55) -}
e86dab16585c9d9ae3835782861042b7
  rules55 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules56) -}
fdf37848281196a8f04d9b02572f6664
  rules56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\230\\156\\128\\229\\164\\154|\\232\\135\\179\\229\\176\\145|\\230\\156\\128\\229\\176\\145)"#) -}
e560c0d37278e907bcf273e75427c4cb
  rules57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "under/less/lower/no more than <amount-of-money> (\\230\\156\\128\\229\\164\\154|\\232\\135\\179\\229\\176\\145|\\230\\156\\128\\229\\176\\145)"#) -}
258ab07a584b35e2209b2398ba6eef6f
  rules58 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules66
                   Duckling.AmountOfMoney.Rules.rules60
                   Duckling.AmountOfMoney.Rules.rules59) -}
c8ecb16065dcc351e1d77bf19e4e980b
  rules59 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds4 ds5 ds6 ds7 ->
                           case ds1 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds8 ds9
                             -> case ds9 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds10 ds11
                                  -> case ds10 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds12 ds13 ->
                                     case ds12 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.AmountOfMoney cobox1
                                       -> case ds13
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds14 ds15 ds16 ds17 ds18 ->
                                          case ds14 of wild9 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just to
                                            -> case ds4 of wild10 { GHC.Types.D# x ->
                                               case to of wild11 { GHC.Types.D# y ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<## x y) of wild12 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                         $dResolve1
                                                           `cast`
                                                         (Duckling.Resolve.Resolve cobox1)_R
                                                         $dEq1 `cast` (GHC.Classes.Eq cobox1)_R
                                                         $dHashable1
                                                           `cast`
                                                         (Data.Hashable.Class.Hashable cobox1)_R
                                                         $dShow1 `cast` (GHC.Show.Show cobox1)_R
                                                         $dNFData1
                                                           `cast`
                                                         (Control.DeepSeq.NFData cobox1)_R
                                                         Duckling.Types.$WAmountOfMoney
                                                         (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                            (GHC.Base.Nothing @ GHC.Types.Double)
                                                            ds15
                                                            (GHC.Base.Just
                                                               @ GHC.Types.Double
                                                               wild10)
                                                            wild9
                                                            GHC.Types.False)) } } } } } } } } } } } } }) -}
c69a1ab9fb4180a9ace8b97bffcfe93e
  rules6 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules136
                   Duckling.AmountOfMoney.Rules.rules7) -}
c1d8a733a3b4c45d8a90595ba193f51c
  rules60 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules65
                   Duckling.AmountOfMoney.Rules.rules61) -}
588d83e4bc80713f5c1e441c97983507
  rules61 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules62
                   Duckling.AmountOfMoney.Rules.rules53) -}
407a36400e9ef5b7554a064a9872dfcf
  rules62 :: Duckling.Types.PatternItem
  {- Strictness: m1,
     Unfolding: (Duckling.Types.Regex
                   Duckling.AmountOfMoney.Rules.rules63) -}
63cfff93f922bcd92ff0b614aba2d3bf
  rules63 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.AmountOfMoney.Rules.rules64) -}
9776eec02efdde35a49aad53b25bc727
  rules64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "-|~|\\229\\136\\176"#) -}
c72633dd8f146018b6489b83b50810bb
  rules65 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Numeral.Helpers.isPositive) -}
66456fde9a2e957587b3dcb7667be1d9
  rules66 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<numeral> - <amount-of-money>"#) -}
11e06d64ae4b8c90242865245ea2580b
  rules67 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules70
                   Duckling.AmountOfMoney.Rules.rules69
                   Duckling.AmountOfMoney.Rules.rules68) -}
93d4a5bb003e479c999dc8aee834f2f1
  rules68 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds4 ds5 ds6 ds7 ds8 ->
                           case ds4 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just from
                             -> case ds1 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds9 ds10
                                  -> case ds10 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds11 ds12
                                       -> case ds11 of wild7 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds13 ds14 ->
                                          case ds13 of wild8 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.AmountOfMoney cobox1
                                            -> case ds14
                                                      `cast`
                                                    (Sub cobox1) of wild9 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds15 ds16 ds17 ds18 ds19 ->
                                               case ds15 of wild10 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just to
                                                 -> case from of wild11 { GHC.Types.D# x ->
                                                    case to of wild12 { GHC.Types.D# y ->
                                                    case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<## x y) of wild13 {
                                                      GHC.Types.False
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Types.True
                                                      -> case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.==#
                                                                   (GHC.Prim.dataToTag#
                                                                      @ Duckling.AmountOfMoney.Types.Currency
                                                                      ds5)
                                                                   (GHC.Prim.dataToTag#
                                                                      @ Duckling.AmountOfMoney.Types.Currency
                                                                      ds16)) of wild14 {
                                                           GHC.Types.False
                                                           -> GHC.Base.Nothing
                                                                @ Duckling.Types.Token
                                                           GHC.Types.True
                                                           -> GHC.Base.Just
                                                                @ Duckling.Types.Token
                                                                (Duckling.Types.Token
                                                                   @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                   $dResolve
                                                                     `cast`
                                                                   (Duckling.Resolve.Resolve
                                                                      cobox0)_R
                                                                   $dEq
                                                                     `cast`
                                                                   (GHC.Classes.Eq cobox0)_R
                                                                   $dHashable
                                                                     `cast`
                                                                   (Data.Hashable.Class.Hashable
                                                                      cobox0)_R
                                                                   $dShow
                                                                     `cast`
                                                                   (GHC.Show.Show cobox0)_R
                                                                   $dNFData
                                                                     `cast`
                                                                   (Control.DeepSeq.NFData cobox0)_R
                                                                   Duckling.Types.$WAmountOfMoney
                                                                   (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Double)
                                                                      ds5
                                                                      wild4
                                                                      wild10
                                                                      GHC.Types.False)) } } } } } } } } } } } } } } }) -}
12fb5a38a76d6c9ded01feb01701df2a
  rules69 :: [Duckling.Types.PatternItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules45
                   Duckling.AmountOfMoney.Rules.rules61) -}
4246ea5130ecf45e3492fef144677f9f
  rules7 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules126
                   Duckling.AmountOfMoney.Rules.rules8) -}
728938bf100a4158d30789ce70309ff2
  rules70 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<amount-of-money> - <amount-of-money>"#) -}
18b67c8e334f1dd95771c00b2c0d9942
  rules71 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules83
                   Duckling.AmountOfMoney.Rules.rules73
                   Duckling.AmountOfMoney.Rules.rules72) -}
fa7dfc4b790911cb2ed60c8ac025c397
  rules72 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 fd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 ds6 ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.AmountOfMoney cobox1
                                  -> case ds6
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds7 ds8 ds9 ds10 ds11 ->
                                     case ds7 of wild7 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just c
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WAmountOfMoney
                                               (Duckling.AmountOfMoney.Helpers.withCents
                                                  c
                                                  fd `cast` (Sub cobox0))) } } } } } } } }) -}
717431372e18f487287b5e424d2606b1
  rules73 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules79
                   Duckling.AmountOfMoney.Rules.rules74) -}
7a9c124bf515e7daca1cd692fdd3794e
  rules74 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules75
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
0ddc75dd666c514c861bc575d7079998
  rules75 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules76
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
fb87f392d78e8ce8abae862df72db5ad
  rules76 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go1
                   (Duckling.AmountOfMoney.Rules.rules_go
                      Duckling.AmountOfMoney.Rules.rules77
                      x)) -}
6890ce975760238330422dfb25494253
  rules77 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules78) -}
479b0a03bcf9272d5082c7a650cecdf2
  rules78 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isCents
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
06ff2a77a8a542736862bd49b939b7f5
  rules79 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules80
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
4111834cc74845096f32792dd330c69b
  rules8 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules111
                   Duckling.AmountOfMoney.Rules.rules9) -}
2c8b6c73f69f4989a1e1092061be0970
  rules80 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go3
                   (Duckling.AmountOfMoney.Rules.rules_go2
                      Duckling.AmountOfMoney.Rules.rules81
                      x)) -}
c65468af1b35a9490183cc2cf9489e82
  rules81 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules82) -}
76afbbe0c4a63619d6477cd4ffbb82b4
  rules82 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isWithoutCents
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
1649fb548a18096f6b02e208e0314ae3
  rules83 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect (X dollars and X dimes/cents)"#) -}
200242a0540f83602f8e47defd2008a5
  rules84 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules96
                   Duckling.AmountOfMoney.Rules.rules86
                   Duckling.AmountOfMoney.Rules.rules85) -}
24118531da126bcd24d36f494c617b11
  rules85 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds4 ds5 ds6 ds7 ds8 ->
                           case ds4 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just d
                             -> case ds1 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds9 ds10
                                  -> case ds9 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds11 ds12 ->
                                     case ds11 of wild7 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.AmountOfMoney cobox1
                                       -> case ds12
                                                 `cast`
                                               (Sub cobox1) of wild8 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds13 ds14 ds15 ds16 ds17 ->
                                          case ds13 of wild9 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just c
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                    $dResolve
                                                      `cast`
                                                    (Duckling.Resolve.Resolve cobox0)_R
                                                    $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                    $dHashable
                                                      `cast`
                                                    (Data.Hashable.Class.Hashable cobox0)_R
                                                    $dShow `cast` (GHC.Show.Show cobox0)_R
                                                    $dNFData
                                                      `cast`
                                                    (Control.DeepSeq.NFData cobox0)_R
                                                    Duckling.Types.$WAmountOfMoney
                                                    (Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                       (GHC.Base.Just
                                                          @ GHC.Types.Double
                                                          (case c of wild10 { GHC.Types.D# x ->
                                                           case d of wild11 { GHC.Types.D# y ->
                                                           GHC.Types.D# (GHC.Prim.+## x y) } }))
                                                       Duckling.AmountOfMoney.Types.Cent
                                                       (GHC.Base.Nothing @ GHC.Types.Double)
                                                       (GHC.Base.Nothing @ GHC.Types.Double)
                                                       GHC.Types.False)) } } } } } } } } } }) -}
98060ce19a963fcc9f36e696003cb9ad
  rules86 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules92
                   Duckling.AmountOfMoney.Rules.rules87) -}
821c02ab166e8403d1eefc62c0518b36
  rules87 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules88
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
d4b149c18b5511459a62377e4bbaa3b5
  rules88 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules89
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
3fcb76367a74785715b65e5e78248e03
  rules89 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go5
                   (Duckling.AmountOfMoney.Rules.rules_go4
                      Duckling.AmountOfMoney.Rules.rules90
                      x)) -}
027889611791a48c08ff8b76aeaeceb1
  rules9 :: [Duckling.Types.Rule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules105
                   Duckling.AmountOfMoney.Rules.rules10) -}
3520eb7b0a6eef4753a9273690c31bd0
  rules90 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules91) -}
c7b187d83835676684672d0141e67534
  rules91 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isCent
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
05bf85c66d63fccd2af7098e352bd4db
  rules92 :: Duckling.Types.PatternItem
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.AmountOfMoney.Rules.rules93
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
e1feae8acb2bd1801ab33e6ee0465f1d
  rules93 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.AmountOfMoney.Rules.rules_go7
                   (Duckling.AmountOfMoney.Rules.rules_go6
                      Duckling.AmountOfMoney.Rules.rules94
                      x)) -}
8bd03004f2a37c15c08152ed9722daa1
  rules94 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney
                   Duckling.AmountOfMoney.Rules.rules95) -}
7cf9e264b7ffad2b0aa9682351d43428
  rules95 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.AmountOfMoney.Helpers.isDime
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
73553a0ad9b6916c63782056f277347a
  rules96 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect (X dimes and X cents)"#) -}
de35e21671578d68123924fabb511f40
  rules97 :: Duckling.Types.Rule
  {- Strictness: m,
     Unfolding: (Duckling.Types.Rule
                   Duckling.AmountOfMoney.Rules.rules104
                   Duckling.AmountOfMoney.Rules.rules99
                   Duckling.AmountOfMoney.Rules.rules98) -}
c884384011970e0b429fb25f62baf60c
  rules98 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 fd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.AmountOfMoney cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 ds6 ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Numeral cobox1
                                  -> case ds6
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                          $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                          $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                          $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                          $dShow `cast` (GHC.Show.Show cobox0)_R
                                          $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                          Duckling.Types.$WAmountOfMoney
                                          (case fd
                                                  `cast`
                                                (Sub cobox0) of ww { Duckling.AmountOfMoney.Types.AmountOfMoneyData ww1 ww2 ww3 ww4 ww5 ->
                                           case ww1 of wild7 {
                                             GHC.Base.Nothing
                                             -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                  (GHC.Base.Just
                                                     @ GHC.Types.Double
                                                     (case ds7 of wild8 { GHC.Types.D# x ->
                                                      GHC.Types.D# (GHC.Prim.*## x 10.0##) }))
                                                  Duckling.AmountOfMoney.Types.Cent
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  (GHC.Base.Nothing @ GHC.Types.Double)
                                                  GHC.Types.False
                                             GHC.Base.Just value
                                             -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
                                                  (GHC.Base.Just
                                                     @ GHC.Types.Double
                                                     (case value of wild8 { GHC.Types.D# x ->
                                                      case ds7 of wild9 { GHC.Types.D# x1 ->
                                                      GHC.Types.D#
                                                        (GHC.Prim.+##
                                                           x
                                                           (GHC.Prim./##
                                                              (GHC.Prim.*## x1 10.0##)
                                                              100.0##)) } }))
                                                  ww2
                                                  ww3
                                                  ww4
                                                  ww5 } })) } } } } } } }) -}
ae1c2c5229421bc7a0ae02c730ee70e0
  rules99 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.AmountOfMoney.Rules.rules102
                   Duckling.AmountOfMoney.Rules.rules100) -}
4c3f2637a4dd119d82f519b19c11f855
  rules_go ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
fa27dfd33ab9b024d85a5ec466a0467f
  rules_go1 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
34907f2f089778833f067b584cdde803
  rules_go10 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
0b782e171822c915d49d191d99e5765a
  rules_go11 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2d9771e719b3b6188f650b53fcf95e98
  rules_go12 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
a691dd3795a13ea84560244d0c070f96
  rules_go13 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
6e3493e7171fd40b11b29beb86d2893a
  rules_go2 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
0ca35891c521679ba614fe31b733457b
  rules_go3 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2cb7efc658380feb853647e11ac46dfc
  rules_go4 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
5d095b19ce48286d36708b10dc524a31
  rules_go5 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a40bbd2b2b879dcca2edbe2f33612d5f
  rules_go6 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
c689a84d8293a8ef356a795dd68649b8
  rules_go7 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
40e2e728394c08fd6e65aa356169dbc6
  rules_go8 ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
82176bcebb286fae8c9b7958c06bcabe
  rules_go9 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e19d48292927c86f9ea3dabc65d63e92
  rules_w :: [GHC.Types.Double]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Double
                   GHC.Classes.$fOrdDouble
                   GHC.Float.$fFractionalDouble
                   Duckling.AmountOfMoney.Rules.rules119
                   Duckling.AmountOfMoney.Rules.rules118) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

