
==================== FINAL INTERFACE ====================
2019-03-14 03:01:05.645065 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Helpers 8002
  interface hash: 53e74282521a37638fe5199776392d13
  ABI hash: 5a3fbe49dcd955dddb9bdab8ceaa15ef
  export-list hash: 843a8eaaefc62d8b0817b7cc97296eb9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ebf84925f6dfb5e1c6e97bdf1edc0574
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.AmountOfMoney.Helpers.currencyOnly
  Duckling.AmountOfMoney.Helpers.dollarCoins
  Duckling.AmountOfMoney.Helpers.isCent
  Duckling.AmountOfMoney.Helpers.isCents
  Duckling.AmountOfMoney.Helpers.isCurrencyOnly
  Duckling.AmountOfMoney.Helpers.isDime
  Duckling.AmountOfMoney.Helpers.isDollarCoin
  Duckling.AmountOfMoney.Helpers.isMoneyWithValue
  Duckling.AmountOfMoney.Helpers.isSimpleAmountOfMoney
  Duckling.AmountOfMoney.Helpers.isWithoutCents
  Duckling.AmountOfMoney.Helpers.mkLatent
  Duckling.AmountOfMoney.Helpers.valueOnly
  Duckling.AmountOfMoney.Helpers.withCents
  Duckling.AmountOfMoney.Helpers.withInterval
  Duckling.AmountOfMoney.Helpers.withMax
  Duckling.AmountOfMoney.Helpers.withMin
  Duckling.AmountOfMoney.Helpers.withValue
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Dimensions.Types
                     Duckling.Distance.Types Duckling.Duration.Types
                     Duckling.Email.Types Duckling.Gender.Types Duckling.Identity.Types
                     Duckling.Locale Duckling.Numeral.Types Duckling.Ordinal.Types
                     Duckling.PhoneNumber.Types Duckling.Quantity.Types
                     Duckling.Regex.Types Duckling.Region Duckling.Resolve
                     Duckling.Temperature.Types Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.String b34df69c7b6358cd40a379c8a0a78dcf
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.AmountOfMoney.Types 7dc5ee03de042114275e6195f2ab63d3
  exports: e9b6dbd5d844108c1a8792ac6a374620
  AUD d6be2ce5414076f5c8f3fa6b2d52d69a
  AmountOfMoneyData 191a90c8811db3d8e8a3f0209a5c6da3
  AmountOfMoneyData ceb555a6e335c7332ef7ebea756e5eb9
  CAD 9cf0ec94ba6b6b3a7559ce2457a83fc7
  Cent 2cccc794a5534cc01c1b3d7cd1cab6bb
  Currency d9a1bfb9db27e54335f7a30e0f7481a2
  Dollar 5d8b00b6786cfc967994f62ad7ccceee
  JMD e70f61242cef873e867677ad01eeb26b
  NZD 5e81637c70950866f9228121cebfb318
  SGD 4f17485f7f2c6bcae4c8aa8c9b26c712
  TTD 83abe3cc9a8d9f47b0d3f370c8036684
  USD 97dc36443baab20803bac15e6c237af8
  amountOfMoneyData' 7ed2e0dca34bbb778cda8f65f29cce24
  currency 75b70af6a6582321b001d9c530d84314
  latent 4bf6604317de7b57b3bb2e1dc8fe9a83
  maxValue bb03771d0dd11d1e3408c518530fa918
  minValue c032617e5ee76c4499ec2a1cf2132265
  value 90a17efc96a83005575d3b1210dcd44e
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Numeral.Types 5130bfd045a9ca6085fec0a42ae9c523
  exports: 94344b1dfc906561c4234f30cd403539
  getIntValue add6a5820b8bb58aa51daac6fca5489c
  isInteger 777ea6abfcf1522cde707ce9783c3c93
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  AmountOfMoney ce33243db932587ab50a1bf646eab412
  Predicate 876893268fb58123567a47e946b5b6ba
  Token ed5ab3414f0516bc6b6fd996e839d3c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
4eaf7d2b3adac3530e70f7f29d826e53
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.AmountOfMoney.Helpers.$trModule2
                   Duckling.AmountOfMoney.Helpers.$trModule1) -}
fbe9f145f95017ee02d6d9d48bf55797
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.AmountOfMoney.Helpers"#) -}
43aa6f7f28b46a66744e8e30799b07c8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
75d24b2a25339bc65dae9602da807468
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
b7a66ea49f2885a89152829ebdd7935d
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 case Duckling.AmountOfMoney.Helpers.$wpoly_go1
                        @ GHC.Prim.RealWorld
                        @ v
                        (GHC.Prim.int2Word# ds2)
                        ww
                        ww1
                        ww2
                        w
                        0#
                        w1
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
fe68100cdf98e89be1ad801560331a4f
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
3c0632290a17bdee5106d3a29944c0e5
  currencyOnly ::
    Duckling.AmountOfMoney.Types.Currency
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: Duckling.AmountOfMoney.Types.Currency) ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   c
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   GHC.Types.False) -}
ca27e561ec53b2d8ccaaeeebdb47c5b3
  dollarCoins ::
    Data.HashMap.Base.HashMap Data.Text.Internal.Text GHC.Types.Double
c1ae229f2783b3bb51efd96e9ba98889
  isCent :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just c
                        -> case ds4 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.AmountOfMoney.Types.Cent
                             -> case c of ww { GHC.Types.D# ww1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==## ww1 0.0##) of wild5 {
                                  GHC.Types.False
                                  -> let {
                                       n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==##
                                               (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n))
                                               0.0##) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.>=# n 0#) of wild7 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# n 9#) } }
                                  GHC.Types.True -> GHC.Types.True } } } } } } }) -}
f565d2c1338d15853fd428ec015dadec
  isCents :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds8
                        -> case ds4 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.AmountOfMoney.Types.Cent -> GHC.Types.True } } } } }) -}
89a636a673496359057147ea87e5960b
  isCurrencyOnly :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing
                        -> case ds5 of wild4 {
                             GHC.Base.Nothing
                             -> case ds6 of wild5 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just ipv -> GHC.Types.False } } } }) -}
e490e945550d463f6ff45b274ca86f5a
  isDime :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just d
                        -> case ds4 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.AmountOfMoney.Types.Cent
                             -> case d of ww { GHC.Types.D# ww1 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==## ww1 0.0##) of wild5 {
                                  GHC.Types.False
                                  -> let {
                                       n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==##
                                               (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n))
                                               0.0##) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Classes.modInt# n 10# of ww2 {
                                            DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } }
                                  GHC.Types.True
                                  -> case GHC.Classes.modInt# 0# 10# of ww2 {
                                       DEFAULT -> GHC.Types.False
                                       0# -> GHC.Types.True } } } } } } } }) -}
cf2b64530d47184f4f964759efb3a049
  isDollarCoin :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just d
                        -> case GHC.List.elem
                                  @ GHC.Types.Double
                                  GHC.Classes.$fEqDouble
                                  d
                                  Duckling.AmountOfMoney.Helpers.isDollarCoin9 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.List.elem
                                  @ Duckling.AmountOfMoney.Types.Currency
                                  Duckling.AmountOfMoney.Types.$fEqCurrency
                                  ds4
                                  Duckling.AmountOfMoney.Helpers.isDollarCoin1 } } } } }) -}
e744ee3459e4ca4a12d1dfb5f32cb834
  isDollarCoin1 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.Dollar
                   Duckling.AmountOfMoney.Helpers.isDollarCoin2) -}
6031894ac40341270a0ae3c9011dcefe
  isDollarCoin10 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Duckling.AmountOfMoney.Helpers.isDollarCoin13
                   Duckling.AmountOfMoney.Helpers.isDollarCoin11) -}
33d7a6108bc57f9f9ea9f2e03ec3e810
  isDollarCoin11 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Duckling.AmountOfMoney.Helpers.isDollarCoin12
                   (GHC.Types.[] @ GHC.Types.Double)) -}
6b2c06c75a5925cc4b4deaaf40809bae
  isDollarCoin12 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.25##) -}
31d16bff300389e949d7670364dec92b
  isDollarCoin13 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.1##) -}
8a420698c5d93715636ebc790c146bd4
  isDollarCoin14 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 5.0e-2##) -}
28c611b62448ea3ea5683d425f47b7af
  isDollarCoin2 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.AUD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin3) -}
9461e9090bf9540f3fcda3c7535d2641
  isDollarCoin3 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.CAD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin4) -}
aa74bd4d3471113f1b4db934f331fc58
  isDollarCoin4 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.JMD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin5) -}
2c6a8292facc43b19fc547a3f34268be
  isDollarCoin5 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.NZD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin6) -}
5aaaae8ea50146e5e3158e2535809b43
  isDollarCoin6 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.SGD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin7) -}
5ba17b8e9a8b7710399ca17440924532
  isDollarCoin7 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.TTD
                   Duckling.AmountOfMoney.Helpers.isDollarCoin8) -}
aac8d2e539de1c653de289249c25c957
  isDollarCoin8 :: [Duckling.AmountOfMoney.Types.Currency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.AmountOfMoney.Types.Currency
                   Duckling.AmountOfMoney.Types.USD
                   (GHC.Types.[] @ Duckling.AmountOfMoney.Types.Currency)) -}
4db094ebb17a2397c13e7211b2baba3a
  isDollarCoin9 :: [GHC.Types.Double]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Double
                   Duckling.AmountOfMoney.Helpers.isDollarCoin14
                   Duckling.AmountOfMoney.Helpers.isDollarCoin10) -}
206dbaa136f17aece7ca3032f9e8b320
  isMoneyWithValue :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing
                        -> case ds5 of wild4 {
                             GHC.Base.Nothing
                             -> case ds6 of wild5 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just ipv -> GHC.Types.True }
                        GHC.Base.Just ipv -> GHC.Types.True } } } }) -}
0f7f4d83b900b67eff71d4da9ae1e941
  isSimpleAmountOfMoney :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds3 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds8
                        -> case ds5 of wild4 {
                             GHC.Base.Nothing
                             -> case ds6 of wild5 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just ipv -> GHC.Types.False } } } } }) -}
65db56c071ee596f56867141ba9b11ee
  isWithoutCents :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds3 ds4 ds5 ds6 ds7 ->
                      case ds4 of wild3 {
                        DEFAULT
                        -> case ds3 of wild4 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just v -> Duckling.Numeral.Types.isInteger v }
                        Duckling.AmountOfMoney.Types.Cent -> GHC.Types.False } } } }) -}
cd9c0d8631c7c43ebababba823b9a402
  mkLatent ::
    Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (fd :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case fd of wild { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds ds1 ds2 ds3 ds4 ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   ds
                   ds1
                   ds2
                   ds3
                   GHC.Types.True }) -}
a25d5826a2f8ac1f4570d56b74d72172
  valueOnly ::
    GHC.Types.Double -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Just @ GHC.Types.Double x)
                   Duckling.AmountOfMoney.Types.Unnamed
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   GHC.Types.False) -}
69a117bfad04acbd4ac28ad034aeb8f2
  withCents ::
    GHC.Types.Double
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U)><S(SLLLL),1*U(1*U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double)
                   (w1 :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case w1 of ww { Duckling.AmountOfMoney.Types.AmountOfMoneyData ww1 ww2 ww3 ww4 ww5 ->
                 case ww1 of wild {
                   GHC.Base.Nothing
                   -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
                        (GHC.Base.Just @ GHC.Types.Double w)
                        Duckling.AmountOfMoney.Types.Cent
                        (GHC.Base.Nothing @ GHC.Types.Double)
                        (GHC.Base.Nothing @ GHC.Types.Double)
                        GHC.Types.False
                   GHC.Base.Just value
                   -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
                        (GHC.Base.Just
                           @ GHC.Types.Double
                           (case value of wild1 { GHC.Types.D# x ->
                            case w of wild2 { GHC.Types.D# x1 ->
                            GHC.Types.D# (GHC.Prim.+## x (GHC.Prim./## x1 100.0##)) } }))
                        ww2
                        ww3
                        ww4
                        ww5 } }) -}
32a3e8a86a63fc24cd82a41c3b181185
  withInterval ::
    (GHC.Types.Double, GHC.Types.Double)
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,U)><S,1*U(A,U,A,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: (GHC.Types.Double, GHC.Types.Double))
                   (fd :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case ds of wild { (,) from to ->
                 case fd of wild1 { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds1 ds2 ds3 ds4 ds5 ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Nothing @ GHC.Types.Double)
                   ds2
                   (GHC.Base.Just @ GHC.Types.Double from)
                   (GHC.Base.Just @ GHC.Types.Double to)
                   ds5 } }) -}
f8f0dd5a7bdfc764440ce61a027f4993
  withMax ::
    GHC.Types.Double
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Double)
                   (fd :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case fd of wild { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds ds1 ds2 ds3 ds4 ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   ds
                   ds1
                   ds2
                   (GHC.Base.Just @ GHC.Types.Double x)
                   ds4 }) -}
d46379582453fb6b72658758e03d4abb
  withMin ::
    GHC.Types.Double
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U,A,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Double)
                   (fd :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case fd of wild { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds ds1 ds2 ds3 ds4 ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   ds
                   ds1
                   (GHC.Base.Just @ GHC.Types.Double x)
                   ds3
                   ds4 }) -}
02b3481995efecd4d0504cc157c492b2
  withValue ::
    GHC.Types.Double
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
    -> Duckling.AmountOfMoney.Types.AmountOfMoneyData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Double)
                   (fd :: Duckling.AmountOfMoney.Types.AmountOfMoneyData) ->
                 case fd of wild { Duckling.AmountOfMoney.Types.AmountOfMoneyData ds ds1 ds2 ds3 ds4 ->
                 Duckling.AmountOfMoney.Types.AmountOfMoneyData
                   (GHC.Base.Just @ GHC.Types.Double x)
                   ds1
                   ds2
                   ds3
                   ds4 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

