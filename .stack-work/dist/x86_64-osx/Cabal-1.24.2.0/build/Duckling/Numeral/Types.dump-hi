
==================== FINAL INTERFACE ====================
2019-03-14 03:00:14.254569 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types [family instance module] 8002
  interface hash: 21edeefb6242b7f5d899a29cf36a2db3
  ABI hash: 5130bfd045a9ca6085fec0a42ae9c523
  export-list hash: 94344b1dfc906561c4234f30cd403539
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f2cdcd0279cb2d08f0ce9204ca9ccb21
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Numeral.Types.getIntValue
  Duckling.Numeral.Types.isInteger
  Duckling.Numeral.Types.isIntegerBetween
  Duckling.Numeral.Types.NumeralData{Duckling.Numeral.Types.NumeralData grain multipliable okForAnyTime value}
  Duckling.Numeral.Types.NumeralValue{Duckling.Numeral.Types.NumeralValue vValue}
module dependencies: Duckling.Locale Duckling.Region
                     Duckling.Resolve
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
b39812d3c41d2bedc97a27275db5112e
  $fEqNumeralData ::
    GHC.Classes.Eq Duckling.Numeral.Types.NumeralData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fEqNumeralData_$c==
                  Duckling.Numeral.Types.$fEqNumeralData_$c/= -}
b39812d3c41d2bedc97a27275db5112e
  $fEqNumeralData_$c/= ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Numeral.Types.NumeralData)
                   (b :: Duckling.Numeral.Types.NumeralData) ->
                 case Duckling.Numeral.Types.$fEqNumeralData_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b39812d3c41d2bedc97a27275db5112e
  $fEqNumeralData_$c== ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$c==
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fEqNumeralValue ::
    GHC.Classes.Eq Duckling.Numeral.Types.NumeralValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralValue
                  Duckling.Numeral.Types.$fEqNumeralValue_$c==
                  Duckling.Numeral.Types.$fEqNumeralValue_$c/= -}
da8c1ed79426dc4dcf85afddd4a92441
  $fEqNumeralValue_$c/= ::
    Duckling.Numeral.Types.NumeralValue
    -> Duckling.Numeral.Types.NumeralValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEqDouble_$c/=
                  `cast`
                (Sym (Duckling.Numeral.Types.N:NumeralValue[0])
                 ->_R Sym (Duckling.Numeral.Types.N:NumeralValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fEqNumeralValue_$c== ::
    Duckling.Numeral.Types.NumeralValue
    -> Duckling.Numeral.Types.NumeralValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.eqDouble
                  `cast`
                (Sym (Duckling.Numeral.Types.N:NumeralValue[0])
                 ->_R Sym (Duckling.Numeral.Types.N:NumeralValue[0])
                 ->_R <GHC.Types.Bool>_R) -}
b39812d3c41d2bedc97a27275db5112e
  $fGenericNumeralData ::
    GHC.Generics.Generic Duckling.Numeral.Types.NumeralData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fGenericNumeralData_$cfrom
                  Duckling.Numeral.Types.$fGenericNumeralData_$cto -}
b39812d3c41d2bedc97a27275db5112e
  $fGenericNumeralData1 ::
    Duckling.Numeral.Types.NumeralData
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "value")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "grain")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "multipliable")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "okForAnyTime")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Numeral.Types.NumeralData) ->
                 case x1 of wild { Duckling.Numeral.Types.NumeralData g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "value")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "grain")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "multipliable")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "okForAnyTime")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "value")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "grain")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "value")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "grain")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "multipliable")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "okForAnyTime")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "multipliable")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R) <x>_N))
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "okForAnyTime")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "value")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "grain")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "multipliable")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "okForAnyTime")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    GHC.Types.Bool))>_R) <x>_N) }) -}
b39812d3c41d2bedc97a27275db5112e
  $fGenericNumeralData_$cfrom ::
    Duckling.Numeral.Types.NumeralData
    -> GHC.Generics.Rep Duckling.Numeral.Types.NumeralData x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Numeral.Types.$fGenericNumeralData1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Numeral.Types.NumeralData>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "NumeralData"
                                       "Duckling.Numeral.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "value")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "grain")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Int)))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "multipliable")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Bool)
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "okForAnyTime")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                GHC.Types.Bool)))>_R))
                          (Sub (Sym (Duckling.Numeral.Types.Rep_NumeralData[0]))) <x>_N) -}
b39812d3c41d2bedc97a27275db5112e
  $fGenericNumeralData_$cto ::
    GHC.Generics.Rep Duckling.Numeral.Types.NumeralData x
    -> Duckling.Numeral.Types.NumeralData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Numeral.Types.NumeralData x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Numeral.Types.Rep_NumeralData[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "NumeralData"
                                        "Duckling.Numeral.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "value")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "grain")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                (GHC.Base.Maybe GHC.Types.Int)))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "multipliable")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Types.Bool)
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "okForAnyTime")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Types.Bool)))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "value")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "grain")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe GHC.Types.Int)))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "multipliable")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R GHC.Types.Bool)
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "okForAnyTime")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              GHC.Types.Bool))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Duckling.Numeral.Types.NumeralData
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Double>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Double>_R <x>_P))
                   ds4
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "grain")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "multipliable")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "okForAnyTime")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P)) } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fHashableNumeralData ::
    Data.Hashable.Class.Hashable Duckling.Numeral.Types.NumeralData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fHashableNumeralData_$s$dmhashWithSalt
                  Duckling.Numeral.Types.$fHashableNumeralData_$chash -}
a5a16a316dee773a80b0f8ab2d86dc32
  $fHashableNumeralData1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "NumeralData"
            "Duckling.Numeral.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
            ((GHC.Generics.S1
                ('GHC.Generics.MetaSel
                   ('GHC.Base.Just "value")
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.Rec0 GHC.Types.Double)
              GHC.Generics.:*: GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "grain")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
             GHC.Generics.:*: (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "multipliable")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 GHC.Types.Bool)
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "okForAnyTime")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0 GHC.Types.Bool)))))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S,1*U(U)><S(S(S(S)S)S),1*U(1*U(1*U(U),1*U),1*U(1*U,1*U))>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Numeral.Types.$fHashableNumeralData2
                  `cast`
                (Trans
                     (forall (a1 :: <*>_N).
                      <Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1>_R
                      ->_R <GHC.Types.Int>_R
                      ->_R Trans
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.C>_P
                                         <'GHC.Generics.MetaCons
                                            "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                         <(GHC.Generics.S1
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "value")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.Rec0 GHC.Types.Double)
                                           GHC.Generics.:*: GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "grain")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec0
                                                                 (GHC.Base.Maybe GHC.Types.Int)))
                                          GHC.Generics.:*: (GHC.Generics.S1
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "multipliable")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.Rec0 GHC.Types.Bool)
                                                            GHC.Generics.:*: GHC.Generics.S1
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "okForAnyTime")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.Rec0
                                                                                  GHC.Types.Bool))>_R))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.D>_P
                                         <'GHC.Generics.MetaData
                                            "NumeralData"
                                            "Duckling.Numeral.Types"
                                            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                            'GHC.Types.False>_P
                                         <GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                            ((GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "value")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 GHC.Types.Double)
                                              GHC.Generics.:*: GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "grain")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.Rec0
                                                                    (GHC.Base.Maybe GHC.Types.Int)))
                                             GHC.Generics.:*: (GHC.Generics.S1
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "multipliable")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.Rec0 GHC.Types.Bool)
                                                               GHC.Generics.:*: GHC.Generics.S1
                                                                                  ('GHC.Generics.MetaSel
                                                                                     ('GHC.Base.Just
                                                                                        "okForAnyTime")
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy)
                                                                                  (GHC.Generics.Rec0
                                                                                     GHC.Types.Bool)))>_R)) <a1>_N
                      ->_R <GHC.Types.Int>_R)
                     (Sym (Data.Hashable.Class.N:GHashable[0]
                               <Data.Hashable.Class.Zero>_N
                               <GHC.Generics.M1
                                  GHC.Generics.D
                                  ('GHC.Generics.MetaData
                                     "NumeralData"
                                     "Duckling.Numeral.Types"
                                     "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                     'GHC.Types.False)
                                  (GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.S1
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "value")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.Rec0 GHC.Types.Double)
                                       GHC.Generics.:*: GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "grain")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0
                                                             (GHC.Base.Maybe GHC.Types.Int)))
                                      GHC.Generics.:*: (GHC.Generics.S1
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "multipliable")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.Rec0 GHC.Types.Bool)
                                                        GHC.Generics.:*: GHC.Generics.S1
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "okForAnyTime")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.Rec0
                                                                              GHC.Types.Bool))))>_N))) -}
09763884693e274d9010005278d153e1
  $fHashableNumeralData2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> (GHC.Generics.:*:)
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "value")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Types.Double)
          GHC.Generics.:*: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "grain")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
         (GHC.Generics.S1
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "multipliable")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.Rec0 GHC.Types.Bool)
          GHC.Generics.:*: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "okForAnyTime")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Bool))
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S,1*U(U)><S(S(S(S)S)S),1*U(1*U(1*U(U),1*U),1*U(1*U,1*U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Generics.:*:)
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "value")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 GHC.Types.Double)
                             GHC.Generics.:*: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "grain")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
                            (GHC.Generics.S1
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "multipliable")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.Rec0 GHC.Types.Bool)
                             GHC.Generics.:*: GHC.Generics.S1
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "okForAnyTime")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.Rec0 GHC.Types.Bool))
                            a1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { GHC.Generics.:*: ww3 ww4 ->
                 case ww3 of ww5 { GHC.Generics.:*: ww6 ww7 ->
                 case ww6
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "value")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.Rec0 GHC.Types.Double>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Types.Double>_R
                                <a1>_P)) of ww8 { GHC.Types.D# ww9 ->
                 case ww4 of ww10 { GHC.Generics.:*: ww11 ww12 ->
                 case Duckling.Numeral.Types.$w$dGHashable
                        @ a1
                        ww1
                        ww9
                        ww7
                        ww11
                        ww12 of ww13 { DEFAULT ->
                 GHC.Types.I# ww13 } } } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fHashableNumeralData_$chash ::
    Duckling.Numeral.Types.NumeralData -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Numeral.Types.NumeralData) ->
                 case x of wild { Duckling.Numeral.Types.NumeralData g1 g2 g3 g4 ->
                 case g1 of ww { GHC.Types.D# ww1 ->
                 case Duckling.Numeral.Types.$w$dGHashable
                        @ GHC.Prim.Any
                        -2578643520546668380#
                        ww1
                        g2
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe GHC.Types.Int>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "grain")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe GHC.Types.Int)>_R) <GHC.Prim.Any>_N))
                        g3
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P <GHC.Types.Bool>_R <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "multipliable")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R GHC.Types.Bool>_R) <GHC.Prim.Any>_N))
                        g4
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P <GHC.Types.Bool>_R <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "okForAnyTime")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          GHC.Types.Bool>_R) <GHC.Prim.Any>_N)) of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fHashableNumeralData_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(S(S)SLL),1*U(1*U(U),1*U,1*U,1*U)>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Numeral.Types.NumeralData) ->
                 Duckling.Numeral.Types.$fHashableNumeralData1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Numeral.Types.Rep_NumeralData[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Numeral.Types.$fGenericNumeralData_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
b39812d3c41d2bedc97a27275db5112e
  $fNFDataNumeralData ::
    Control.DeepSeq.NFData Duckling.Numeral.Types.NumeralData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Numeral.Types.$fNFDataNumeralData_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Numeral.Types.NumeralData>_N)) -}
586568b6dc5e212a21f5aca6230c319a
  $fNFDataNumeralData1 ::
    (GHC.Generics.:*:)
      (GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "value")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Double)
       GHC.Generics.:*: GHC.Generics.S1
                          ('GHC.Generics.MetaSel
                             ('GHC.Base.Just "grain")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
      (GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "multipliable")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Bool)
       GHC.Generics.:*: GHC.Generics.S1
                          ('GHC.Generics.MetaSel
                             ('GHC.Base.Just "okForAnyTime")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          (GHC.Generics.Rec0 GHC.Types.Bool))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SS)S(SS)),1*U(1*U(1*U,1*U),1*U(1*U,1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (w :: (GHC.Generics.:*:)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "value")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Types.Double)
                            GHC.Generics.:*: GHC.Generics.S1
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "grain")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "multipliable")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Types.Bool)
                            GHC.Generics.:*: GHC.Generics.S1
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "okForAnyTime")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.Rec0 GHC.Types.Bool))
                           a1) ->
                 case w of ww { GHC.Generics.:*: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Generics.:*: ww4 ww5 ->
                 case ww2 of ww6 { GHC.Generics.:*: ww7 ww8 ->
                 Duckling.Numeral.Types.$w$dGNFData @ a1 ww4 ww5 ww7 ww8 } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fNFDataNumeralData_$crnf ::
    Duckling.Numeral.Types.NumeralData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Duckling.Numeral.Types.NumeralData) ->
                 case eta of wild { Duckling.Numeral.Types.NumeralData g1 g2 g3 g4 ->
                 Duckling.Numeral.Types.$fNFDataNumeralData1
                   @ GHC.Prim.Any
                   (GHC.Generics.:*:
                      @ (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "value")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double)
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "grain")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                      @ (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "multipliable")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "okForAnyTime")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                      @ GHC.Prim.Any
                      (GHC.Generics.:*:
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "value")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Double))
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "grain")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                         @ GHC.Prim.Any
                         g1
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P <GHC.Types.Double>_R <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "value")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R GHC.Types.Double>_R) <GHC.Prim.Any>_N))
                         g2
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P
                                        <GHC.Base.Maybe GHC.Types.Int>_R
                                        <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "grain")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           (GHC.Base.Maybe GHC.Types.Int)>_R) <GHC.Prim.Any>_N)))
                      (GHC.Generics.:*:
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "multipliable")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                         @ (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "okForAnyTime")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                         @ GHC.Prim.Any
                         g3
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P <GHC.Types.Bool>_R <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "multipliable")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R GHC.Types.Bool>_R) <GHC.Prim.Any>_N))
                         g4
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P <GHC.Types.Bool>_R <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "okForAnyTime")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           GHC.Types.Bool>_R) <GHC.Prim.Any>_N)))) }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData ::
    GHC.Classes.Ord Duckling.Numeral.Types.NumeralData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fEqNumeralData
                  Duckling.Numeral.Types.$fOrdNumeralData_$ccompare
                  Duckling.Numeral.Types.$fOrdNumeralData_$c<
                  Duckling.Numeral.Types.$fOrdNumeralData_$c<=
                  Duckling.Numeral.Types.$fOrdNumeralData_$c>
                  Duckling.Numeral.Types.$fOrdNumeralData_$c>=
                  Duckling.Numeral.Types.$fOrdNumeralData_$cmax
                  Duckling.Numeral.Types.$fOrdNumeralData_$cmin -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$c< ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$c<
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$c<= ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$c<=
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$c> ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$c>
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$c>= ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$c>=
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$ccompare ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)><S(S(S)LLL),1*U(1*U(U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralData)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.D# ww6 ->
                 case w1 of ww7 { Duckling.Numeral.Types.NumeralData ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.D# ww13 ->
                 Duckling.Numeral.Types.$w$ccompare
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$cmax ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),U(U(U),U,U,U)><S(S(S)LLL),U(U(U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Numeral.Types.NumeralData)
                   (y :: Duckling.Numeral.Types.NumeralData) ->
                 case Duckling.Numeral.Types.$fOrdNumeralData_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
b39812d3c41d2bedc97a27275db5112e
  $fOrdNumeralData_$cmin ::
    Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData
    -> Duckling.Numeral.Types.NumeralData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),U(U(U),U,U,U)><S(S(S)LLL),U(U(U),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Numeral.Types.NumeralData)
                   (y :: Duckling.Numeral.Types.NumeralData) ->
                 case Duckling.Numeral.Types.$fOrdNumeralData_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
b39812d3c41d2bedc97a27275db5112e
  $fResolveNumeralData ::
    Duckling.Resolve.Resolve Duckling.Numeral.Types.NumeralData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fEqNumeralValue
                    `cast`
                  (GHC.Classes.Eq
                     (Sym (Duckling.Numeral.Types.D:R:ResolvedValueNumeralData[0])))_R
                  Duckling.Numeral.Types.$fShowNumeralValue
                    `cast`
                  (GHC.Show.Show
                     (Sym (Duckling.Numeral.Types.D:R:ResolvedValueNumeralData[0])))_R
                  Duckling.Numeral.Types.$fToJSONNumeralValue
                    `cast`
                  (Data.Aeson.Types.ToJSON.ToJSON
                     (Sym (Duckling.Numeral.Types.D:R:ResolvedValueNumeralData[0])))_R
                  Duckling.Numeral.Types.$fResolveNumeralData_$cresolve -}
b39812d3c41d2bedc97a27275db5112e
  $fResolveNumeralData_$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Numeral.Types.NumeralData
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue Duckling.Numeral.Types.NumeralData,
          GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S,1*U(U,A,A,A)>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Duckling.Resolve.Context)
                   (ds1 :: Duckling.Resolve.Options)
                   (ds2 :: Duckling.Numeral.Types.NumeralData) ->
                 case ds2 of wild { Duckling.Numeral.Types.NumeralData ds3 ds4 ds5 ds6 ->
                 (GHC.Base.Just
                    @ (Duckling.Numeral.Types.NumeralValue, GHC.Types.Bool)
                    (ds3 `cast` (Sym (Duckling.Numeral.Types.N:NumeralValue[0])),
                     GHC.Types.False))
                   `cast`
                 (GHC.Base.Maybe
                    ((,)
                       (Sub (Sym (Duckling.Numeral.Types.D:R:ResolvedValueNumeralData[0])))
                       <GHC.Types.Bool>_R)_R)_R }) -}
b39812d3c41d2bedc97a27275db5112e
  $fShowNumeralData ::
    GHC.Show.Show Duckling.Numeral.Types.NumeralData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralData
                  Duckling.Numeral.Types.$fShowNumeralData_$cshowsPrec
                  Duckling.Numeral.Types.$fShowNumeralData_$cshow
                  Duckling.Numeral.Types.$fShowNumeralData_$cshowList -}
b39812d3c41d2bedc97a27275db5112e
  $fShowNumeralData1 ::
    Duckling.Numeral.Types.NumeralData -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { Duckling.Numeral.Types.NumeralData ww1 ww2 ww3 ww4 ->
                 Duckling.Numeral.Types.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 }) -}
c43bcb594aa55a8418da20f8f3f97fd9
  $fShowNumeralData2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "okForAnyTime = "#) -}
bb3edf1db00b734c96997b75b62a9272
  $fShowNumeralData3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "multipliable = "#) -}
b3602d0491e60a06884194f7b016982d
  $fShowNumeralData4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "grain = "#) -}
ff7db96f8a789c1b2f58e14e01c394f0
  $fShowNumeralData5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
ec34080ea5b809d42189a77531373ff7
  $fShowNumeralData6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "value = "#) -}
4f7c81253400d433cc88dbdc97a9f450
  $fShowNumeralData7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumeralData {"#) -}
b39812d3c41d2bedc97a27275db5112e
  $fShowNumeralData_$cshow ::
    Duckling.Numeral.Types.NumeralData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Numeral.Types.NumeralData) ->
                 Duckling.Numeral.Types.$fShowNumeralData_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b39812d3c41d2bedc97a27275db5112e
  $fShowNumeralData_$cshowList ::
    [Duckling.Numeral.Types.NumeralData] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Numeral.Types.NumeralData
                   Duckling.Numeral.Types.$fShowNumeralData1) -}
b39812d3c41d2bedc97a27275db5112e
  $fShowNumeralData_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Numeral.Types.NumeralData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Numeral.Types.NumeralData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Numeral.Types.NumeralData ww3 ww4 ww5 ww6 ->
                 Duckling.Numeral.Types.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 } }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fShowNumeralValue ::
    GHC.Show.Show Duckling.Numeral.Types.NumeralValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralValue
                  Duckling.Numeral.Types.$fShowNumeralValue_$cshowsPrec
                  Duckling.Numeral.Types.$fShowNumeralValue_$cshow
                  Duckling.Numeral.Types.$fShowNumeralValue_$cshowList -}
da8c1ed79426dc4dcf85afddd4a92441
  $fShowNumeralValue1 ::
    Duckling.Numeral.Types.NumeralValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Numeral.Types.NumeralValue) ->
                 Duckling.Numeral.Types.$w$cshowsPrec 0# w) -}
d0783d47e3ca213ebd9a0b3a725d7819
  $fShowNumeralValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
1223be2df841613b50ef87483392797d
  $fShowNumeralValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vValue = "#) -}
a62c465a5d1cde56ef609fe238c82d80
  $fShowNumeralValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NumeralValue {"#) -}
60284ee45d0bdc86909b4f2a038bf58c
  $fShowNumeralValue5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
06bde8d42f1a18b30edcf522c5a96227
  $fShowNumeralValue6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Numeral.Types.$fShowNumeralValue2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fShowNumeralValue_$cshow ::
    Duckling.Numeral.Types.NumeralValue -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: Duckling.Numeral.Types.NumeralValue) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Numeral.Types.$fShowNumeralValue4
                   (GHC.Base.++
                      @ GHC.Types.Char
                      Duckling.Numeral.Types.$fShowNumeralValue3
                      (case x `cast`
                            (Duckling.Numeral.Types.N:NumeralValue[0]) of ww { GHC.Types.D# ww1 ->
                       GHC.Float.$w$sshowSignedFloat
                         GHC.Float.$fShowDouble_$sshowFloat
                         Duckling.Numeral.Types.$fShowNumeralValue5
                         ww1
                         Duckling.Numeral.Types.$fShowNumeralValue6 }))) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fShowNumeralValue_$cshowList ::
    [Duckling.Numeral.Types.NumeralValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Numeral.Types.NumeralValue
                   Duckling.Numeral.Types.$fShowNumeralValue1) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fShowNumeralValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Numeral.Types.NumeralValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Numeral.Types.NumeralValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Numeral.Types.$w$cshowsPrec ww1 w1 }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fToJSONNumeralValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Numeral.Types.NumeralValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Numeral.Types.NumeralValue
                  Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSON
                  Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoEncoding
                  Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSONList
                  Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoEncodingList -}
b8734a78af832875960b38d853a09997
  $fToJSONNumeralValue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
d2c3469d597ba2f45fd409955d239c3c
  $fToJSONNumeralValue2 :: Data.Aeson.Types.Internal.Pair
  {- Strictness: m,
     Unfolding: ((Duckling.Numeral.Types.$fToJSONNumeralValue4,
                  Duckling.Numeral.Types.$fToJSONNumeralValue3)) -}
21f2766af703f0577904522e6dbbb77d
  $fToJSONNumeralValue3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
511d6165feee36fef1b5cd049a759cc9
  $fToJSONNumeralValue4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "type"#) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fToJSONNumeralValue_$ctoEncoding ::
    Duckling.Numeral.Types.NumeralValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Numeral.Types.NumeralValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSON eta)) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fToJSONNumeralValue_$ctoEncodingList ::
    [Duckling.Numeral.Types.NumeralValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Numeral.Types.NumeralValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Numeral.Types.NumeralValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Numeral.Types.NumeralValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSON v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Numeral.Types.NumeralValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fToJSONNumeralValue_$ctoJSON ::
    Duckling.Numeral.Types.NumeralValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Numeral.Types.NumeralValue) ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           Duckling.Numeral.Types.$fToJSONNumeralValue2
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Numeral.Types.$fToJSONNumeralValue1,
                               Data.Aeson.Types.ToJSON.$fToJSONDouble_$srealFloatToJSON
                                 w `cast` (Duckling.Numeral.Types.N:NumeralValue[0]))
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $fToJSONNumeralValue_$ctoJSONList ::
    [Duckling.Numeral.Types.NumeralValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Numeral.Types.NumeralValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Numeral.Types.NumeralValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Numeral.Types.NumeralValue
                                       c
                                       Duckling.Numeral.Types.$fToJSONNumeralValue_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
3e97639806fda392d400dc30f207d49b
  $tc'NumeralData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4617247660105960243##
                   4797183000571055980##
                   Duckling.Numeral.Types.$trModule
                   Duckling.Numeral.Types.$tc'NumeralData1) -}
527538b7ddabbdcf2253d1a0ef8f93a7
  $tc'NumeralData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NumeralData"#) -}
c58159366422655ae2256d213d4257cb
  $tc'NumeralValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3531195333869452409##
                   11657252270084323807##
                   Duckling.Numeral.Types.$trModule
                   Duckling.Numeral.Types.$tc'NumeralValue1) -}
1688d70dfce96b23f5d516213c0b2a0f
  $tc'NumeralValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NumeralValue"#) -}
3e6ac7d6fa2828c1b42e1c91b0edc776
  $tcNumeralData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8055919976181607514##
                   17165961970644734910##
                   Duckling.Numeral.Types.$trModule
                   Duckling.Numeral.Types.$tcNumeralData1) -}
b17184a256ae958c19450e4ab6a9e1bc
  $tcNumeralData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NumeralData"#) -}
6d705c5a4bc557a64d3a23802ca857ec
  $tcNumeralValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11312682838333571780##
                   7413301794180581185##
                   Duckling.Numeral.Types.$trModule
                   Duckling.Numeral.Types.$tcNumeralValue1) -}
9aa8bbb4bdb74c58ff1218ad7743c901
  $tcNumeralValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NumeralValue"#) -}
d1a546e8e74b4155b0396c607ad91aac
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Numeral.Types.$trModule2
                   Duckling.Numeral.Types.$trModule1) -}
fa77e42c79769109618169916eeb1a99
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Numeral.Types"#) -}
a05251b33abe8559996c06c563c3cf74
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
44ea28a1b60e6a959685db7d07798974
  $w$c< ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild {
                                 GHC.Types.False
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Classes.$fOrdBool_$c< ww3 ww7
                                      GHC.Types.True -> GHC.Types.True }
                                 GHC.Types.True
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> GHC.Classes.$fOrdBool_$c< ww3 ww7 } }
                           } in
                           case ww1 of wild {
                             GHC.Base.Nothing
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> $j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a2
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { GHC.Types.I# x# ->
                                     case b1 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> $j GHC.Prim.void# }
                                       GHC.Types.True -> GHC.Types.True } } } } } }
                   GHC.Types.True -> GHC.Types.True }) -}
479c5bc3c4b1429dc8ecc8eae14800a9
  $w$c<= ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild {
                                 GHC.Types.False
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Classes.$fOrdBool_$c<= ww3 ww7
                                      GHC.Types.True -> GHC.Types.True }
                                 GHC.Types.True
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True -> GHC.Classes.$fOrdBool_$c<= ww3 ww7 } }
                           } in
                           case ww1 of wild {
                             GHC.Base.Nothing
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> $j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a2
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { GHC.Types.I# x# ->
                                     case b1 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> $j GHC.Prim.void# }
                                       GHC.Types.True -> GHC.Types.True } } } } } }
                   GHC.Types.True -> GHC.Types.True }) -}
388030d579fdde9f2d119c8b5274e88a
  $w$c== ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww ww4) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Prim.Void# -> GHC.Types.Bool
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w :: GHC.Prim.Void#)[OneShot] ->
                          case ww2 of wild1 {
                            GHC.Types.False
                            -> case ww6 of wild2 {
                                 GHC.Types.False -> GHC.Classes.$fEqBool_$c== ww3 ww7
                                 GHC.Types.True -> GHC.Types.False }
                            GHC.Types.True
                            -> case ww6 of wild2 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True -> GHC.Classes.$fEqBool_$c== ww3 ww7 } }
                      } in
                      case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww5 of wild2 {
                             GHC.Base.Nothing -> $j GHC.Prim.void#
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww5 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1
                             -> case a1 of wild3 { GHC.Types.I# x ->
                                case b1 of wild4 { GHC.Types.I# y ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x y) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j GHC.Prim.void# } } } } } }) -}
cc2ba4a790c1ffeee3871b04a102df66
  $w$c> ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild {
                                 GHC.Types.False
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Classes.$fOrdBool_$c> ww3 ww7
                                      GHC.Types.True -> GHC.Types.False }
                                 GHC.Types.True
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Classes.$fOrdBool_$c> ww3 ww7 } }
                           } in
                           case ww1 of wild {
                             GHC.Base.Nothing
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> $j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a2
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { GHC.Types.I# x# ->
                                     case b1 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True -> $j GHC.Prim.void# }
                                       GHC.Types.True -> GHC.Types.False } } } } } }
                   GHC.Types.True -> GHC.Types.False }) -}
99a2a58e1f16193286d0f43555ff72be
  $w$c>= ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild {
                                 GHC.Types.False
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Classes.$fOrdBool_$c>= ww3 ww7
                                      GHC.Types.True -> GHC.Types.False }
                                 GHC.Types.True
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Types.True
                                      GHC.Types.True -> GHC.Classes.$fOrdBool_$c>= ww3 ww7 } }
                           } in
                           case ww1 of wild {
                             GHC.Base.Nothing
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> $j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a2
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { GHC.Types.I# x# ->
                                     case b1 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True -> $j GHC.Prim.void# }
                                       GHC.Types.True -> GHC.Types.False } } } } } }
                   GHC.Types.True -> GHC.Types.False }) -}
a5863a56db6577f99f3b662ac0a76ba0
  $w$ccompare ::
    GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Prim.Double#
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Double#)
                   (ww5 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> let {
                             $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww2 of wild {
                                 GHC.Types.False
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Classes.$fOrdBool_$ccompare ww3 ww7
                                      GHC.Types.True -> GHC.Types.LT }
                                 GHC.Types.True
                                 -> case ww6 of wild1 {
                                      GHC.Types.False -> GHC.Types.GT
                                      GHC.Types.True -> GHC.Classes.$fOrdBool_$ccompare ww3 ww7 } }
                           } in
                           case ww1 of wild {
                             GHC.Base.Nothing
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> $j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a2
                             -> case ww5 of wild1 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b1
                                  -> case a2 of wild4 { GHC.Types.I# x# ->
                                     case b1 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True -> $j GHC.Prim.void# }
                                       GHC.Types.True -> GHC.Types.LT } } } } } }
                   GHC.Types.True -> GHC.Types.LT }) -}
da8c1ed79426dc4dcf85afddd4a92441
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Duckling.Numeral.Types.NumeralValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Numeral.Types.NumeralValue) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case w `cast`
                          (Duckling.Numeral.Types.N:NumeralValue[0]) of ww1 { GHC.Types.D# ww2 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Numeral.Types.$fShowNumeralValue5
                       ww2 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Numeral.Types.$fShowNumeralValue4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Numeral.Types.$fShowNumeralValue3
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Numeral.Types.$fShowNumeralValue2
                                x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
2f3506a2670f1e6b8fd9bc1d9b9248ff
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Double
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Double)
                   (ww2 :: GHC.Base.Maybe GHC.Types.Int)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { GHC.Types.D# ww6 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Numeral.Types.$fShowNumeralValue5
                       ww6 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       Duckling.Numeral.Types.$fShowNumeralValue5
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Numeral.Types.$fShowNumeralData7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Numeral.Types.$fShowNumeralData6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Numeral.Types.$fShowNumeralData5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Numeral.Types.$fShowNumeralData4
                                   (f1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Numeral.Types.$fShowNumeralData5
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Numeral.Types.$fShowNumeralData3
                                            (let {
                                               eta :: GHC.Base.String
                                               = GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Duckling.Numeral.Types.$fShowNumeralData5
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Duckling.Numeral.Types.$fShowNumeralData2
                                                      (case ww4 of wild {
                                                         GHC.Types.False
                                                         -> GHC.Base.++
                                                              @ GHC.Types.Char
                                                              GHC.Show.shows18
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Duckling.Numeral.Types.$fShowNumeralValue2
                                                                 x)
                                                         GHC.Types.True
                                                         -> GHC.Base.++
                                                              @ GHC.Types.Char
                                                              GHC.Show.shows17
                                                              (GHC.Base.++
                                                                 @ GHC.Types.Char
                                                                 Duckling.Numeral.Types.$fShowNumeralValue2
                                                                 x) }))
                                             } in
                                             case ww3 of wild {
                                               GHC.Types.False
                                               -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 eta
                                               GHC.Types.True
                                               -> GHC.Base.++
                                                    @ GHC.Types.Char
                                                    GHC.Show.shows17
                                                    eta }))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
af7c93e878a44e2bb915316878ba4133
  $w$dGHashable ::
    GHC.Prim.Int#
    -> GHC.Prim.Double#
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "grain")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "multipliable")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Bool)
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "okForAnyTime")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Bool)
         a1
    -> GHC.Prim.Int#
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U><S,U><S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "grain")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                             a1)
                   (ww3 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "multipliable")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Bool)
                             a1)
                   (ww4 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "okForAnyTime")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Bool)
                             a1) ->
                 case ww2
                        `cast`
                      (Trans
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.S>_P
                                <'GHC.Generics.MetaSel
                                   ('GHC.Base.Just "grain")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy>_P
                                <GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <a1>_N)
                           (GHC.Generics.N:K1[0]
                                <GHC.Generics.R>_P
                                <GHC.Base.Maybe GHC.Types.Int>_R
                                <a1>_P)) of wild {
                   GHC.Base.Nothing
                   -> case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Word.Word64
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newAlignedPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     8#
                                     eta of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     ipv of ds3 { (#,#) ipv2 ipv3 ->
                              let {
                                ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                              } in
                              case GHC.Prim.writeDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     ww1
                                     ipv2 of s2 { DEFAULT ->
                              case GHC.Prim.readWord64OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     s2 of ds1 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepUnlifted
                                     @ GHC.Prim.ByteArray#
                                     ipv3
                                     ipv4 of s4 { DEFAULT ->
                              (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 { GHC.Word.W64# x# ->
                      case ww3
                             `cast`
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "multipliable")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                (GHC.Generics.N:K1[0]
                                     <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild2 {
                        GHC.Types.False
                        -> case ww4
                                  `cast`
                                (Trans
                                     (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "okForAnyTime")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                     (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild3 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.*#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*# ww 16777619#)
                                           (GHC.Prim.word2Int# x#))
                                        16777619#)
                                     16777619#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.*#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*# ww 16777619#)
                                              (GHC.Prim.word2Int# x#))
                                           16777619#)
                                        16777619#)
                                     16777619#)
                                  1# }
                        GHC.Types.True
                        -> case ww4
                                  `cast`
                                (Trans
                                     (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "okForAnyTime")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                     (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild3 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*# ww 16777619#)
                                              (GHC.Prim.word2Int# x#))
                                           16777619#)
                                        16777619#)
                                     1#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*# ww 16777619#)
                                                 (GHC.Prim.word2Int# x#))
                                              16777619#)
                                           16777619#)
                                        1#)
                                     16777619#)
                                  1# } } } }
                   GHC.Base.Just a2
                   -> case GHC.Magic.runRW#
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Word.Word64
                             (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newAlignedPinnedByteArray#
                                     @ GHC.Prim.RealWorld
                                     8#
                                     8#
                                     eta of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ GHC.Prim.RealWorld
                                     ipv1
                                     ipv of ds3 { (#,#) ipv2 ipv3 ->
                              let {
                                ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                              } in
                              case GHC.Prim.writeDoubleOffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     ww1
                                     ipv2 of s2 { DEFAULT ->
                              case GHC.Prim.readWord64OffAddr#
                                     @ GHC.Prim.RealWorld
                                     ptr
                                     0#
                                     s2 of ds1 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.touch#
                                     @ 'GHC.Types.PtrRepUnlifted
                                     @ GHC.Prim.ByteArray#
                                     ipv3
                                     ipv4 of s4 { DEFAULT ->
                              (# s4, GHC.Word.W64# ipv5 #) } } } } }) of ds1 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 { GHC.Word.W64# x# ->
                      case a2 of wild2 { GHC.Types.I# y# ->
                      case ww3
                             `cast`
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "multipliable")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                (GHC.Generics.N:K1[0]
                                     <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild3 {
                        GHC.Types.False
                        -> case ww4
                                  `cast`
                                (Trans
                                     (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "okForAnyTime")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                     (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild4 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.xorI#
                                                    (GHC.Prim.*# ww 16777619#)
                                                    (GHC.Prim.word2Int# x#))
                                                 16777619#)
                                              6148914691236517205#)
                                           16777619#)
                                        y#)
                                     16777619#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.xorI#
                                                       (GHC.Prim.*# ww 16777619#)
                                                       (GHC.Prim.word2Int# x#))
                                                    16777619#)
                                                 6148914691236517205#)
                                              16777619#)
                                           y#)
                                        16777619#)
                                     16777619#)
                                  1# }
                        GHC.Types.True
                        -> case ww4
                                  `cast`
                                (Trans
                                     (GHC.Generics.N:M1[0]
                                          <GHC.Generics.S>_P
                                          <'GHC.Generics.MetaSel
                                             ('GHC.Base.Just "okForAnyTime")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy>_P
                                          <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <a1>_N)
                                     (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Bool>_R <a1>_P)) of wild4 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI#
                                                 (GHC.Prim.*#
                                                    (GHC.Prim.xorI#
                                                       (GHC.Prim.*# ww 16777619#)
                                                       (GHC.Prim.word2Int# x#))
                                                    16777619#)
                                                 6148914691236517205#)
                                              16777619#)
                                           y#)
                                        16777619#)
                                     1#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.xorI#
                                                    (GHC.Prim.*#
                                                       (GHC.Prim.xorI#
                                                          (GHC.Prim.*# ww 16777619#)
                                                          (GHC.Prim.word2Int# x#))
                                                       16777619#)
                                                    6148914691236517205#)
                                                 16777619#)
                                              y#)
                                           16777619#)
                                        1#)
                                     16777619#)
                                  1# } } } } } }) -}
9275e11a4f56eb9867ea48be5a198baf
  $w$dGNFData ::
    GHC.Generics.S1
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "value")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
      (GHC.Generics.Rec0 GHC.Types.Double)
      a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "grain")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "multipliable")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Bool)
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "okForAnyTime")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Types.Bool)
         a1
    -> ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a1
                   (ww :: GHC.Generics.S1
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "value")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Types.Double)
                            a1)
                   (ww1 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "grain")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                             a1)
                   (ww2 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "multipliable")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Bool)
                             a1)
                   (ww3 :: GHC.Generics.S1
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "okForAnyTime")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.Rec0 GHC.Types.Bool)
                             a1) ->
                 case ww of tpl { DEFAULT ->
                 case case ww1
                             `cast`
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.S>_P
                                     <'GHC.Generics.MetaSel
                                        ('GHC.Base.Just "grain")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy>_P
                                     <GHC.Generics.K1
                                        GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <a1>_N)
                                (GHC.Generics.N:K1[0]
                                     <GHC.Generics.R>_P
                                     <GHC.Base.Maybe GHC.Types.Int>_R
                                     <a1>_P)) of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> Control.DeepSeq.$fNFDataInt_$crnf x } of wild1 { () ->
                 case ww2 of tpl1 { DEFAULT ->
                 case ww3 of tpl2 { DEFAULT -> GHC.Tuple.() } } } }) -}
1880a57ccab22881eebb236356d1e76e
  $wgetIntValue :: GHC.Prim.Double# -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> let {
                        n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==##
                                (GHC.Prim.-## ww (GHC.Prim.int2Double# n))
                                0.0##) of wild {
                        GHC.Types.False -> GHC.Base.Nothing @ GHC.Types.Int
                        GHC.Types.True -> GHC.Base.Just @ GHC.Types.Int (GHC.Types.I# n) }
                   GHC.Types.True -> Duckling.Numeral.Types.getIntValue1 }) -}
2a70231950c71296990f8fc32392d1c6
  $wisIntegerBetween ::
    GHC.Prim.Double#
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## ww 0.0##) of wild1 {
                   GHC.Types.False
                   -> let {
                        n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==##
                                (GHC.Prim.-## ww (GHC.Prim.int2Double# n))
                                0.0##) of wild {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case w of wild2 { GHC.Types.I# x ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x n) of wild3 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case w1 of wild4 { GHC.Types.I# y ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# n y) } } } }
                   GHC.Types.True
                   -> case w of wild { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x 0#) of wild2 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case w1 of wild3 { GHC.Types.I# y ->
                           GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 0# y) } } } }) -}
b39812d3c41d2bedc97a27275db5112e
  axiom D:R:ResolvedValueNumeralData::
      Duckling.Resolve.ResolvedValue Duckling.Numeral.Types.NumeralData
        = Duckling.Numeral.Types.NumeralValue
b39812d3c41d2bedc97a27275db5112e
  data NumeralData
    = NumeralData {value :: GHC.Types.Double,
                   grain :: GHC.Base.Maybe GHC.Types.Int,
                   multipliable :: GHC.Types.Bool,
                   okForAnyTime :: GHC.Types.Bool}
da8c1ed79426dc4dcf85afddd4a92441
  newtype NumeralValue = NumeralValue {vValue :: GHC.Types.Double}
b39812d3c41d2bedc97a27275db5112e
  axiom Rep_NumeralData::
      GHC.Generics.Rep Duckling.Numeral.Types.NumeralData
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "NumeralData"
               "Duckling.Numeral.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "NumeralData" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "value")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 GHC.Types.Double)
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "grain")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int)))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "multipliable")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Types.Bool)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "okForAnyTime")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Types.Bool))))
add6a5820b8bb58aa51daac6fca5489c
  getIntValue :: GHC.Types.Double -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 Duckling.Numeral.Types.$wgetIntValue ww1 }) -}
386f713814c3caf2569e5b91d7ff837f
  getIntValue1 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
169ac49b5363af2eee07f6471365a9ff
  grain ::
    Duckling.Numeral.Types.NumeralData -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Numeral.Types.NumeralData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Numeral.Types.NumeralData) ->
                 case ds of wild { Duckling.Numeral.Types.NumeralData ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
777ea6abfcf1522cde707ce9783c3c93
  isInteger :: GHC.Types.Double -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==## x1 0.0##) of wild1 {
                   GHC.Types.False
                   -> GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==##
                           (GHC.Prim.-## x1 (GHC.Prim.int2Double# (GHC.Prim.double2Int# x1)))
                           0.0##)
                   GHC.Types.True -> GHC.Types.True } }) -}
f32fdc07e902258b5a209c9e76ca7b4d
  isIntegerBetween ::
    GHC.Types.Double
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Double)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 Duckling.Numeral.Types.$wisIntegerBetween ww1 w1 w2 }) -}
68a214f307fd8b918caeba3e69f8e858
  multipliable ::
    Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  RecSel Left Duckling.Numeral.Types.NumeralData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Numeral.Types.NumeralData) ->
                 case ds of wild { Duckling.Numeral.Types.NumeralData ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
a8d76294ecfce8fcefc709ae62ceccfc
  okForAnyTime ::
    Duckling.Numeral.Types.NumeralData -> GHC.Types.Bool
  RecSel Left Duckling.Numeral.Types.NumeralData
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Numeral.Types.NumeralData) ->
                 case ds of wild { Duckling.Numeral.Types.NumeralData ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
b4caedffa4a1e828795db4a7deeb4de4
  vValue :: Duckling.Numeral.Types.NumeralValue -> GHC.Types.Double
  RecSel Left Duckling.Numeral.Types.NumeralValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Numeral.Types.vValue1
                  `cast`
                (<Duckling.Numeral.Types.NumeralValue>_R
                 ->_R Duckling.Numeral.Types.N:NumeralValue[0]) -}
ea160f816685aa7a6af33272d96d1b5d
  vValue1 ::
    Duckling.Numeral.Types.NumeralValue
    -> Duckling.Numeral.Types.NumeralValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Duckling.Numeral.Types.NumeralValue) -> ds) -}
8ada7f17e1d24c76a72ee8a3669186b6
  value :: Duckling.Numeral.Types.NumeralData -> GHC.Types.Double
  RecSel Left Duckling.Numeral.Types.NumeralData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Numeral.Types.NumeralData) ->
                 case ds of wild { Duckling.Numeral.Types.NumeralData ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fEqNumeralData
instance GHC.Classes.Eq [Duckling.Numeral.Types.NumeralValue]
  = Duckling.Numeral.Types.$fEqNumeralValue
instance GHC.Generics.Generic [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fGenericNumeralData
instance Data.Hashable.Class.Hashable [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fHashableNumeralData
instance Control.DeepSeq.NFData [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fNFDataNumeralData
instance GHC.Classes.Ord [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fOrdNumeralData
instance Duckling.Resolve.Resolve [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fResolveNumeralData
instance GHC.Show.Show [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.$fShowNumeralData
instance GHC.Show.Show [Duckling.Numeral.Types.NumeralValue]
  = Duckling.Numeral.Types.$fShowNumeralValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Numeral.Types.NumeralValue]
  = Duckling.Numeral.Types.$fToJSONNumeralValue
family instance GHC.Generics.Rep [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.Rep_NumeralData
family instance Duckling.Resolve.ResolvedValue [Duckling.Numeral.Types.NumeralData]
  = Duckling.Numeral.Types.D:R:ResolvedValueNumeralData
"SPEC/Duckling.Numeral.Types $dmhashWithSalt @ NumeralData" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                              Data.Hashable.Class.Zero
                                                                                              (GHC.Generics.Rep
                                                                                                 Duckling.Numeral.Types.NumeralData))
                                                                            ($dGeneric :: GHC.Generics.Generic
                                                                                            Duckling.Numeral.Types.NumeralData)
                                                                            ($dHashable :: Data.Hashable.Class.Hashable
                                                                                             Duckling.Numeral.Types.NumeralData)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Numeral.Types.NumeralData
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Numeral.Types.$fHashableNumeralData_$s$dmhashWithSalt
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

