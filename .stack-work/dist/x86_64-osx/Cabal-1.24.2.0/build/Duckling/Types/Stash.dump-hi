
==================== FINAL INTERFACE ====================
2019-03-14 03:01:03.356557 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types.Stash 8002
  interface hash: 79284ce4c76ae25e7b38d1bf2061823f
  ABI hash: 4074efc4cf5b051eb4fcc22874c26c75
  export-list hash: c608dbd43f10cbc228c6058ba7eab93f
  orphan hash: 15f5a2a059c10c2a3e9f4c3d0d124d8b
  flag hash: 02956aec96b6afb36faed2037b560189
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Types.Stash.empty
  Duckling.Types.Stash.filter
  Duckling.Types.Stash.fromList
  Duckling.Types.Stash.null
  Duckling.Types.Stash.sizeEqual
  Duckling.Types.Stash.toPosOrderedList
  Duckling.Types.Stash.toPosOrderedListFrom
  Duckling.Types.Stash.union
  Duckling.Types.Stash.Stash{Duckling.Types.Stash.Stash getSet}
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Distance.Types
                     Duckling.Duration.Types Duckling.Email.Types Duckling.Gender.Types
                     Duckling.Identity.Types Duckling.Locale Duckling.Numeral.Types
                     Duckling.Ordinal.Types Duckling.PhoneNumber.Types
                     Duckling.Quantity.Types Duckling.Regex.Types Duckling.Region
                     Duckling.Resolve Duckling.Temperature.Types Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base 2cd809d842a74155915d6b4a126ab16a
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Strict fb0acb14cfb7e3f0be4595bc1915f766
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  Node c9b5fde9703703766d610ad69c56db9f
  Node 77cecf73b2bd5e7e34b8b255a24c785b
  Range a03203b0c9c6b09d6307db98f5128d10
  nodeRange f0856018dc2c5a8fc212c0f5df1fdc69
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet 5f58e144114dc7a5de72a4ecdcadde39
12a3380d9ccfd9391bb1e6975fe92b53
  $s$wupdateOrConcatWithKey ::
    (Duckling.Types.Node -> v -> v -> v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><S,U><S,U>, Inline: [0] -}
d384ba85eb090a2fae6c1ae1986f3b12
  $sunion1 ::
    Data.HashSet.HashSet Duckling.Types.Node
    -> Data.HashSet.HashSet Duckling.Types.Node
    -> Data.HashSet.HashSet Duckling.Types.Node
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (s1 :: Data.HashSet.HashSet Duckling.Types.Node)
                   (s2 :: Data.HashSet.HashSet Duckling.Types.Node) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.HashMap.Base.HashMap Duckling.Types.Node ())
                   @ (Data.HashSet.HashSet Duckling.Types.Node)
                   (\ (tpl :: Data.HashMap.Base.HashMap Duckling.Types.Node ()) ->
                    tpl)
                     `cast`
                   (<Data.HashMap.Base.HashMap Duckling.Types.Node ()>_R
                    ->_R Sym (Data.HashSet.N:HashSet[0] <Duckling.Types.Node>_N))
                   (Data.HashMap.Base.union
                      @ Duckling.Types.Node
                      @ ()
                      Duckling.Types.$fEqNode
                      Duckling.Types.$fHashableNode
                      (Data.HashSet.asMap @ Duckling.Types.Node s1)
                      (Data.HashSet.asMap @ Duckling.Types.Node s2))) -}
5b80f360639c95a16edc919092686124
  $tc'Stash :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7314464709305144809##
                   8589711937352394927##
                   Duckling.Types.Stash.$trModule
                   Duckling.Types.Stash.$tc'Stash1) -}
014a90fa00e1ea110b229e3110008d0a
  $tc'Stash1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stash"#) -}
2162d27b0830ea24ab7dc2392a67efd9
  $tcStash :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5018031871299651913##
                   13103971381287057222##
                   Duckling.Types.Stash.$trModule
                   Duckling.Types.Stash.$tcStash1) -}
419963a27b4c00e95ecf53358ae0c67f
  $tcStash1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Stash"#) -}
23766a0f047aa14b68fb6ecca0373f34
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Types.Stash.$trModule2
                   Duckling.Types.Stash.$trModule1) -}
b05bb026b349c076ad11453f3e21fa1f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Types.Stash"#) -}
92f7f56b5d25f0b205443ade9323867d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
9b3445c0bffdf7089fa522f4f6be9bba
  $w$s$wupdateOrSnocWithKey ::
    (Duckling.Types.Node -> v -> v -> v)
    -> Duckling.Types.Range
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> v
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
  {- Arity: 7,
     Strictness: <L,C(C1(C1(U)))><L,U(U(U),U(U))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Duckling.Types.Node -> v -> v -> v)
                   (ww :: Duckling.Types.Range)
                   (ww1 :: Duckling.Types.Token)
                   (ww2 :: [Duckling.Types.Node])
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Duckling.Types.Node v)) ->
                 letrec {
                   $wgo8 :: Duckling.Types.Range
                            -> Duckling.Types.Token
                            -> [Duckling.Types.Node]
                            -> GHC.Base.Maybe Data.Text.Internal.Text
                            -> v
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                     {- Arity: 8,
                        Strictness: <L,U(U(U),U(U))><L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww4 :: Duckling.Types.Range)
                       (ww5 :: Duckling.Types.Token)
                       (ww6 :: [Duckling.Types.Node])
                       (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (w3 :: v)
                       (ww8 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Duckling.Types.Node v))
                       (ww9 :: GHC.Prim.Int#)
                       (ww10 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Duckling.Types.Node = Duckling.Types.Node ww4 ww5 ww6 ww7
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww9 ww10) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                 ww8
                                 ww9 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of ww11 { Duckling.Types.Node ww12 ww13 ww14 ww15 ->
                          case ww4 of ww16 { Duckling.Types.Range ww17 ww18 ->
                          case ww17 of ww19 { GHC.Types.I# ww20 ->
                          case ww12 of ww21 { Duckling.Types.Range ww22 ww23 ->
                          case ww22 of ww24 { GHC.Types.I# ww25 ->
                          case Duckling.Types.$w$c==2
                                 ww20
                                 ww18
                                 ww5
                                 ww6
                                 ww7
                                 ww25
                                 ww23
                                 ww13
                                 ww14
                                 ww15 of wild2 {
                            GHC.Types.False
                            -> $wgo8 ww16 ww5 ww6 ww7 w3 ww8 (GHC.Prim.+# ww9 1#) ww10
                            GHC.Types.True
                            -> case GHC.Prim.thawArray#
                                      @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                      @ GHC.Prim.RealWorld
                                      ww8
                                      0#
                                      (GHC.Prim.sizeofArray#
                                         @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                         ww8)
                                      GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                      ipv5
                                      ww9
                                      (Data.HashMap.Base.L @ Duckling.Types.Node @ v k2 (w k2 w3 y))
                                      ipv4 of s' { DEFAULT ->
                               case GHC.Prim.unsafeFreezeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                      ipv5
                                      s' of ds2 { (#,#) ipv6 ipv7 ->
                               ipv7 } } } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww10 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Duckling.Types.Node v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                 @ GHC.Prim.RealWorld
                                 ww8
                                 0#
                                 ipv4
                                 0#
                                 ww10
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                 ipv4
                                 ww10
                                 (Data.HashMap.Base.L @ Duckling.Types.Node @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo8
                   ww
                   ww1
                   ww2
                   ww3
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Duckling.Types.Node v)
                      w2)) -}
39644a3bdada4c40d7583337e026a1e1
  $wpoly_go1 ::
    Duckling.Types.Range
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Prim.Array# (Data.HashMap.Base.Leaf Duckling.Types.Node v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(U),U(U))><L,U><L,U><L,U><S,U><S,U><S,U>,
     Inline: [0] -}
11819498b9b5615929ef7760d6fcd503
  $wpoly_go2 ::
    GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Duckling.Types.Node v
    -> Data.HashMap.Base.HashMap Duckling.Types.Node v
    -> Data.HashMap.Base.HashMap Duckling.Types.Node v
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0] -}
8d7a480226f3ebf92c81c90af768490f
  newtype Stash
    = Stash {getSet :: Data.IntMap.Base.IntMap
                         (Data.HashSet.HashSet Duckling.Types.Node)}
6db7e75e9ece4aa46f81583c0c4d5981
  empty :: Duckling.Types.Stash.Stash
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.IntMap.Base.Nil @ (Data.HashSet.HashSet Duckling.Types.Node))
                  `cast`
                (Sym (Duckling.Types.Stash.N:Stash[0])) -}
849479d615d71f515133fd0e2a021dc5
  filter ::
    (Duckling.Types.Node -> GHC.Types.Bool)
    -> Duckling.Types.Stash.Stash -> Duckling.Types.Stash.Stash
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.Stash.filter1
                  `cast`
                (<Duckling.Types.Node -> GHC.Types.Bool>_R
                 ->_R <Duckling.Types.Stash.Stash>_R
                 ->_R Sym (Duckling.Types.Stash.N:Stash[0])) -}
66e03b4db090fc733292287714d2a2dd
  filter1 ::
    (Duckling.Types.Node -> GHC.Types.Bool)
    -> Duckling.Types.Stash.Stash
    -> Data.IntMap.Base.IntMap
         (Data.HashSet.HashSet Duckling.Types.Node)
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
17cbbaa4ebc3f46909f0100eef67b0e1
  fromList :: [Duckling.Types.Node] -> Duckling.Types.Stash.Stash
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.Stash.fromList1
                  `cast`
                (<[Duckling.Types.Node]>_R
                 ->_R Sym (Duckling.Types.Stash.N:Stash[0])) -}
305961127eb297b3fe4352dc0228cd5e
  fromList1 ::
    [Duckling.Types.Node]
    -> Data.IntMap.Base.IntMap
         (Data.HashSet.HashSet Duckling.Types.Node)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ns :: [Duckling.Types.Node]) ->
                 Data.IntMap.Strict.fromListWithKey
                   @ (Data.HashSet.HashSet Duckling.Types.Node)
                   Duckling.Types.Stash.fromList3
                   (GHC.Base.map
                      @ Duckling.Types.Node
                      @ (GHC.Types.Int, Data.HashSet.HashSet Duckling.Types.Node)
                      Duckling.Types.Stash.fromList2
                      ns)) -}
ee350cd7e763d9c9b6c4dbf5ca02a6b2
  fromList2 ::
    Duckling.Types.Node
    -> (GHC.Types.Int, Data.HashSet.HashSet Duckling.Types.Node)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(U(U(U),U(U)),U,U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Types.Node) ->
                 case w of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 let {
                   ds :: Duckling.Types.Range = Duckling.Types.Range ww6 ww7
                 } in
                 (ww6,
                  case Duckling.Types.$w$dGHashable
                         @ GHC.Prim.Any
                         Data.Hashable.Class.defaultSalt
                         ds
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P
                                        <Duckling.Types.Range>_R
                                        <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "nodeRange")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           Duckling.Types.Range>_R) <GHC.Prim.Any>_N))
                         ww2
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P
                                        <Duckling.Types.Token>_R
                                        <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "token")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           Duckling.Types.Token>_R) <GHC.Prim.Any>_N))
                         ww3
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P
                                        <[Duckling.Types.Node]>_R
                                        <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "children")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           [Duckling.Types.Node]>_R) <GHC.Prim.Any>_N))
                         ww4
                           `cast`
                         (Trans
                              (Sym (GHC.Generics.N:K1[0]
                                        <GHC.Generics.R>_P
                                        <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                        <GHC.Prim.Any>_P))
                              (Sym (GHC.Generics.N:M1[0]
                                        <GHC.Generics.S>_P
                                        <'GHC.Generics.MetaSel
                                           ('GHC.Base.Just "rule")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy>_P
                                        <GHC.Generics.K1
                                           GHC.Generics.R
                                           (GHC.Base.Maybe
                                              Data.Text.Internal.Text)>_R) <GHC.Prim.Any>_N)) of ww8 { DEFAULT ->
                  (Data.HashMap.Base.Leaf
                     @ Duckling.Types.Node
                     @ ()
                     (GHC.Prim.int2Word# ww8)
                     (Duckling.Types.Node ds ww2 ww3 ww4)
                     GHC.Tuple.())
                    `cast`
                  (Sym (Data.HashSet.N:HashSet[0]
                            <Duckling.Types.Node>_N)) }) } }) -}
35e0ddc95bfeb36f491d8d66a511abbf
  fromList3 ::
    Data.IntSet.Base.Key
    -> Data.HashSet.HashSet Duckling.Types.Node
    -> Data.HashSet.HashSet Duckling.Types.Node
    -> Data.HashSet.HashSet Duckling.Types.Node
  {- Arity: 3,
     Unfolding: (\ (ds :: Data.IntSet.Base.Key)
                   (x :: Data.HashSet.HashSet Duckling.Types.Node)[OneShot]
                   (y :: Data.HashSet.HashSet Duckling.Types.Node)[OneShot] ->
                 Duckling.Types.Stash.$sunion1 x y) -}
6d35c2fafab1a8bba7fe5cf1cc1dffbf
  getSet ::
    Duckling.Types.Stash.Stash
    -> Data.IntMap.Base.IntMap
         (Data.HashSet.HashSet Duckling.Types.Node)
  RecSel Left Duckling.Types.Stash.Stash
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.Stash.getSet1
                  `cast`
                (<Duckling.Types.Stash.Stash>_R
                 ->_R Duckling.Types.Stash.N:Stash[0]) -}
d8e2999425d950fc0a90281ad5290f52
  getSet1 :: Duckling.Types.Stash.Stash -> Duckling.Types.Stash.Stash
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Duckling.Types.Stash.Stash) -> ds) -}
6ab26d17c936e75729f56adec5cf9279
  null :: Duckling.Types.Stash.Stash -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (Data.IntMap.Base.null
                   @ (Data.HashSet.HashSet Duckling.Types.Node))
                  `cast`
                (Sym (Duckling.Types.Stash.N:Stash[0]) ->_R <GHC.Types.Bool>_R) -}
4f1d777ae02d791907bba9c0bfdee2a0
  sizeEqual ::
    Duckling.Types.Stash.Stash
    -> Duckling.Types.Stash.Stash -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Types.Stash.Stash)
                   (ds1 :: Duckling.Types.Stash.Stash) ->
                 Duckling.Types.Stash.sizeEqual_go
                   (GHC.Base.build
                      @ (Data.IntSet.Base.Key, Data.HashSet.HashSet Duckling.Types.Node)
                      (\ @ b
                         (c :: (Data.IntSet.Base.Key,
                                Data.HashSet.HashSet Duckling.Types.Node)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       Data.IntMap.Base.foldrFB
                         @ (Data.HashSet.HashSet Duckling.Types.Node)
                         @ b
                         (\ (k :: Data.IntSet.Base.Key)
                            (x :: Data.HashSet.HashSet Duckling.Types.Node)[OneShot]
                            (xs :: b)[OneShot] ->
                          c (k, x) xs)
                         n
                         ds `cast` (Duckling.Types.Stash.N:Stash[0])))
                   (GHC.Base.build
                      @ (Data.IntSet.Base.Key, Data.HashSet.HashSet Duckling.Types.Node)
                      (\ @ b
                         (c :: (Data.IntSet.Base.Key,
                                Data.HashSet.HashSet Duckling.Types.Node)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       Data.IntMap.Base.foldrFB
                         @ (Data.HashSet.HashSet Duckling.Types.Node)
                         @ b
                         (\ (k :: Data.IntSet.Base.Key)
                            (x :: Data.HashSet.HashSet Duckling.Types.Node)[OneShot]
                            (xs :: b)[OneShot] ->
                          c (k, x) xs)
                         n
                         ds1 `cast` (Duckling.Types.Stash.N:Stash[0])))) -}
8e09b49eddfe10009e0e8ae925206001
  sizeEqual_go ::
    [(Data.IntSet.Base.Key, Data.HashSet.HashSet Duckling.Types.Node)]
    -> [(Data.IntSet.Base.Key,
         Data.HashSet.HashSet Duckling.Types.Node)]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
71cd2477450f8ed0c5763401df7b5b95
  toPosOrderedList ::
    Duckling.Types.Stash.Stash -> [Duckling.Types.Node]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Stash.Stash) ->
                 case ds `cast` (Duckling.Types.Stash.N:Stash[0]) of wild {
                   DEFAULT
                   -> Duckling.Types.Stash.toPosOrderedList_go2
                        (GHC.Types.[] @ Duckling.Types.Node)
                        wild
                   Data.IntMap.Base.Bin dt dt1 l r
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<# dt1 0#) of wild1 {
                        GHC.Types.False
                        -> Duckling.Types.Stash.toPosOrderedList_go2
                             (Duckling.Types.Stash.toPosOrderedList_go2
                                (GHC.Types.[] @ Duckling.Types.Node)
                                r)
                             l
                        GHC.Types.True
                        -> Duckling.Types.Stash.toPosOrderedList_go2
                             (Duckling.Types.Stash.toPosOrderedList_go2
                                (GHC.Types.[] @ Duckling.Types.Node)
                                l)
                             r } }) -}
e7d8abd61043e38f4e320e7afdb8305d
  toPosOrderedListFrom ::
    Duckling.Types.Stash.Stash
    -> GHC.Types.Int -> [Duckling.Types.Node]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
645b956e6bc12459954628c1615a5b43
  toPosOrderedList_go2 ::
    [Duckling.Types.Node]
    -> Data.IntMap.Base.IntMap
         (Data.HashSet.HashSet Duckling.Types.Node)
    -> [Duckling.Types.Node]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
38798380f4d85730d3dd87dfb8b72d43
  union ::
    Duckling.Types.Stash.Stash
    -> Duckling.Types.Stash.Stash -> Duckling.Types.Stash.Stash
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.Stash.union1
                  `cast`
                (<Duckling.Types.Stash.Stash>_R
                 ->_R <Duckling.Types.Stash.Stash>_R
                 ->_R Sym (Duckling.Types.Stash.N:Stash[0])) -}
84636c05813d3b6da19863c1b0c99518
  union1 ::
    Duckling.Types.Stash.Stash
    -> Duckling.Types.Stash.Stash
    -> Data.IntMap.Base.IntMap
         (Data.HashSet.HashSet Duckling.Types.Node)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Stash.Stash)
                   (ds1 :: Duckling.Types.Stash.Stash) ->
                 Data.IntMap.Strict.unionWithKey
                   @ (Data.HashSet.HashSet Duckling.Types.Node)
                   Duckling.Types.Stash.fromList3
                   ds `cast` (Duckling.Types.Stash.N:Stash[0])
                   ds1 `cast` (Duckling.Types.Stash.N:Stash[0])) -}
"SPEC/Duckling.Types.Stash $wupdateOrConcatWithKey @ Node _" [0] forall @ v
                                                                        (w :: GHC.Classes.Eq
                                                                                Duckling.Types.Node)
  Data.HashMap.Base.$wupdateOrConcatWithKey @ Duckling.Types.Node
                                            @ v
                                            w
  = Duckling.Types.Stash.$s$wupdateOrConcatWithKey @ v
"SPEC/Duckling.Types.Stash union @ Node" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                          Duckling.Types.Node)
                                                         ($dEq :: GHC.Classes.Eq
                                                                    Duckling.Types.Node)
  Data.HashSet.union @ Duckling.Types.Node $dEq $dHashable
  = Duckling.Types.Stash.$sunion1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

