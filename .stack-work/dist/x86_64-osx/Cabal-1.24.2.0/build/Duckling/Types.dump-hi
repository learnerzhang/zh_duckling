
==================== FINAL INTERFACE ====================
2019-01-30 07:26:45.270732 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types [family instance module] 8002
  interface hash: 0acbe88d8261b4138cf02004ea013263
  ABI hash: 801e304eb17ff8eb30c8b6726b1646d0
  export-list hash: 234683482d9f074d977aa6ca4a8259f1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6756b76f9d92ff8f414ba67f3390eaab
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Types.dimension
  Duckling.Types.isDimension
  Duckling.Types.regex
  Duckling.Types.toJText
  Duckling.Types.Candidate{Duckling.Types.Candidate}
  Duckling.Types.CustomDimension{Duckling.Types.DimensionData Duckling.Types.dimDependents Duckling.Types.dimLangRules Duckling.Types.dimLocaleRules Duckling.Types.dimRules}
  Duckling.Types.Dimension{Duckling.Types.AmountOfMoney Duckling.Types.CreditCardNumber Duckling.Types.CustomDimension Duckling.Types.Distance Duckling.Types.Duration Duckling.Types.Email Duckling.Types.Gender Duckling.Types.Identity Duckling.Types.Numeral Duckling.Types.Ordinal Duckling.Types.PhoneNumber Duckling.Types.Quantity Duckling.Types.RegexMatch Duckling.Types.Temperature Duckling.Types.Time Duckling.Types.TimeGrain Duckling.Types.Url Duckling.Types.Volume Duckling.Types.Weight}
  Duckling.Types.Entity{Duckling.Types.Entity body dim end enode latent start value}
  Duckling.Types.Node{Duckling.Types.Node children nodeRange rule token}
  Duckling.Types.Pattern
  Duckling.Types.PatternItem{Duckling.Types.Predicate Duckling.Types.Regex}
  Duckling.Types.Predicate
  Duckling.Types.Production
  Duckling.Types.Range{Duckling.Types.Range}
  Duckling.Types.ResolvedToken{Duckling.Types.Resolved isLatent node range rval}
  Duckling.Types.ResolvedVal{Duckling.Types.RVal}
  Duckling.Types.Rule{Duckling.Types.Rule name pattern prod}
  Duckling.Types.Token{Duckling.Types.Token}
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Distance.Types
                     Duckling.Duration.Types Duckling.Email.Types Duckling.Gender.Types
                     Duckling.Identity.Types Duckling.Locale Duckling.Numeral.Types
                     Duckling.Ordinal.Types Duckling.PhoneNumber.Types
                     Duckling.Quantity.Types Duckling.Regex.Types Duckling.Region
                     Duckling.Resolve Duckling.Temperature.Types Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Url.Types Duckling.Volume.Types
                     Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 2ede44f11439db2ef9a1556c24c824b6
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare 90fceaa549798b676ccde184cb35205f
import  -/  dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Show de7c6194dfc5f685aee45e658c22721a
import  -/  dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.Some ffcc59e6963bb1cc24b7856886ba8efa
import  -/  Duckling.AmountOfMoney.Types 7dc5ee03de042114275e6195f2ab63d3
  exports: e9b6dbd5d844108c1a8792ac6a374620
  AmountOfMoneyData ceb555a6e335c7332ef7ebea756e5eb9
import  -/  Duckling.CreditCardNumber.Types 81fe06b4314b4604371cc015e9908e21
  exports: 8db62903b79d3bc1584e480b56e21fcc
  CreditCardNumberData eb0ba1e8838524b66ff805106380d8cb
import  -/  Duckling.Distance.Types 9896bb4befae688e072673e0e486da8d
  exports: 23b1a80c558bfd60ea16f2f89103940d
  DistanceData 5f72aa94a003e16c032acf5100e0311f
import  -/  Duckling.Duration.Types 92ca01ea79d3ed3655d51eee185eae9d
  exports: 9e93299743dcd5e9b14927e2c2715f74
  DurationData ccad41359f5fe198b91e5f76cc156f86
import  -/  Duckling.Email.Types 35caa3197682fd270959d400e14b5a0c
  exports: 7aadf1c3c46aca73fef35851674632db
  EmailData 8f184380236342de532cdaaa1c360735
import  -/  Duckling.Gender.Types b281b0d284b028e6608ffebe1ff9bf65
  exports: 1c90c076de1ded1d6a3fb32caa5d5cf3
  GenderData 44e21541e8144dab3867bad7e829028d
import  -/  Duckling.Identity.Types 058e0041562db8a15bdf30c66a4d0008
  exports: f8430761edfe752870128f0c27a95724
  IdentityData 2cd07147e19bd1d24dc16ac8c9df3fed
import  -/  Duckling.Locale 020bf273f3f9b80348357a6a6745b7ad
  exports: add3c3336cdc18456bb772c1f769cbd3
  Lang 31c921884abdece48e208bb67982f63e
import  -/  Duckling.Numeral.Types 5130bfd045a9ca6085fec0a42ae9c523
  exports: 94344b1dfc906561c4234f30cd403539
  NumeralData b39812d3c41d2bedc97a27275db5112e
import  -/  Duckling.Ordinal.Types 338cef02dda50d8eb48357da4a409fec
  exports: 775285a26ee37c34a56d1069720093f1
  OrdinalData e73c6b69ec549db5ee2f779a063637ca
import  -/  Duckling.PhoneNumber.Types 0669fe8745512166dacfbf9327ef7790
  exports: bba20226ebfec62c3ade9b9203981606
  PhoneNumberData 154d0dce431951fc44a0633d381184a8
import  -/  Duckling.Quantity.Types a54e787246c8f7674ea30ca428b1f9c0
  exports: 6769709567c3fb43c23de2aeddb3e791
  QuantityData be6bba9b7c724f13379a9669ac27fcf8
import  -/  Duckling.Regex.Types 02ee061ffbed7bfe03850219af82e91c
  exports: d44c9c4af09e2c2530be2e20de544b1d
  GroupMatch 2d064b4e60a339f91d4c3a655bbe015b
import  -/  Duckling.Region 7f879aa0b7189387001e62b5b7d755fb
  Region 3b28b3ea172cd9e9637ee6bddd576df9
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
import  -/  Duckling.Temperature.Types c7f3dc789a62dec5378beb28bc64479a
  exports: 3608a96fa6a5d7edada240602ba19e6c
  TemperatureData fd189d271518f110bff3b4ccf3ee2cb7
import  -/  Duckling.Time.Types d4fac4be942a0a4255ab078596447429
  exports: 3606974139e9e7e95f5dfe8696d4fed1
  TimeData 30afdebe049cca4783f2b6e6cd997b57
import  -/  Duckling.TimeGrain.Types df1446d581d19c78205a53c0773a1394
  exports: 1edf6532c5926aae175720f5ee1798eb
  Grain 39f514c392611535b9c35c2b5fb6eab3
import  -/  Duckling.Url.Types 355fbc26c0ee1e13106a130b7a91d029
  exports: 3e774ebfc825749613f2e50f34d2334b
  UrlData 811320c482521e1dfcc84cfa820657b6
import  -/  Duckling.Volume.Types 8412d0594bcecaf2ab681fc053d8728a
  exports: 062fe928140f44e90221a1822b5f6fc9
  VolumeData 5738d6f6e95b9f3dd848988e75dc6877
import  -/  Duckling.Weight.Types 8247a5f41551f006c25533154da2cad5
  exports: 8f72193238d93dff2655ebec37ea7d9e
  WeightData 41a2e2b28fbb0942759ccfaa26dba44e
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base 692871a91018d559947a86960bcb18e8
import  -/  regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.RegexLike 3448747551b54593c367675a9e948fa1
import  -/  regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE 53cf9c11c8ae2b4f302649dbcacabaff
import  -/  regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Wrap 49a0cd2aa5ebf780f018c01b84798ffe
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Encoding 03fe2a5ea343372ed1f58467f68fc421
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal.Builder 0149c87bcfcb8590d2bf2896244acf6b
import  -/  text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow aa23f2706bb607d0c81ed1e25d7f545f
import  -/  text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Classes dedda7fb5ea7a6680ca797592cc143d8
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet 5f58e144114dc7a5de72a4ecdcadde39
f6c758a2821a058963006b0f0c0d4276
  $fEqCandidate :: GHC.Classes.Eq Duckling.Types.Candidate
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Candidate
                  Duckling.Types.$fEqCandidate_$c==
                  Duckling.Types.$fEqCandidate_$c/= -}
d36d6ab4ea22a985ced655f4a50398f3
  $fEqCandidate1 :: GHC.Base.Maybe (a Data.Type.Equality.:~: a)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ a ->
                 GHC.Base.Just
                   @ (a Data.Type.Equality.:~: a)
                   (Data.Type.Equality.$WRefl @ * @ a)) -}
f6c758a2821a058963006b0f0c0d4276
  $fEqCandidate_$c/= ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(S)L)LLL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U),1*U(U),1*U)><S(S(S(S(S)L)LLL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U),1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Types.Candidate)
                   (b :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fEqCandidate_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f6c758a2821a058963006b0f0c0d4276
  $fEqCandidate_$c== ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(S)L)LLL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U),1*U(U),1*U)><S(S(S(S(S)L)LLL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U),1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Candidate)
                   (w1 :: Duckling.Types.Candidate) ->
                 case w of ww { Duckling.Types.Candidate ww1 ww2 ww3 ->
                 case ww1 of ww4 { Duckling.Types.Resolved ww5 ww6 ww7 ww8 ->
                 case ww5 of ww9 { Duckling.Types.Range ww10 ww11 ->
                 case ww10 of ww12 { GHC.Types.I# ww13 ->
                 case w1 of ww14 { Duckling.Types.Candidate ww15 ww16 ww17 ->
                 case ww15 of ww18 { Duckling.Types.Resolved ww19 ww20 ww21 ww22 ->
                 case ww19 of ww23 { Duckling.Types.Range ww24 ww25 ->
                 case ww24 of ww26 { GHC.Types.I# ww27 ->
                 Duckling.Types.$w$c==
                   ww13
                   ww11
                   ww6
                   ww7
                   ww8
                   ww2
                   ww3
                   ww27
                   ww25
                   ww20
                   ww21
                   ww22
                   ww16
                   ww17 } } } } } } } }) -}
f91f659dac2427379aea524436688c15
  $fEqCandidate_$c==1 ::
    Duckling.Types.ResolvedVal
    -> Duckling.Types.ResolvedVal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.ResolvedVal)
                   (ds1 :: Duckling.Types.ResolvedVal) ->
                 case ds of wild { Duckling.Types.RVal a $dResolve $dEq $dShow $dToJSON d1 v1 ->
                 case ds1 of wild1 { Duckling.Types.RVal a1 $dResolve1 $dEq1 $dShow1 $dToJSON1 d2 v2 ->
                 case Duckling.Types.$fEqCandidate_$cgeq @ a @ a1 d1 d2 of wild2 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ds2
                   -> case ds2 of wild3 { Data.Type.Equality.Refl cobox0 ->
                      GHC.Classes.==
                        @ (Duckling.Resolve.ResolvedValue a)
                        (Duckling.Resolve.$p1Resolve @ a $dResolve)
                        v1
                        v2 `cast` (Duckling.Resolve.ResolvedValue cobox0)_R } } } }) -}
876893268fb58123567a47e946b5b6ba
  $fEqCandidate_$cgeq ::
    Duckling.Types.Dimension a
    -> Duckling.Types.Dimension b
    -> GHC.Base.Maybe (a Data.GADT.Compare.:= b)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (ds :: Duckling.Types.Dimension a)
                   (ds1 :: Duckling.Types.Dimension b) ->
                 case ds of wild {
                   Duckling.Types.RegexMatch cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.RegexMatch cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.AmountOfMoney cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.AmountOfMoney cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.CreditCardNumber cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.CreditCardNumber cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Distance cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Distance cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Weight cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Weight cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Duration cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Duration cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Email cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Email cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Numeral cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Numeral cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Ordinal cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Ordinal cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.PhoneNumber cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.PhoneNumber cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Quantity cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Quantity cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Temperature cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Temperature cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Time cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Time cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.TimeGrain cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.TimeGrain cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Url cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Url cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Volume cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Volume cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Identity cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Identity cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.Gender cobox0
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.Gender cobox1
                        -> (Duckling.Types.$fEqCandidate1 @ a)
                             `cast`
                           (GHC.Base.Maybe
                              ((Data.Type.Equality.:~:)
                                 <*>_N <a>_N (Trans cobox0 (Sym cobox1)))_R)_R }
                   Duckling.Types.CustomDimension a1 cobox0 $dCustomDimension ds2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                        Duckling.Types.CustomDimension a2 cobox1 $dCustomDimension1 ds3
                        -> case (Duckling.Types.$p2CustomDimension @ a1 $dCustomDimension)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a1>_N)
                                  (GHC.Prim.proxy#
                                     @ *
                                     @ a1) of wild2 { Data.Typeable.Internal.TypeRep dt dt1 ds4 ds5 ds6 ->
                           case (Duckling.Types.$p2CustomDimension @ a2 $dCustomDimension1)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <a2>_N)
                                  (GHC.Prim.proxy#
                                     @ *
                                     @ a2) of wild3 { Data.Typeable.Internal.TypeRep dt2 dt3 ds7 ds8 ds9 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqWord# dt dt2) of wild4 {
                             GHC.Types.False -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqWord# dt1 dt3) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ (a Data.GADT.Compare.:= b)
                                  GHC.Types.True
                                  -> (Duckling.Types.$fEqCandidate1 @ a)
                                       `cast`
                                     (GHC.Base.Maybe
                                        ((Data.Type.Equality.:~:)
                                           <*>_N
                                           <a>_N
                                           (Trans
                                                cobox0
                                                (Trans
                                                     (Duckling.Types.DimensionData
                                                        (UnsafeCo nominal a1 a2))_N
                                                     (Sym cobox1))))_R)_R } } } } } }) -}
4e09934b2257665727a4b63a0fa492ce
  $fEqEntity :: GHC.Classes.Eq Duckling.Types.Entity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Entity
                  Duckling.Types.$fEqEntity_$c==
                  Duckling.Types.$fEqEntity_$c/= -}
4e09934b2257665727a4b63a0fa492ce
  $fEqEntity_$c/= ::
    Duckling.Types.Entity -> Duckling.Types.Entity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U(U),1*U(U),1*U,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U))><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U(U),1*U(U),1*U,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Types.Entity) (b :: Duckling.Types.Entity) ->
                 case Duckling.Types.$fEqEntity_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4e09934b2257665727a4b63a0fa492ce
  $fEqEntity_$c== ::
    Duckling.Types.Entity -> Duckling.Types.Entity -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U(U),1*U(U),1*U,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U))><S(S(LLS)LLLLLL),1*U(1*U(U,U,U),1*U(U,U,U),1*U,1*U(U),1*U(U),1*U,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Entity) (w1 :: Duckling.Types.Entity) ->
                 case w of ww { Duckling.Types.Entity ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                 case w1 of ww12 { Duckling.Types.Entity ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 case ww13 of ww20 { Data.Text.Internal.Text ww21 ww22 ww23 ->
                 Duckling.Types.$w$c==3
                   ww9
                   ww10
                   ww11
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww21
                   ww22
                   ww23
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19 } } } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fEqEntity_$c==1 ::
    Duckling.Types.Node -> Duckling.Types.Node -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Node) (w1 :: Duckling.Types.Node) ->
                 case w of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { Duckling.Types.Node ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { Duckling.Types.Range ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.I# ww19 ->
                 Duckling.Types.$w$c==2
                   ww9
                   ww7
                   ww2
                   ww3
                   ww4
                   ww19
                   ww17
                   ww12
                   ww13
                   ww14 } } } } } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fEqNode :: GHC.Classes.Eq Duckling.Types.Node
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Node
                  Duckling.Types.$fEqEntity_$c==1
                  Duckling.Types.$fEqNode_$c/= -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fEqNode_$c/= ::
    Duckling.Types.Node -> Duckling.Types.Node -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Node) (w1 :: Duckling.Types.Node) ->
                 case w of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { Duckling.Types.Node ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { Duckling.Types.Range ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.I# ww19 ->
                 Duckling.Types.$w$c/=
                   ww9
                   ww7
                   ww2
                   ww3
                   ww4
                   ww19
                   ww17
                   ww12
                   ww13
                   ww14 } } } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fEqRange :: GHC.Classes.Eq Duckling.Types.Range
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Range
                  Duckling.Types.$fEqRange_$c==
                  Duckling.Types.$fEqRange_$c/= -}
83cec8727dae58e470d36f42a8a03ab2
  $fEqRange_$c/= ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c/=1 ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fEqRange_$c== ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c==4 ww4 ww2 ww9 ww7 } } } }) -}
f8e17b0721b86350c49a27f32de48f63
  $fEqResolvedToken :: GHC.Classes.Eq Duckling.Types.ResolvedToken
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.ResolvedToken
                  Duckling.Types.$fEqResolvedToken_$c==
                  Duckling.Types.$fEqResolvedToken_$c/= -}
f8e17b0721b86350c49a27f32de48f63
  $fEqResolvedToken_$c/= ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Types.ResolvedToken)
                   (b :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fEqResolvedToken_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f8e17b0721b86350c49a27f32de48f63
  $fEqResolvedToken_$c== ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U)><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U),1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.ResolvedToken)
                   (w1 :: Duckling.Types.ResolvedToken) ->
                 case w of ww { Duckling.Types.Resolved ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { Duckling.Types.Resolved ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { Duckling.Types.Range ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.I# ww19 ->
                 Duckling.Types.$w$c==1
                   ww9
                   ww7
                   ww2
                   ww3
                   ww4
                   ww19
                   ww17
                   ww12
                   ww13
                   ww14 } } } } } }) -}
f91f659dac2427379aea524436688c15
  $fEqResolvedVal :: GHC.Classes.Eq Duckling.Types.ResolvedVal
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.ResolvedVal
                  Duckling.Types.$fEqCandidate_$c==1
                  Duckling.Types.$fEqResolvedVal_$c/= -}
f91f659dac2427379aea524436688c15
  $fEqResolvedVal_$c/= ::
    Duckling.Types.ResolvedVal
    -> Duckling.Types.ResolvedVal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Duckling.Types.ResolvedVal)
                   (y :: Duckling.Types.ResolvedVal) ->
                 GHC.Classes.not (Duckling.Types.$fEqCandidate_$c==1 x y)) -}
876893268fb58123567a47e946b5b6ba
  $fEqToken :: GHC.Classes.Eq Duckling.Types.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Token
                  Duckling.Types.$fEqToken_$c==
                  Duckling.Types.$fEqToken_$c/= -}
876893268fb58123567a47e946b5b6ba
  $fEqToken_$c/= ::
    Duckling.Types.Token -> Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Duckling.Types.Token) (y :: Duckling.Types.Token) ->
                 GHC.Classes.not (Duckling.Types.$fEqToken_$c== x y)) -}
876893268fb58123567a47e946b5b6ba
  $fEqToken_$c== ::
    Duckling.Types.Token -> Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token)
                   (ds1 :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData d1 v1 ->
                 case ds1 of wild1 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 d2 v2 ->
                 case Duckling.Types.$fEqCandidate_$cgeq @ a @ a1 d1 d2 of wild2 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ds2
                   -> case ds2 of wild3 { Data.Type.Equality.Refl cobox0 ->
                      GHC.Classes.== @ a $dEq v1 v2 `cast` (Sub cobox0) } } } }) -}
876893268fb58123567a47e946b5b6ba
  $fGEqTYPEDimension ::
    Data.GADT.Compare.GEq Duckling.Types.Dimension
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Types.$fEqCandidate_$cgeq
                  `cast`
                (Sym (Data.GADT.Compare.N:GEq[0]
                          <*>_N <Duckling.Types.Dimension>_N)) -}
876893268fb58123567a47e946b5b6ba
  $fGShowTYPEDimension ::
    Data.GADT.Show.GShow Duckling.Types.Dimension
  DFunId
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Types.$fGShowTYPEDimension_$cgshowsPrec
                  `cast`
                (Sym (Data.GADT.Show.N:GShow[0]
                          <*>_N <Duckling.Types.Dimension>_N)) -}
4b54702802bc25e8221361adbfaa556f
  $fGShowTYPEDimension1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Gender"#) -}
68b9a212121322affd7e0950001e2702
  $fGShowTYPEDimension10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Ordinal"#) -}
1397f8346b5583f446ad755b7ec1bd1e
  $fGShowTYPEDimension11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Numeral"#) -}
5fff012dee827a2154823956fb92bb2a
  $fGShowTYPEDimension12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Email"#) -}
85903bc1a1e52e171884e511a3a17561
  $fGShowTYPEDimension13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Duration"#) -}
b63f7c8943179a9b94601bab5977a9f6
  $fGShowTYPEDimension14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "weight"#) -}
842425c4b14d225f8ca4b4d7ecad345b
  $fGShowTYPEDimension15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Distance"#) -}
4434ba72652969db709ddb03ffe83a8f
  $fGShowTYPEDimension16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CreditCardNumber"#) -}
1bf21e417f2c104fe57c317915335d8e
  $fGShowTYPEDimension17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AmountOfMoney"#) -}
edb023114d24827c6e23b61ea35a3e4f
  $fGShowTYPEDimension18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RegexMatch"#) -}
3fc2f6852e2a9b47e03fee012ef58841
  $fGShowTYPEDimension2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity"#) -}
009c36b691b9ce31b4127596a78dac96
  $fGShowTYPEDimension3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Volume"#) -}
95b57070f18eeabdbf8f7e314cef0928
  $fGShowTYPEDimension4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Url"#) -}
e999603a63d38868799d68261ba5c9cf
  $fGShowTYPEDimension5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimeGrain"#) -}
e7c07483782063b5472cbdb986b27903
  $fGShowTYPEDimension6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Time"#) -}
fdbab4c4e16979879dec056d90382a1c
  $fGShowTYPEDimension7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Temperature"#) -}
99d51c8defbbca20181df7f5b8f68290
  $fGShowTYPEDimension8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Quantity"#) -}
9b8a5965ccf23f1f7f71024d0bbbc5f4
  $fGShowTYPEDimension9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PhoneNumber"#) -}
876893268fb58123567a47e946b5b6ba
  $fGShowTYPEDimension_$cgshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Dimension a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.$fGShowTYPEDimension_$cshowsPrec -}
876893268fb58123567a47e946b5b6ba
  $fGShowTYPEDimension_$cshow ::
    Duckling.Types.Dimension a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: Duckling.Types.Dimension a) ->
                 case ds of wild {
                   Duckling.Types.RegexMatch cobox0
                   -> Duckling.Types.$fGShowTYPEDimension18
                   Duckling.Types.AmountOfMoney cobox0
                   -> Duckling.Types.$fGShowTYPEDimension17
                   Duckling.Types.CreditCardNumber cobox0
                   -> Duckling.Types.$fGShowTYPEDimension16
                   Duckling.Types.Distance cobox0
                   -> Duckling.Types.$fGShowTYPEDimension15
                   Duckling.Types.Weight cobox0
                   -> Duckling.Types.$fGShowTYPEDimension14
                   Duckling.Types.Duration cobox0
                   -> Duckling.Types.$fGShowTYPEDimension13
                   Duckling.Types.Email cobox0
                   -> Duckling.Types.$fGShowTYPEDimension12
                   Duckling.Types.Numeral cobox0
                   -> Duckling.Types.$fGShowTYPEDimension11
                   Duckling.Types.Ordinal cobox0
                   -> Duckling.Types.$fGShowTYPEDimension10
                   Duckling.Types.PhoneNumber cobox0
                   -> Duckling.Types.$fGShowTYPEDimension9
                   Duckling.Types.Quantity cobox0
                   -> Duckling.Types.$fGShowTYPEDimension8
                   Duckling.Types.Temperature cobox0
                   -> Duckling.Types.$fGShowTYPEDimension7
                   Duckling.Types.Time cobox0 -> Duckling.Types.$fGShowTYPEDimension6
                   Duckling.Types.TimeGrain cobox0
                   -> Duckling.Types.$fGShowTYPEDimension5
                   Duckling.Types.Url cobox0 -> Duckling.Types.$fGShowTYPEDimension4
                   Duckling.Types.Volume cobox0
                   -> Duckling.Types.$fGShowTYPEDimension3
                   Duckling.Types.Identity cobox0
                   -> Duckling.Types.$fGShowTYPEDimension2
                   Duckling.Types.Gender cobox0
                   -> Duckling.Types.$fGShowTYPEDimension1
                   Duckling.Types.CustomDimension a1 cobox0 $dCustomDimension dim1
                   -> GHC.Show.show
                        @ a1
                        (Duckling.Types.$p1CustomDimension @ a1 $dCustomDimension)
                        dim1 }) -}
876893268fb58123567a47e946b5b6ba
  $fGShowTYPEDimension_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Dimension a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Duckling.Types.Dimension a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Duckling.Types.$fGShowTYPEDimension_$cshow @ a x))
                   s) -}
4e09934b2257665727a4b63a0fa492ce
  $fGenericEntity :: GHC.Generics.Generic Duckling.Types.Entity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Entity
                  Duckling.Types.$fGenericEntity_$cfrom
                  Duckling.Types.$fGenericEntity_$cto -}
4e09934b2257665727a4b63a0fa492ce
  $fGenericEntity1 ::
    Duckling.Types.Entity
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "dim")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
           GHC.Generics.:*: (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "body")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "value")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Duckling.Types.ResolvedVal)))
          GHC.Generics.:*: ((GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "start")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "end")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "latent")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "enode")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Duckling.Types.Node))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Types.Entity) ->
                 case x1 of wild { Duckling.Types.Entity g1 g2 g3 g4 g5 g6 g7 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "dim")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "body")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "value")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               Duckling.Types.ResolvedVal)))
                    @ ((GHC.Generics.M1
                          GHC.Generics.S
                          ('GHC.Generics.MetaSel
                             ('GHC.Base.Just "start")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                        GHC.Generics.:*: GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "end")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "latent")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "enode")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R Duckling.Types.Node)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "dim")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "body")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "value")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R Duckling.Types.ResolvedVal))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <Data.Text.Internal.Text>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "dim")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R Data.Text.Internal.Text>_R) <x>_N))
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "body")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "value")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Duckling.Types.ResolvedVal))
                          @ x
                          g2
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <Data.Text.Internal.Text>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "body")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1
                                            GHC.Generics.R Data.Text.Internal.Text>_R) <x>_N))
                          g3
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <Duckling.Types.ResolvedVal>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "value")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1
                                            GHC.Generics.R Duckling.Types.ResolvedVal>_R) <x>_N))))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "start")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "end")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "latent")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "enode")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Node))
                       @ x
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "start")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "end")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                          @ x
                          g4
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "start")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N))
                          g5
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "end")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N)))
                       (GHC.Generics.:*:
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "latent")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "enode")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Node))
                          @ x
                          g6
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "latent")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R) <x>_N))
                          g7
                            `cast`
                          (Trans
                               (Sym (GHC.Generics.N:K1[0]
                                         <GHC.Generics.R>_P <Duckling.Types.Node>_R <x>_P))
                               (Sym (GHC.Generics.N:M1[0]
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "enode")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1
                                            GHC.Generics.R Duckling.Types.Node>_R) <x>_N)))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "dim")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                             GHC.Generics.:*: (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "body")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Data.Text.Internal.Text)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "value")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     Duckling.Types.ResolvedVal)))
                            GHC.Generics.:*: ((GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "start")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "end")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R GHC.Types.Int))
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "latent")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R GHC.Types.Bool)
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "enode")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      Duckling.Types.Node)))>_R) <x>_N) }) -}
4e09934b2257665727a4b63a0fa492ce
  $fGenericEntity_$cfrom ::
    Duckling.Types.Entity -> GHC.Generics.Rep Duckling.Types.Entity x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.$fGenericEntity1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Types.Entity>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Entity"
                                       "Duckling.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "dim")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "body")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Data.Text.Internal.Text)
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "value")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 Duckling.Types.ResolvedVal)))
                                        GHC.Generics.:*: ((GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "start")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Types.Int)
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "end")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Types.Int))
                                                          GHC.Generics.:*: (GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "latent")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 GHC.Types.Bool)
                                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "enode")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  Duckling.Types.Node))))>_R))
                          (Sub (Sym (Duckling.Types.Rep_Entity[0]))) <x>_N) -}
4e09934b2257665727a4b63a0fa492ce
  $fGenericEntity_$cto ::
    GHC.Generics.Rep Duckling.Types.Entity x -> Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)S(SS)),1*U(1*U(U,1*U(U,U)),1*U(1*U(U,U),1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Duckling.Types.Entity x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Types.Rep_Entity[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Entity"
                                        "Duckling.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "dim")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                                          GHC.Generics.:*: (GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "body")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Data.Text.Internal.Text)
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "value")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  Duckling.Types.ResolvedVal)))
                                         GHC.Generics.:*: ((GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "start")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R GHC.Types.Int)
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "end")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  GHC.Types.Int))
                                                           GHC.Generics.:*: (GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "latent")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  GHC.Types.Bool)
                                                                             GHC.Generics.:*: GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "enode")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Duckling.Types.Node))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "dim")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "body")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Data.Text.Internal.Text)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "value")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Duckling.Types.ResolvedVal)))
                                      GHC.Generics.:*: ((GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "start")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R GHC.Types.Int)
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "end")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               GHC.Types.Int))
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "latent")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               GHC.Types.Bool)
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "enode")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Duckling.Types.Node)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds4 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds2 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 case ds7 of wild4 { GHC.Generics.:*: ds9 ds10 ->
                 case ds8 of wild5 { GHC.Generics.:*: ds11 ds12 ->
                 Duckling.Types.Entity
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "dim")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Data.Text.Internal.Text>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "body")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Data.Text.Internal.Text>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "value")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R Duckling.Types.ResolvedVal>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Duckling.Types.ResolvedVal>_R <x>_P))
                   ds9
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "start")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds10
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "end")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds11
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "latent")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                   ds12
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "enode")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R Duckling.Types.Node>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Duckling.Types.Node>_R <x>_P)) } } } } } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fGenericNode :: GHC.Generics.Generic Duckling.Types.Node
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Node
                  Duckling.Types.$fGenericNode_$cfrom
                  Duckling.Types.$fGenericNode_$cto -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fGenericNode1 ::
    Duckling.Types.Node
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Node" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "nodeRange")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
           GHC.Generics.:*: GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "token")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Token))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "children")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [Duckling.Types.Node])
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "rule")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe Data.Text.Internal.Text))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Types.Node) ->
                 case x1 of wild { Duckling.Types.Node g1 g2 g3 g4 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "nodeRange")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "token")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Token))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "children")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R [Duckling.Types.Node])
                       GHC.Generics.:*: GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             ('GHC.Base.Just "rule")
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R
                                             (GHC.Base.Maybe Data.Text.Internal.Text)))
                    @ x
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "nodeRange")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "token")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Token))
                       @ x
                       g1
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <Duckling.Types.Range>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "nodeRange")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R Duckling.Types.Range>_R) <x>_N))
                       g2
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <Duckling.Types.Token>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "token")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R Duckling.Types.Token>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "children")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1 GHC.Generics.R [Duckling.Types.Node]))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "rule")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)))
                       @ x
                       g3
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P <[Duckling.Types.Node]>_R <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "children")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R [Duckling.Types.Node]>_R) <x>_N))
                       g4
                         `cast`
                       (Trans
                            (Sym (GHC.Generics.N:K1[0]
                                      <GHC.Generics.R>_P
                                      <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                      <x>_P))
                            (Sym (GHC.Generics.N:M1[0]
                                      <GHC.Generics.S>_P
                                      <'GHC.Generics.MetaSel
                                         ('GHC.Base.Just "rule")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy>_P
                                      <GHC.Generics.K1
                                         GHC.Generics.R
                                         (GHC.Base.Maybe Data.Text.Internal.Text)>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Node" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "nodeRange")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "token")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R Duckling.Types.Token))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "children")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R [Duckling.Types.Node])
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "rule")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (GHC.Base.Maybe
                                                                       Data.Text.Internal.Text)))>_R) <x>_N) }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fGenericNode_$cfrom ::
    Duckling.Types.Node -> GHC.Generics.Rep Duckling.Types.Node x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.$fGenericNode1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Types.Node>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Node"
                                       "Duckling.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Node" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                       ((GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "nodeRange")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "token")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R Duckling.Types.Token))
                                        GHC.Generics.:*: (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "children")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R [Duckling.Types.Node])
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "rule")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                (GHC.Base.Maybe
                                                                                   Data.Text.Internal.Text))))>_R))
                          (Sub (Sym (Duckling.Types.Rep_Node[0]))) <x>_N) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fGenericNode_$cto ::
    GHC.Generics.Rep Duckling.Types.Node x -> Duckling.Types.Node
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U,U),1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Duckling.Types.Node x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Types.Rep_Node[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Node"
                                        "Duckling.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Node" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                        ((GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "nodeRange")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "token")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                Duckling.Types.Token))
                                         GHC.Generics.:*: (GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "children")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R
                                                                [Duckling.Types.Node])
                                                           GHC.Generics.:*: GHC.Generics.M1
                                                                              GHC.Generics.S
                                                                              ('GHC.Generics.MetaSel
                                                                                 ('GHC.Base.Just
                                                                                    "rule")
                                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                                 'GHC.Generics.NoSourceStrictness
                                                                                 'GHC.Generics.DecidedLazy)
                                                                              (GHC.Generics.K1
                                                                                 GHC.Generics.R
                                                                                 (GHC.Base.Maybe
                                                                                    Data.Text.Internal.Text))))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Node" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <(GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "nodeRange")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range)
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "token")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R Duckling.Types.Token))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just "children")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R [Duckling.Types.Node])
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              ('GHC.Base.Just
                                                                                 "rule")
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              (GHC.Base.Maybe
                                                                                 Data.Text.Internal.Text)))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds2 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 Duckling.Types.Node
                   ds3
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "nodeRange")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R Duckling.Types.Range>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Duckling.Types.Range>_R <x>_P))
                   ds4
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "token")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R Duckling.Types.Token>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <Duckling.Types.Token>_R <x>_P))
                   ds5
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "children")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R [Duckling.Types.Node]>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <[Duckling.Types.Node]>_R <x>_P))
                   ds6
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                ('GHC.Base.Just "rule")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1
                                GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P
                             <GHC.Base.Maybe Data.Text.Internal.Text>_R
                             <x>_P)) } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fGenericRange :: GHC.Generics.Generic Duckling.Types.Range
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Range
                  Duckling.Types.$fGenericRange_$cfrom
                  Duckling.Types.$fGenericRange_$cto -}
83cec8727dae58e470d36f42a8a03ab2
  $fGenericRange1 ::
    Duckling.Types.Range
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Range" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Types.Range) ->
                 case x1 of wild { Duckling.Types.Range g1 g2 ->
                 (GHC.Generics.:*:
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                    @ x
                    g1
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N))
                    g2
                      `cast`
                    (Trans
                         (Sym (GHC.Generics.N:K1[0]
                                   <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                         (Sym (GHC.Generics.N:M1[0]
                                   <GHC.Generics.S>_P
                                   <'GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy>_P
                                   <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N)))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Range" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Base.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Base.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R GHC.Types.Int)>_R) <x>_N) }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fGenericRange_$cfrom ::
    Duckling.Types.Range -> GHC.Generics.Rep Duckling.Types.Range x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Types.$fGenericRange1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Types.Range>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Range"
                                       "Duckling.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Range" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                        GHC.Generics.:*: GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R GHC.Types.Int))>_R))
                          (Sub (Sym (Duckling.Types.Rep_Range[0]))) <x>_N) -}
83cec8727dae58e470d36f42a8a03ab2
  $fGenericRange_$cto ::
    GHC.Generics.Rep Duckling.Types.Range x -> Duckling.Types.Range
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Duckling.Types.Range x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Types.Rep_Range[0]))
                           (Trans
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.D>_P
                                     <'GHC.Generics.MetaData
                                        "Range"
                                        "Duckling.Types"
                                        "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                        'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "Range" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                        (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               'GHC.Base.Nothing
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Int))>_R)
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Range" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Int)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Duckling.Types.Range
                   ds1
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                   ds2
                     `cast`
                   (Trans
                        (GHC.Generics.N:M1[0]
                             <GHC.Generics.S>_P
                             <'GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy>_P
                             <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R <x>_N)
                        (GHC.Generics.N:K1[0]
                             <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P)) }) -}
876893268fb58123567a47e946b5b6ba
  $fHashableDimension ::
    Data.Hashable.Class.Hashable (Duckling.Types.Dimension a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Duckling.Types.Dimension a)
                  (Duckling.Types.$fHashableDimension_$chashWithSalt @ a)
                  (Duckling.Types.$fHashableDimension_$chash @ a) -}
876893268fb58123567a47e946b5b6ba
  $fHashableDimension_$chash ::
    Duckling.Types.Dimension a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 Duckling.Types.$fHashableDimension_$chashWithSalt
                   @ a
                   Data.Hashable.Class.defaultSalt) -}
876893268fb58123567a47e946b5b6ba
  $fHashableDimension_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Types.Dimension a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: Duckling.Types.Dimension a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Duckling.Types.$w$chashWithSalt @ a ww1 w1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fHashableNode :: Data.Hashable.Class.Hashable Duckling.Types.Node
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Node
                  Duckling.Types.$fHashableNode_$chashWithSalt
                  Duckling.Types.$fHashableNode_$chash -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fHashableNode_$chash :: Duckling.Types.Node -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Types.$fHashableNode_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fHashableNode_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Types.Node -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S(LSSS),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.Node) ->
                 case w1 of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 case Duckling.Types.$w$dGHashable
                        @ GHC.Prim.Any
                        w
                        ww1
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <Duckling.Types.Range>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "nodeRange")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R Duckling.Types.Range>_R) <GHC.Prim.Any>_N))
                        ww2
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <Duckling.Types.Token>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "token")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R Duckling.Types.Token>_R) <GHC.Prim.Any>_N))
                        ww3
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <[Duckling.Types.Node]>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "children")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          [Duckling.Types.Node]>_R) <GHC.Prim.Any>_N))
                        ww4
                          `cast`
                        (Trans
                             (Sym (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P
                                       <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                       <GHC.Prim.Any>_P))
                             (Sym (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "rule")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (GHC.Base.Maybe
                                             Data.Text.Internal.Text)>_R) <GHC.Prim.Any>_N)) of ww5 { DEFAULT ->
                 GHC.Types.I# ww5 } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fHashableRange ::
    Data.Hashable.Class.Hashable Duckling.Types.Range
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Range
                  Duckling.Types.$fHashableRange_$chashWithSalt
                  Duckling.Types.$fHashableRange_$chash -}
83cec8727dae58e470d36f42a8a03ab2
  $fHashableRange_$chash :: Duckling.Types.Range -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Types.$fHashableRange_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
83cec8727dae58e470d36f42a8a03ab2
  $fHashableRange_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Types.Range -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (salt :: GHC.Types.Int) (x :: Duckling.Types.Range) ->
                 case x of wild { Duckling.Types.Range g1 g2 ->
                 case salt of wild1 { GHC.Types.I# x1 ->
                 case g1 of wild2 { GHC.Types.I# y# ->
                 case g2 of wild3 { GHC.Types.I# y#1 ->
                 GHC.Types.I#
                   (GHC.Prim.xorI#
                      (GHC.Prim.*#
                         (GHC.Prim.xorI# (GHC.Prim.*# x1 16777619#) y#)
                         16777619#)
                      y#1) } } } }) -}
876893268fb58123567a47e946b5b6ba
  $fHashableSome ::
    Data.Hashable.Class.Hashable
      (Data.Some.Some Duckling.Types.Dimension)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Some.Some Duckling.Types.Dimension)
                  Duckling.Types.$fHashableSome_$chashWithSalt
                  Duckling.Types.$fHashableSome_$chash -}
876893268fb58123567a47e946b5b6ba
  $fHashableSome_$chash ::
    Data.Some.Some Duckling.Types.Dimension -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Types.$fHashableSome_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
876893268fb58123567a47e946b5b6ba
  $fHashableSome_$chashWithSalt ::
    GHC.Types.Int
    -> Data.Some.Some Duckling.Types.Dimension -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Some.Some Duckling.Types.Dimension) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Duckling.Types.$w$chashWithSalt1 ww1 w1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
876893268fb58123567a47e946b5b6ba
  $fHashableToken ::
    Data.Hashable.Class.Hashable Duckling.Types.Token
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Token
                  Duckling.Types.$fHashableToken_$chashWithSalt
                  Duckling.Types.$fHashableToken_$chash -}
876893268fb58123567a47e946b5b6ba
  $fHashableToken_$chash :: Duckling.Types.Token -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Types.$fHashableToken_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
876893268fb58123567a47e946b5b6ba
  $fHashableToken_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Types.Token -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Types.Int) (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData dim1 v ->
                 Data.Hashable.Class.hashWithSalt
                   @ a
                   $dHashable
                   (Duckling.Types.$fHashableDimension_$chashWithSalt @ a s dim1)
                   v }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fNFDataNode :: Control.DeepSeq.NFData Duckling.Types.Node
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SS)SSS),1*U(1*U(1*H,1*H),1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Types.$fNFDataNode_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Duckling.Types.Node>_N)) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fNFDataNode_$crnf :: Duckling.Types.Node -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(SS)SSS),1*U(1*U(1*H,1*H),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Types.Node) ->
                 case w of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ipv ->
                 case ww7 of ww9 { GHC.Types.I# ipv1 ->
                 Duckling.Types.$w$dGNFData
                   @ GHC.Prim.Any
                   ww8
                   ww9
                   ww2
                     `cast`
                   (Trans
                        (Sym (GHC.Generics.N:K1[0]
                                  <GHC.Generics.R>_P <Duckling.Types.Token>_R <GHC.Prim.Any>_P))
                        (Sym (GHC.Generics.N:M1[0]
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     ('GHC.Base.Just "token")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R Duckling.Types.Token>_R) <GHC.Prim.Any>_N))
                   ww3
                     `cast`
                   (Trans
                        (Sym (GHC.Generics.N:K1[0]
                                  <GHC.Generics.R>_P <[Duckling.Types.Node]>_R <GHC.Prim.Any>_P))
                        (Sym (GHC.Generics.N:M1[0]
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     ('GHC.Base.Just "children")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R [Duckling.Types.Node]>_R) <GHC.Prim.Any>_N))
                   ww4
                     `cast`
                   (Trans
                        (Sym (GHC.Generics.N:K1[0]
                                  <GHC.Generics.R>_P
                                  <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                  <GHC.Prim.Any>_P))
                        (Sym (GHC.Generics.N:M1[0]
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     ('GHC.Base.Just "rule")
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     (GHC.Base.Maybe
                                        Data.Text.Internal.Text)>_R) <GHC.Prim.Any>_N)) } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fNFDataRange :: Control.DeepSeq.NFData Duckling.Types.Range
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Types.$fNFDataRange_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Duckling.Types.Range>_N)) -}
83cec8727dae58e470d36f42a8a03ab2
  $fNFDataRange_$crnf :: Duckling.Types.Range -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*H,1*H)>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Duckling.Types.Range) ->
                 case eta of wild { Duckling.Types.Range g1 g2 ->
                 case g1 of tpl { GHC.Types.I# ipv ->
                 case g2 of tpl1 { GHC.Types.I# ipv1 -> GHC.Tuple.() } } }) -}
876893268fb58123567a47e946b5b6ba
  $fNFDataToken :: Control.DeepSeq.NFData Duckling.Types.Token
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Types.$fNFDataToken_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Duckling.Types.Token>_N)) -}
876893268fb58123567a47e946b5b6ba
  $fNFDataToken_$crnf :: Duckling.Types.Token -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 v ->
                 $dNFData `cast` (Control.DeepSeq.N:NFData[0] <a>_N) v }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate :: GHC.Classes.Ord Duckling.Types.Candidate
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Candidate
                  Duckling.Types.$fEqCandidate
                  Duckling.Types.$fOrdCandidate_$ccompare
                  Duckling.Types.$fOrdCandidate_$c<
                  Duckling.Types.$fOrdCandidate_$c<=
                  Duckling.Types.$fOrdCandidate_$c>
                  Duckling.Types.$fOrdCandidate_$c>=
                  Duckling.Types.$fOrdCandidate_$cmax
                  Duckling.Types.$fOrdCandidate_$cmin -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$c< ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)><S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$c<= ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)><S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$c> ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)><S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$c>= ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)><S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$ccompare ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)><S(S(SS(LSLL)LL)LL),1*U(1*U(1*U(1*U(U),1*U(U)),1*U(A,1*U,A,A),A,A),1*U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Candidate)
                   (w1 :: Duckling.Types.Candidate) ->
                 case w of ww { Duckling.Types.Candidate ww1 ww2 ww3 ->
                 case ww1 of ww4 { Duckling.Types.Resolved ww5 ww6 ww7 ww8 ->
                 case ww5 of ww9 { Duckling.Types.Range ww10 ww11 ->
                 case ww6 of ww12 { Duckling.Types.Node ww13 ww14 ww15 ww16 ->
                 case w1 of ww17 { Duckling.Types.Candidate ww18 ww19 ww20 ->
                 case ww18 of ww21 { Duckling.Types.Resolved ww22 ww23 ww24 ww25 ->
                 case ww22 of ww26 { Duckling.Types.Range ww27 ww28 ->
                 case ww23 of ww29 { Duckling.Types.Node ww30 ww31 ww32 ww33 ->
                 Duckling.Types.$w$ccompare
                   ww10
                   ww11
                   ww14
                   ww2
                   ww3
                   ww27
                   ww28
                   ww31
                   ww19
                   ww20 } } } } } } } }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$cmax ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> Duckling.Types.Candidate
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),U(U(U(U(U),U(U)),U(U,U,U,U),U,U),U(U),U)><S(S(SS(LSLL)LL)LL),U(U(U(U(U),U(U)),U(U,U,U,U),U,U),U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
f6c758a2821a058963006b0f0c0d4276
  $fOrdCandidate_$cmin ::
    Duckling.Types.Candidate
    -> Duckling.Types.Candidate -> Duckling.Types.Candidate
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SS(LSLL)LL)LL),U(U(U(U(U),U(U)),U(U,U,U,U),U,U),U(U),U)><S(S(SS(LSLL)LL)LL),U(U(U(U(U),U(U)),U(U,U,U,U),U,U),U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.Candidate)
                   (y :: Duckling.Types.Candidate) ->
                 case Duckling.Types.$fOrdCandidate_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange :: GHC.Classes.Ord Duckling.Types.Range
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Range
                  Duckling.Types.$fEqRange
                  Duckling.Types.$fOrdRange_$ccompare
                  Duckling.Types.$fOrdRange_$c<
                  Duckling.Types.$fOrdRange_$c<=
                  Duckling.Types.$fOrdRange_$c>
                  Duckling.Types.$fOrdRange_$c>=
                  Duckling.Types.$fOrdRange_$cmax
                  Duckling.Types.$fOrdRange_$cmin -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$c< ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c< ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$c<= ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c<= ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$c> ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c> ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$c>= ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$c>= ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$ccompare ::
    Duckling.Types.Range -> Duckling.Types.Range -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Duckling.Types.$w$ccompare1 ww4 ww2 ww9 ww7 } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$cmax ::
    Duckling.Types.Range
    -> Duckling.Types.Range -> Duckling.Types.Range
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> Duckling.Types.Range (GHC.Types.I# ww4) ww2
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> Duckling.Types.Range (GHC.Types.I# ww4) wild2
                             GHC.Types.True
                             -> Duckling.Types.Range (GHC.Types.I# ww9) wild3 } } } }
                   GHC.Types.True
                   -> Duckling.Types.Range (GHC.Types.I# ww9) ww7 } } } } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fOrdRange_$cmin ::
    Duckling.Types.Range
    -> Duckling.Types.Range -> Duckling.Types.Range
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.Range) (w1 :: Duckling.Types.Range) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww4 ww9) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww4 ww9) of wild1 {
                        GHC.Types.False -> Duckling.Types.Range (GHC.Types.I# ww9) ww7
                        GHC.Types.True
                        -> case ww2 of wild2 { GHC.Types.I# x ->
                           case ww7 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# x y) of wild4 {
                             GHC.Types.False -> Duckling.Types.Range (GHC.Types.I# ww9) wild3
                             GHC.Types.True
                             -> Duckling.Types.Range (GHC.Types.I# ww4) wild2 } } } }
                   GHC.Types.True
                   -> Duckling.Types.Range (GHC.Types.I# ww4) ww2 } } } } }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken :: GHC.Classes.Ord Duckling.Types.ResolvedToken
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.ResolvedToken
                  Duckling.Types.$fEqResolvedToken
                  Duckling.Types.$fOrdResolvedToken_$ccompare
                  Duckling.Types.$fOrdResolvedToken_$c<
                  Duckling.Types.$fOrdResolvedToken_$c<=
                  Duckling.Types.$fOrdResolvedToken_$c>
                  Duckling.Types.$fOrdResolvedToken_$c>=
                  Duckling.Types.$fOrdResolvedToken_$cmax
                  Duckling.Types.$fOrdResolvedToken_$cmin -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$c< ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)><S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$c<= ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)><S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$c> ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)><S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$c>= ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)><S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$ccompare ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)><S(S(S(S)L)LSL),1*U(1*U(1*U(U),1*U(U)),A,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Types.ResolvedToken)
                   (w1 :: Duckling.Types.ResolvedToken) ->
                 case w of ww { Duckling.Types.Resolved ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { Duckling.Types.Resolved ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { Duckling.Types.Range ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.I# ww19 ->
                 Duckling.Types.$w$ccompare2
                   ww9
                   ww7
                   ww3
                   ww4
                   ww19
                   ww17
                   ww13
                   ww14 } } } } } }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$cmax ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> Duckling.Types.ResolvedToken
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),U(U(U(U),U(U)),U,U,U)><S(S(S(S)L)LSL),U(U(U(U),U(U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
f8e17b0721b86350c49a27f32de48f63
  $fOrdResolvedToken_$cmin ::
    Duckling.Types.ResolvedToken
    -> Duckling.Types.ResolvedToken -> Duckling.Types.ResolvedToken
  {- Arity: 2,
     Strictness: <S(S(S(S)L)LSL),U(U(U(U),U(U)),U,U,U)><S(S(S(S)L)LSL),U(U(U(U),U(U)),U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Types.ResolvedToken)
                   (y :: Duckling.Types.ResolvedToken) ->
                 case Duckling.Types.$fOrdResolvedToken_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
f6c758a2821a058963006b0f0c0d4276
  $fShowCandidate :: GHC.Show.Show Duckling.Types.Candidate
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Candidate
                  Duckling.Types.$fShowCandidate_$cshowsPrec
                  Duckling.Types.$fShowCandidate_$cshow
                  Duckling.Types.$fShowCandidate_$cshowList -}
f6c758a2821a058963006b0f0c0d4276
  $fShowCandidate1 :: Duckling.Types.Candidate -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.Candidate) ->
                 case w of ww { Duckling.Types.Candidate ww1 ww2 ww3 ->
                 Duckling.Types.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
0c5605daa9516698a145a3e1360652b8
  $fShowCandidate10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "range = "#) -}
c764831dde558e985d90133baed44cc0
  $fShowCandidate11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Resolved {"#) -}
89f201f6148967f5ae57bd925e3f52e1
  $fShowCandidate12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RVal "#) -}
b1c7747debe0be84148c7d3331b0eb98
  $fShowCandidate2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Candidate "#) -}
d5a36419983c1d6834e4354884020506
  $fShowCandidate3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
91adfabdce3846e6e344eb0120d10cfb
  $fShowCandidate4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
99c1517ff860dc284575a0c85af5d3b5
  $fShowCandidate5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "isLatent = "#) -}
268f404015f496646c7d8f503616cca5
  $fShowCandidate6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rval = "#) -}
07c56873088b40a115fcce2539d61955
  $fShowCandidate7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "node = "#) -}
fd19429bbd108ffb8c825576421fded7
  $fShowCandidate8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
b1404d7d3f503c8c7d34c0ab718a6f91
  $fShowCandidate9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Range "#) -}
f6c758a2821a058963006b0f0c0d4276
  $fShowCandidate_$cshow ::
    Duckling.Types.Candidate -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U(U(U),U(U)),1*U(U(U(U),U(U)),1*U,U,1*U),1*U,U),1*U(U),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Candidate) ->
                 Duckling.Types.$fShowCandidate_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f6c758a2821a058963006b0f0c0d4276
  $fShowCandidate_$cshowList ::
    [Duckling.Types.Candidate] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.Candidate
                   Duckling.Types.$fShowCandidate1) -}
f6c758a2821a058963006b0f0c0d4276
  $fShowCandidate_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Candidate -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U(U(U),U(U)),1*U(U(U(U),U(U)),1*U,U,1*U),1*U,U),1*U(U),U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.Candidate) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Types.Candidate ww3 ww4 ww5 ->
                 Duckling.Types.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
876893268fb58123567a47e946b5b6ba
  $fShowDimension :: GHC.Show.Show (Duckling.Types.Dimension a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Duckling.Types.Dimension a)
                  (Duckling.Types.$fGShowTYPEDimension_$cshowsPrec @ a)
                  (Duckling.Types.$fGShowTYPEDimension_$cshow @ a)
                  (Duckling.Types.$fShowDimension_$cshowList @ a) -}
876893268fb58123567a47e946b5b6ba
  $fShowDimension1 ::
    Duckling.Types.Dimension a -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a
                   (x :: Duckling.Types.Dimension a)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Duckling.Types.$fGShowTYPEDimension_$cshow @ a x)
                   s) -}
876893268fb58123567a47e946b5b6ba
  $fShowDimension_$cshowList ::
    [Duckling.Types.Dimension a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a
                   (ls :: [Duckling.Types.Dimension a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Duckling.Types.Dimension a)
                   (Duckling.Types.$fShowDimension1 @ a)
                   ls
                   s) -}
4e09934b2257665727a4b63a0fa492ce
  $fShowEntity :: GHC.Show.Show Duckling.Types.Entity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Entity
                  Duckling.Types.$fShowEntity_$cshowsPrec
                  Duckling.Types.$fShowEntity_$cshow
                  Duckling.Types.$fShowEntity_$cshowList -}
4e09934b2257665727a4b63a0fa492ce
  $fShowEntity1 :: Duckling.Types.Entity -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.Entity) ->
                 case w of ww { Duckling.Types.Entity ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Duckling.Types.$w$cshowsPrec5 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
4e09934b2257665727a4b63a0fa492ce
  $fShowEntity_$cshow :: Duckling.Types.Entity -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),U(U,U,U),1*U,U(U),U(U),U,1*U(U(U(U),U(U)),1*U,U,1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Entity) ->
                 Duckling.Types.$fShowEntity_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4e09934b2257665727a4b63a0fa492ce
  $fShowEntity_$cshowList ::
    [Duckling.Types.Entity] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.Entity
                   Duckling.Types.$fShowEntity1) -}
4e09934b2257665727a4b63a0fa492ce
  $fShowEntity_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Entity -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),U(U,U,U),1*U,U(U),U(U),U,1*U(U(U(U),U(U)),1*U,U,1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.Entity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Types.Entity ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Types.$w$cshowsPrec5
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fShowNode :: GHC.Show.Show Duckling.Types.Node
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Node
                  Duckling.Types.$fShowNode_$cshowsPrec
                  Duckling.Types.$fShowNode_$cshow
                  Duckling.Types.$fShowNode_$cshowList -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fShowNode1 :: Duckling.Types.Node -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.Node) ->
                 case w of ww { Duckling.Types.Node ww1 ww2 ww3 ww4 ->
                 Duckling.Types.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fShowNode_$cshow :: Duckling.Types.Node -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U(U),U(U)),1*U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Node) ->
                 Duckling.Types.$fShowNode_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fShowNode_$cshowList :: [Duckling.Types.Node] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.Node
                   Duckling.Types.$fShowNode1) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $fShowNode_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Node -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),1*U,U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.Node) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Types.Node ww3 ww4 ww5 ww6 ->
                 Duckling.Types.$w$cshowsPrec4 ww1 ww3 ww4 ww5 ww6 } }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fShowRange :: GHC.Show.Show Duckling.Types.Range
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Range
                  Duckling.Types.$fShowRange_$cshowsPrec
                  Duckling.Types.$fShowRange_$cshow
                  Duckling.Types.$fShowRange_$cshowList -}
83cec8727dae58e470d36f42a8a03ab2
  $fShowRange1 :: Duckling.Types.Range -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Types.Range)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Duckling.Types.Range ww1 ww2 ->
                 Duckling.Types.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
83cec8727dae58e470d36f42a8a03ab2
  $fShowRange_$cshow :: Duckling.Types.Range -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Range) ->
                 Duckling.Types.$fShowRange_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
83cec8727dae58e470d36f42a8a03ab2
  $fShowRange_$cshowList :: [Duckling.Types.Range] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.Range
                   Duckling.Types.$fShowRange1) -}
83cec8727dae58e470d36f42a8a03ab2
  $fShowRange_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Range -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Types.Range)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Types.Range ww3 ww4 ->
                 Duckling.Types.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
f8e17b0721b86350c49a27f32de48f63
  $fShowResolvedToken :: GHC.Show.Show Duckling.Types.ResolvedToken
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.ResolvedToken
                  Duckling.Types.$fShowResolvedToken_$cshowsPrec
                  Duckling.Types.$fShowResolvedToken_$cshow
                  Duckling.Types.$fShowResolvedToken_$cshowList -}
f8e17b0721b86350c49a27f32de48f63
  $fShowResolvedToken1 ::
    Duckling.Types.ResolvedToken -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.ResolvedToken) ->
                 case w of ww { Duckling.Types.Resolved ww1 ww2 ww3 ww4 ->
                 Duckling.Types.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 }) -}
f8e17b0721b86350c49a27f32de48f63
  $fShowResolvedToken_$cshow ::
    Duckling.Types.ResolvedToken -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U(U),U(U)),1*U(U(U(U),U(U)),1*U,U,1*U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.ResolvedToken) ->
                 Duckling.Types.$fShowResolvedToken_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f8e17b0721b86350c49a27f32de48f63
  $fShowResolvedToken_$cshowList ::
    [Duckling.Types.ResolvedToken] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.ResolvedToken
                   Duckling.Types.$fShowResolvedToken1) -}
f8e17b0721b86350c49a27f32de48f63
  $fShowResolvedToken_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.ResolvedToken -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U(U),U(U)),1*U(U(U(U),U(U)),1*U,U,1*U),1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.ResolvedToken) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Types.Resolved ww3 ww4 ww5 ww6 ->
                 Duckling.Types.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 } }) -}
f91f659dac2427379aea524436688c15
  $fShowResolvedVal :: GHC.Show.Show Duckling.Types.ResolvedVal
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.ResolvedVal
                  Duckling.Types.$fShowResolvedVal_$cshowsPrec
                  Duckling.Types.$fShowResolvedVal_$cshow
                  Duckling.Types.$fShowResolvedVal_$cshowList -}
f91f659dac2427379aea524436688c15
  $fShowResolvedVal1 :: Duckling.Types.ResolvedVal -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.ResolvedVal) ->
                 Duckling.Types.$w$cshowsPrec3 0# w) -}
f91f659dac2427379aea524436688c15
  $fShowResolvedVal_$cshow ::
    Duckling.Types.ResolvedVal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Duckling.Types.ResolvedVal) ->
                 case x of wild { Duckling.Types.RVal a $dResolve $dEq $dShow $dToJSON b1 b2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Types.$fShowCandidate12
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Duckling.Types.$fGShowTYPEDimension_$cshow @ a b1)
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Show.showsPrec
                            @ (Duckling.Resolve.ResolvedValue a)
                            (Duckling.Resolve.$p2Resolve @ a $dResolve)
                            Duckling.Types.$fShowCandidate3
                            b2
                            (GHC.Types.[] @ GHC.Types.Char)))) }) -}
f91f659dac2427379aea524436688c15
  $fShowResolvedVal_$cshowList ::
    [Duckling.Types.ResolvedVal] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.ResolvedVal
                   Duckling.Types.$fShowResolvedVal1) -}
f91f659dac2427379aea524436688c15
  $fShowResolvedVal_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.ResolvedVal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.ResolvedVal) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Types.$w$cshowsPrec3 ww1 w1 }) -}
876893268fb58123567a47e946b5b6ba
  $fShowRule :: GHC.Show.Show Duckling.Types.Rule
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Rule
                  Duckling.Types.$fShowRule_$cshowsPrec
                  Duckling.Types.$fShowRule_$cshow
                  Duckling.Types.$fShowRule_$cshowList -}
876893268fb58123567a47e946b5b6ba
  $fShowRule1 ::
    Duckling.Types.Rule -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Duckling.Types.Rule)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Duckling.Types.Rule name1 ds ds1 ->
                 case Data.Text.Show.$w$cshow name1 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww1 ww2)
                   s } }) -}
876893268fb58123567a47e946b5b6ba
  $fShowRule_$cshow :: Duckling.Types.Rule -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),A,A)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Rule) ->
                 case ds of wild { Duckling.Types.Rule name1 ds1 ds2 ->
                 Data.Text.Show.$fShowText_$cshow name1 }) -}
876893268fb58123567a47e946b5b6ba
  $fShowRule_$cshowList :: [Duckling.Types.Rule] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Duckling.Types.Rule])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Duckling.Types.Rule
                   Duckling.Types.$fShowRule1
                   ls
                   s) -}
876893268fb58123567a47e946b5b6ba
  $fShowRule_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Rule -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U(U,U,U),A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Duckling.Types.Rule)
                   (s :: GHC.Base.String) ->
                 case x of wild { Duckling.Types.Rule name1 ds1 ds2 ->
                 case Data.Text.Show.$w$cshow name1 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (GHC.Types.: @ GHC.Types.Char ww1 ww2))
                   s } }) -}
876893268fb58123567a47e946b5b6ba
  $fShowToken :: GHC.Show.Show Duckling.Types.Token
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Token
                  Duckling.Types.$fShowToken_$cshowsPrec
                  Duckling.Types.$fShowToken_$cshow
                  Duckling.Types.$fShowToken_$cshowList -}
876893268fb58123567a47e946b5b6ba
  $fShowToken1 :: Duckling.Types.Token -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Types.Token) ->
                 Duckling.Types.$w$cshowsPrec6 0# w) -}
5aba64376e2d8dfe959aa22270a1dc25
  $fShowToken2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Token "#) -}
876893268fb58123567a47e946b5b6ba
  $fShowToken_$cshow :: Duckling.Types.Token -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 case x of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData b1 b2 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Types.$fShowToken2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      (Duckling.Types.$fGShowTYPEDimension_$cshow @ a b1)
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showSpace1
                         (GHC.Show.showsPrec
                            @ a
                            $dShow
                            Duckling.Types.$fShowCandidate3
                            b2
                            (GHC.Types.[] @ GHC.Types.Char)))) }) -}
876893268fb58123567a47e946b5b6ba
  $fShowToken_$cshowList :: [Duckling.Types.Token] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Types.Token
                   Duckling.Types.$fShowToken1) -}
876893268fb58123567a47e946b5b6ba
  $fShowToken_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Types.Token -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Types.Token) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Types.$w$cshowsPrec6 ww1 w1 }) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension ::
    TextShow.Classes.TextShow (Duckling.Types.Dimension a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Duckling.Types.Dimension a)
                  (Duckling.Types.$fTextShowDimension_$cshowbPrec @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowb @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowbList @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowtPrec @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowt @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowtList @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowtlPrec @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowtl @ a)
                  (Duckling.Types.$fTextShowDimension_$cshowtlList @ a) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowb ::
    Duckling.Types.Dimension a -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a (d :: Duckling.Types.Dimension a) ->
                 let {
                   str :: GHC.Base.String
                   = Duckling.Types.$fGShowTYPEDimension_$cshow @ a d
                 } in
                 (\ @ s
                    (k :: Data.Text.Internal.Builder.Buffer s
                          -> GHC.ST.ST s [Data.Text.Internal.Text])
                    (ds :: Data.Text.Internal.Builder.Buffer s)
                    (eta :: GHC.Prim.State# s)[OneShot] ->
                  case ds of wild { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                  letrec {
                    $wloop :: GHC.Prim.MutableByteArray# s
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> [GHC.Types.Char]
                              -> GHC.Prim.State# s
                              -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                      {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><S,U>,
                         Inline: [0] -}
                    = \ (ww :: GHC.Prim.MutableByteArray# s)
                        (ww1 :: GHC.Prim.Int#)
                        (ww2 :: GHC.Prim.Int#)
                        (ww3 :: GHC.Prim.Int#)
                        (w :: [GHC.Types.Char])
                        (w1 :: GHC.Prim.State# s)[OneShot] ->
                      case w of wild1 {
                        []
                        -> (k (Data.Text.Internal.Builder.Buffer @ s ww ww1 ww2 ww3))
                             `cast`
                           (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                             w1
                        : ipv4 ipv5
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww3 1#) of wild2 {
                             GHC.Types.False
                             -> case ipv4 of wild3 { GHC.Types.C# c# ->
                                let {
                                  x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x 65536#) of wild4 {
                                  GHC.Types.False
                                  -> let {
                                       i# :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                     } in
                                     let {
                                       x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536#
                                     } in
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            i#
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                     55296#)))
                                            w1 of s2# { DEFAULT ->
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# i# 1#)
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                            s2# of s2#1 { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 2#)
                                       (GHC.Prim.-# ww3 2#)
                                       ipv5
                                       s2#1 } }
                                  GHC.Types.True
                                  -> case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# ww1 ww2)
                                            (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                            w1 of s2# { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 1#)
                                       (GHC.Prim.-# ww3 1#)
                                       ipv5
                                       s2# } } }
                             GHC.Types.True
                             -> case GHC.Prim.unsafeFreezeByteArray#
                                       @ s
                                       ww
                                       w1 of ds2 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.newByteArray#
                                       @ s
                                       224#
                                       ipv6 of ds3 { (#,#) ipv8 ipv9 ->
                                (# ipv8,
                                   GHC.Types.:
                                     @ Data.Text.Internal.Text
                                     (Data.Text.Internal.Text ipv7 ww1 ww2)
                                     (case $wloop
                                             ipv9
                                             0#
                                             0#
                                             112#
                                             wild1
                                             ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                      ipv11 }) #) } } } }
                  } in
                  $wloop dt dt1 dt2 dt3 str eta })
                   `cast`
                 (Trans
                      (forall (s :: <*>_N).
                       <Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                       ->_R <Data.Text.Internal.Builder.Buffer s>_R
                       ->_R Sym (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                      (Sym (Data.Text.Internal.Builder.N:Builder[0])))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowbList ::
    [Duckling.Types.Dimension a] -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: [Duckling.Types.Dimension a]) ->
                 TextShow.Classes.showbListWith
                   @ (Duckling.Types.Dimension a)
                   (Duckling.Types.$fTextShowDimension_$cshowb @ a)
                   eta) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowbPrec ::
    GHC.Types.Int
    -> Duckling.Types.Dimension a -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: GHC.Types.Int) (eta :: Duckling.Types.Dimension a) ->
                 Duckling.Types.$fTextShowDimension_$cshowb @ a eta) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowt ::
    Duckling.Types.Dimension a -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a (x :: Duckling.Types.Dimension a) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Duckling.Types.$fTextShowDimension_$cshowb @ a x)))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowtList ::
    [Duckling.Types.Dimension a] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: [Duckling.Types.Dimension a]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Duckling.Types.$fTextShowDimension_$cshowtlList @ a eta))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowtPrec ::
    GHC.Types.Int
    -> Duckling.Types.Dimension a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (p :: GHC.Types.Int) (x :: Duckling.Types.Dimension a) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Duckling.Types.$fTextShowDimension_$cshowtlPrec @ a p x))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowtl ::
    Duckling.Types.Dimension a -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Duckling.Types.Dimension a) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Duckling.Types.$fTextShowDimension_$cshowb @ a x)) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowtlList ::
    [Duckling.Types.Dimension a] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (eta :: [Duckling.Types.Dimension a]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (TextShow.Classes.showbListWith
                      @ (Duckling.Types.Dimension a)
                      (Duckling.Types.$fTextShowDimension_$cshowb @ a)
                      eta)) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowDimension_$cshowtlPrec ::
    GHC.Types.Int
    -> Duckling.Types.Dimension a -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (p :: GHC.Types.Int) (x :: Duckling.Types.Dimension a) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Duckling.Types.$fTextShowDimension_$cshowb @ a x)) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome ::
    TextShow.Classes.TextShow (Data.Some.Some Duckling.Types.Dimension)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Some.Some Duckling.Types.Dimension)
                  Duckling.Types.$fTextShowSome_$cshowbPrec
                  Duckling.Types.$fTextShowSome_$cshowb
                  Duckling.Types.$fTextShowSome_$cshowbList
                  Duckling.Types.$fTextShowSome_$cshowtPrec
                  Duckling.Types.$fTextShowSome_$cshowt
                  Duckling.Types.$fTextShowSome_$cshowtList
                  Duckling.Types.$fTextShowSome_$cshowtlPrec
                  Duckling.Types.$fTextShowSome_$cshowtl
                  Duckling.Types.$fTextShowSome_$cshowtlList -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowb ::
    Data.Some.Some Duckling.Types.Dimension
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Some.Some Duckling.Types.Dimension) ->
                 case ds of wild { Data.Some.This t d ->
                 Duckling.Types.$fTextShowDimension_$cshowb @ t d }) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowbList ::
    [Data.Some.Some Duckling.Types.Dimension]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Data.Some.Some Duckling.Types.Dimension]) ->
                 TextShow.Classes.showbListWith
                   @ (Data.Some.Some Duckling.Types.Dimension)
                   Duckling.Types.$fTextShowSome_$cshowb
                   eta) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowbPrec ::
    GHC.Types.Int
    -> Data.Some.Some Duckling.Types.Dimension
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int)
                   (eta :: Data.Some.Some Duckling.Types.Dimension) ->
                 Duckling.Types.$fTextShowSome_$cshowb eta) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowt ::
    Data.Some.Some Duckling.Types.Dimension -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Data.Some.Some Duckling.Types.Dimension) ->
                 case x of wild { Data.Some.This t d ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Duckling.Types.$fTextShowDimension_$cshowb @ t d))) }) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowtList ::
    [Data.Some.Some Duckling.Types.Dimension]
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Data.Some.Some Duckling.Types.Dimension]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Duckling.Types.$fTextShowSome_$cshowtlList eta))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowtPrec ::
    GHC.Types.Int
    -> Data.Some.Some Duckling.Types.Dimension
    -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int)
                   (x :: Data.Some.Some Duckling.Types.Dimension) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Duckling.Types.$fTextShowSome_$cshowtlPrec p x))) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowtl ::
    Data.Some.Some Duckling.Types.Dimension
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Some.Some Duckling.Types.Dimension) ->
                 case x of wild { Data.Some.This t d ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Duckling.Types.$fTextShowDimension_$cshowb @ t d) }) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowtlList ::
    [Data.Some.Some Duckling.Types.Dimension]
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Data.Some.Some Duckling.Types.Dimension]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (TextShow.Classes.showbListWith
                      @ (Data.Some.Some Duckling.Types.Dimension)
                      Duckling.Types.$fTextShowSome_$cshowb
                      eta)) -}
876893268fb58123567a47e946b5b6ba
  $fTextShowSome_$cshowtlPrec ::
    GHC.Types.Int
    -> Data.Some.Some Duckling.Types.Dimension
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int)
                   (x :: Data.Some.Some Duckling.Types.Dimension) ->
                 case x of wild { Data.Some.This t d ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Duckling.Types.$fTextShowDimension_$cshowb @ t d) }) -}
4e09934b2257665727a4b63a0fa492ce
  $fToJSONEntity ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Types.Entity
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Types.Entity
                  Duckling.Types.$fToJSONEntity_$ctoJSON
                  Duckling.Types.$fToJSONEntity_$ctoEncoding
                  Duckling.Types.$fToJSONEntity_$ctoJSONList
                  Duckling.Types.$fToJSONEntity_$ctoEncodingList -}
37074a73d33dfedf29ba48d34d4a7bf3
  $fToJSONEntity1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "latent"#) -}
2bd5185cecb636b48231ef187ece17ba
  $fToJSONEntity2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "end"#) -}
ad8aa1ed16d3dced10ff7fa24da827ec
  $fToJSONEntity3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "start"#) -}
94d08fdbecd86c5827333aa5af67492f
  $fToJSONEntity4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
ff629f4eba650f72415349661190eccc
  $fToJSONEntity5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "body"#) -}
5360bde88c94a8ec5be9087c831d73d1
  $fToJSONEntity6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "dim"#) -}
4e09934b2257665727a4b63a0fa492ce
  $fToJSONEntity_$ctoEncoding ::
    Duckling.Types.Entity -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1,
     Strictness: <S(LLSLLLL),1*U(U,U,1*U,1*U(U),1*U(U),U,A)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Types.Entity) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Types.$fToJSONEntity_$ctoJSON eta)) -}
4e09934b2257665727a4b63a0fa492ce
  $fToJSONEntity_$ctoEncodingList ::
    [Duckling.Types.Entity] -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Types.Entity]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Types.$fToJSONEntity_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Types.Entity
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Types.Entity)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Types.$fToJSONEntity_$ctoJSON v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Types.Entity>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
4e09934b2257665727a4b63a0fa492ce
  $fToJSONEntity_$ctoJSON ::
    Duckling.Types.Entity -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S(LLSLLLL),1*U(U,U,1*U,1*U(U),1*U(U),U,A)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Types.Entity) ->
                 case w of ww { Duckling.Types.Entity ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case Duckling.Types.$w$ctoJSON
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6 of ww8 { Unit# ww9 ->
                 Data.Aeson.Types.Internal.Object ww9 } }) -}
4e09934b2257665727a4b63a0fa492ce
  $fToJSONEntity_$ctoJSONList ::
    [Duckling.Types.Entity] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Types.Entity]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Types.Entity
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Types.Entity
                                       c
                                       Duckling.Types.$fToJSONEntity_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
102ccefa4a424d6599500390696c1cf1
  $tc'AmountOfMoney :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8303548703870188121##
                   5188511497685569520##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'AmountOfMoney1) -}
80ebdde3a2759ac3baa2d1d5581b052f
  $tc'AmountOfMoney1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AmountOfMoney"#) -}
a1488382bc91bd63f4dc6b7e18c68410
  $tc'C:CustomDimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5849410876928469016##
                   1718856421038659513##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'C:CustomDimension1) -}
e6414204e7cdff2ed947c32ba2461feb
  $tc'C:CustomDimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:CustomDimension"#) -}
abf4c4a6cd9715864a6c289c8c2eda2b
  $tc'Candidate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14730014938659800758##
                   2900527505772471348##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Candidate1) -}
0a325d17f8b5e83ddfc9b20d330dfe8f
  $tc'Candidate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Candidate"#) -}
934fd095bbfadb044b26de17f2c5c4bb
  $tc'CreditCardNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7910447172287319836##
                   5156197268838817149##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'CreditCardNumber1) -}
b1be5c66e128fd323fda86baa9317296
  $tc'CreditCardNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CreditCardNumber"#) -}
5d12f7151fe537c1afbefa6d1395f3fc
  $tc'CustomDimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18436208454299463997##
                   11666830820380214988##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'CustomDimension1) -}
48ae0e59cfbe98fca79e23372fc42574
  $tc'CustomDimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CustomDimension"#) -}
79fe7a3acf11ffe003500c9114921d92
  $tc'Distance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4029289880651210023##
                   9790649367384659104##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Distance1) -}
d0fb5b64037e1a4a024774efd6095b1b
  $tc'Distance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Distance"#) -}
45df1874e36d3beeddc27fc2c799ec2e
  $tc'Duration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7498489247642587098##
                   4106008926898619702##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Duration1) -}
90679facbaf13b5281af59f28ac12845
  $tc'Duration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Duration"#) -}
17f11ff632564e175e622c61376d3878
  $tc'Email :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16790203298673579196##
                   7886102874953230377##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Email1) -}
44933a31d739c8c2c875bdaea72626d2
  $tc'Email1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Email"#) -}
857371dc27e03dfa7d3d7361d0aacf52
  $tc'Entity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   39270728652634746##
                   7627931757314947558##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Entity1) -}
da54328a8a13e985296f7b80fa4bfb13
  $tc'Entity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Entity"#) -}
74e75202b7508f00eb56ebbdfa8bb556
  $tc'Gender :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14333445785090558405##
                   12061961098323647018##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Gender1) -}
65ddc16690dd0209128944bd61e8f6c1
  $tc'Gender1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Gender"#) -}
d26d91d737682e420da551e359936c08
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2182310744049328649##
                   5604610040469010538##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Identity1) -}
0776b204afc2c3f8deb7dc0f1a767b0e
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
e66946488a7b8da0a6d75523add2a351
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6781510553476115880##
                   2882144038443009121##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Node1) -}
18d7b4a7d25db1bf6031c6f9a7867d31
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
b61e6cd6d4eab69ce1eddf3ad5cddb07
  $tc'Numeral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   397541648946831677##
                   18125878426847711997##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Numeral1) -}
0a68c18e845da8a2efbcd925a7c0844c
  $tc'Numeral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Numeral"#) -}
6610efb7694b9607c75762183db46df7
  $tc'Ordinal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2422411346961294835##
                   7616095214914259992##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Ordinal1) -}
3a4877e66d9007bea619e766b79297d5
  $tc'Ordinal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Ordinal"#) -}
2ef18fb5dd0f6b39dd74a925347d070f
  $tc'PhoneNumber :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14893794767394521624##
                   14635388327478342988##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'PhoneNumber1) -}
2ac958d8bca6e1b0b4fcaa85b62fd032
  $tc'PhoneNumber1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PhoneNumber"#) -}
da2a57ad9214fcf5b179b2d762713469
  $tc'Predicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3438183695979783430##
                   16714323994392160081##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Predicate1) -}
896567587fc779fb677ff7a07ed737a2
  $tc'Predicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Predicate"#) -}
b9dcbffe6bd29b2c94363373bc0f9b98
  $tc'Quantity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7012666415620279678##
                   10806025266985010948##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Quantity1) -}
5ffc7cc6731412b2c3cbd701551cc9a0
  $tc'Quantity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Quantity"#) -}
faf2924ecf635fe3eaad02056695674c
  $tc'RVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9263529997172000307##
                   5798288422264371821##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'RVal1) -}
83582c8eaa0320ce03c855f15b7a6792
  $tc'RVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RVal"#) -}
17340ff2b941ddf2366eb7dc2b10f418
  $tc'Range :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17203392173699260900##
                   5433169551452258167##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Range1) -}
a2ef9b2bec0c6bddd23ed2f9b12aec4f
  $tc'Range1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Range"#) -}
f151fbc06cb2b242e42d398172290b2a
  $tc'Regex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   205686105332085217##
                   17047188184283530123##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Regex1) -}
1606db4cfe34e6ceae302abe6d864922
  $tc'Regex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Regex"#) -}
32b748ac5eeca95e4a52c40bb42dbafc
  $tc'RegexMatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4781872490689786415##
                   1489873981359416274##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'RegexMatch1) -}
f3f8655ce3dc899a0e93d5590bae2736
  $tc'RegexMatch1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RegexMatch"#) -}
c94e7beee906721b3c45dc9741473963
  $tc'Resolved :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17215271448270803700##
                   15454573842809712355##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Resolved1) -}
bb335b809b61a367323a3568343c7986
  $tc'Resolved1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Resolved"#) -}
6b7a1bde087dc68c8ffc38c416c4e05f
  $tc'Rule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3934291564829312121##
                   12450489671440353516##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Rule1) -}
42bbbe30a2ab9a1af0ad13191ef2958e
  $tc'Rule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Rule"#) -}
49d56ad332043caaf5005af458cac817
  $tc'Temperature :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9053785834073999053##
                   7041487634245602789##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Temperature1) -}
d22b8c7c2747a0a3402e0bb66c9880dc
  $tc'Temperature1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Temperature"#) -}
4322d6b0ecbb5a24b8a87d63fb3df239
  $tc'Time :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18058572106562379717##
                   13410499998369965182##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Time1) -}
2edea9167cbc9e6d5b2351b1bb443637
  $tc'Time1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Time"#) -}
a1f689b1e7954a29c41fcfe3dce26adf
  $tc'TimeGrain :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9338988547213178187##
                   17969507445093941862##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'TimeGrain1) -}
254e3083e753d34820ee2e6272b3e904
  $tc'TimeGrain1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeGrain"#) -}
6a38faa4ed0591f633b8462ca7af53d6
  $tc'Token :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   501654377123692794##
                   15793799465210452220##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Token1) -}
a529fe19b0039db8c37c226b573ae15b
  $tc'Token1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Token"#) -}
85ce6b2ad81019e22e58a2aa41bafb4a
  $tc'Url :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3492963240896646558##
                   13581668233271376814##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Url1) -}
683f99330796979fa40287378f56e413
  $tc'Url1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Url"#) -}
4130e9713fab0a2eb6754864c0ca585e
  $tc'Volume :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4967542666646184208##
                   11165884086408391469##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Volume1) -}
409c4206b4d5428dc4b8795dda87614c
  $tc'Volume1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Volume"#) -}
8525aebb9136434efd7f91e4f1c08c2d
  $tc'Weight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17245898266867629203##
                   11628646626511006077##
                   Duckling.Types.$trModule
                   Duckling.Types.$tc'Weight1) -}
3bb01ee2e1c41ee279418fb753bf26c2
  $tc'Weight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Weight"#) -}
dce1740b4a4b41e58c2cbe516f7896cc
  $tcCandidate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   423199554177320714##
                   7192816937760762582##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcCandidate1) -}
3dcda3b3c1be99fdcbb84827a9fe029b
  $tcCandidate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Candidate"#) -}
a36b595431235659c238b3ead5149b93
  $tcCustomDimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13457243544267184111##
                   13780382142569032554##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcCustomDimension1) -}
a22a76deecfb042ba883809c4e9e9851
  $tcCustomDimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CustomDimension"#) -}
1b3a93d988e57fc610e5b2ea00e603b2
  $tcDimension :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7988868784775877595##
                   17546178533005183119##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcDimension1) -}
d9956c2de232be233dc21c3695f75dd2
  $tcDimension1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Dimension"#) -}
f4a30d777dd7dfdf30bb559d9db180db
  $tcEntity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2211511951858832421##
                   3372180927388023148##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcEntity1) -}
6b1b90f24f5d468f6584260ec4f59df6
  $tcEntity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Entity"#) -}
fc6f7c655b8ce5ea4dce5c4295e512fb
  $tcNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6548357726937593610##
                   11976881866744556224##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcNode1) -}
bcc07d116fadc3142bc782994d258c57
  $tcNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Node"#) -}
38e96e1edc94d87582a8978cbb4f4757
  $tcPatternItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7063200866249860159##
                   8201090700264563325##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcPatternItem1) -}
af760915f1f4fe3fa72bc59af1825176
  $tcPatternItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PatternItem"#) -}
383b580b4595789b83a0d0489a0b96ea
  $tcRange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12678258795292503586##
                   16235949983898251758##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcRange1) -}
1150711794fc2a2cb22c20675e35af1e
  $tcRange1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Range"#) -}
ef4a845c1fbe33eaae3000cc2d2d4849
  $tcResolvedToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6266728035682220976##
                   10323320994801547830##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcResolvedToken1) -}
de01fc7b44fa9516dbb8774b8b333c03
  $tcResolvedToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ResolvedToken"#) -}
bf0cba7d3b1bde6418653feea510d9dd
  $tcResolvedVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5045748584633252134##
                   13088495326276874814##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcResolvedVal1) -}
1155a9fad30f0ab15db6f841d8a9f7d4
  $tcResolvedVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ResolvedVal"#) -}
b4b6783698bc3adebecf9430793220d2
  $tcRule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3499574772896119481##
                   15891007721635612476##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcRule1) -}
cba75ffb40e9ce20bf07653c1858357b
  $tcRule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rule"#) -}
2fd74a15c86303295ea75fad6b60191f
  $tcToken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   26676961071577177##
                   13718000202038871922##
                   Duckling.Types.$trModule
                   Duckling.Types.$tcToken1) -}
400052323d6c68eea5c384c38e61b345
  $tcToken1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Token"#) -}
ccc5e6cc0464c43bdeb98aa770b18f60
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Types.$trModule2
                   Duckling.Types.$trModule1) -}
2016ee347f17bcc5a1118bdc95be09c1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Types"#) -}
80e1d08f17362e37c7297c5f057e2776
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $w$c/= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U><S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Types.Token)
                   (ww3 :: [Duckling.Types.Node])
                   (ww4 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: Duckling.Types.Token)
                   (ww8 :: [Duckling.Types.Node])
                   (ww9 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 case Duckling.Types.$w$c==2
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8
                        ww9 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6a11e3244e0e88c4c6fbca69b2d7dd67
  $w$c/=1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
32d4f7b72c89e7395517d7b629fc0e9e
  $w$c< ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.ltInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
8175c413ff21144433bc8767c0c37432
  $w$c<= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.leInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.True }) -}
1cecf0ef507835052a37a38252e3e68e
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Node
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Types.Double
    -> GHC.Types.Bool
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Node
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Types.Double
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 14, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><L,1*U><L,1*U><L,1*U(U)><L,1*U><S,U><L,1*U(U)><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><L,1*U><L,1*U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Types.Node)
                   (ww3 :: Duckling.Types.ResolvedVal)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: GHC.Types.Double)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: GHC.Types.Int)
                   (ww9 :: Duckling.Types.Node)
                   (ww10 :: Duckling.Types.ResolvedVal)
                   (ww11 :: GHC.Types.Bool)
                   (ww12 :: GHC.Types.Double)
                   (ww13 :: GHC.Types.Bool) ->
                 case Duckling.Types.$w$c==1
                        ww
                        ww1
                        ww2
                        ww3
                        ww4
                        ww7
                        ww8
                        ww9
                        ww10
                        ww11 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww5 of wild1 { GHC.Types.D# x ->
                      case ww12 of wild2 { GHC.Types.D# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.$fEqBool_$c== ww6 ww13 } } } }) -}
7c92c1648fabd063d8cf54d3e8f5e193
  $w$c==1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Node
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Node
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><L,1*U><L,1*U><S,U><L,1*U(U)><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Types.Node)
                   (ww3 :: Duckling.Types.ResolvedVal)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: Duckling.Types.Node)
                   (ww8 :: Duckling.Types.ResolvedVal)
                   (ww9 :: GHC.Types.Bool) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww5) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww6 of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of ww10 { Duckling.Types.Node ww11 ww12 ww13 ww14 ->
                           case ww11 of ww15 { Duckling.Types.Range ww16 ww17 ->
                           case ww16 of ww18 { GHC.Types.I# ww19 ->
                           case ww7 of ww20 { Duckling.Types.Node ww21 ww22 ww23 ww24 ->
                           case ww21 of ww25 { Duckling.Types.Range ww26 ww27 ->
                           case ww26 of ww28 { GHC.Types.I# ww29 ->
                           case Duckling.Types.$w$c==2
                                  ww19
                                  ww17
                                  ww12
                                  ww13
                                  ww14
                                  ww29
                                  ww27
                                  ww22
                                  ww23
                                  ww24 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case Duckling.Types.$fEqCandidate_$c==1 ww3 ww8 of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> GHC.Classes.$fEqBool_$c== ww4 ww9 } } } } } } } } } } } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $w$c==2 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U><S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
d313d7f07fd2f82a5c6f75fa7a7db111
  $w$c==3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Types.Node
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Types.Node
    -> GHC.Types.Bool
  {- Arity: 18, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)><L,U><L,U><S,U><L,1*U(U,U,U)><L,1*U><L,1*U(U)><L,1*U(U)><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Data.Text.Internal.Text)
                   (ww4 :: Duckling.Types.ResolvedVal)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Bool)
                   (ww8 :: Duckling.Types.Node)
                   (ww9 :: GHC.Prim.ByteArray#)
                   (ww10 :: GHC.Prim.Int#)
                   (ww11 :: GHC.Prim.Int#)
                   (ww12 :: Data.Text.Internal.Text)
                   (ww13 :: Duckling.Types.ResolvedVal)
                   (ww14 :: GHC.Types.Int)
                   (ww15 :: GHC.Types.Int)
                   (ww16 :: GHC.Types.Bool)
                   (ww17 :: Duckling.Types.Node) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww11) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww9
                             (GHC.Prim.int2Word# ww10)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild { (#,#) ds11 ds12 ->
                      case GHC.Prim.narrow32Int# ds12 of wild1 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case ww3 of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case ww12 of wild4 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# dt2 dt5) of wild5 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.ByteArray#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.Word#
                                                                                                                   -> GHC.Prim.State#
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                   -> (# GHC.Prim.State#
                                                                                                                           GHC.Prim.RealWorld,
                                                                                                                         GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild6 { (#,#) ds1 ds2 ->
                                case GHC.Prim.narrow32Int# ds2 of wild7 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case Duckling.Types.$fEqCandidate_$c==1 ww4 ww13 of wild8 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case ww5 of wild9 { GHC.Types.I# x ->
                                          case ww14 of wild10 { GHC.Types.I# y ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x y) of wild11 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case ww6 of wild12 { GHC.Types.I# x1 ->
                                               case ww15 of wild13 { GHC.Types.I# y1 ->
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==# x1 y1) of wild14 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case ww7 of wild15 {
                                                      GHC.Types.False
                                                      -> case ww16 of wild16 {
                                                           GHC.Types.False
                                                           -> Duckling.Types.$fEqEntity_$c==1
                                                                ww8
                                                                ww17
                                                           GHC.Types.True -> GHC.Types.False }
                                                      GHC.Types.True
                                                      -> case ww16 of wild16 {
                                                           GHC.Types.False -> GHC.Types.False
                                                           GHC.Types.True
                                                           -> Duckling.Types.$fEqEntity_$c==1
                                                                ww8
                                                                ww17 } } } } } } } } } } } } } } } } }) -}
1c06e329c3feeafe776dededb145e8db
  $w$c==4 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqInt ww1 ww3 }) -}
86f4e16801fe77b8953810c34679ea6c
  $w$c> ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.gtInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
e10dd60a54f52267faa2766e15c10807
  $w$c>= ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Classes.geInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.False }) -}
ffabd049566034baa6140a95e01a1099
  $w$ccompare ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> GHC.Types.Double
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Duckling.Types.Token
    -> GHC.Types.Double
    -> GHC.Types.Bool
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U)><S,1*U><L,1*U(U)><L,U><L,1*U(U)><L,1*U(U)><S,1*U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Types.Token)
                   (ww3 :: GHC.Types.Double)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: Duckling.Types.Token)
                   (ww8 :: GHC.Types.Double)
                   (ww9 :: GHC.Types.Bool) ->
                 case ww2 of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData d1 ds ->
                 case ww7 of wild1 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 dim' ds1 ->
                 let {
                   ends :: GHC.Types.Ordering
                   = case ww1 of wild2 { GHC.Types.I# x# ->
                     case ww6 of wild3 { GHC.Types.I# y# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# x# y#) of wild4 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x# y#) of wild5 {
                            GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                       GHC.Types.True -> GHC.Types.LT } } }
                 } in
                 let {
                   starts :: GHC.Types.Ordering
                   = case ww of wild2 { GHC.Types.I# x# ->
                     case ww5 of wild3 { GHC.Types.I# y# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# x# y#) of wild4 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x# y#) of wild5 {
                            GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.EQ }
                       GHC.Types.True -> GHC.Types.LT } } }
                 } in
                 case Duckling.Types.$fEqCandidate_$cgeq @ a @ a1 d1 dim' of wild2 {
                   GHC.Base.Nothing
                   -> let {
                        compRange :: GHC.Types.Ordering
                        = case starts of wild3 {
                            GHC.Types.LT
                            -> case ends of wild4 {
                                 DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.EQ }
                            GHC.Types.EQ -> ends
                            GHC.Types.GT
                            -> case ends of wild4 {
                                 DEFAULT -> GHC.Types.LT GHC.Types.GT -> GHC.Types.EQ } }
                      } in
                      let {
                        $j :: GHC.Prim.Void# -> GHC.Types.Ordering
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ (w :: GHC.Prim.Void#)[OneShot] ->
                          case ww4 of wild3 {
                            GHC.Types.False
                            -> case ww9 of wild4 {
                                 GHC.Types.False -> GHC.Types.EQ
                                 GHC.Types.True
                                 -> case compRange of wild5 {
                                      GHC.Types.LT -> GHC.Types.LT
                                      GHC.Types.EQ -> GHC.Types.EQ
                                      GHC.Types.GT -> GHC.Types.EQ } }
                            GHC.Types.True
                            -> case compRange of wild4 {
                                 GHC.Types.LT
                                 -> case ww9 of wild5 {
                                      GHC.Types.False -> GHC.Types.EQ
                                      GHC.Types.True -> GHC.Types.LT }
                                 GHC.Types.EQ -> case ww9 of wild5 { DEFAULT -> GHC.Types.EQ }
                                 GHC.Types.GT -> GHC.Types.GT } }
                      } in
                      case ww4 of wild3 {
                        GHC.Types.False
                        -> case ww9 of wild4 {
                             GHC.Types.False -> compRange GHC.Types.True -> $j GHC.Prim.void# }
                        GHC.Types.True
                        -> case ww9 of wild4 {
                             GHC.Types.False -> $j GHC.Prim.void#
                             GHC.Types.True -> compRange } }
                   GHC.Base.Just ipv
                   -> case starts of wild3 {
                        GHC.Types.LT
                        -> case ends of wild4 {
                             DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.EQ }
                        GHC.Types.EQ
                        -> case ends of wild4 {
                             DEFAULT -> wild4
                             GHC.Types.EQ -> GHC.Classes.$fOrdDouble_$ccompare ww3 ww8 }
                        GHC.Types.GT
                        -> case ends of wild4 {
                             DEFAULT -> GHC.Types.LT GHC.Types.GT -> GHC.Types.EQ } } } } }) -}
358325ea46bafb07423fdca7835e56d3
  $w$ccompare1 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww2) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> GHC.Classes.compareInt ww1 ww3 }
                   GHC.Types.True -> GHC.Types.LT }) -}
4cf3281405dae81ebf05713198f031db
  $w$ccompare2 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Types.Ordering
  {- Arity: 8,
     Strictness: <S,U><L,1*U(U)><S,1*U><L,1*U><S,U><L,1*U(U)><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Duckling.Types.ResolvedVal)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: Duckling.Types.ResolvedVal)
                   (ww7 :: GHC.Types.Bool) ->
                 case ww2 of wild { Duckling.Types.RVal a $dResolve $dEq $dShow $dToJSON ds v1 ->
                 case ww6 of wild1 { Duckling.Types.RVal a1 $dResolve1 $dEq1 $dShow1 $dToJSON1 ds1 v2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# ww ww4) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# ww ww4) of wild3 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww5 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False -> GHC.Types.GT
                                  GHC.Types.True
                                  -> case Data.ByteString.Lazy.toStrict
                                            (Data.ByteString.Builder.toLazyByteString
                                               (Data.Aeson.Types.ToJSON.toEncoding
                                                  @ (Duckling.Resolve.ResolvedValue a)
                                                  (Duckling.Resolve.$p3Resolve @ a $dResolve)
                                                  v1)
                                                 `cast`
                                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                    <Data.Aeson.Types.Internal.Value>_P)) of ww8 { Data.ByteString.Internal.PS ww9 ww10 ww11 ww12 ->
                                     case Data.Text.Encoding.$wdecodeUtf8With
                                            Data.Text.Encoding.Error.strictDecode
                                            ww9
                                            ww10
                                            ww11
                                            ww12 of ww13 { Data.Text.Internal.Text ww14 ww15 ww16 ->
                                     case Data.ByteString.Lazy.toStrict
                                            (Data.ByteString.Builder.toLazyByteString
                                               (Data.Aeson.Types.ToJSON.toEncoding
                                                  @ (Duckling.Resolve.ResolvedValue a1)
                                                  (Duckling.Resolve.$p3Resolve @ a1 $dResolve1)
                                                  v2)
                                                 `cast`
                                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                    <Data.Aeson.Types.Internal.Value>_P)) of ww17 { Data.ByteString.Internal.PS ww18 ww19 ww20 ww21 ->
                                     case Data.Text.Encoding.$wdecodeUtf8With
                                            Data.Text.Encoding.Error.strictDecode
                                            ww18
                                            ww19
                                            ww20
                                            ww21 of ww22 { Data.Text.Internal.Text ww23 ww24 ww25 ->
                                     case Data.Text.$w$ccompare
                                            ww14
                                            ww15
                                            ww16
                                            ww23
                                            ww24
                                            ww25 of wild8 {
                                       DEFAULT -> wild8
                                       GHC.Types.EQ
                                       -> GHC.Classes.$fOrdBool_$ccompare ww3 ww7 } } } } } }
                             GHC.Types.True -> GHC.Types.LT } } } }
                   GHC.Types.True -> GHC.Types.LT } } }) -}
876893268fb58123567a47e946b5b6ba
  $w$chashWithSalt ::
    GHC.Prim.Int# -> Duckling.Types.Dimension a -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Types.Dimension a) ->
                 case w of wild {
                   Duckling.Types.RegexMatch cobox0 -> GHC.Prim.*# ww 16777619#
                   Duckling.Types.AmountOfMoney cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 4#
                   Duckling.Types.CreditCardNumber cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 15#
                   Duckling.Types.Distance cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#
                   Duckling.Types.Weight cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 18#
                   Duckling.Types.Duration cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 2#
                   Duckling.Types.Email cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 3#
                   Duckling.Types.Numeral cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 5#
                   Duckling.Types.Ordinal cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6#
                   Duckling.Types.PhoneNumber cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 7#
                   Duckling.Types.Quantity cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 8#
                   Duckling.Types.Temperature cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 9#
                   Duckling.Types.Time cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 10#
                   Duckling.Types.TimeGrain cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 11#
                   Duckling.Types.Url cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 12#
                   Duckling.Types.Volume cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 13#
                   Duckling.Types.Identity cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 16#
                   Duckling.Types.Gender cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 17#
                   Duckling.Types.CustomDimension a1 cobox0 $dCustomDimension ds
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 14# }) -}
876893268fb58123567a47e946b5b6ba
  $w$chashWithSalt1 ::
    GHC.Prim.Int#
    -> Data.Some.Some Duckling.Types.Dimension -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Data.Some.Some Duckling.Types.Dimension) ->
                 case w of wild { Data.Some.This t a ->
                 case a of wild1 {
                   Duckling.Types.RegexMatch cobox0 -> GHC.Prim.*# ww 16777619#
                   Duckling.Types.AmountOfMoney cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 4#
                   Duckling.Types.CreditCardNumber cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 15#
                   Duckling.Types.Distance cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#
                   Duckling.Types.Weight cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 18#
                   Duckling.Types.Duration cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 2#
                   Duckling.Types.Email cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 3#
                   Duckling.Types.Numeral cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 5#
                   Duckling.Types.Ordinal cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 6#
                   Duckling.Types.PhoneNumber cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 7#
                   Duckling.Types.Quantity cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 8#
                   Duckling.Types.Temperature cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 9#
                   Duckling.Types.Time cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 10#
                   Duckling.Types.TimeGrain cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 11#
                   Duckling.Types.Url cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 12#
                   Duckling.Types.Volume cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 13#
                   Duckling.Types.Identity cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 16#
                   Duckling.Types.Gender cobox0
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 17#
                   Duckling.Types.CustomDimension a1 cobox0 $dCustomDimension ds
                   -> GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 14# } }) -}
06b85a6eafc0d8732d199f663aa29590
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Duckling.Types.ResolvedToken
    -> GHC.Types.Double
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <S,U><L,1*U(U(U(U),U(U)),1*U(U(U(U),U(U)),1*U,U,1*U),1*U,U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Types.ResolvedToken)
                   (ww2 :: GHC.Types.Double)
                   (ww3 :: GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww4 { Duckling.Types.Resolved ww5 ww6 ww7 ww8 ->
                     Duckling.Types.$w$cshowsPrec1 11# ww5 ww6 ww7 ww8 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww4 { GHC.Types.D# ww5 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble_$sshowFloat
                       Duckling.Types.$fShowCandidate3
                       ww5 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Types.$fShowCandidate2
                       (f (GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showSpace1
                             (f1
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww3 of wild {
                                      GHC.Types.False
                                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows18 x
                                      GHC.Types.True
                                      -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows17 x })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
00668fe6445f41ab1c2db2317034325e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Types.Range
    -> Duckling.Types.Node
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,U(U(U),U(U))><L,1*U(U(U(U),U(U)),1*U,U,1*U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Types.Range)
                   (ww2 :: Duckling.Types.Node)
                   (ww3 :: Duckling.Types.ResolvedVal)
                   (ww4 :: GHC.Types.Bool) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww5 { Duckling.Types.Node ww6 ww7 ww8 ww9 ->
                     Duckling.Types.$w$cshowsPrec4 0# ww6 ww7 ww8 ww9 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Duckling.Types.$w$cshowsPrec3 0# ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Types.$fShowCandidate11
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Types.$fShowCandidate10
                          (case ww1 of ww5 { Duckling.Types.Range ww6 ww7 ->
                           Duckling.Types.$w$cshowsPrec2
                             0#
                             ww6
                             ww7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Types.$fShowCandidate8
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Types.$fShowCandidate7
                                   (f (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Types.$fShowCandidate8
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Types.$fShowCandidate6
                                            (f1
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Types.$fShowCandidate8
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Duckling.Types.$fShowCandidate5
                                                     (case ww4 of wild {
                                                        GHC.Types.False
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             GHC.Show.shows18
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Duckling.Types.$fShowCandidate4
                                                                x)
                                                        GHC.Types.True
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             GHC.Show.shows17
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Duckling.Types.$fShowCandidate4
                                                                x) }))))))))) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
ae6d8e36d5bdd8fa0963dfd7ec1e7053
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     case ww1 of ww3 { GHC.Types.I# ww4 ->
                     case GHC.Show.$wshowSignedInt
                            11#
                            ww4
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                case GHC.Show.$wshowSignedInt 11# ww6 x of ww7 { (#,#) ww8 ww9 ->
                                GHC.Types.:
                                  @ GHC.Types.Char
                                  ww8
                                  ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                     GHC.Types.: @ GHC.Types.Char ww6 ww7 } }
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Types.$fShowCandidate9
                        (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Duckling.Types.$fShowCandidate9
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
f91f659dac2427379aea524436688c15
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Duckling.Types.ResolvedVal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Types.ResolvedVal) ->
                 case w of wild { Duckling.Types.RVal a $dResolve $dEq $dShow $dToJSON b1 b2 ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ (Duckling.Resolve.ResolvedValue a)
                       (Duckling.Resolve.$p2Resolve @ a $dResolve)
                       Duckling.Types.$fShowCandidate3
                       b2
                 } in
                 let {
                   lvl15 :: GHC.Base.String
                   = Duckling.Types.$fGShowTYPEDimension_$cshow @ a b1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Types.$fShowCandidate12
                       (GHC.Base.++
                          @ GHC.Types.Char
                          lvl15
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild1 {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Duckling.Types.Range
    -> Duckling.Types.Token
    -> [Duckling.Types.Node]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U(U(U),U(U))><L,1*U><L,U><L,1*U>,
     Inline: [0] -}
2f323aef3791eea063608d7d5c8b4406
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Types.Node
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U,U,U)><L,U(U,U,U)><L,1*U><L,U(U)><L,U(U)><L,U><L,1*U(U(U(U),U(U)),1*U,U,1*U)>,
     Inline: [0] -}
876893268fb58123567a47e946b5b6ba
  $w$cshowsPrec6 ::
    GHC.Prim.Int# -> Duckling.Types.Token -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Duckling.Types.Token) ->
                 case w of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData b1 b2 ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a $dShow Duckling.Types.$fShowCandidate3 b2
                 } in
                 let {
                   lvl15 :: GHC.Base.String
                   = Duckling.Types.$fGShowTYPEDimension_$cshow @ a b1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Types.$fShowToken2
                       (GHC.Base.++
                          @ GHC.Types.Char
                          lvl15
                          (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild1 {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) } }) -}
743d31c680d51ac4c72cb6d9a7b65f58
  $w$ctoJSON ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Duckling.Types.ResolvedVal
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 6,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Duckling.Types.ResolvedVal)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Types.Int)
                   (ww5 :: GHC.Types.Bool) ->
                 case ww2 of wild { Duckling.Types.RVal a $dResolve $dEq $dShow $dToJSON ds val ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Duckling.Types.$fToJSONEntity6,
                            Data.Aeson.Types.Internal.$WString ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Types.$fToJSONEntity5,
                               Data.Aeson.Types.Internal.$WString ww1)
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Duckling.Types.$fToJSONEntity4,
                                  Data.Aeson.Types.ToJSON.toJSON
                                    @ (Duckling.Resolve.ResolvedValue a)
                                    (Duckling.Resolve.$p3Resolve @ a $dResolve)
                                    val)
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Duckling.Types.$fToJSONEntity3,
                                     case ww3 of wild1 { GHC.Types.I# i ->
                                     case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                     Data.Aeson.Types.Internal.Number
                                       (Data.Scientific.Scientific dt 0#) } })
                                    (GHC.Types.:
                                       @ Data.Aeson.Types.Internal.Pair
                                       (Duckling.Types.$fToJSONEntity2,
                                        case ww4 of wild1 { GHC.Types.I# i ->
                                        case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                        Data.Aeson.Types.Internal.Number
                                          (Data.Scientific.Scientific dt 0#) } })
                                       (GHC.Types.:
                                          @ Data.Aeson.Types.Internal.Pair
                                          (Duckling.Types.$fToJSONEntity1,
                                           Data.Aeson.Types.Internal.$WBool ww5)
                                          (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) } }) -}
77cecf73b2bd5e7e34b8b255a24c785b
  $w$dGHashable ::
    GHC.Types.Int
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "nodeRange")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 Duckling.Types.Range)
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "token")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 Duckling.Types.Token)
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "children")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 [Duckling.Types.Node])
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "rule")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe Data.Text.Internal.Text))
         a1
    -> GHC.Prim.Int#
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(1*U(U),1*U(U))><S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
77cecf73b2bd5e7e34b8b255a24c785b
  $w$dGNFData ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "token")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 Duckling.Types.Token)
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "children")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 [Duckling.Types.Node])
         a1
    -> GHC.Generics.S1
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "rule")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 (GHC.Base.Maybe Data.Text.Internal.Text))
         a1
    -> ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*H><S,1*H><S,1*U><S,1*U><S,1*U>, Inline: [0] -}
f6c758a2821a058963006b0f0c0d4276
  data Candidate
    = Candidate Duckling.Types.ResolvedToken
                GHC.Types.Double
                GHC.Types.Bool
876893268fb58123567a47e946b5b6ba
  class (GHC.Show.Show a, Data.Typeable.Internal.Typeable a,
         Data.Typeable.Internal.Typeable
           (Duckling.Types.DimensionData a)) =>
        CustomDimension a where
    type family DimensionData a :: * open
    dimRules :: a -> [Duckling.Types.Rule]
    dimLangRules :: Duckling.Locale.Lang -> a -> [Duckling.Types.Rule]
    dimLocaleRules :: Duckling.Region.Region
                      -> a -> [Duckling.Types.Rule]
    dimDependents :: a
                     -> Data.HashSet.HashSet (Data.Some.Some Duckling.Types.Dimension)
    {-# MINIMAL dimRules, dimLangRules, dimLocaleRules,
                dimDependents #-}
876893268fb58123567a47e946b5b6ba
  type role Dimension nominal
  data Dimension a where
    RegexMatch :: Dimension Duckling.Regex.Types.GroupMatch
    AmountOfMoney :: Dimension Duckling.AmountOfMoney.Types.AmountOfMoneyData
    CreditCardNumber :: Dimension Duckling.CreditCardNumber.Types.CreditCardNumberData
    Distance :: Dimension Duckling.Distance.Types.DistanceData
    Weight :: Dimension Duckling.Weight.Types.WeightData
    Duration :: Dimension Duckling.Duration.Types.DurationData
    Email :: Dimension Duckling.Email.Types.EmailData
    Numeral :: Dimension Duckling.Numeral.Types.NumeralData
    Ordinal :: Dimension Duckling.Ordinal.Types.OrdinalData
    PhoneNumber :: Dimension Duckling.PhoneNumber.Types.PhoneNumberData
    Quantity :: Dimension Duckling.Quantity.Types.QuantityData
    Temperature :: Dimension Duckling.Temperature.Types.TemperatureData
    Time :: Dimension Duckling.Time.Types.TimeData
    TimeGrain :: Dimension Duckling.TimeGrain.Types.Grain
    Url :: Dimension Duckling.Url.Types.UrlData
    Volume :: Dimension Duckling.Volume.Types.VolumeData
    Identity :: Dimension Duckling.Identity.Types.IdentityData
    Gender :: Dimension Duckling.Gender.Types.GenderData
    CustomDimension :: Duckling.Types.CustomDimension a1 =>
                       a1 -> Dimension (Duckling.Types.DimensionData a1)
4e09934b2257665727a4b63a0fa492ce
  data Entity
    = Entity {dim :: Data.Text.Internal.Text,
              body :: Data.Text.Internal.Text,
              value :: Duckling.Types.ResolvedVal,
              start :: GHC.Types.Int,
              end :: GHC.Types.Int,
              latent :: GHC.Types.Bool,
              enode :: Duckling.Types.Node}
77cecf73b2bd5e7e34b8b255a24c785b
  data Node
    = Node {nodeRange :: Duckling.Types.Range,
            token :: Duckling.Types.Token,
            children :: [Duckling.Types.Node],
            rule :: GHC.Base.Maybe Data.Text.Internal.Text}
    RecFlag: Recursive
876893268fb58123567a47e946b5b6ba
  type Pattern = [Duckling.Types.PatternItem]
876893268fb58123567a47e946b5b6ba
  data PatternItem
    = Regex Text.Regex.PCRE.Wrap.Regex
    | Predicate Duckling.Types.Predicate
876893268fb58123567a47e946b5b6ba
  type Predicate = Duckling.Types.Token -> GHC.Types.Bool
876893268fb58123567a47e946b5b6ba
  type Production =
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
83cec8727dae58e470d36f42a8a03ab2
  data Range = Range GHC.Types.Int GHC.Types.Int
4e09934b2257665727a4b63a0fa492ce
  axiom Rep_Entity::
      GHC.Generics.Rep Duckling.Types.Entity
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Entity"
               "Duckling.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Entity" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "dim")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 Data.Text.Internal.Text)
                 GHC.Generics.:*: (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "body")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 Data.Text.Internal.Text)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "value")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Duckling.Types.ResolvedVal)))
                GHC.Generics.:*: ((GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "start")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0 GHC.Types.Int)
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "end")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Int))
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "latent")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0 GHC.Types.Bool)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just "enode")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          Duckling.Types.Node)))))
77cecf73b2bd5e7e34b8b255a24c785b
  axiom Rep_Node::
      GHC.Generics.Rep Duckling.Types.Node
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Node"
               "Duckling.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Node" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "nodeRange")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 Duckling.Types.Range)
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "token")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Duckling.Types.Token))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "children")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 [Duckling.Types.Node])
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "rule")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe Data.Text.Internal.Text)))))
83cec8727dae58e470d36f42a8a03ab2
  axiom Rep_Range::
      GHC.Generics.Rep Duckling.Types.Range
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Range"
               "Duckling.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Range" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 GHC.Types.Int)
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 GHC.Types.Int)))
f8e17b0721b86350c49a27f32de48f63
  data ResolvedToken
    = Resolved {range :: Duckling.Types.Range,
                node :: Duckling.Types.Node,
                rval :: Duckling.Types.ResolvedVal,
                isLatent :: GHC.Types.Bool}
f91f659dac2427379aea524436688c15
  data ResolvedVal where
    RVal :: (Duckling.Resolve.Resolve a,
             GHC.Classes.Eq (Duckling.Resolve.ResolvedValue a),
             GHC.Show.Show (Duckling.Resolve.ResolvedValue a),
             Data.Aeson.Types.ToJSON.ToJSON
               (Duckling.Resolve.ResolvedValue a)) =>
            (Duckling.Types.Dimension a) -> (Duckling.Resolve.ResolvedValue a)
            -> ResolvedVal
876893268fb58123567a47e946b5b6ba
  data Rule
    = Rule {name :: Data.Text.Internal.Text,
            pattern :: Duckling.Types.Pattern,
            prod :: Duckling.Types.Production}
876893268fb58123567a47e946b5b6ba
  data Token where
    Token :: (Duckling.Resolve.Resolve a, GHC.Classes.Eq a,
              Data.Hashable.Class.Hashable a, GHC.Show.Show a,
              Control.DeepSeq.NFData a) =>
             (Duckling.Types.Dimension a) -> a -> Token
c1c725c57ac503ba3b4173672a1f1609
  body :: Duckling.Types.Entity -> Data.Text.Internal.Text
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
6a6a83ac376382e3d6d27eaeed4c5a9e
  children :: Duckling.Types.Node -> [Duckling.Types.Node]
  RecSel Left Duckling.Types.Node
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Node) ->
                 case ds of wild { Duckling.Types.Node ds1 ds2 ds3 ds4 -> ds3 }) -}
39b441dda072afec0bc0faf947af4926
  dim :: Duckling.Types.Entity -> Data.Text.Internal.Text
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
d0737f4b2a091d17072dfde26c2eb47c
  dimension ::
    Data.Typeable.Internal.Typeable a =>
    Duckling.Types.Dimension a -> Duckling.Types.PatternItem
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dTypeable :: Data.Typeable.Internal.Typeable a)
                   (value1 :: Duckling.Types.Dimension a) ->
                 Duckling.Types.Predicate
                   (Duckling.Types.isDimension @ a value1)) -}
e843e5cd85675fa8e595a3a6fe02924a
  end :: Duckling.Types.Entity -> GHC.Types.Int
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
ae7834117f80e175efa5562d98209444
  enode :: Duckling.Types.Entity -> Duckling.Types.Node
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U(U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
6f614570b0003ac46dd14d0c3d09b0f5
  isDimension ::
    Duckling.Types.Dimension a
    -> Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (dim1 :: Duckling.Types.Dimension a)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case Duckling.Types.$fEqCandidate_$cgeq
                        @ a
                        @ a1
                        dim1
                        dim' of wild1 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ipv -> GHC.Types.True } }) -}
c8779e2ef0b8545c3dd528747564c350
  isLatent :: Duckling.Types.ResolvedToken -> GHC.Types.Bool
  RecSel Left Duckling.Types.ResolvedToken
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.ResolvedToken) ->
                 case ds of wild { Duckling.Types.Resolved ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
cd461f6dd92ca29ea4c50daf6ab79d20
  latent :: Duckling.Types.Entity -> GHC.Types.Bool
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
76f427769b73e82db2c2df59caa60288
  name :: Duckling.Types.Rule -> Data.Text.Internal.Text
  RecSel Left Duckling.Types.Rule
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Rule) ->
                 case ds of wild { Duckling.Types.Rule ds1 ds2 ds3 -> ds1 }) -}
753aae763e8333663525f71a24ee51d9
  node :: Duckling.Types.ResolvedToken -> Duckling.Types.Node
  RecSel Left Duckling.Types.ResolvedToken
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.ResolvedToken) ->
                 case ds of wild { Duckling.Types.Resolved ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
f0856018dc2c5a8fc212c0f5df1fdc69
  nodeRange :: Duckling.Types.Node -> Duckling.Types.Range
  RecSel Left Duckling.Types.Node
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Node) ->
                 case ds of wild { Duckling.Types.Node ds1 ds2 ds3 ds4 -> ds1 }) -}
6666cdf07a41b137593bc737023ac7f1
  pattern :: Duckling.Types.Rule -> Duckling.Types.Pattern
  RecSel Left Duckling.Types.Rule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Rule) ->
                 case ds of wild { Duckling.Types.Rule ds1 ds2 ds3 -> ds2 }) -}
a4c6750bd517e049c9ce8428e1e5dff2
  prod :: Duckling.Types.Rule -> Duckling.Types.Production
  RecSel Left Duckling.Types.Rule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Rule) ->
                 case ds of wild { Duckling.Types.Rule ds1 ds2 ds3 -> ds3 }) -}
3c328653d9034d8b85c67e43cd299855
  range :: Duckling.Types.ResolvedToken -> Duckling.Types.Range
  RecSel Left Duckling.Types.ResolvedToken
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.ResolvedToken) ->
                 case ds of wild { Duckling.Types.Resolved ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
c51097368a8c266ad9942dc9e3370fd5
  regex :: GHC.Base.String -> Duckling.Types.PatternItem
  {- Arity: 1, Strictness: <L,U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Base.String) ->
                 Duckling.Types.Regex
                   (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                      Duckling.Types.regex1
                        `cast`
                      (Trans
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                      Text.Regex.PCRE.Wrap.execBlank1
                        `cast`
                      (Trans
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                      x)) -}
e9f8478a383a8773a7e54091cea1b85c
  regex1 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 2051#) -}
83bdb624649d0ef67e6017f11344b4f2
  rule ::
    Duckling.Types.Node -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Duckling.Types.Node
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Node) ->
                 case ds of wild { Duckling.Types.Node ds1 ds2 ds3 ds4 -> ds4 }) -}
0091d7b4cf33c2b9d3c5d29bfa5b203a
  rval :: Duckling.Types.ResolvedToken -> Duckling.Types.ResolvedVal
  RecSel Left Duckling.Types.ResolvedToken
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.ResolvedToken) ->
                 case ds of wild { Duckling.Types.Resolved ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
ea2b70acf82811fc0dea6c7845b811d4
  start :: Duckling.Types.Entity -> GHC.Types.Int
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
eb820a4c8678044f54c855a58daddba1
  toJText ::
    Data.Aeson.Types.ToJSON.ToJSON x => x -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A,A)><L,U>,
     Unfolding: (\ @ x
                   ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON x)
                   (eta :: x) ->
                 case Data.ByteString.Lazy.toStrict
                        (Data.ByteString.Builder.toLazyByteString
                           (Data.Aeson.Types.ToJSON.toEncoding @ x $dToJSON eta)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Data.Text.Encoding.$wdecodeUtf8With
                   Data.Text.Encoding.Error.strictDecode
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
fb98132ad6afc39dd92fd5b1a9d36243
  token :: Duckling.Types.Node -> Duckling.Types.Token
  RecSel Left Duckling.Types.Node
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Node) ->
                 case ds of wild { Duckling.Types.Node ds1 ds2 ds3 ds4 -> ds2 }) -}
6d2095f9ecc4f2848ce8045aba47186a
  value :: Duckling.Types.Entity -> Duckling.Types.ResolvedVal
  RecSel Left Duckling.Types.Entity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Entity) ->
                 case ds of wild { Duckling.Types.Entity ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
instance GHC.Classes.Eq [Duckling.Types.Candidate]
  = Duckling.Types.$fEqCandidate
instance GHC.Classes.Eq [Duckling.Types.Entity]
  = Duckling.Types.$fEqEntity
instance GHC.Classes.Eq [Duckling.Types.Node]
  = Duckling.Types.$fEqNode
instance GHC.Classes.Eq [Duckling.Types.Range]
  = Duckling.Types.$fEqRange
instance GHC.Classes.Eq [Duckling.Types.ResolvedToken]
  = Duckling.Types.$fEqResolvedToken
instance GHC.Classes.Eq [Duckling.Types.ResolvedVal]
  = Duckling.Types.$fEqResolvedVal
instance GHC.Classes.Eq [Duckling.Types.Token]
  = Duckling.Types.$fEqToken
instance Data.GADT.Compare.GEq [TYPE, Duckling.Types.Dimension]
  = Duckling.Types.$fGEqTYPEDimension
instance Data.GADT.Show.GShow [TYPE, Duckling.Types.Dimension]
  = Duckling.Types.$fGShowTYPEDimension
instance GHC.Generics.Generic [Duckling.Types.Entity]
  = Duckling.Types.$fGenericEntity
instance GHC.Generics.Generic [Duckling.Types.Node]
  = Duckling.Types.$fGenericNode
instance GHC.Generics.Generic [Duckling.Types.Range]
  = Duckling.Types.$fGenericRange
instance Data.Hashable.Class.Hashable [Duckling.Types.Dimension]
  = Duckling.Types.$fHashableDimension
instance Data.Hashable.Class.Hashable [Duckling.Types.Node]
  = Duckling.Types.$fHashableNode
instance Data.Hashable.Class.Hashable [Duckling.Types.Range]
  = Duckling.Types.$fHashableRange
instance Data.Hashable.Class.Hashable [Data.Some.Some]
  = Duckling.Types.$fHashableSome
instance Data.Hashable.Class.Hashable [Duckling.Types.Token]
  = Duckling.Types.$fHashableToken
instance Control.DeepSeq.NFData [Duckling.Types.Node]
  = Duckling.Types.$fNFDataNode
instance Control.DeepSeq.NFData [Duckling.Types.Range]
  = Duckling.Types.$fNFDataRange
instance Control.DeepSeq.NFData [Duckling.Types.Token]
  = Duckling.Types.$fNFDataToken
instance GHC.Classes.Ord [Duckling.Types.Candidate]
  = Duckling.Types.$fOrdCandidate
instance GHC.Classes.Ord [Duckling.Types.Range]
  = Duckling.Types.$fOrdRange
instance GHC.Classes.Ord [Duckling.Types.ResolvedToken]
  = Duckling.Types.$fOrdResolvedToken
instance GHC.Show.Show [Duckling.Types.Candidate]
  = Duckling.Types.$fShowCandidate
instance GHC.Show.Show [Duckling.Types.Dimension]
  = Duckling.Types.$fShowDimension
instance GHC.Show.Show [Duckling.Types.Entity]
  = Duckling.Types.$fShowEntity
instance GHC.Show.Show [Duckling.Types.Node]
  = Duckling.Types.$fShowNode
instance GHC.Show.Show [Duckling.Types.Range]
  = Duckling.Types.$fShowRange
instance GHC.Show.Show [Duckling.Types.ResolvedToken]
  = Duckling.Types.$fShowResolvedToken
instance GHC.Show.Show [Duckling.Types.ResolvedVal]
  = Duckling.Types.$fShowResolvedVal
instance GHC.Show.Show [Duckling.Types.Rule]
  = Duckling.Types.$fShowRule
instance GHC.Show.Show [Duckling.Types.Token]
  = Duckling.Types.$fShowToken
instance TextShow.Classes.TextShow [Duckling.Types.Dimension]
  = Duckling.Types.$fTextShowDimension
instance TextShow.Classes.TextShow [Data.Some.Some]
  = Duckling.Types.$fTextShowSome
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Types.Entity]
  = Duckling.Types.$fToJSONEntity
family instance GHC.Generics.Rep [Duckling.Types.Entity]
  = Duckling.Types.Rep_Entity
family instance GHC.Generics.Rep [Duckling.Types.Node]
  = Duckling.Types.Rep_Node
family instance GHC.Generics.Rep [Duckling.Types.Range]
  = Duckling.Types.Rep_Range
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

