
==================== FINAL INTERFACE ====================
2019-01-30 07:27:20.812488 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Rules 8002
  interface hash: 56f5ead847dd7dd9d8f96f8c6d2d28ef
  ABI hash: 86678c83f4750a4ff6037d45ec24122d
  export-list hash: 1e1db4a428cbd69f5eabba7beeb81d84
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1a1f702986e7747a031a132c34ff8592
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Time.Rules.rules
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Dimensions.Types
                     Duckling.Distance.Types Duckling.Duration.Types
                     Duckling.Email.Types Duckling.Gender.Types Duckling.Identity.Types
                     Duckling.Locale Duckling.Numeral.Helpers Duckling.Numeral.Types
                     Duckling.Ordinal.Types Duckling.PhoneNumber.Types
                     Duckling.Quantity.Types Duckling.Regex.Types Duckling.Region
                     Duckling.Resolve Duckling.Temperature.Types Duckling.Time.Helpers
                     Duckling.Time.TimeZone.Parse Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Numeral.Helpers bd0dabecd11987616dc666a3e43dd924
  exports: e7d47526dd2b06e4e1d94c237fe469a9
  parseInt 96a0cf102d8136d5751b58d6e2ee330e
import  -/  Duckling.Ordinal.Types 338cef02dda50d8eb48357da4a409fec
  exports: 775285a26ee37c34a56d1069720093f1
  value 2f66f4e563cf8f416d92a789623cda71
import  -/  Duckling.Regex.Types 02ee061ffbed7bfe03850219af82e91c
  exports: d44c9c4af09e2c2530be2e20de544b1d
  GroupMatch 537ad29f8ab71f1e1b7b5a2d9bd0ac47
import  -/  Duckling.Time.Helpers aaf28cd3360a5c23764acdc7df3005e2
  exports: 55df1b359d5a489b2ded4c149d857592
  cycleN 2890794563c0d4e57dbf11230d3673e9
  cycleNth 4daf0a4690b61e6b89447861865f331f
  cycleNthAfter 47bc55ee9800eb1b47747445d00705eb
  durationAgo 8a9550242e86dbdfe25bcaef01ba1ee5
  getIntValue 69afad92c8c340c7b7edccde43bfed42
  hour a43cb2b3b9254ffecab776dbdfa251a3
  hourMinute 125eb5afab138df7cfc04c748bbef185
  inDuration e827ecc2a07e97e90059d28556a5c441
  inTimezone 33a576ff4ea25e85387d9397518a32b9
  intersect c019e8e87d7494bf6f19662a6fbed0aa
  intersectDOM d85836a20ce2ceadbf49fab724af3beb
  interval 5583aa324e4d42feb8f0702430b96441
  isADayOfWeek 4158d08ef782c071e1bafd506ffffb3f
  isAMonth ff8462cceb89e3d5d4153156c628efca
  isAPartOfDay eef9b392e320323af196e53d3244a616
  isATimeOfDay a2b4b48ce4ca3f7f3233609871d7b272
  isAnHourOfDay bc97f69b43dc2d2df90b44226ee20ca3
  isDOMValue a75f4505522a6261eb139ce18b8c8069
  isIntegerBetween 4ddfafd45f067e53dd022f03a320ada4
  isMidnightOrNoon 08cc18b2ad0f18c3813da6cf492183bc
  isNotLatent af520ae8db0cd7f6cc029a5d415de673
  minutesBefore 26d7c508e9338277f894ce17210574bc
  mkLatent bb4e263adf4b0b304004f09445298afc
  mkRuleDaysOfWeek d22e54420f5c6fe9ee691b8dac2fcb2f
  mkRuleHolidays 28b05cbadc395d36273b101d3ce82ff0
  mkRuleMonths ee5307e2249b9f98490b8706f02ed8eb
  month e612601eb62465d574e425e34f2ee246
  monthDay 92f211380ff1d4ea25ed30ce0c993461
  notLatent 0b0dd40e58576673da9cb5fa089792a9
  now 29027e0560ae3f6aa24d31605dbe0b2d
  nthDOWOfMonth 2f2c5f8482e1cfc8c2ab96985ff32c59
  partOfDay 42b1b9e2193ddb75e4a89f0264066b05
  predNth 7b060806ad82a187fcca9c5dc2849df5
  timeOfDayAMPM 27b782e2c8d4311bcff4100bc017b8ec
  today cf41920e1910cd77da8687ae8f3f2610
  tt f22d8bf2c9795db5f03e801f54c190ba
  weekend 796810aafbd77d769a022e591d1e6366
  withDirection dc43bd016fa4ecae354d783901f5560e
  year ecf458a3089b8d8accd3eb4cccd4dc9e
  yearMonth 565065b6f15f3bf2f9021c5c77ed68ba
  yearMonthDay 02611c54d2ccb895b165f2c62c3bd9d1
import  -/  Duckling.Time.Types d4fac4be942a0a4255ab078596447429
  exports: 3606974139e9e7e95f5dfe8696d4fed1
  After 1c45a97c53c24ed470dbf708ab4f57c7
  Before c80a2b87cc49a746e8a410478cabfa47
  Closed 59fb6ceb27061a799839b62492c20537
  Open 13f6b88ec74c322c57b4cc5c52822d6c
  TimeData feaf694a915c741c0c15257597d31d4b
  TimeOfDay 13e2df7cb9f08c041e6388c0a98af759
  form 5d75858393e950a5dffdacc763c3c71c
import  -/  Duckling.TimeGrain.Types df1446d581d19c78205a53c0773a1394
  exports: 1edf6532c5926aae175720f5ee1798eb
  Day 8970ba78a9767ba3b8a7c6ba9b51a195
  Year 6f596c2b14ab7e9f5cbae1f027059b30
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  Duration b6c7737c196c51ea1993cf296ebd2165
  Numeral 37ea753945466ebddfe8bb90136c8911
  Ordinal 75669a2844683d059ffcc0481c467632
  Predicate 7b23b72c5da11bf15a4943a8b0a1fdb3
  RegexMatch 48a4c104f38c3a332becce55bbf47568
  Rule 68f6ad16b93bf0573b6e6f063820cf0e
  Rule 876893268fb58123567a47e946b5b6ba
  Time 9b9e182b74fc2b8e23927a2047960e70
  TimeGrain 080731afd4ca77e227c906ea69ec213a
  Token ed5ab3414f0516bc6b6fd996e839d3c3
  dimension d0737f4b2a091d17072dfde26c2eb47c
  name 76f427769b73e82db2c2df59caa60288
  pattern 6666cdf07a41b137593bc737023ac7f1
  prod a4c6750bd517e049c9ce8428e1e5dff2
  regex c51097368a8c266ad9942dc9e3370fd5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
c675933debc73b14fe8fad86e5aa4c5a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Time.Rules.$trModule2
                   Duckling.Time.Rules.$trModule1) -}
49627346bcc43a0d3010f3c96342f8ff
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Time.Rules"#) -}
cec4b3966c6641be9bc59e68ccc47c4f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
4dcf3f96cb650260e8b25736d11d0405
  rules :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Base.++
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules2
                   Duckling.Time.Rules.rules1) -}
75116ce3013f15d222737f5c11abd036
  rules1 :: [Duckling.Types.Rule]
864fe39eda3a32f7afe3c1be05ad476b
  rules10 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules640
                   Duckling.Time.Rules.rules11) -}
fbae905ec94315cbb9ad4f86e0fd8741
  rules100 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\156\\136"#) -}
45c504013dc24a13bdabcc9e7034f4c0
  rules101 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules102) -}
0e0785842214ee1f80d642458cd0df62
  rules102 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 12#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
397b9a6411e033a028fe65761be3b90a
  rules103 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules104) -}
caeeb5ea0e3e6b20738d1410faff26d6
  rules104 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules105) -}
52e3e569eee9ca31c330c983ca817c0e
  rules105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\185\\180"#) -}
2558ef2a6058c5124671b97180b9b79f
  rules106 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules107) -}
7b9f57111a3a851dbf525a57e1dd037f
  rules107 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1000# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
f4e4b3241dfef654a0340182362896d3
  rules108 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "year-month"#) -}
b13c0638df40df3dbfcebd1934bad792
  rules109 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules115
                   Duckling.Time.Rules.rules111
                   Duckling.Time.Rules.rules110) -}
0ff86ef3e819a4fe069c52b06b1143f4
  rules11 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules636
                   Duckling.Time.Rules.rules12) -}
78bab283946db8ed677fc2a560c25814
  rules110 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : yy ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger yy of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x2 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x1 of wild8 { DEFAULT ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<=#
                                                                           wild8
                                                                           99#) of wild9 {
                                                                   GHC.Types.False
                                                                   -> GHC.Types.I# wild8
                                                                   GHC.Types.True
                                                                   -> case GHC.Classes.modInt#
                                                                             (GHC.Prim.+# wild8 50#)
                                                                             100# of ww2 { DEFAULT ->
                                                                      GHC.Types.I#
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.+# ww2 2000#)
                                                                           50#) } } }))))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Month
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
0d48039f2ef1db0d714b2ea6d2bebbca
  rules111 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules112
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e9e10bccb513d68f0d61f317ac4fc6cd
  rules112 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules113) -}
07cfe24e36484db4ecf880588fca3802
  rules113 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules114) -}
4cdf8eea4fe6f687cf1cecc02836008d
  rules114 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(\\d{4})\\s*[/-]\\s*(1[0-2]|0?[1-9])"#) -}
0f145380a7044e3f28465b5275fa097f
  rules115 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yyyy-mm"#) -}
f3711fb05a9b069ec2c7a54896514039
  rules116 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules129
                   Duckling.Time.Rules.rules125
                   Duckling.Time.Rules.rules117) -}
76f551f3a53835953ef34d15b6732473
  rules117 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules118) -}
46d8318ae01c906caab42b2bb8a9dfa4
  rules118 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules119) -}
5060f07b7f8257e383d3a3d11bdc4e9e
  rules119 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules120) -}
13c87426bae69e01df874f1e7caf2cd6
  rules12 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules621
                   Duckling.Time.Rules.rules13) -}
736e098fea8a0d5ec45e2d7124d53adf
  rules120 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules121
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
ec884ea12ee37b02c5541ddbd7843c88
  rules121 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules124
                        GHC.Types.False
                        Duckling.Time.Rules.rules122 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
2938ef581965010e20b29791ffa002ab
  rules122 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Rules.rules123
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
a20a393a17ef585c84efdd32f96b0b29
  rules123 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Day
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Day of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
22545da2f8fbfc2c2f961f46335a6dad
  rules124 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
165eada581137efa945e4d9ad2562ff3
  rules125 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules126
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
5acfb168e953587a63996d62a4d7b006
  rules126 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules127) -}
124e27de468067f4247dfb736b9f325d
  rules127 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules128) -}
31c393449211d77838c2fdbddfd6cb7b
  rules128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\168\\229\\164\\169|\\230\\152\\168\\230\\151\\165|\\229\\176\\139\\230\\151\\165"#) -}
c4d00b424d39888574924ea7eb5bedba
  rules129 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yesterday"#) -}
f3bfc0e28657a756c046c233571d5d87
  rules13 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules618
                   Duckling.Time.Rules.rules14) -}
e35d3109dae07b2e80712cbd12f08c6a
  rules130 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules142
                   Duckling.Time.Rules.rules138
                   Duckling.Time.Rules.rules131) -}
3848e9e946415ce03e807fe43f9218ab
  rules131 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ GHC.Types.Int
                                                   (case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<=# n2 99#) of wild6 {
                                                      GHC.Types.False -> GHC.Types.I# n2
                                                      GHC.Types.True
                                                      -> case GHC.Classes.modInt#
                                                                (GHC.Prim.+# n2 50#)
                                                                100# of ww2 { DEFAULT ->
                                                         GHC.Types.I#
                                                           (GHC.Prim.-#
                                                              (GHC.Prim.+# ww2 2000#)
                                                              50#) } })))
                                             GHC.Types.False
                                             Duckling.TimeGrain.Types.Year
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules132 } } }
                        Duckling.Types.Ordinal cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.year
                                   nd
                                     `cast`
                                   (Trans
                                        (Sub cobox0)
                                        (Duckling.Ordinal.Types.N:OrdinalData[0])))) } } }) -}
d86cd7800670e0c3edeecb033984bdd2
  rules132 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules133) -}
8dff6d1a3dfbb43a6fdddfcb9f45af29
  rules133 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules134) -}
36d9a05456f5becd543d2d34f1cb7a87
  rules134 :: Duckling.Time.Types.TimeData
  {- Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules135
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
1cf8f288dcd041f5e79e1a59b605740c
  rules135 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules136) -}
c50148b706be278dc88801f5f89d97b3
  rules136 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules137) -}
467637a586037d9de48718b0285f5216
  rules137 :: GHC.Types.Int
  {- Unfolding: (case GHC.Classes.modInt#
                        50#
                        100# of ww2 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ww2 2000#) 50#) }) -}
111190cb3da6cbed60ae188d3aab0b92
  rules138 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules140
                   Duckling.Time.Rules.rules139) -}
22d6d8323fe675d54a4dbf9298da9633
  rules139 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules103
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
31471d4e951a640474f40295fc420f1d
  rules14 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules608
                   Duckling.Time.Rules.rules15) -}
258ac373051be9f6df2d83cb4e5c8dc8
  rules140 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules141) -}
6be16fe59fdbaa07a122fa718ed390c3
  rules141 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1000# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
cb486318c8ec16b75baa9f3253d4fccb
  rules142 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "year (numeric with year symbol)"#) -}
e75ad4ebe7614e7215baf5f5670a92a8
  rules143 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules151
                   Duckling.Time.Rules.rules147
                   Duckling.Time.Rules.rules144) -}
1e3f2d371fa1fb554ab1e21e7e9e2069
  rules144 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules145) -}
acc1da6d6738d01849310eae04660552
  rules145 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules146) -}
1a241c06ec3a346cf3396dee2d4a1f10
  rules146 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.weekend) -}
903828a191bcb77ed39df4aa4e494b5b
  rules147 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules148
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
dc4fe90ea076c79b2b968b17843c017c
  rules148 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules149) -}
18426184fcb7ad7a8ed4f388ed542768
  rules149 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules150) -}
8fabd3c37b6534a1118f1279d4846c8a
  rules15 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules601
                   Duckling.Time.Rules.rules16) -}
b90c915d1d6d3213c755c7e88141fe17
  rules150 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\145\\168\\230\\156\\171|\\233\\128\\177\\230\\156\\171"#) -}
9465f3c0b25d35af9a8d8908b6290c5d
  rules151 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "week-end"#) -}
15c51740c0a9e293dc00d5b98de742ed
  rules152 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules167
                   Duckling.Time.Rules.rules163
                   Duckling.Time.Rules.rules153) -}
da75c53c51f953a0d5d044397535b9f9
  rules153 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules154) -}
6c39c19ac8889b34f80fe488f6c947aa
  rules154 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules159 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules156 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules162 Duckling.Time.Rules.rules155
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
6c0447ef176601ed8e8569f8ab9302d4
  rules155 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules159
                   Duckling.Time.Rules.rules156) -}
cdc8b1b4e40ae91effe47f042d6d928d
  rules156 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules157
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
b35c22a90a6bcc5ce7327c25ac6b99f2
  rules157 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules158) -}
d8a57b69074da72164d121a916b4142b
  rules158 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n)) -}
b0345036abe172c73fc27c32daaf05df
  rules159 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules160
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
83fa68fdb477fffb26fe22248365cc0b
  rules16 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules591
                   Duckling.Time.Rules.rules17) -}
109ea485ec5eb5189cfce20eff53f954
  rules160 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules161) -}
69dcbf40067e5b43c33210be7d851a45
  rules161 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n1)) -}
20a04c4f16f0640668a4eec83a6a6e12
  rules162 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Helpers.today1
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
0a43353fe81c4f4aeda19c84a69e2b87
  rules163 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules164
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1e923bd0c7443c7891e28f00b7406f36
  rules164 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules165) -}
7bde5b62fcc4a4fceb5d4890efe2b541
  rules165 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules166) -}
5697ea2b82402471303898cbcfa20454
  rules166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\230\\153\\154|\\228\\187\\138\\229\\164\\169\\230\\153\\154\\228\\184\\138"#) -}
30d0cc48e6b28f45b19a532d2f3e695f
  rules167 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tonight"#) -}
f14445bc0f7b6523d6353046af6ba08e
  rules168 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules178
                   Duckling.Time.Rules.rules174
                   Duckling.Time.Rules.rules169) -}
e540d5225ea881b57ea2470fa557f27c
  rules169 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules170) -}
a4bb61970232767edb6ef9f653cdb30a
  rules17 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules583
                   Duckling.Time.Rules.rules18) -}
1cf229f2056b38f206057cc78254fbae
  rules170 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules159 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules156 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules171 Duckling.Time.Rules.rules155
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
dba07cd90289f2794b74f40dcb39f3c3
  rules171 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Rules.rules172
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
4a9b8a9e3a1e7602d3e7a1a49dea8ff8
  rules172 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules173
                        GHC.Types.False
                        Duckling.Time.Rules.rules122 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
bb1d2aef664beb44d08e9a7b79c2e24c
  rules173 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
c74c6ab0185dfd480932c82445095b05
  rules174 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules175
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3109b13b2973e7e189dcfccc3959d888
  rules175 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules176) -}
188b9e404b1fbf4ddf2cf3d9160fb5e4
  rules176 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules177) -}
a84d001f07c7077bd127418870b22cb1
  rules177 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\230\\153\\154|\\230\\152\\142\\229\\164\\169\\230\\153\\154\\228\\184\\138|\\232\\129\\189\\230\\153\\154"#) -}
25b3e2b14afe564afd903d9e35d24065
  rules178 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tomorrow night"#) -}
56e14713c0cc78171d16b8a37826230f
  rules179 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules188
                   Duckling.Time.Rules.rules184
                   Duckling.Time.Rules.rules180) -}
30141482c93ccc508ac8d43cd0b99deb
  rules18 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules574
                   Duckling.Time.Rules.rules19) -}
7aede005bda3d3b8468d41075e4d5fb3
  rules180 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules181) -}
9752e6a33df9a30b40993eb2271ada2e
  rules181 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules182) -}
b18149ff6969baee0181ce2bb082dc73
  rules182 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules183) -}
0b4ec26ecf60d73888dd473599e53fa7
  rules183 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules172
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
dc8ad3199c963128e3c5c3da5eb64895
  rules184 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules185
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
7c0217e1229ce150abacd17d477cd0fa
  rules185 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules186) -}
8acfbd61d7e4f3ba3a3a1237cb428ed2
  rules186 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules187) -}
dff63e9da8e423a70d4bf056f617d23b
  rules187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\229\\164\\169|\\230\\152\\142\\230\\151\\165|\\232\\129\\189\\230\\151\\165"#) -}
395120b509feabf64c09cdfe1988f4cd
  rules188 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tomorrow"#) -}
ca14ab3a3f769b4dc33db3d11de8514a
  rules189 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules197
                   Duckling.Time.Rules.rules193
                   Duckling.Time.Rules.rules190) -}
cbb0761b8ad51d32a2fcbc54baa5c149
  rules19 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules567
                   Duckling.Time.Rules.rules20) -}
1c1d7c669b0ed703eb2920ee450c0f43
  rules190 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules191) -}
33df40b509b310bccd99a160e2988e9c
  rules191 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules192) -}
3e397ab316b7adb1288f8b14130ebb1c
  rules192 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.today) -}
10e89c5f4746967fa4d8305394313b1f
  rules193 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules194
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
dcecae82f8b65b823a5ffd33c0425647
  rules194 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules195) -}
367c213a033e0fd0f2671e1818fffec3
  rules195 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules196) -}
0d9e7f817cd0dc6c66b13f39746de7b9
  rules196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\229\\164\\169|\\228\\187\\138\\230\\151\\165"#) -}
81fb5a91fb5eadf201e6b60ccc6c2e5b
  rules197 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "today"#) -}
460d2f3bb8903ec5045130dca2734f77
  rules198 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules206
                   Duckling.Time.Rules.rules200
                   Duckling.Time.Rules.rules199) -}
ad2fee616b7a6abeea9d302dc8cec64c
  rules199 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.notLatent td `cast` (Sub cobox0))) } } }) -}
1cb677441d608dcdbe74052cc11f7004
  rules2 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules704
                   Duckling.Time.Rules.rules3) -}
6198aaaee63602314247f37872cfbe3b
  rules20 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules556
                   Duckling.Time.Rules.rules21) -}
f83817e0c3c213fff4fb59bc3c8579be
  rules200 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules205
                   Duckling.Time.Rules.rules201) -}
0c0991107f5047f7a3aa65c033c521ac
  rules201 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules202
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
0a5b8ce2e79830d569807d7f86bf4483
  rules202 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules203) -}
e4d8ff880f3bd97efcdfb7e74a51a663
  rules203 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules204) -}
04158eef46e9dc5987becfdd07394ca7
  rules204 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\233\\187\\158|\\231\\130\\185|\\230\\153\\130|\\230\\151\\182"#) -}
73efc5e8f0af39b058de8591b412011b
  rules205 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isATimeOfDay) -}
373659e1bad4ba9fd906a3392965ab5f
  rules206 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<time-of-day> o'clock"#) -}
ae52fc892f38cace01b018efd9a86793
  rules207 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules214
                   Duckling.Time.Rules.rules209
                   Duckling.Time.Rules.rules208) -}
94b62bc18f29744b2d70055cb60abe35
  rules208 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1 -}
aa779c7d4416877500b793e0c7a8dfbf
  rules209 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules205
                   Duckling.Time.Rules.rules210) -}
6df211a5ba5a25d6b0b53fb476853486
  rules21 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules543
                   Duckling.Time.Rules.rules22) -}
c0944055e1899b84f0de3819c3628c3b
  rules210 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules211
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
7fa154ad51877b956f41a1d4078491fc
  rules211 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules212) -}
b318e22c38fe566f26e9f335f9df5309
  rules212 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules213) -}
4a39e3dcdd8e501406b6a0309cc2b1eb
  rules213 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "([ap])(\\s|\\.)?m?\\.?"#) -}
da2f66755c269fcec522d4862c782695
  rules214 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<time-of-day> am|pm"#) -}
32f799f8293f5c5ce9262403dc3435c1
  rules215 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules223
                   Duckling.Time.Rules.rules217
                   Duckling.Time.Rules.rules216) -}
cedec934a7fb63da235aada4e6573e83
  rules216 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n
                                                GHC.Types.True
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
01a8d03cdc28f6038368f835ad7c7586
  rules217 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules220
                   Duckling.Time.Rules.rules218) -}
67075e3384ba02becc10862fe679f041
  rules218 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules219
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1b39834cff931ee76c3bc6e5c4ad5293
  rules219 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isADayOfWeek) -}
217c6a43839bb7c1a023c04eff6ff784
  rules22 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules536
                   Duckling.Time.Rules.rules23) -}
b925152c1abb6e30755eea7f00655ce3
  rules220 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules221) -}
1e58eecee09d7e66ccb54089b8b4cbb7
  rules221 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules222) -}
99290c9c4183af738a5704f9714444df
  rules222 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142|\\228\\184\\139(\\228\\184\\170|\\229\\128\\139)?"#) -}
d2eda7a5995f9c7938579aba8f10836d
  rules223 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "next <day-of-week>"#) -}
93c9fca1a98eb4fdf44b244ab3a62441
  rules224 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules236
                   Duckling.Time.Rules.rules232
                   Duckling.Time.Rules.rules225) -}
67b0d7c150bc23e289d00100377f8472
  rules225 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules226) -}
86dac5094dd08d86e3b07d609e25245a
  rules226 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules227) -}
6cf60422b5b0cee0684aa1fce663b9a6
  rules227 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules228) -}
b5bde67a81eee5991a98b7a782a8b61a
  rules228 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules229
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
134345a22c2b42464b2df180d8db0112
  rules229 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules_n
                        GHC.Types.False
                        Duckling.Time.Rules.rules230 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
977a4bd58c9ae036a8db63c0b7f92f5f
  rules23 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules529
                   Duckling.Time.Rules.rules24) -}
e7ecab7f37a8d4c7797732129423ec49
  rules230 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Rules.rules231
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
91e5c35a5c42ad3fb5c43472dfbf409a
  rules231 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Year
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Year of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
53eab1bc7c8204d8ed37d5be7f85225a
  rules232 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules233
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
d8cf16e21d6e4c91441a73a32f336be7
  rules233 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules234) -}
3e527a51beac02c22ec5bdc4d2612552
  rules234 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules235) -}
c922a8d608cd05765933c2aee811cd13
  rules235 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\229\\185\\180"#) -}
14ebfffb2dcce9d2f67cbd2a3256c87d
  rules236 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this year"#) -}
6e2d7f61c3cf6ff5e716b82895bc0c86
  rules237 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules246
                   Duckling.Time.Rules.rules239
                   Duckling.Time.Rules.rules238) -}
c78b4d8d5bd6db82db9411637c337c44
  rules238 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
c6834fce440a47feb373c609dd50cfa4
  rules239 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules243
                   Duckling.Time.Rules.rules240) -}
4696622ed0d4f53c08559fd8f1b4574c
  rules24 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules518
                   Duckling.Time.Rules.rules25) -}
e96abad82fcd2c8e41ee916940dc6f8a
  rules240 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules241
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
adf42c4eaea7aa608a898d3c1468510d
  rules241 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules242) -}
222c8556c2c5a807287dfc43528087a1
  rules242 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a10 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox1 -> GHC.Types.True } }) -}
7ae3488a5ae7169a062a5a882d09e8be
  rules243 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules244) -}
318691ec65f31c53b091eafe9e632f8c
  rules244 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules245) -}
b2551bc55f119db9424b14c676adc2af
  rules245 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138(\\228\\184\\170|\\229\\128\\139)?|\\232\\191\\153(\\228\\184\\170)?|\\233\\128\\153(\\229\\128\\139)?"#) -}
8b16631b32603df286cab282cf1ec0b7
  rules246 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this <time>"#) -}
cecd164d127248fc8dd599fe91bec227
  rules247 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules252
                   Duckling.Time.Rules.rules248
                   Duckling.Time.Rules.rules238) -}
a3ab8aa04ae36891dabb1324965ad266
  rules248 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules249
                   Duckling.Time.Rules.rules218) -}
ba7c8b3a1cbea4dfd377baf6a5f2e818
  rules249 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules250) -}
3f2cb13366af83d6fdfab08ce86a4e3e
  rules25 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules503
                   Duckling.Time.Rules.rules26) -}
a7b383b914427c20b6ef6ca0fcc8b00f
  rules250 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules251) -}
8257a42a6004f86eacf8e7784819851b
  rules251 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\153|\\233\\128\\153|\\228\\187\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
d11af027b1076392af20c51b1079133e
  rules252 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "this <day-of-week>"#) -}
dcfcd97c4ef0e020714d3b2694ab1308
  rules253 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules262
                   Duckling.Time.Rules.rules255
                   Duckling.Time.Rules.rules254) -}
490fc44092a56c35ad37ac82900f4ee5
  rules254 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
5ace5312059bab9b131c06c8d1bc08e9
  rules255 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules259
                   Duckling.Time.Rules.rules256) -}
1edb279d083ecba81f68b989cda120f5
  rules256 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
96b2f2dd9a33dd3d227789774833f47f
  rules257 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules258) -}
3b59ca30a78ca16181e65a8da135f451
  rules258 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a10 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.TimeGrain cobox1 -> GHC.Types.True } }) -}
d5f7bd3e047a9195097b49729234d603
  rules259 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules260) -}
53f4722b358d054924f493852601b0b4
  rules26 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules491
                   Duckling.Time.Rules.rules27) -}
9e0a3babb88873729b9d4f70f27b3776
  rules260 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules261) -}
2e064b1a288c7ddf77daca3304fdd3e4
  rules261 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\232\\191\\153|\\233\\128\\153)(\\228\\184\\128)?|\\228\\187\\138\\229\\128\\139"#) -}
50ffff14422cfc66eebfb7ba11d6b087
  rules262 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this <cycle>"#) -}
8395f3c8819972c7347e247388ed8fa0
  rules263 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules274
                   Duckling.Time.Rules.rules270
                   Duckling.Time.Rules.rules264) -}
549df8f7ebeb89dd8d703a833c054b39
  rules264 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules265) -}
34edd93f0083b8b70b6eb2bfe118f76f
  rules265 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules266) -}
62dc9b7a7f04dce61a3005b2699e4fc4
  rules266 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules267) -}
bf7c05bdfcabea230501053ec76d2962
  rules267 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules268
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
45cf8cb1927b88cc45348c07f64479f2
  rules268 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules269
                        GHC.Types.False
                        Duckling.Time.Rules.rules122 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
a98f3e61a05608d079a3838e3d24488f
  rules269 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# -2#) -}
49139ce2025e8ef3fcb9e53d0881e8ee
  rules27 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules484
                   Duckling.Time.Rules.rules28) -}
c14d89896c8278650d5ac47c315ed60f
  rules270 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules271
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6480f151a6b326f30e112ac231a037fa
  rules271 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules272) -}
e3a533a5147c28ce8c611f305a796bf8
  rules272 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules273) -}
caa812787906125fe05bf96ca529fda7
  rules273 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\137\\141\\229\\164\\169|\\229\\137\\141\\230\\151\\165"#) -}
ad0d912d23e6d502c89a12645c5c7658
  rules274 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the day before yesterday"#) -}
2734a0b45eacdfe30fc619782504ef27
  rules275 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules286
                   Duckling.Time.Rules.rules282
                   Duckling.Time.Rules.rules276) -}
154160949eb79c0f07b529aab28da7f2
  rules276 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules277) -}
b37bb131c5d18b0edb8a81fb3d61abf7
  rules277 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules278) -}
d9314a4f760b4c570ec2df4c222a43e3
  rules278 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules279) -}
0d1f2e4f4f129ec4f10bd11c2e2d6d0c
  rules279 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules280
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
47211ee92a098023ecb5fec596cc286d
  rules28 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules475
                   Duckling.Time.Rules.rules29) -}
a7b48936510509592ea01966df0e9ca2
  rules280 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules281
                        GHC.Types.False
                        Duckling.Time.Rules.rules122 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
656a61d849f9beb969b2656760efe42d
  rules281 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
79af080f21c2f3f69c62903e96e450cd
  rules282 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules283
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1314efc612dccf7c8654418946c91fcd
  rules283 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules284) -}
09daeb1ccaed8fc12820d9cb3ac4e7ab
  rules284 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules285) -}
f6e351cbe1cc33a5a49b855b070f4118
  rules285 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\144\\142\\229\\164\\169|\\229\\190\\140\\229\\164\\169|\\229\\190\\140\\230\\151\\165"#) -}
d4ca5a2190a7b2e809cfd82ec4c1d3a6
  rules286 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the day after tomorrow"#) -}
65ed1591f9ee8372eea6a46f0d81593d
  rules287 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules298
                   Duckling.Time.Rules.rules289
                   Duckling.Time.Rules.rules288) -}
45c08bbccbf15fd8463acffc379c864e
  rules288 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case ds3 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds6 of wild5 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds7 ds8
                                       -> case ds7 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds9 td ->
                                          case ds9 of wild7 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox1
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case td
                                                            `cast`
                                                          (Sub cobox1) of wild8 { Duckling.Time.Types.TimeData ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                                                     Duckling.Time.Types.TimeData
                                                       (case Duckling.Time.Helpers.$wtakeNthAfter
                                                               Duckling.Time.Rules.rules124
                                                               GHC.Types.False
                                                               (Duckling.Time.Helpers.timeCycle
                                                                  grain `cast` (Sub cobox0))
                                                               ds10 of ww { Unit# ww1 ->
                                                        Duckling.Time.Types.SeriesPredicate ww1 })
                                                       GHC.Types.False
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False })) } } } } } } } }) -}
ff9a985d3be11f21bd47732a5fe0790a
  rules289 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules295
                   Duckling.Time.Rules.rules290) -}
33e5fe55ea187c308f3e44dd95bf1bb1
  rules29 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules464
                   Duckling.Time.Rules.rules30) -}
bac5212c90c60211869643842966bf42
  rules290 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules291) -}
a3442785f120ccbdff2f8e9cc3603068
  rules291 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules292
                   Duckling.Time.Rules.rules240) -}
86b9d9aa94a5eafa4ed86931f0dacf4a
  rules292 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules293) -}
fbcdf82ca5518273726477ecd07ffd88
  rules293 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules294) -}
8b658b4ec5ee61eb9c9c33a63dfbfe01
  rules294 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\185\\139)?\\229\\137\\141"#) -}
986ea49ecfdc0fdcfe4fadd28860b788
  rules295 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules296) -}
5b514c971ac76f999aca578f8c94febd
  rules296 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules297) -}
2400797329aea7db4b5b5f199045d155
  rules297 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\233\\130\\163"#) -}
b78f21c4d36d94e622228acf2d978133
  rules298 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the <cycle> before <time>"#) -}
8dc794678883eff7004d3c600151ce21
  rules299 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules307
                   Duckling.Time.Rules.rules301
                   Duckling.Time.Rules.rules300) -}
5b2b9cf14568d2bffd655d57532b7946
  rules3 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules690
                   Duckling.Time.Rules.rules4) -}
005911a7a51ec36350a468ab9e36c197
  rules30 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules460
                   Duckling.Time.Rules.rules31) -}
79d8323ce0a45f6ff9ac34e79f2910a4
  rules300 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case ds3 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds6 of wild5 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds7 ds8
                                       -> case ds7 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds9 td ->
                                          case ds9 of wild7 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox1
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case td
                                                            `cast`
                                                          (Sub cobox1) of wild8 { Duckling.Time.Types.TimeData ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                                                     Duckling.Time.Types.TimeData
                                                       (case Duckling.Time.Helpers.$wtakeNthAfter
                                                               Duckling.Time.Rules.rules173
                                                               GHC.Types.False
                                                               (Duckling.Time.Helpers.timeCycle
                                                                  grain `cast` (Sub cobox0))
                                                               ds10 of ww { Unit# ww1 ->
                                                        Duckling.Time.Types.SeriesPredicate ww1 })
                                                       GHC.Types.False
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False })) } } } } } } } }) -}
cfe2c1ef6ffd390483330b0d4848c433
  rules301 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules295
                   Duckling.Time.Rules.rules302) -}
4cf4443d3d6d6546cc0226a4c16bcacf
  rules302 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules303) -}
047e3b6c2e00325dd1c22f59704c3e51
  rules303 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules304
                   Duckling.Time.Rules.rules240) -}
7d8ab3b9f2f6d7bccdefecb49af5f1e1
  rules304 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules305) -}
164c51d92c8bef4921e122921f0017bc
  rules305 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules306) -}
9e85f98b210a56dde5d9e84e644645a7
  rules306 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\185\\139)?(\\229\\144\\142|\\229\\190\\140)"#) -}
2e0aa8dec8ac23084fed772e88a3c01f
  rules307 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the <cycle> after <time>"#) -}
10ff53a21e785d34a5055c4f1e5cfc8e
  rules308 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules321
                   Duckling.Time.Rules.rules311
                   Duckling.Time.Rules.rules309) -}
815144232d9e597ba82c8393b2391e28
  rules309 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case td
                                  `cast`
                                (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                           case Duckling.Time.Helpers.$wminutesBefore
                                  Duckling.Time.Rules.rules310
                                  ww5 of wild3 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just x
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                     $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                     $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                     $dShow `cast` (GHC.Show.Show cobox0)_R
                                     $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                     Duckling.Types.$WTime
                                     x) } } } } }) -}
19d417bcd0bfdf9a9a0481790a3a487c
  rules31 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules449
                   Duckling.Time.Rules.rules32) -}
01f8e0554917d5358cc466fa3898c28d
  rules310 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 30#) -}
92958c59d8ffa3eb7f042065147f2c44
  rules311 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules312) -}
8c16211fb6270db54477cd89a58f27f4
  rules312 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules317
                   Duckling.Time.Rules.rules313) -}
8c4b4158ede58af7ea39efaa52963e3b
  rules313 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules314
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
fb1037f01da6dfd8542a8dd7a494b86b
  rules314 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules315) -}
42551cb79ecccf620ee93ba71585d9cc
  rules315 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules316) -}
59246da8185ceeaeb05afdf42b7280c9
  rules316 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\141\\138"#) -}
65fb83b0f4ed91e7e572bf45cb83bc5a
  rules317 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules318) -}
b6254bd6811e441c381c6c3e6cc6b1b7
  rules318 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules319) -}
4ca69338e83683644c32e5b570059968
  rules319 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\183\\174"#) -}
9a8baf388639f9da63acafcf06d973f7
  rules32 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules433
                   Duckling.Time.Rules.rules33) -}
1dde28ccd98cc29c197d1a6f48876c7d
  rules320 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isMidnightOrNoon) -}
9dfc7bc6864c8944348d48e46c197cba
  rules321 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half to|till|before noon|midnight"#) -}
49c4414a5c9ca3081a2dc059f8c7eb71
  rules322 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules329
                   Duckling.Time.Rules.rules323
                   Duckling.Time.Rules.rules309) -}
0bf274a64fc7886b5a15d2b5d47fdcdd
  rules323 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules324) -}
60849f9473eeb222f55a86070ffc376d
  rules324 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules325
                   Duckling.Time.Rules.rules313) -}
283e6577acf165216a834daf829a6895
  rules325 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules326) -}
5a820efe3e50e1e8b45b5923a9d075cb
  rules326 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules327) -}
f180a38935248352c2fa71534658d187
  rules327 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\230\\151\\182|\\231\\130\\185|\\233\\187\\158)\\229\\183\\174"#) -}
2a930f5a236e6256e09043e5a39bf18c
  rules328 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAnHourOfDay) -}
ccdae14abdb765a2647254dd6377a2fa
  rules329 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half to|till|before <integer> (hour-of-day)"#) -}
fe2eb32f39518e71af53807ef46c592c
  rules33 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules424
                   Duckling.Time.Rules.rules34) -}
8e60e551dd5b2b802c2c2da0328d8deb
  rules330 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules339
                   Duckling.Time.Rules.rules334
                   Duckling.Time.Rules.rules331) -}
c4aba0ca6b6589a50d565c9174bcddec
  rules331 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (Duckling.Time.Types.TimeData
                                                  (Duckling.Time.Types.mkIntersectPredicate
                                                     Duckling.Time.Rules.rules332
                                                     (Duckling.Time.Types.TimeDatePredicate
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Just
                                                           @ (GHC.Types.Bool, GHC.Types.Int)
                                                           (GHC.Types.True, hours))
                                                        (GHC.Base.Nothing
                                                           @ Duckling.Time.Types.AMPM)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)))
                                                  GHC.Types.False
                                                  Duckling.TimeGrain.Types.Minute
                                                  GHC.Types.False
                                                  (GHC.Base.Just
                                                     @ Duckling.Time.Types.Form
                                                     (Duckling.Time.Types.TimeOfDay
                                                        wild6
                                                        GHC.Types.True))
                                                  (GHC.Base.Nothing
                                                     @ Duckling.Time.Types.IntervalDirection)
                                                  GHC.Types.False
                                                  (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                  GHC.Types.False)) } } } } } } }) -}
719b0699e7de5bd8a3f6f3b5ea5e2475
  rules332 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules333
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
79b390b94ca8565f6a0c93fe289292ae
  rules333 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules310) -}
8a14b0b0ea86558ba8daea7c311d624d
  rules334 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules335) -}
d128ec194f7cfde1d298a435f6adb4ab
  rules335 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules313) -}
716b249fa8e753690118ff9ca819390b
  rules336 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules337) -}
68424bb914b917ff4e23ca448390e6f2
  rules337 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules338) -}
23f02ccf4a00b6819490ef40287ecf81
  rules338 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\135"#) -}
f725c2cad87c59459ecb2d186a403e75
  rules339 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half after|past noon|midnight"#) -}
b0da562e485c97c652ba66100bcef5d9
  rules34 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules421
                   Duckling.Time.Rules.rules35) -}
90ddb9d4ddf766fb323e9582df1124cf
  rules340 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules346
                   Duckling.Time.Rules.rules341
                   Duckling.Time.Rules.rules331) -}
4bf94f6e4c043798079ee5c7f66b2d50
  rules341 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules342) -}
f125c7bf2d7579b41cf12b02c81e7512
  rules342 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules343
                   Duckling.Time.Rules.rules313) -}
fd16dca80019961b399e16fc6976b600
  rules343 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules344) -}
51fb89fe1933e4838d016e640b5e5285
  rules344 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules345) -}
1481692541c1bdd88c3ef892e2ab8ac4
  rules345 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\151\\182|\\231\\130\\185|\\233\\187\\158"#) -}
6b6e1c66855dc7a8ecc4f5e6d5f0a27f
  rules346 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half after|past <integer> (hour-of-day)"#) -}
f9e7c2a22ddf0830c38a956f4951ad6a
  rules347 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules356
                   Duckling.Time.Rules.rules350
                   Duckling.Time.Rules.rules348) -}
af7b4f7ef7a59ac2bd2e46fe30fd8393
  rules348 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case td
                                  `cast`
                                (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                           case Duckling.Time.Helpers.$wminutesBefore
                                  Duckling.Time.Rules.rules349
                                  ww5 of wild3 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just x
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                     $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                     $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                     $dShow `cast` (GHC.Show.Show cobox0)_R
                                     $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                     Duckling.Types.$WTime
                                     x) } } } } }) -}
4270b2cc065cbbdefd5a3f0d2ec44b4d
  rules349 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
40aec75939a0be2846322be0ea8dc2c1
  rules35 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules410
                   Duckling.Time.Rules.rules36) -}
ab238d1a665fc86632d1c694fe818673
  rules350 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules351) -}
cd10764fbb4b6879c5502bb6c09b27b6
  rules351 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules317
                   Duckling.Time.Rules.rules352) -}
caa5d2e1fa328779699dae2c3100806d
  rules352 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules353
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e6a676696d091857b2fee1ccde3d1f48
  rules353 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules354) -}
cbf9e91ce72ab1f03548c6b6ff064c2b
  rules354 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules355) -}
f239581d2d953d10ceee3bccbf318bb9
  rules355 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\128\\229\\136\\187"#) -}
ee6d0aee65543df318165a7e97f5f46b
  rules356 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter to|till|before noon|midnight"#) -}
13678fe9fcb6f54c4f141c2d7e777815
  rules357 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules360
                   Duckling.Time.Rules.rules358
                   Duckling.Time.Rules.rules348) -}
74902cea73b70d252bb2cdc6fd827a21
  rules358 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules359) -}
62e8c2ba560b0da7ddd957cefb513b76
  rules359 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules325
                   Duckling.Time.Rules.rules352) -}
dafcd15874cb2a20998e8f077c63a4be
  rules36 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules405
                   Duckling.Time.Rules.rules37) -}
07e0e517307a0a71d1871a5fbac15c97
  rules360 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter to|till|before <integer> (hour-of-day)"#) -}
e85e75561e4040656137cfa2976ef197
  rules361 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules367
                   Duckling.Time.Rules.rules365
                   Duckling.Time.Rules.rules362) -}
bd8aab0da2dfb3aca06acc05ad01d252
  rules362 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (Duckling.Time.Types.TimeData
                                                  (Duckling.Time.Types.mkIntersectPredicate
                                                     Duckling.Time.Rules.rules363
                                                     (Duckling.Time.Types.TimeDatePredicate
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Just
                                                           @ (GHC.Types.Bool, GHC.Types.Int)
                                                           (GHC.Types.True, hours))
                                                        (GHC.Base.Nothing
                                                           @ Duckling.Time.Types.AMPM)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)))
                                                  GHC.Types.False
                                                  Duckling.TimeGrain.Types.Minute
                                                  GHC.Types.False
                                                  (GHC.Base.Just
                                                     @ Duckling.Time.Types.Form
                                                     (Duckling.Time.Types.TimeOfDay
                                                        wild6
                                                        GHC.Types.True))
                                                  (GHC.Base.Nothing
                                                     @ Duckling.Time.Types.IntervalDirection)
                                                  GHC.Types.False
                                                  (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                  GHC.Types.False)) } } } } } } }) -}
901bd4e22c3ab67863105a75a34aafd4
  rules363 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules364
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
4310cdd34f8021f2eac6ad92511ffc7c
  rules364 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules349) -}
3516f94f3715ad480ea7d2c80ec763eb
  rules365 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules366) -}
5b74b6daaead1afceca5d980c8d3113d
  rules366 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules352) -}
92f60361375263e15699c5b55a0f595f
  rules367 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter after|past noon|midnight"#) -}
87b1d2dc3d08372617c70a47fcde2ef0
  rules368 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules371
                   Duckling.Time.Rules.rules369
                   Duckling.Time.Rules.rules362) -}
0b844753fd42be2d525d0f6b9a8c2e44
  rules369 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules370) -}
4b909e53641a48dca28e2428ce92da3a
  rules37 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules398
                   Duckling.Time.Rules.rules38) -}
ad9a4212639418cf48bad0b27b580aae
  rules370 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules343
                   Duckling.Time.Rules.rules352) -}
10c6f30b722536bb3d331f5bda889537
  rules371 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter after|past <integer> (hour-of-day)"#) -}
abe2d6dd6267a42f18a554199517b1c4
  rules372 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules379
                   Duckling.Time.Rules.rules374
                   Duckling.Time.Rules.rules373) -}
bead2b6f7588e9cf55b84fd6c03fc39a
  rules373 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : token ds5
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True
                                                 -> case td
                                                           `cast`
                                                         (Sub cobox0) of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                    case Duckling.Time.Helpers.$wminutesBefore
                                                           (GHC.Types.I# n2)
                                                           ww7 of wild10 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              $dResolve
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox0)_R
                                                              $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                              $dHashable
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox0)_R
                                                              $dShow `cast` (GHC.Show.Show cobox0)_R
                                                              $dNFData
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox0)_R
                                                              Duckling.Types.$WTime
                                                              x) } } }
                                            GHC.Types.True
                                            -> case td
                                                      `cast`
                                                    (Sub cobox0) of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                               case Duckling.Time.Helpers.$wminutesBefore
                                                      GHC.Float.RealFracMethods.properFractionDoubleInt3
                                                      ww7 of wild9 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         $dResolve
                                                           `cast`
                                                         (Duckling.Resolve.Resolve cobox0)_R
                                                         $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                         $dHashable
                                                           `cast`
                                                         (Data.Hashable.Class.Hashable cobox0)_R
                                                         $dShow `cast` (GHC.Show.Show cobox0)_R
                                                         $dNFData
                                                           `cast`
                                                         (Control.DeepSeq.NFData cobox0)_R
                                                         Duckling.Types.$WTime
                                                         x) } } } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> case td
                                                 `cast`
                                               (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                          case Duckling.Time.Helpers.$wminutesBefore
                                                 nd
                                                   `cast`
                                                 (Trans
                                                      (Sub cobox1)
                                                      (Duckling.Ordinal.Types.N:OrdinalData[0]))
                                                 ww5 of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    $dResolve
                                                      `cast`
                                                    (Duckling.Resolve.Resolve cobox0)_R
                                                    $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                    $dHashable
                                                      `cast`
                                                    (Data.Hashable.Class.Hashable cobox0)_R
                                                    $dShow `cast` (GHC.Show.Show cobox0)_R
                                                    $dNFData
                                                      `cast`
                                                    (Control.DeepSeq.NFData cobox0)_R
                                                    Duckling.Types.$WTime
                                                    x) } } } } } } } } }) -}
e7da036819eea9a1f74d88247400dcbd
  rules374 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules375) -}
a46191b0d7d792486cdb757235ccf89e
  rules375 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules317
                   Duckling.Time.Rules.rules376) -}
ef020c71d0f74682b562033bf2dbfa23
  rules376 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules377
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
154cdddb1e2a5e90b9cc3c5ac9f33c9b
  rules377 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules378) -}
037348c8e66b9dd2f57d3bf9ef3e8f17
  rules378 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
57f48c22e1042ca5b7431d9048a096a5
  rules379 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes to|till|before noon|midnight"#) -}
56e995b3a4bea13fde78bb2f32aa28d5
  rules38 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules387
                   Duckling.Time.Rules.rules39) -}
0f47dbba061d1e12d7d2dc08e98c2d20
  rules380 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules386
                   Duckling.Time.Rules.rules381
                   Duckling.Time.Rules.rules373) -}
47afc2e9bdaab7469373ba604a8bff83
  rules381 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules382) -}
9c46f1fcd2651703a6af14b1c4f1cf06
  rules382 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules325
                   Duckling.Time.Rules.rules383) -}
e8e3084188ffdf158d7e6f5ad334b50e
  rules383 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules384
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6376aa4e0fa7d9e0583dbf325ff0bd64
  rules384 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules385) -}
8d954159f784a10f0531b13db8d4e05d
  rules385 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
43f9c59193fc3dfeccc6d22038f4098c
  rules386 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes to|till|before <integer> (hour-of-day)"#) -}
bc21fdd188e8070cd98f76493d0a6bd2
  rules387 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules397
                   Duckling.Time.Rules.rules389
                   Duckling.Time.Rules.rules388) -}
a006d8eb45e35c5200c26134eae0f075
  rules388 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> case ds1 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds16 ds17
                                            -> case ds17 of wild8 {
                                                 [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 : token ds18
                                                 -> case token of wild9 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds19 nd ->
                                                    case ds19 of wild10 {
                                                      DEFAULT
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      Duckling.Types.Numeral cobox1
                                                      -> case nd
                                                                `cast`
                                                              (Sub cobox1) of wild11 { Duckling.Numeral.Types.NumeralData ds20 ds21 ds22 ds23 ->
                                                         case ds20 of ww { GHC.Types.D# ww1 ->
                                                         let {
                                                           $j :: GHC.Types.Int
                                                                 -> GHC.Base.Maybe
                                                                      Duckling.Types.Token
                                                             {- Arity: 1, Strictness: <L,U> -}
                                                           = \ (x :: GHC.Types.Int)[OneShot] ->
                                                             GHC.Base.Just
                                                               @ Duckling.Types.Token
                                                               (Duckling.Types.Token
                                                                  @ Duckling.Time.Types.TimeData
                                                                  Duckling.Time.Types.$fResolveTimeData
                                                                  Duckling.Time.Types.$fEqTimeData
                                                                  Duckling.Time.Types.$fHashableTimeData
                                                                  Duckling.Time.Types.$fShowTimeData
                                                                  Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                    `cast`
                                                                  (Sym (Control.DeepSeq.N:NFData[0]
                                                                            <Duckling.Time.Types.TimeData>_N))
                                                                  Duckling.Types.$WTime
                                                                  (Duckling.Time.Types.TimeData
                                                                     (Duckling.Time.Types.mkIntersectPredicate
                                                                        (Duckling.Time.Types.mkMinutePredicate
                                                                           x)
                                                                        (Duckling.Time.Types.TimeDatePredicate
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Just
                                                                              @ (GHC.Types.Bool,
                                                                                 GHC.Types.Int)
                                                                              (GHC.Types.True,
                                                                               hours))
                                                                           (GHC.Base.Nothing
                                                                              @ Duckling.Time.Types.AMPM)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)))
                                                                     GHC.Types.False
                                                                     Duckling.TimeGrain.Types.Minute
                                                                     GHC.Types.False
                                                                     (GHC.Base.Just
                                                                        @ Duckling.Time.Types.Form
                                                                        (Duckling.Time.Types.TimeOfDay
                                                                           wild6
                                                                           GHC.Types.True))
                                                                     (GHC.Base.Nothing
                                                                        @ Duckling.Time.Types.IntervalDirection)
                                                                     GHC.Types.False
                                                                     (GHC.Base.Nothing
                                                                        @ Data.Text.Internal.Text)
                                                                     GHC.Types.False))
                                                         } in
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.==##
                                                                   ww1
                                                                   0.0##) of wild12 {
                                                           GHC.Types.False
                                                           -> let {
                                                                n2 :: GHC.Prim.Int#
                                                                = GHC.Prim.double2Int# ww1
                                                              } in
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.==##
                                                                        (GHC.Prim.-##
                                                                           ww1
                                                                           (GHC.Prim.int2Double#
                                                                              n2))
                                                                        0.0##) of wild13 {
                                                                GHC.Types.False
                                                                -> GHC.Base.Nothing
                                                                     @ Duckling.Types.Token
                                                                GHC.Types.True
                                                                -> $j (GHC.Types.I# n2) }
                                                           GHC.Types.True
                                                           -> $j
                                                                GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                                      Duckling.Types.Ordinal cobox1
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.mkMinutePredicate
                                                                       nd
                                                                         `cast`
                                                                       (Trans
                                                                            (Sub cobox1)
                                                                            (Duckling.Ordinal.Types.N:OrdinalData[0])))
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int)
                                                                          (GHC.Types.True, hours))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Minute
                                                                 GHC.Types.False
                                                                 (GHC.Base.Just
                                                                    @ Duckling.Time.Types.Form
                                                                    (Duckling.Time.Types.TimeOfDay
                                                                       wild6
                                                                       GHC.Types.True))
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } } }) -}
d843b03098886b71b3420dce342a491b
  rules389 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules390) -}
1e58e9d0bd8cdcb94cdb9f56dc09c5ac
  rules39 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules380
                   Duckling.Time.Rules.rules40) -}
d6bf88ec8b16b4682a756feb8acebbe0
  rules390 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules394
                   Duckling.Time.Rules.rules391) -}
5d623610ac50c378dc896622346b579a
  rules391 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules392
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
f5342bfa90fe6ea28b6045b04cff7859
  rules392 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules393) -}
e3ec29b06f6a15cfbfa5f4b661bd1798
  rules393 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
63b0f04ec981b0f54a91d0a3b3dd0c80
  rules394 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules395) -}
6ee85fb065d95cb2d1292ab8369179cf
  rules395 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules396) -}
d5e3583dfafa383df6722b8c4b26ee97
  rules396 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\135|\\233\\129\\142"#) -}
7bfb82106a0cddfb2fca7bc0208ed418
  rules397 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes after|past noon|midnight"#) -}
e4cef4eb8dd764ec9670a2dbcb8e0609
  rules398 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules404
                   Duckling.Time.Rules.rules399
                   Duckling.Time.Rules.rules388) -}
661fa9e996721a2debd06644ed498019
  rules399 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules328
                   Duckling.Time.Rules.rules400) -}
f15f3460785b85a674fa1eeca6e4f134
  rules4 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules686
                   Duckling.Time.Rules.rules5) -}
755269f5c00102fa44a75af35c315cc0
  rules40 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules372
                   Duckling.Time.Rules.rules41) -}
c84cb610bf1ef9a023e9927f723cb624
  rules400 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules343
                   Duckling.Time.Rules.rules401) -}
5e24431faa98b570b83cc0dae95c33a6
  rules401 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules402
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
37e0f35365cddf1d0ff6f6741f8a50a2
  rules402 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules403) -}
42eb23281ce44903c24123780f48c5e2
  rules403 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
da9c90102c73974718ceb1b78ec930a6
  rules404 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes after|past <integer> (hour-of-day)"#) -}
a0300ebcef46305badeb73a793737c2a
  rules405 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules409
                   Duckling.Time.Rules.rules407
                   Duckling.Time.Rules.rules406) -}
2b4233a8cb82e599a8c2f3d3c57f56c7
  rules406 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 td2 ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Time cobox1
                                  -> case td1
                                            `cast`
                                          (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                     case td2
                                            `cast`
                                          (Sub cobox1) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                     case Duckling.Time.Helpers.$wintersect
                                            ww1
                                            ww3
                                            ww6
                                            ww8
                                            ww11
                                            ww13
                                            ww16
                                            ww18 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WTime
                                               x) } } } } } } } } }) -}
d50cf3c4af7346fc970bcb670d356e49
  rules407 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules408
                   Duckling.Time.Rules.rules240) -}
10d79362a1b51a7a5f2900704218e59e
  rules408 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAPartOfDay) -}
50bf2ea2aa221865547c2286f227cb5b
  rules409 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<part-of-day> <dim time>"#) -}
f225b1de2ff22e85b6d0182453815a52
  rules41 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules368
                   Duckling.Time.Rules.rules42) -}
7440f7f48b9a9330bb0ed050018c9e1b
  rules410 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules420
                   Duckling.Time.Rules.rules412
                   Duckling.Time.Rules.rules411) -}
c78ab623aeca8f7e937e82b0f19be99f
  rules411 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds5 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 od ->
                                     case ds7 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Ordinal cobox1
                                       -> case ds6 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds8 ds9
                                            -> case ds8 of wild8 { Duckling.Types.Token a2 $dResolve2 $dEq2 $dHashable2 $dShow2 $dNFData2 ds10 td2 ->
                                               case ds10 of wild9 {
                                                 DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 Duckling.Types.Time cobox2
                                                 -> case td2
                                                           `cast`
                                                         (Sub cobox2) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                    case td1
                                                           `cast`
                                                         (Sub cobox0) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                                    case Duckling.Time.Helpers.$wintersect
                                                           ww1
                                                           ww3
                                                           ww6
                                                           ww8
                                                           ww11
                                                           ww13
                                                           ww16
                                                           ww18 of wild10 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              $dResolve
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox0)_R
                                                              $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                              $dHashable
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox0)_R
                                                              $dShow `cast` (GHC.Show.Show cobox0)_R
                                                              $dNFData
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox0)_R
                                                              Duckling.Types.$WTime
                                                              (case x of wild11 { Duckling.Time.Types.TimeData ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ->
                                                               Duckling.Time.Types.TimeData
                                                                 (case Duckling.Time.Helpers.$wtakeNth
                                                                         (case od
                                                                                 `cast`
                                                                               (Trans
                                                                                    (Sub cobox1)
                                                                                    (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild12 { GHC.Types.I# x1 ->
                                                                          GHC.Types.I#
                                                                            (GHC.Prim.-# x1 1#) })
                                                                         GHC.Types.False
                                                                         ds11 of ww22 { Unit# ww23 ->
                                                                  Duckling.Time.Types.SeriesPredicate
                                                                    ww23 })
                                                                 GHC.Types.False
                                                                 ds13
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 ds18
                                                                 GHC.Types.False })) } } } } } } } } } } } } }) -}
1e2522f8bc6aff82defc7cf05b4c009b
  rules412 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules241
                   Duckling.Time.Rules.rules413) -}
32a80a538f44eac75173067f87cfe451
  rules413 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules417
                   Duckling.Time.Rules.rules414) -}
244f20330b0f4b0b29c27f43e70938e0
  rules414 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules415
                   Duckling.Time.Rules.rules240) -}
bd8ff7690bb74f520c6fd4a7f52fc65e
  rules415 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules416) -}
a19fe859c929cb5836d017083423a940
  rules416 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a10 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Ordinal cobox1 -> GHC.Types.True } }) -}
c430b164c19d89f7b24053db0603811f
  rules417 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules418) -}
5611fefbcad6ea53cfa53f583b40707d
  rules418 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules419) -}
d17fa69888abbf1dd3faaa19c230cafe
  rules419 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\231\\154\\132"#) -}
a11943d8b309b355e70bdf40725e4643
  rules42 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules361
                   Duckling.Time.Rules.rules43) -}
a11e93aec11d72c6f9380d01e5dc97c6
  rules420 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "nth <time> of <time>"#) -}
aab964018da601b7aeb3700979a62a61
  rules421 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules420
                   Duckling.Time.Rules.rules423
                   Duckling.Time.Rules.rules422) -}
c3414210fa8d3c8d354cdcc6e2fc63fb
  rules422 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 od ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Ordinal cobox1
                                  -> case ds4 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds6 ds7
                                       -> case ds6 of wild7 { Duckling.Types.Token a2 $dResolve2 $dEq2 $dHashable2 $dShow2 $dNFData2 ds8 td2 ->
                                          case ds8 of wild8 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox2
                                            -> case td2
                                                      `cast`
                                                    (Sub cobox2) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                               case td1
                                                      `cast`
                                                    (Sub cobox0) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                               case Duckling.Time.Helpers.$wintersect
                                                      ww1
                                                      ww3
                                                      ww6
                                                      ww8
                                                      ww11
                                                      ww13
                                                      ww16
                                                      ww18 of wild9 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         $dResolve
                                                           `cast`
                                                         (Duckling.Resolve.Resolve cobox0)_R
                                                         $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                         $dHashable
                                                           `cast`
                                                         (Data.Hashable.Class.Hashable cobox0)_R
                                                         $dShow `cast` (GHC.Show.Show cobox0)_R
                                                         $dNFData
                                                           `cast`
                                                         (Control.DeepSeq.NFData cobox0)_R
                                                         Duckling.Types.$WTime
                                                         (case x of wild10 { Duckling.Time.Types.TimeData ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                                                          Duckling.Time.Types.TimeData
                                                            (case Duckling.Time.Helpers.$wtakeNth
                                                                    (case od
                                                                            `cast`
                                                                          (Trans
                                                                               (Sub cobox1)
                                                                               (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild11 { GHC.Types.I# x1 ->
                                                                     GHC.Types.I#
                                                                       (GHC.Prim.-# x1 1#) })
                                                                    GHC.Types.False
                                                                    ds9 of ww22 { Unit# ww23 ->
                                                             Duckling.Time.Types.SeriesPredicate
                                                               ww23 })
                                                            GHC.Types.False
                                                            ds11
                                                            GHC.Types.False
                                                            (GHC.Base.Nothing
                                                               @ Duckling.Time.Types.Form)
                                                            (GHC.Base.Nothing
                                                               @ Duckling.Time.Types.IntervalDirection)
                                                            GHC.Types.False
                                                            ds16
                                                            GHC.Types.False })) } } } } } } } } } } } }) -}
cc40d7644487b767f0c849e1d1ef2d2e
  rules423 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules241
                   Duckling.Time.Rules.rules414) -}
62b8b6dfede5194007bfd5071db4e78b
  rules424 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules432
                   Duckling.Time.Rules.rules428
                   Duckling.Time.Rules.rules425) -}
dac02afa4ee7a491df5adf5da203db64
  rules425 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules426) -}
7e5a18a9a14e91eb64aaa6e87e572bb6
  rules426 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules427) -}
981f368fa32eda8ad075874f2b897743
  rules427 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.now) -}
ddc58a33083c2280ceb6e1039c88c82b
  rules428 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules429
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3a8a65145c40ac17ed3bdd645716039a
  rules429 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules430) -}
0b77cab06dcac0651295cf9527862d2a
  rules43 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules357
                   Duckling.Time.Rules.rules44) -}
5e13adfcdfcd4475dd7a08626b7ca7e1
  rules430 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules431) -}
eaedb132c956eb71d657bbe33a8d7d64
  rules431 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\231\\142\\176\\229\\156\\168|\\230\\173\\164\\230\\151\\182|\\230\\173\\164\\229\\136\\187|\\229\\189\\147\\229\\137\\141|\\231\\143\\190\\229\\156\\168|\\230\\173\\164\\230\\153\\130|\\231\\149\\182\\229\\137\\141|\\229\\174\\156\\229\\174\\182|\\232\\128\\140\\229\\174\\182|\\228\\190\\157\\229\\174\\182"#) -}
705c0b2efd0d1933e67e0206cc6b2993
  rules432 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "now"#) -}
1c63a2ada6c5073d1e7b56dabba6523c
  rules433 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules448
                   Duckling.Time.Rules.rules444
                   Duckling.Time.Rules.rules434) -}
063846e9029a6915e2d75db0af09c03f
  rules434 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules435) -}
92604f5d5f8f3af4f7f253dd05e291ea
  rules435 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules436) -}
a38cc0a15fd13d56c38edb13cf7db445
  rules436 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules437) -}
4a24fa24ac501fce1666210a32f82d34
  rules437 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules441
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules438
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
acaf1df531a114126582513a5609fba6
  rules438 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules439) -}
4b9490123cae32d699427cdf7d113602
  rules439 :: Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules440
                   GHC.Types.False) -}
c7d556a2f359bf48e38b4cd52cdf8360
  rules44 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules347
                   Duckling.Time.Rules.rules45) -}
79801febd64aa40fa7c9a4c64388b523
  rules440 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules_n2) -}
a418d3ac3469b9e957324290e1b98e5b
  rules441 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules442
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
afd0ee8ce0e099e99f82b072ebb263a9
  rules442 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules443) -}
3efa118f564fbdead6af9954a34bef77
  rules443 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n2)) -}
fffb4034a604dbbcd2e50ce67eb73ed9
  rules444 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules445
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2248504957be39a3698585417681ff99
  rules445 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules446) -}
179641f9fa020501e48d36b4ada3c24d
  rules446 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules447) -}
7f098a9806d4a97bbdbb045a1b97ca8a
  rules447 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\173\\229\\141\\136"#) -}
8ca99508d7710c3925467aa6177c96d9
  rules448 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "noon"#) -}
8ea333beaf546b869ad1c6cb71d13afa
  rules449 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules459
                   Duckling.Time.Rules.rules455
                   Duckling.Time.Rules.rules450) -}
5541f3e5820decefc58298838c4f8db6
  rules45 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules340
                   Duckling.Time.Rules.rules46) -}
56dd11376a992458c4a0a428d98d1373
  rules450 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules451) -}
53daa36bf2c5dd6c1a1570982e3e36f7
  rules451 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules452) -}
56e8da7ed5f532ba5eaf07c3e2cf5cad
  rules452 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules453) -}
c920667446067a32dccc1f5e7b9fc1c6
  rules453 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules454
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
c31e891fb87e2f2610cc6ea6f86c7ea1
  rules454 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules173
                        GHC.Types.False
                        Duckling.Time.Rules.rules230 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
8b7e86d687da780d796841ed83190b85
  rules455 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules456
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
ee368c06c9942fc4e57fc9e52b359a6e
  rules456 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules457) -}
cf1e2939686231592091870479c36221
  rules457 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules458) -}
74a4272a525067da61a21886dc5e1c99
  rules458 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\229\\185\\180|\\228\\184\\139\\229\\185\\180"#) -}
4411009c35bf19a8c5e3af2cf664bf6b
  rules459 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next year"#) -}
8cbd989a8208439a425810bd6692383f
  rules46 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules330
                   Duckling.Time.Rules.rules47) -}
ae02c8cdf539006d0757ee527abc8711
  rules460 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules463
                   Duckling.Time.Rules.rules462
                   Duckling.Time.Rules.rules461) -}
3959428bd364abeed9881fc8ae98bd63
  rules461 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules173
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
5b7e01a889d7ddd1f2ca6fee08266de8
  rules462 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules220
                   Duckling.Time.Rules.rules240) -}
95e09583522f3d4ed1b2b75d8cff7992
  rules463 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next <time>"#) -}
bab0cb3b6f3ebc8ea05e69278f21f9c2
  rules464 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules474
                   Duckling.Time.Rules.rules466
                   Duckling.Time.Rules.rules465) -}
9e00cf9fb8e4603bd10d3e2da160181b
  rules465 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds1 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 grain ->
                           case ds3 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case token of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds4 nd ->
                                case ds4 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Numeral cobox1
                                  -> case nd
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                                     case ds5 of ww { GHC.Types.D# ww1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==## ww1 0.0##) of wild7 {
                                       GHC.Types.False
                                       -> let {
                                            n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==##
                                                    (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                                    0.0##) of wild8 {
                                            GHC.Types.False
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Types.True
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case Duckling.Time.Helpers.$wcycleN
                                                            GHC.Types.True
                                                            grain `cast` (Sub cobox0)
                                                            (GHC.Types.I#
                                                               n2) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                     Duckling.Time.Types.TimeData
                                                       ww3
                                                       ww4
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       ww9
                                                       ww10
                                                       ww11 })) }
                                       GHC.Types.True
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Float.RealFracMethods.properFractionDoubleInt3 of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                Duckling.Time.Types.TimeData
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9
                                                  ww10
                                                  ww11 })) } } }
                                  Duckling.Types.Ordinal cobox1
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (case Duckling.Time.Helpers.$wcycleN
                                                  GHC.Types.True
                                                  grain `cast` (Sub cobox0)
                                                  nd
                                                    `cast`
                                                  (Trans
                                                       (Sub cobox1)
                                                       (Duckling.Ordinal.Types.N:OrdinalData[0])) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                           Duckling.Time.Types.TimeData
                                             ww1
                                             ww2
                                             ww3
                                             ww4
                                             ww5
                                             ww6
                                             ww7
                                             ww8
                                             ww9 })) } } } } } }) -}
562522345413372100052bcbd392d2e8
  rules466 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules472
                   Duckling.Time.Rules.rules467) -}
f43d3a885625bae30320360d060d03ca
  rules467 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules468) -}
660f5fce9e1c7589c0ba764da2d625c5
  rules468 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules469
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
165fd88ed97049dd6cb392c0a108c4e6
  rules469 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules470) -}
95d592889b90ac34debc83559e94dc90
  rules47 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules322
                   Duckling.Time.Rules.rules48) -}
d39dfb737c580c55c27854a08f803982
  rules470 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules471) -}
87ad3b92a5cf051886ba2a57869f6b5a
  rules471 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\139|(\\228\\185\\139)?\\229\\144\\142|(\\228\\185\\139)?\\229\\190\\140"#) -}
68eb71a6c4597c1e2af17e408707e968
  rules472 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules473) -}
b7005642d06b5ea22b7dec2dc20c0171
  rules473 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
d9fc4b2239380da24bbd91e20f4eb940
  rules474 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next n <cycle>"#) -}
6d10e0d0874cc212fe6914b6baeea2bf
  rules475 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules474
                   Duckling.Time.Rules.rules477
                   Duckling.Time.Rules.rules476) -}
2b6bc93bee8f72e0fe6a508500c488a9
  rules476 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild3 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 grain ->
                                case ds5 of wild4 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.TimeGrain cobox0
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         Duckling.Time.Types.$fResolveTimeData
                                                         Duckling.Time.Types.$fEqTimeData
                                                         Duckling.Time.Types.$fHashableTimeData
                                                         Duckling.Time.Types.$fShowTimeData
                                                         Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                           `cast`
                                                         (Sym (Control.DeepSeq.N:NFData[0]
                                                                   <Duckling.Time.Types.TimeData>_N))
                                                         Duckling.Types.$WTime
                                                         (case Duckling.Time.Helpers.$wcycleN
                                                                 GHC.Types.True
                                                                 grain `cast` (Sub cobox0)
                                                                 (GHC.Types.I#
                                                                    n2) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                          Duckling.Time.Types.TimeData
                                                            ww3
                                                            ww4
                                                            ww5
                                                            ww6
                                                            ww7
                                                            ww8
                                                            ww9
                                                            ww10
                                                            ww11 })) }
                                            GHC.Types.True
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case Duckling.Time.Helpers.$wcycleN
                                                            GHC.Types.True
                                                            grain `cast` (Sub cobox0)
                                                            GHC.Float.RealFracMethods.properFractionDoubleInt3 of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                     Duckling.Time.Types.TimeData
                                                       ww3
                                                       ww4
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       ww9
                                                       ww10
                                                       ww11 })) } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       nd
                                                         `cast`
                                                       (Trans
                                                            (Sub cobox1)
                                                            (Duckling.Ordinal.Types.N:OrdinalData[0])) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                Duckling.Time.Types.TimeData
                                                  ww1
                                                  ww2
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9 })) } } } } } } }) -}
176b72cbfa857becf0bf69ee598a9197
  rules477 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules481
                   Duckling.Time.Rules.rules478) -}
78aacdb24f5ff20626d962a3e65566fe
  rules478 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules479
                   Duckling.Time.Rules.rules256) -}
45ac5acbfa8a8ee542841b05f5ef774d
  rules479 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules480) -}
03771804e4c96547d279db2f282e4e4f
  rules48 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules308
                   Duckling.Time.Rules.rules49) -}
3e4e8f458bdba50cdb2b0d11f3f7b88d
  rules480 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
693ba4febac2478c0480c8eb445991ab
  rules481 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules482) -}
641eb4969caaf2833ce2719b1c473041
  rules482 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules483) -}
b688eaed66210a7685d3836392678ee7
  rules483 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\139|\\229\\144\\142|\\229\\190\\140"#) -}
8d27bd039c42db18684ee601a9d21e75
  rules484 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules490
                   Duckling.Time.Rules.rules486
                   Duckling.Time.Rules.rules485) -}
7c73cbc46204590d94ea56dcdf917911
  rules485 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules173
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
5b24690bf937d279a14ce8f35ce4fa44
  rules486 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules487
                   Duckling.Time.Rules.rules256) -}
70a32b024d68f6a44ece4915f06de623
  rules487 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules488) -}
9d9ffcb1e90ba4f4e3d212fed28f55dc
  rules488 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules489) -}
80ec9d8ae8b2f864cc1095e1e2eb9243
  rules489 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\184\\139|\\230\\156\\170\\230\\157\\165)(\\228\\184\\170|\\229\\128\\139)?"#) -}
dd50a42c913fcd94d500b3b20aa53c32
  rules49 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules299
                   Duckling.Time.Rules.rules50) -}
4517c419d8e4774338994e379605fc97
  rules490 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next <cycle>"#) -}
972f832139d21a5118b83527c5b7442f
  rules491 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules502
                   Duckling.Time.Rules.rules493
                   Duckling.Time.Rules.rules492) -}
3109a59e6c72e91c5fdd6bf8c6db6f5d
  rules492 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : token ds3
                             -> case Duckling.Time.Helpers.intersectDOM
                                       td `cast` (Sub cobox0)
                                       token of wild4 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                          $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                          $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                          $dShow `cast` (GHC.Show.Show cobox0)_R
                                          $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                          Duckling.Types.$WTime
                                          x) } } } } }) -}
76ada2b8f637c4c0ba15a4fad2ca2590
  rules493 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules501
                   Duckling.Time.Rules.rules494) -}
ea5f347f004e91abfe064006b710d574
  rules494 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules499
                   Duckling.Time.Rules.rules495) -}
00d5ad29dfd8dbb95362d084d9bfb511
  rules495 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules496
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6a587f2ca43d062d25fb0ac91437fddb
  rules496 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules497) -}
2de69bbb7ee6658cf6497438a513207c
  rules497 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules498) -}
76fe3ebba5fe3b8c066ac48a40f4490d
  rules498 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\143\\183|\\232\\153\\159|\\230\\151\\165"#) -}
abe739cc5750c7d607dc532fcb8b8a81
  rules499 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules500) -}
ad3c8e676b37d0bd7b987efefa5df1fe
  rules5 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules682
                   Duckling.Time.Rules.rules6) -}
1018978fdc4433ec41bede527fd3a3bf
  rules50 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules287
                   Duckling.Time.Rules.rules51) -}
371065a90e1fa5a436bf156cac22bf72
  rules500 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a10 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox1 -> GHC.Types.True } }) -}
26cd720c5e2e8537bf8c5d5847b2d6fa
  rules501 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAMonth) -}
da048b3cb2706074f34fbdb9eea5bc35
  rules502 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<named-month> <day-of-month>"#) -}
b26c855b87e16e5e1acdd8d613c93e0a
  rules503 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules517
                   Duckling.Time.Rules.rules513
                   Duckling.Time.Rules.rules504) -}
edb760cfacc6d4a6b50b3ade8d1ef63d
  rules504 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules505) -}
76a907b2f770a09c16c0b4841ea1a81c
  rules505 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules510 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules441 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules506
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
33f83aa926adf01ee29a30e6bb3f4854
  rules506 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules507) -}
899ba1ffeff8d9da0fb47039934d37af
  rules507 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules509
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules508
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
976f5117325fc890ed19392312d5b4c7
  rules508 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Types.PartOfDay) -}
19eabbc1b0797b98d11856c4ef8b4ef5
  rules509 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules510
                   Duckling.Time.Rules.rules441) -}
7b53601f48c31e3d6973af7dcba81dae
  rules51 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules275
                   Duckling.Time.Rules.rules52) -}
b4ab829c7acf231781b77dec459573d9
  rules510 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules511
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
599d4161ccc4fd66d788b117682fd78c
  rules511 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules512) -}
e561f34be36f2426786837ae08a0ff54
  rules512 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n3)) -}
b6ff26d7b4995de2043a180df48f26bb
  rules513 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules514
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
b55ea8b0e2cf467b9b30e2ff77b780c0
  rules514 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules515) -}
93088421136b2619e72cb029bbd3e8da
  rules515 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules516) -}
852f3f4f36349e2d3d84825502f2e475
  rules516 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\151\\169\\228\\184\\138|\\230\\151\\169\\230\\153\\168"#) -}
0c539b68e7094d15eb1a5de10c151370
  rules517 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "morning"#) -}
960ae12cad7d32fe40e6ec593f9319d5
  rules518 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules528
                   Duckling.Time.Rules.rules525
                   Duckling.Time.Rules.rules519) -}
d032e4eaac9ac7b48ddb91786328c2b9
  rules519 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> let {
                                       x :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# n2
                                     } in
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just @ GHC.Types.Int x)
                                                (GHC.Base.Nothing @ GHC.Types.Int))
                                             GHC.Types.True
                                             Duckling.TimeGrain.Types.Month
                                             GHC.Types.False
                                             (GHC.Base.Just
                                                @ Duckling.Time.Types.Form
                                                (Duckling.Time.Types.Month x))
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules520 } } }
                        Duckling.Types.Ordinal cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Types.TimeData
                                   (Duckling.Time.Types.mkMonthPredicate
                                      nd
                                        `cast`
                                      (Trans
                                           (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])))
                                   GHC.Types.True
                                   Duckling.TimeGrain.Types.Month
                                   GHC.Types.False
                                   (GHC.Base.Just
                                      @ Duckling.Time.Types.Form
                                      (Duckling.Time.Types.Month
                                         nd
                                           `cast`
                                         (Trans
                                              (Sub cobox0)
                                              (Duckling.Ordinal.Types.N:OrdinalData[0]))))
                                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                   GHC.Types.False
                                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                   GHC.Types.False)) } } }) -}
0eb52db2ed5b597a2062278bdc0fc8a6
  rules52 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules263
                   Duckling.Time.Rules.rules53) -}
e7fdd2ecabd1e0013ea315c7a1fb6e5e
  rules520 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules521) -}
a5298d0aa3043d3409fcc7a88da612be
  rules521 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules522) -}
34fe5cf9be3ffe5cd437f0d9d76b10be
  rules522 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules92
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Month
                   GHC.Types.False
                   Duckling.Time.Rules.rules523
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
54545b0a0e8f86a12b860fddb0ae8886
  rules523 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules524) -}
39bc3fcdab06cb05be804bf70f544cb7
  rules524 :: Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.Month
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
f0e18e122a3ab22fa0a8eea307889df0
  rules525 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules526
                   Duckling.Time.Rules.rules97) -}
06451f81846da25920130f093cb9bc89
  rules526 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules527) -}
deac1b14a2cf8fc5ba20ff2ff0985cd5
  rules527 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 12#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
de81c2e4ecdb233457de159e1e53a182
  rules528 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "month (numeric with month symbol)"#) -}
22ecb2cc809569a5ea40211cba1caed2
  rules529 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules535
                   Duckling.Time.Rules.rules531
                   Duckling.Time.Rules.rules530) -}
26df6be9ad4de2342060e03190a0d792
  rules53 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules253
                   Duckling.Time.Rules.rules54) -}
5c19016bca0232f89614f06c84ce7556
  rules530 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : mm ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : dd ds6
                                  -> case ds6 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : yy ds7
                                       -> case Duckling.Numeral.Helpers.parseInteger yy of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x1
                                            -> case Duckling.Numeral.Helpers.parseInteger
                                                      mm of wild8 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x2
                                                 -> case Duckling.Numeral.Helpers.parseInteger
                                                           dd of wild9 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x3
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ GHC.Types.Int
                                                                          (case GHC.Integer.Type.integerToInt
                                                                                  x3 of wild10 { DEFAULT ->
                                                                           GHC.Types.I# wild10 }))
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int))
                                                                    (Duckling.Time.Types.mkIntersectPredicate
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x2 of wild10 { DEFAULT ->
                                                                              GHC.Types.I#
                                                                                wild10 }))
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int))
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x1 of wild10 { DEFAULT ->
                                                                              case GHC.Prim.tagToEnum#
                                                                                     @ GHC.Types.Bool
                                                                                     (GHC.Prim.<=#
                                                                                        wild10
                                                                                        99#) of wild11 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.I#
                                                                                     wild10
                                                                                GHC.Types.True
                                                                                -> case GHC.Classes.modInt#
                                                                                          (GHC.Prim.+#
                                                                                             wild10
                                                                                             50#)
                                                                                          100# of ww2 { DEFAULT ->
                                                                                   GHC.Types.I#
                                                                                     (GHC.Prim.-#
                                                                                        (GHC.Prim.+#
                                                                                           ww2
                                                                                           2000#)
                                                                                        50#) } } })))))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Day
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } }) -}
87a6974d05e56628e4af1884e34889b4
  rules531 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules532
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
90e2b2b54fa921a1bbbbcd5d6884cf26
  rules532 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules533) -}
a3d580a79b12b138f6c170a26838b3d4
  rules533 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules534) -}
dfea3d738640c96acebb69af605fa48d
  rules534 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(0?[1-9]|1[0-2])/(3[01]|[12]\\d|0?[1-9])/(\\d{2,4})"#) -}
7fb28bc8a6dc86f73f0807918e85ad9f
  rules535 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mm/dd/yyyy"#) -}
49a71a9f7112441a6a2a98e6e05d79fb
  rules536 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules542
                   Duckling.Time.Rules.rules538
                   Duckling.Time.Rules.rules537) -}
564bc3ac9c1470d85bb84e5b43ad8966
  rules537 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : mm ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : dd ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger mm of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger dd of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x2 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x1 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Day
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
5989b00b61357bcffdaef6aa819267b6
  rules538 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules539
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
bb49cc0d9d39aea0f6bea35f2884d975
  rules539 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules540) -}
9353e6d9024315fec998388d54e797ae
  rules54 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules247
                   Duckling.Time.Rules.rules55) -}
97a96265be829aeeba73ce8b08da2f9e
  rules540 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules541) -}
7fe57c3762dd323109a093ffe16cfc01
  rules541 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(0?[1-9]|1[0-2])/(3[01]|[12]\\d|0?[1-9])"#) -}
efe17433f8b9f490a8df2172c72e82b5
  rules542 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mm/dd"#) -}
7556bfc346bf598a677c6ec699f5aea6
  rules543 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules555
                   Duckling.Time.Rules.rules551
                   Duckling.Time.Rules.rules544) -}
4aa0c52193fb4431fcf455a9bd4823b1
  rules544 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules545) -}
d76e6ba89ce59ac66e8a777864031633
  rules545 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules546) -}
545e7a5c90b8c0be08a1652620459244
  rules546 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules547) -}
dc2b1e5e4e2adf2b70aa649bdf92f5cc
  rules547 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules156
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules548
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
9297f11d2ea577a1e942c9ea21298a38
  rules548 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules549) -}
c5e46604cfd5378d072ef58686d8a005
  rules549 :: Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules550
                   GHC.Types.False) -}
993532747cfb96bbe84f8b9db5865fbf
  rules55 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules237
                   Duckling.Time.Rules.rules56) -}
cc2a5d66833d6033de6481fa81c0bd4f
  rules550 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules_n) -}
ddceb67e2c42d29af529965a01476587
  rules551 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules552
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6d933fb186186c5581353993d93a5e16
  rules552 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules553) -}
4a6c1ebf235e69930fe03e031b70f290
  rules553 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules554) -}
814342b82f7ebdff1875635176f3f656
  rules554 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\141\\136\\229\\164\\156|\\229\\135\\140\\230\\153\\168|\\229\\141\\138\\229\\164\\156"#) -}
c68f2f09fb3094612d536b765ff29b7c
  rules555 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "midnight"#) -}
f245c17b268100c1f4223213e3ca2cda
  rules556 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules566
                   Duckling.Time.Rules.rules562
                   Duckling.Time.Rules.rules557) -}
f66ddf2f778f4e41d4c7dc7aa1b14321
  rules557 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules558) -}
abeb41a0490b3c1d3b24364a1b95a40a
  rules558 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules559) -}
cf82d5ff71476ada83506918e319ec8d
  rules559 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules560) -}
d7eb735fb86f6bef943797c31455630e
  rules56 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules224
                   Duckling.Time.Rules.rules57) -}
6c780566d0caa2026fb55e4874888a8b
  rules560 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules561
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
4a9dd0e4588efa0d91b33a845cb74f68
  rules561 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules124
                        GHC.Types.False
                        Duckling.Time.Rules.rules230 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
6f80069177369f12dc3baf7677fec43b
  rules562 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules563
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
e00d30b4a3856a1e0445174f346ee616
  rules563 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules564) -}
c4a1faed81c7d69f201ada8614a28da9
  rules564 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules565) -}
ad3d127eb0d5dd5502408911caf2fe0a
  rules565 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\142\\187\\229\\185\\180|\\228\\184\\138\\229\\185\\180|\\232\\191\\135\\229\\142\\187\\228\\184\\128\\229\\185\\180"#) -}
5af58947727614ffb8ea7dba9eadd382
  rules566 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last year"#) -}
778af7a5885505f7359c551c3d0e2d4d
  rules567 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules573
                   Duckling.Time.Rules.rules569
                   Duckling.Time.Rules.rules568) -}
eb0e4db222492b062a779f28cf80f1ba
  rules568 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules124
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
ec1135207d9dc798116f42ca4c5348a4
  rules569 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules570
                   Duckling.Time.Rules.rules240) -}
6880b3b8958cda8aba0e828f4d8cdeb7
  rules57 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules215
                   Duckling.Time.Rules.rules58) -}
1dd6c054a63a8a058ad53dba0f98db05
  rules570 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules571) -}
33e1f8c90a2497fd1bf5f9f4488c94de
  rules571 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules572) -}
edca3d5d55ea633af18c8db6de4f0a51
  rules572 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\142\\187|\\228\\184\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
e558f8a3759c81133e64f1a2653018d6
  rules573 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last <time>"#) -}
586e80d8f41a3e6a84df4c0a65e24e5c
  rules574 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules582
                   Duckling.Time.Rules.rules578
                   Duckling.Time.Rules.rules575) -}
6fe42a0ca23bc0a6ad228e4ff8e4d615
  rules575 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules576) -}
78504bd1b0546a2ce2a9377bf5c55435
  rules576 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules159 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules156 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules577 Duckling.Time.Rules.rules155
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
1236a785c0fddab87e7748a74850c3f4
  rules577 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Rules.rules121
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
9158ba7bf5bc8dcd94ab5aa3bc67f6a2
  rules578 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules579
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
aa3707226bdc9bdd7deb53d30ccd558e
  rules579 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules580) -}
f8674ac37188ed7546696f35b65b9165
  rules58 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules207
                   Duckling.Time.Rules.rules59) -}
17a4d99ed3f9d592d88b3fd518a1e4ba
  rules580 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules581) -}
7c6f6ff58633489aa3de19aa081c53d3
  rules581 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\168\\230\\153\\154|\\230\\152\\168\\229\\164\\169\\230\\153\\154\\228\\184\\138|\\229\\176\\139\\230\\153\\154"#) -}
87e46393acc6227c8e002e3e1034ee22
  rules582 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last night"#) -}
ff1479bae8c8435dbe0df480a86ea94d
  rules583 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules590
                   Duckling.Time.Rules.rules585
                   Duckling.Time.Rules.rules584) -}
81a632ec6f553816753bdae7e71718f6
  rules584 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds1 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 grain ->
                           case ds3 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case token of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds4 nd ->
                                case ds4 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Numeral cobox1
                                  -> case nd
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                                     case ds5 of ww { GHC.Types.D# ww1 ->
                                     let {
                                       $j :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
                                         {- Arity: 1, Strictness: <L,1*U(U)> -}
                                       = \ (x :: GHC.Types.Int)[OneShot] ->
                                         GHC.Base.Just
                                           @ Duckling.Types.Token
                                           (Duckling.Types.Token
                                              @ Duckling.Time.Types.TimeData
                                              Duckling.Time.Types.$fResolveTimeData
                                              Duckling.Time.Types.$fEqTimeData
                                              Duckling.Time.Types.$fHashableTimeData
                                              Duckling.Time.Types.$fShowTimeData
                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                `cast`
                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                        <Duckling.Time.Types.TimeData>_N))
                                              Duckling.Types.$WTime
                                              (case Duckling.Time.Helpers.$wcycleN
                                                      GHC.Types.True
                                                      grain `cast` (Sub cobox0)
                                                      (GHC.Num.$fNumInt_$cnegate
                                                         x) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                               Duckling.Time.Types.TimeData
                                                 ww3
                                                 ww4
                                                 ww5
                                                 ww6
                                                 ww7
                                                 ww8
                                                 ww9
                                                 ww10
                                                 ww11 }))
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==## ww1 0.0##) of wild7 {
                                       GHC.Types.False
                                       -> let {
                                            n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==##
                                                    (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                                    0.0##) of wild8 {
                                            GHC.Types.False
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Types.True -> $j (GHC.Types.I# n2) }
                                       GHC.Types.True
                                       -> $j
                                            GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                  Duckling.Types.Ordinal cobox1
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (case Duckling.Time.Helpers.$wcycleN
                                                  GHC.Types.True
                                                  grain `cast` (Sub cobox0)
                                                  (GHC.Num.$fNumInt_$cnegate
                                                     nd
                                                       `cast`
                                                     (Trans
                                                          (Sub cobox1)
                                                          (Duckling.Ordinal.Types.N:OrdinalData[0]))) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                           Duckling.Time.Types.TimeData
                                             ww1
                                             ww2
                                             ww3
                                             ww4
                                             ww5
                                             ww6
                                             ww7
                                             ww8
                                             ww9 })) } } } } } }) -}
41f7363a6cd529ef6e82f6af0d81cc66
  rules585 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules588
                   Duckling.Time.Rules.rules586) -}
5901839d0cb1b4864f7ae66866051dc0
  rules586 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules587) -}
8442b1f277e4c8e1351cdc1587602544
  rules587 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules292
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
8004ef4e093cd188bd5a15d84a8caffd
  rules588 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules589) -}
99dcc4a3290f3b31961315015e27fb7f
  rules589 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
ca2b98e6fee97e82b306352b0a1f8e0b
  rules59 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules198
                   Duckling.Time.Rules.rules60) -}
c92bf112f7321a17787c62bc264981fe
  rules590 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "n <cycle> last"#) -}
25213b587ce13188641ac9f69f4ef482
  rules591 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules600
                   Duckling.Time.Rules.rules593
                   Duckling.Time.Rules.rules592) -}
312836a3c0638b0964fa54c9b07a1fce
  rules592 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild3 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 grain ->
                                case ds5 of wild4 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.TimeGrain cobox0
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          let {
                                            $j :: GHC.Types.Int
                                                  -> GHC.Base.Maybe Duckling.Types.Token
                                              {- Arity: 1, Strictness: <L,1*U(U)> -}
                                            = \ (x :: GHC.Types.Int)[OneShot] ->
                                              GHC.Base.Just
                                                @ Duckling.Types.Token
                                                (Duckling.Types.Token
                                                   @ Duckling.Time.Types.TimeData
                                                   Duckling.Time.Types.$fResolveTimeData
                                                   Duckling.Time.Types.$fEqTimeData
                                                   Duckling.Time.Types.$fHashableTimeData
                                                   Duckling.Time.Types.$fShowTimeData
                                                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                     `cast`
                                                   (Sym (Control.DeepSeq.N:NFData[0]
                                                             <Duckling.Time.Types.TimeData>_N))
                                                   Duckling.Types.$WTime
                                                   (case Duckling.Time.Helpers.$wcycleN
                                                           GHC.Types.True
                                                           grain `cast` (Sub cobox0)
                                                           (GHC.Num.$fNumInt_$cnegate
                                                              x) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                    Duckling.Time.Types.TimeData
                                                      ww3
                                                      ww4
                                                      ww5
                                                      ww6
                                                      ww7
                                                      ww8
                                                      ww9
                                                      ww10
                                                      ww11 }))
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True -> $j (GHC.Types.I# n2) }
                                            GHC.Types.True
                                            -> $j
                                                 GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       (GHC.Num.$fNumInt_$cnegate
                                                          nd
                                                            `cast`
                                                          (Trans
                                                               (Sub cobox1)
                                                               (Duckling.Ordinal.Types.N:OrdinalData[0]))) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                Duckling.Time.Types.TimeData
                                                  ww1
                                                  ww2
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9 })) } } } } } } }) -}
a98e1897a64bbc43d9c06f02852135ce
  rules593 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules597
                   Duckling.Time.Rules.rules594) -}
226d4cdffa843b3c94dd7abdcb66a06c
  rules594 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules595
                   Duckling.Time.Rules.rules256) -}
c6837f80bbd62bb99df251f00183be36
  rules595 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules596) -}
40ffeddbeb0db47fe13c95534ffc3072
  rules596 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
4985703452ea3a5cbe6602d3ae76f3a3
  rules597 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules598) -}
31fb0967e277452fb1ab3a16ee67ccec
  rules598 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules599) -}
2ce4762d0635badffe352366bda034da
  rules599 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\138|\\229\\137\\141"#) -}
f60f056b4364b9e5cba12112a86f8af7
  rules6 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules674
                   Duckling.Time.Rules.rules7) -}
ebb8bb2d6b09efd00e6447b021dbf4f9
  rules60 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules189
                   Duckling.Time.Rules.rules61) -}
19a4581e2cd9f7ad1a25a4ce2daa1e0c
  rules600 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last n <cycle>"#) -}
d605e584309454f2a91056e5ebd26f26
  rules601 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules607
                   Duckling.Time.Rules.rules603
                   Duckling.Time.Rules.rules602) -}
d8606459e25afd806cb48ea400c7223b
  rules602 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules124
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
8f0a455cccc75b32e35a533eda8be487
  rules603 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules604
                   Duckling.Time.Rules.rules256) -}
cad14f093ea0b15451ecef1d021639c6
  rules604 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules605) -}
44601058f1d8d77e846e1be6cb6dbe35
  rules605 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules606) -}
543b09a504732b1745049f244a553687
  rules606 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
08660e30e94ecc97606a600e195de601
  rules607 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last <cycle>"#) -}
85d52789e16c4b94ed2d51da1996897f
  rules608 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules617
                   Duckling.Time.Rules.rules610
                   Duckling.Time.Rules.rules609) -}
591600e20a5a8636b4650e8694c3b8bd
  rules609 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds5 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 td2 ->
                                     case ds7 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Time cobox1
                                       -> case td1
                                                 `cast`
                                               (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                          case td2
                                                 `cast`
                                               (Sub cobox1) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                          case Duckling.Time.Helpers.$wintersect
                                                 ww1
                                                 ww3
                                                 ww6
                                                 ww8
                                                 ww11
                                                 ww13
                                                 ww16
                                                 ww18 of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    $dResolve
                                                      `cast`
                                                    (Duckling.Resolve.Resolve cobox0)_R
                                                    $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                    $dHashable
                                                      `cast`
                                                    (Data.Hashable.Class.Hashable cobox0)_R
                                                    $dShow `cast` (GHC.Show.Show cobox0)_R
                                                    $dNFData
                                                      `cast`
                                                    (Control.DeepSeq.NFData cobox0)_R
                                                    Duckling.Types.$WTime
                                                    x) } } } } } } } } } }) -}
a4951893990b1a739035125991ba6d12
  rules61 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules179
                   Duckling.Time.Rules.rules62) -}
d735a3ff55bc5e9907a5af9dd3abd48a
  rules610 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules613
                   Duckling.Time.Rules.rules611) -}
3dab0807e16a1c448eb52e5259468327
  rules611 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules614
                   Duckling.Time.Rules.rules612) -}
bfcf0d05f05cf2be1be5fbc571213c37
  rules612 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules613
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
659aa2f6fffa10c758cdf49f3c4e318d
  rules613 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isNotLatent) -}
c8c64a212be1c0520cf83f49c78171a8
  rules614 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules615) -}
5cbff64f0820d503329b4448ae2aec73
  rules615 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules616) -}
8063cc474da95a00c666fbf3efe8ac55
  rules616 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
1e76ee753469cb44b68ea8b53c2504e6
  rules617 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect by \",\""#) -}
1e359986289aa672b45d2ebfd7144ede
  rules618 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules620
                   Duckling.Time.Rules.rules619
                   Duckling.Time.Rules.rules406) -}
3882d339091c80e80162c27d2676b69c
  rules619 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules613
                   Duckling.Time.Rules.rules612) -}
ba2da1a6f8dda4a14e1b56971fb2a498
  rules62 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules168
                   Duckling.Time.Rules.rules63) -}
d3ee0526ea7d8d856671b335f5361499
  rules620 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "intersect"#) -}
182d445c4e38295263a173de0293255a
  rules621 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules635
                   Duckling.Time.Rules.rules632
                   Duckling.Time.Rules.rules622) -}
875c436c7bc87a1654cedb60d6619e60
  rules622 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> let {
                                       w :: GHC.Types.Int = GHC.Types.I# n2
                                     } in
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ (GHC.Types.Bool, GHC.Types.Int)
                                                   (GHC.Types.True, w))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int))
                                             GHC.Types.True
                                             Duckling.TimeGrain.Types.Hour
                                             GHC.Types.False
                                             (GHC.Base.Just
                                                @ Duckling.Time.Types.Form
                                                (Duckling.Time.Types.TimeOfDay
                                                   (GHC.Base.Just @ GHC.Types.Int w)
                                                   GHC.Types.True))
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules624 } } }
                        Duckling.Types.Ordinal cobox0
                        -> Duckling.Time.Rules.rules623
                             nd
                               `cast`
                             (Trans
                                  (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])) } } }) -}
c39c5532126ae432a6d3be2dc88dacf2
  rules623 :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int)[OneShot] ->
                 GHC.Base.Just
                   @ Duckling.Types.Token
                   (Duckling.Types.Token
                      @ Duckling.Time.Types.TimeData
                      Duckling.Time.Types.$fResolveTimeData
                      Duckling.Time.Types.$fEqTimeData
                      Duckling.Time.Types.$fHashableTimeData
                      Duckling.Time.Types.$fShowTimeData
                      Duckling.Time.Types.$fNFDataTimeData_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Duckling.Time.Types.TimeData>_N))
                      Duckling.Types.$WTime
                      (Duckling.Time.Types.TimeData
                         (Duckling.Time.Types.TimeDatePredicate
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Just
                               @ (GHC.Types.Bool, GHC.Types.Int)
                               (GHC.Types.True, w))
                            (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int))
                         GHC.Types.True
                         Duckling.TimeGrain.Types.Hour
                         GHC.Types.False
                         (GHC.Base.Just
                            @ Duckling.Time.Types.Form
                            (Duckling.Time.Types.TimeOfDay
                               (GHC.Base.Just @ GHC.Types.Int w)
                               GHC.Types.True))
                         (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                         GHC.Types.False
                         (GHC.Base.Nothing @ Data.Text.Internal.Text)
                         GHC.Types.False))) -}
e17a36e10fa9b6713b88e0a09f29dede
  rules624 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules625) -}
6e2e9a307d5627cf5744c44b7d4acb5f
  rules625 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules626) -}
246d37d3c110cf0e110636c1ce54eae4
  rules626 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules629
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules627
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
07c011fc8bf080168c8d68a40f6551c2
  rules627 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules628) -}
bef2b0b47f32c36295905dd8df829b31
  rules628 :: Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules93
                   GHC.Types.True) -}
c6708923d0b40e63b03647fce61486e1
  rules629 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules630
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
4853f330ff941e419557ca1d8a556a51
  rules63 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules152
                   Duckling.Time.Rules.rules64) -}
3d5a2e1b512fd0dc16631581a263cc53
  rules630 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules631) -}
0a0512c6ad186b50a589e82fb9562b68
  rules631 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.True,
                  GHC.Float.RealFracMethods.properFractionDoubleInt3)) -}
cf3f1913eb8c7dfc3156b16efc296e4e
  rules632 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules633
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
008e450a82c92a2805d38eb1406e0077
  rules633 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules634) -}
45d7f05d94a7ab559c09cfc26af09ffd
  rules634 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 0# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 23#) } }
                             GHC.Types.True -> GHC.Types.True } } } } } }) -}
9a90c8de34360b5fc346f70368089dcd
  rules635 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<integer> (latent time-of-day)"#) -}
9eda94e0bae9bb6d5a7f07ab33069ec9
  rules636 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules639
                   Duckling.Time.Rules.rules637
                   Duckling.Time.Rules.rules199) -}
1f34a7386743bafcbff4559b222fcdc7
  rules637 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules408
                   Duckling.Time.Rules.rules638) -}
50f3f82fbb737b87159d66956e113995
  rules638 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules343
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
9535718abbe442778220e9cc9838d44e
  rules639 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "in|during the <part-of-day>"#) -}
935b3a7eeffad5a3d6627f12b4d9d00f
  rules64 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules143
                   Duckling.Time.Rules.rules65) -}
ec73008cc1606ccf4c3177c85cc05191
  rules640 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules649
                   Duckling.Time.Rules.rules642
                   Duckling.Time.Rules.rules641) -}
026e3e52ba6a3cdc74bde2511306ecd1
  rules641 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 dd ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Duration cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Helpers.inDuration
                                        dd `cast` (Sub cobox0))) } } } }) -}
bfc24259b067477a92208a7824a4f22b
  rules642 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules646
                   Duckling.Time.Rules.rules643) -}
4e858528080610eb878da8d560241027
  rules643 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules644
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
91c0f0513765be83ad349698124a23b1
  rules644 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules645) -}
03cbe895f8da05a765afa0d6364032b8
  rules645 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a10 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Duration cobox1 -> GHC.Types.True } }) -}
67385b07a3973ddfa1bf0b76f7aeb066
  rules646 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules647) -}
b8b4ba6f102857668f65834e4751dca9
  rules647 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules648) -}
02caea5d4748c7e308762e715e04b2e4
  rules648 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\134\\141"#) -}
d9b468c2ed69726d25253be4196c1f46
  rules649 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "in <duration>"#) -}
837bc61fc9a828cf303993f23770b5ca
  rules65 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules130
                   Duckling.Time.Rules.rules66) -}
493a9cfe23e20889983b471bb8c983c3
  rules650 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules656
                   Duckling.Time.Rules.rules652
                   Duckling.Time.Rules.rules651) -}
622cd3b4a84eef785a73fab6be72004f
  rules651 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : hh ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger hh of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (let {
                                                       w1 :: GHC.Types.Int
                                                       = case GHC.Integer.Type.integerToInt
                                                                x1 of wild8 { DEFAULT ->
                                                         GHC.Types.I# wild8 }
                                                     } in
                                                     Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (GHC.Num.$fNumInt_$cfromInteger x2))
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ (GHC.Types.Bool, GHC.Types.Int)
                                                                (GHC.Types.True, w1))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Minute
                                                       GHC.Types.False
                                                       (GHC.Base.Just
                                                          @ Duckling.Time.Types.Form
                                                          (Duckling.Time.Types.TimeOfDay
                                                             (GHC.Base.Just @ GHC.Types.Int w1)
                                                             GHC.Types.True))
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
0c3040cb9e16f9265b73e76e8a945634
  rules652 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules653
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
85b8fd27fbb3ea336bb90dce42b91539
  rules653 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules654) -}
a2641534302d0bef1ae1b3fefa93706b
  rules654 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules655) -}
705177d5996a3307e084b134389e6b41
  rules655 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "((?:[01]?\\d)|(?:2[0-3])):([0-5]\\d)"#) -}
9ec0aca79a5fe9852aff04e264314e35
  rules656 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "hh:mm (time-of-day)"#) -}
688ce85747782d23d6d6a4851f419224
  rules657 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules663
                   Duckling.Time.Rules.rules659
                   Duckling.Time.Rules.rules658) -}
8273655ee8646853c91b702c37d2c5ca
  rules658 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : hh ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger hh of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (let {
                                                       w1 :: GHC.Types.Int
                                                       = case GHC.Integer.Type.integerToInt
                                                                x1 of wild8 { DEFAULT ->
                                                         GHC.Types.I# wild8 }
                                                     } in
                                                     Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (GHC.Num.$fNumInt_$cfromInteger x2))
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ (GHC.Types.Bool, GHC.Types.Int)
                                                                (GHC.Types.False, w1))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.True
                                                       Duckling.TimeGrain.Types.Minute
                                                       GHC.Types.False
                                                       (GHC.Base.Just
                                                          @ Duckling.Time.Types.Form
                                                          (Duckling.Time.Types.TimeOfDay
                                                             (GHC.Base.Just @ GHC.Types.Int w1)
                                                             GHC.Types.False))
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
99e4ec0ac4055f92809fb725218d730b
  rules659 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules660
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
871ecc11b7b9f2bc376e9fa9b766e99f
  rules66 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules116
                   Duckling.Time.Rules.rules67) -}
a23fb423dc99045afcd8429d3def36a4
  rules660 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules661) -}
a4ae070b00140543a3e621b82636c305
  rules661 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules662) -}
402c5758973ed5c3ef6bb36b94279737
  rules662 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "((?:[01]?\\d)|(?:2[0-3]))([0-5]\\d)"#) -}
e2a183f96cb03b87667e5362af1447e9
  rules663 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "hhmm (military time-of-day)"#) -}
eb02373427e1ff80d0748276899d20d4
  rules664 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules673
                   Duckling.Time.Rules.rules669
                   Duckling.Time.Rules.rules665) -}
358137a2b982d915f0d91d5d723550af
  rules665 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules666) -}
42083f0855b5d504aa8acd36ac0a9c9b
  rules666 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules159 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules156 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules667
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
bd5a8e107b7eec6b4392847ce8a01f41
  rules667 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules668) -}
b2205e0f6cea5bef12c9a0f615eb0984
  rules668 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules155
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules508
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
5224fe2eb24fda28dbf3727daaddf06e
  rules669 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules670
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
aac1fc0d3dff5c87602042a70bbb1117
  rules67 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules109
                   Duckling.Time.Rules.rules68) -}
f79279d7e695352d15fec2bb649dceda
  rules670 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules671) -}
2dbc059acb6f8da39318a1c7bc9240b2
  rules671 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules672) -}
2d0e54874a89bc3e32f51427abeddbc5
  rules672 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\153\\154\\228\\184\\138|\\230\\153\\154\\233\\151\\180"#) -}
118dc4c9de877f5b743428393992ddf3
  rules673 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "evening|night"#) -}
bba6ae553fafc1c00ff5b6ff5bdeafc0
  rules674 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules681
                   Duckling.Time.Rules.rules676
                   Duckling.Time.Rules.rules675) -}
52db12cee499130eae7f16c6bbd79025
  rules675 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 dd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Duration cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.inDuration
                                   dd `cast` (Sub cobox0))) } } }) -}
96f5b86c078de55827fc06ded1f14f11
  rules676 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules644
                   Duckling.Time.Rules.rules677) -}
f7ff042e92a6f3505e269f2be6513a23
  rules677 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules678
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
c2630c3333045620af25359274202dd2
  rules678 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules679) -}
ad44628c3cccf7751c0722247308b069
  rules679 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules680) -}
432b7dc85224246c96b8024c324c40d7
  rules68 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules90
                   Duckling.Time.Rules.rules69) -}
cfd10720c3f13eff445f9b3a60c4e4a5
  rules680 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\144\\142|\\229\\190\\140|\\228\\185\\139\\229\\190\\140|\\228\\185\\139\\229\\144\\142"#) -}
35b6ba9200ebc5002124733e6e8d8e1c
  rules681 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<duration> from now"#) -}
8379d0d564bc66a0d17bb6be4fbefa7f
  rules682 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules685
                   Duckling.Time.Rules.rules684
                   Duckling.Time.Rules.rules683) -}
52548f56f3872affe301101714629fc3
  rules683 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 dd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Duration cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.durationAgo
                                   dd `cast` (Sub cobox0))) } } }) -}
5e608fc62fdea2efa182df6a7a4c3c8d
  rules684 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules644
                   Duckling.Time.Rules.rules587) -}
104195bafe755d27409e8b3a20ba0d3e
  rules685 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<duration> ago"#) -}
d7099e28a8bad7766583eb6b4f97a364
  rules686 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules689
                   Duckling.Time.Rules.rules687
                   Duckling.Time.Rules.rules406) -}
fd2b9b8f76ea7fa86212c61193a8d2e5
  rules687 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules241
                   Duckling.Time.Rules.rules688) -}
f3f31d40fb2dd064005d111d80fcecdc
  rules688 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules408
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
bb4a7aafa903aa42e71190c52c7a0b01
  rules689 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<dim time> <part-of-day>"#) -}
7d93322098d02f492179fd36578f0b66
  rules69 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules83
                   Duckling.Time.Rules.rules70) -}
7c7d5be2cf1e06f8faeb7b7d1c5ad349
  rules690 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules703
                   Duckling.Time.Rules.rules699
                   Duckling.Time.Rules.rules691) -}
02daf5b6f7c8339f08b9d37f639d7fc5
  rules691 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules692) -}
b9a9315fd98bee8b4300cfc7246118b3
  rules692 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules441 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules696 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules693
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
87435e30120bf7c0995f29f4f38368b0
  rules693 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules694) -}
c4d273a058353d28d524e3975a4ac671
  rules694 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules695
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules508
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
333cb8156c399ccb9213f7149f013d1c
  rules695 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules441
                   Duckling.Time.Rules.rules696) -}
5524a3a2b88bb47456b691859d6e7b12
  rules696 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules697
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
52b24c8c4884cb970f499363a4054aa6
  rules697 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules698) -}
2db9c6363ed7c5fa6e7d2cd8b96783c5
  rules698 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n4)) -}
56a99a886a80679523c8d4e400d2c442
  rules699 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules700
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
65ad9343dabb438d6fbb139563bd7fde
  rules7 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules664
                   Duckling.Time.Rules.rules8) -}
908ffef80594d8526fcad337d9aeb2a7
  rules70 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules71
                   (GHC.Types.[] @ Duckling.Types.Rule)) -}
e681ed5ef9ad046fcbd823500600a138
  rules700 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules701) -}
3f0a8b5e6f3e619ba48a04150531ba14
  rules701 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules702) -}
c92af75b703284e1642e6a794497dc9a
  rules702 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\173\\229\\141\\136|\\228\\184\\139\\229\\141\\136"#) -}
4592eb1b79b7baf24bb7a93bce564063
  rules703 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "afternoon"#) -}
8df4fd124e386709d5ff338850546a3a
  rules704 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules708
                   Duckling.Time.Rules.rules706
                   Duckling.Time.Rules.rules705) -}
72c40f5f72d7a20503c19b0f3d0a1b9f
  rules705 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : x ds -> GHC.Base.Just @ Duckling.Types.Token x }) -}
f219509c27ddb6b4673accef25e1cc72
  rules706 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules219
                   Duckling.Time.Rules.rules707) -}
775d9a40ef2b73ae3844c307643a1c7e
  rules707 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules614
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
d32846ed8fe6e34931dbed1e5f3c05aa
  rules708 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "absorption of , after named day"#) -}
eee6790445ca34ecd96e136128b933cd
  rules71 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules82
                   Duckling.Time.Rules.rules73
                   Duckling.Time.Rules.rules72) -}
6ad3783a895b6de36e9531ad8fef928c
  rules72 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1 -}
897735a724137d67cd349981400edd8c
  rules73 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules78
                   Duckling.Time.Rules.rules74) -}
d577955da7c928b0bcadcac256f4efc1
  rules74 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules75
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
50465519c130dce34c5c2fcd29249825
  rules75 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex Duckling.Time.Rules.rules76) -}
318b320cf7c8ea808713d41797abad1c
  rules76 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules77) -}
5aee612680e7b1188e2d59915257f6e0
  rules77 :: [GHC.Types.Char]
ebe4a1448947fa8ee3a55b23822c3299
  rules78 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules79
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
3f45cd9bc792aae977adf3629ccfe719
  rules79 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.Time.Rules.rules_go1
                   (Duckling.Time.Rules.rules_go Duckling.Time.Rules.rules80 x)) -}
6e864f6792e4b8c08a5d5a6b384c81f1
  rules8 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules657
                   Duckling.Time.Rules.rules9) -}
917d4fd2f6d861a111edd1195ea52d17
  rules80 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isNotLatent
                   Duckling.Time.Rules.rules81) -}
eeda6033940d95444719e55685adef7d
  rules81 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isATimeOfDay
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
abe641abf9c331ca83f4e07f4475fec9
  rules82 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<time> timezone"#) -}
8b2e399b472f8a658fdcea62c4172cf2
  rules83 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules89
                   Duckling.Time.Rules.rules85
                   Duckling.Time.Rules.rules84) -}
51291058e0c41b3f8559c8b527a0c1dd
  rules84 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : yy ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case ds6 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : dd ds7
                                       -> case Duckling.Numeral.Helpers.parseInteger yy of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x1
                                            -> case Duckling.Numeral.Helpers.parseInteger
                                                      mm of wild8 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x2
                                                 -> case Duckling.Numeral.Helpers.parseInteger
                                                           dd of wild9 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x3
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ GHC.Types.Int
                                                                          (case GHC.Integer.Type.integerToInt
                                                                                  x3 of wild10 { DEFAULT ->
                                                                           GHC.Types.I# wild10 }))
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int))
                                                                    (Duckling.Time.Types.mkIntersectPredicate
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x2 of wild10 { DEFAULT ->
                                                                              GHC.Types.I#
                                                                                wild10 }))
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int))
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x1 of wild10 { DEFAULT ->
                                                                              case GHC.Prim.tagToEnum#
                                                                                     @ GHC.Types.Bool
                                                                                     (GHC.Prim.<=#
                                                                                        wild10
                                                                                        99#) of wild11 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.I#
                                                                                     wild10
                                                                                GHC.Types.True
                                                                                -> case GHC.Classes.modInt#
                                                                                          (GHC.Prim.+#
                                                                                             wild10
                                                                                             50#)
                                                                                          100# of ww2 { DEFAULT ->
                                                                                   GHC.Types.I#
                                                                                     (GHC.Prim.-#
                                                                                        (GHC.Prim.+#
                                                                                           ww2
                                                                                           2000#)
                                                                                        50#) } } })))))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Day
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } }) -}
87ed62a3c823db895ed8bb378298728c
  rules85 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules86
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
cf5e70d6d2341bbd3cda7b51df132362
  rules86 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex Duckling.Time.Rules.rules87) -}
5e97f642466c81044d6de20d4d05f536
  rules87 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules88) -}
aa9150dcab47a63a2f97887b1c8ec54b
  rules88 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(\\d{2,4})-(0?[1-9]|1[0-2])-(3[01]|[12]\\d|0?[1-9])"#) -}
49baa8f3b7df5402e73519244f432bf8
  rules89 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yyyy-mm-dd"#) -}
b7ff64f46ac71f8c7c3e4a57b81a13fb
  rules9 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules650
                   Duckling.Time.Rules.rules10) -}
c5dae604853cd505fbaa4d0abbdf29e7
  rules90 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules108
                   Duckling.Time.Rules.rules94
                   Duckling.Time.Rules.rules91) -}
22115f002da7e8bf738a6788c3fdc73d
  rules91 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : td1 ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : td3 ds3
                             -> case ds3 of wild3 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds4 ds5
                                  -> case td1 of wild4 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds6 nd ->
                                     let {
                                       $j :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
                                         {- Arity: 1, Strictness: <L,1*U(U)> -}
                                       = \ (x :: GHC.Types.Int)[OneShot] ->
                                         case td3 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 nd1 ->
                                         case ds7 of wild6 {
                                           DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                           Duckling.Types.Numeral cobox0
                                           -> case nd1
                                                     `cast`
                                                   (Sub cobox0) of wild7 { Duckling.Numeral.Types.NumeralData ds8 ds9 ds10 ds11 ->
                                              case ds8 of ww { GHC.Types.D# ww1 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==## ww1 0.0##) of wild8 {
                                                GHC.Types.False
                                                -> let {
                                                     n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                                   } in
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==##
                                                             (GHC.Prim.-##
                                                                ww1
                                                                (GHC.Prim.int2Double# n2))
                                                             0.0##) of wild9 {
                                                     GHC.Types.False
                                                     -> GHC.Base.Nothing @ Duckling.Types.Token
                                                     GHC.Types.True
                                                     -> GHC.Base.Just
                                                          @ Duckling.Types.Token
                                                          (Duckling.Types.Token
                                                             @ Duckling.Time.Types.TimeData
                                                             Duckling.Time.Types.$fResolveTimeData
                                                             Duckling.Time.Types.$fEqTimeData
                                                             Duckling.Time.Types.$fHashableTimeData
                                                             Duckling.Time.Types.$fShowTimeData
                                                             Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                               `cast`
                                                             (Sym (Control.DeepSeq.N:NFData[0]
                                                                       <Duckling.Time.Types.TimeData>_N))
                                                             Duckling.Types.$WTime
                                                             (Duckling.Time.Types.TimeData
                                                                (Duckling.Time.Types.mkIntersectPredicate
                                                                   (Duckling.Time.Types.TimeDatePredicate
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ (GHC.Types.Bool,
                                                                            GHC.Types.Int))
                                                                      (GHC.Base.Nothing
                                                                         @ Duckling.Time.Types.AMPM)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Just
                                                                         @ GHC.Types.Int
                                                                         (GHC.Types.I# n2))
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int))
                                                                   (Duckling.Time.Types.TimeDatePredicate
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ (GHC.Types.Bool,
                                                                            GHC.Types.Int))
                                                                      (GHC.Base.Nothing
                                                                         @ Duckling.Time.Types.AMPM)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Just
                                                                         @ GHC.Types.Int
                                                                         (case x of wild10 { GHC.Types.I# x1 ->
                                                                          case GHC.Prim.tagToEnum#
                                                                                 @ GHC.Types.Bool
                                                                                 (GHC.Prim.<=#
                                                                                    x1
                                                                                    99#) of wild11 {
                                                                            GHC.Types.False
                                                                            -> wild10
                                                                            GHC.Types.True
                                                                            -> case GHC.Classes.modInt#
                                                                                      (GHC.Prim.+#
                                                                                         x1
                                                                                         50#)
                                                                                      100# of ww2 { DEFAULT ->
                                                                               GHC.Types.I#
                                                                                 (GHC.Prim.-#
                                                                                    (GHC.Prim.+#
                                                                                       ww2
                                                                                       2000#)
                                                                                    50#) } } }))))
                                                                GHC.Types.False
                                                                Duckling.TimeGrain.Types.Month
                                                                GHC.Types.False
                                                                (GHC.Base.Nothing
                                                                   @ Duckling.Time.Types.Form)
                                                                (GHC.Base.Nothing
                                                                   @ Duckling.Time.Types.IntervalDirection)
                                                                GHC.Types.False
                                                                (GHC.Base.Nothing
                                                                   @ Data.Text.Internal.Text)
                                                                GHC.Types.False)) }
                                                GHC.Types.True
                                                -> GHC.Base.Just
                                                     @ Duckling.Types.Token
                                                     (Duckling.Types.Token
                                                        @ Duckling.Time.Types.TimeData
                                                        Duckling.Time.Types.$fResolveTimeData
                                                        Duckling.Time.Types.$fEqTimeData
                                                        Duckling.Time.Types.$fHashableTimeData
                                                        Duckling.Time.Types.$fShowTimeData
                                                        Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                          `cast`
                                                        (Sym (Control.DeepSeq.N:NFData[0]
                                                                  <Duckling.Time.Types.TimeData>_N))
                                                        Duckling.Types.$WTime
                                                        (Duckling.Time.Types.TimeData
                                                           (Duckling.Time.Types.mkIntersectPredicate
                                                              Duckling.Time.Rules.rules92
                                                              (Duckling.Time.Types.TimeDatePredicate
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing
                                                                    @ (GHC.Types.Bool,
                                                                       GHC.Types.Int))
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.AMPM)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Just
                                                                    @ GHC.Types.Int
                                                                    (case x of wild9 { GHC.Types.I# x1 ->
                                                                     case GHC.Prim.tagToEnum#
                                                                            @ GHC.Types.Bool
                                                                            (GHC.Prim.<=#
                                                                               x1
                                                                               99#) of wild10 {
                                                                       GHC.Types.False -> wild9
                                                                       GHC.Types.True
                                                                       -> case GHC.Classes.modInt#
                                                                                 (GHC.Prim.+#
                                                                                    x1
                                                                                    50#)
                                                                                 100# of ww2 { DEFAULT ->
                                                                          GHC.Types.I#
                                                                            (GHC.Prim.-#
                                                                               (GHC.Prim.+#
                                                                                  ww2
                                                                                  2000#)
                                                                               50#) } } }))))
                                                           GHC.Types.False
                                                           Duckling.TimeGrain.Types.Month
                                                           GHC.Types.False
                                                           (GHC.Base.Nothing
                                                              @ Duckling.Time.Types.Form)
                                                           (GHC.Base.Nothing
                                                              @ Duckling.Time.Types.IntervalDirection)
                                                           GHC.Types.False
                                                           (GHC.Base.Nothing
                                                              @ Data.Text.Internal.Text)
                                                           GHC.Types.False)) } } }
                                           Duckling.Types.Ordinal cobox0
                                           -> GHC.Base.Just
                                                @ Duckling.Types.Token
                                                (Duckling.Types.Token
                                                   @ Duckling.Time.Types.TimeData
                                                   Duckling.Time.Types.$fResolveTimeData
                                                   Duckling.Time.Types.$fEqTimeData
                                                   Duckling.Time.Types.$fHashableTimeData
                                                   Duckling.Time.Types.$fShowTimeData
                                                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                     `cast`
                                                   (Sym (Control.DeepSeq.N:NFData[0]
                                                             <Duckling.Time.Types.TimeData>_N))
                                                   Duckling.Types.$WTime
                                                   (Duckling.Time.Helpers.yearMonth
                                                      x
                                                      nd1
                                                        `cast`
                                                      (Trans
                                                           (Sub cobox0)
                                                           (Duckling.Ordinal.Types.N:OrdinalData[0])))) } }
                                     } in
                                     case ds6 of wild5 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox0
                                       -> case nd
                                                 `cast`
                                               (Sub cobox0) of wild6 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild7 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild8 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True -> $j (GHC.Types.I# n2) }
                                            GHC.Types.True
                                            -> $j
                                                 GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                       Duckling.Types.Ordinal cobox0
                                       -> $j
                                            nd
                                              `cast`
                                            (Trans
                                                 (Sub cobox0)
                                                 (Duckling.Ordinal.Types.N:OrdinalData[0])) } } } } } }) -}
ad11cb99159c26a348134d3d2cc3640e
  rules92 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules93
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
eae6eba2bea85dd6e64f2b985c1f52ed
  rules93 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
2917feb6a0db5cb2854408602a324a72
  rules94 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules106
                   Duckling.Time.Rules.rules95) -}
e555194a5ff3eeaa201da277e945b712
  rules95 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules103
                   Duckling.Time.Rules.rules96) -}
9faef7c6fea7a0f4cbf8693704dc6785
  rules96 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules101
                   Duckling.Time.Rules.rules97) -}
c868741f557bb85297ea3bb2992da418
  rules97 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules98
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2c053bff3de34ccac5987ae82b653ed0
  rules98 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex Duckling.Time.Rules.rules99) -}
5058a212fb3f74c8c34d3cd88f05c9b0
  rules99 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules100) -}
13cac8e352bbdb84c7e223a5d73d4ae7
  rules_go ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
0adb63b6c4fe7608637dfe70dd7d378d
  rules_go1 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b942cde1390e613f048a93f7fc9840f1
  rules_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8a4866966979139f5efe99b1cd8cd92b
  rules_n1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
ceda07a7064c7d08ce6d66da033ae1ad
  rules_n2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
f2a48194aed0b2e1425cc88eacd4f77a
  rules_n3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
f4a77fa115cf9808b58a20b494451859
  rules_n4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 19#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

