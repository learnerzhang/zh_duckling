
==================== FINAL INTERFACE ====================
2019-03-14 03:01:00.822328 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Rules 8002
  interface hash: 11c0acf1fe4f1b33daa457645f50a694
  ABI hash: 65e8aba19b4eab71146fe6af670be364
  export-list hash: 1e1db4a428cbd69f5eabba7beeb81d84
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1a1f702986e7747a031a132c34ff8592
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Time.Rules.rules
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Dimensions.Types
                     Duckling.Distance.Types Duckling.Duration.Types
                     Duckling.Email.Types Duckling.Gender.Types Duckling.Identity.Types
                     Duckling.Locale Duckling.Numeral.Helpers Duckling.Numeral.Types
                     Duckling.Ordinal.Types Duckling.PhoneNumber.Types
                     Duckling.Quantity.Types Duckling.Regex.Types Duckling.Region
                     Duckling.Resolve Duckling.Temperature.Types Duckling.Time.Helpers
                     Duckling.Time.TimeZone.Parse Duckling.Time.Types
                     Duckling.TimeGrain.Types Duckling.Types Duckling.Url.Types
                     Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Numeral.Helpers bd0dabecd11987616dc666a3e43dd924
  exports: e7d47526dd2b06e4e1d94c237fe469a9
  parseInt 96a0cf102d8136d5751b58d6e2ee330e
import  -/  Duckling.Ordinal.Types 338cef02dda50d8eb48357da4a409fec
  exports: 775285a26ee37c34a56d1069720093f1
  value 2f66f4e563cf8f416d92a789623cda71
import  -/  Duckling.Regex.Types 02ee061ffbed7bfe03850219af82e91c
  exports: d44c9c4af09e2c2530be2e20de544b1d
  GroupMatch 537ad29f8ab71f1e1b7b5a2d9bd0ac47
import  -/  Duckling.Time.Helpers aaf28cd3360a5c23764acdc7df3005e2
  exports: 55df1b359d5a489b2ded4c149d857592
  cycleN 2890794563c0d4e57dbf11230d3673e9
  cycleNth 4daf0a4690b61e6b89447861865f331f
  cycleNthAfter 47bc55ee9800eb1b47747445d00705eb
  durationAgo 8a9550242e86dbdfe25bcaef01ba1ee5
  getIntValue 69afad92c8c340c7b7edccde43bfed42
  hour a43cb2b3b9254ffecab776dbdfa251a3
  hourMinute 125eb5afab138df7cfc04c748bbef185
  inDuration e827ecc2a07e97e90059d28556a5c441
  inTimezone 33a576ff4ea25e85387d9397518a32b9
  intersect c019e8e87d7494bf6f19662a6fbed0aa
  intersectDOM d85836a20ce2ceadbf49fab724af3beb
  interval 5583aa324e4d42feb8f0702430b96441
  isADayOfWeek 4158d08ef782c071e1bafd506ffffb3f
  isAMonth ff8462cceb89e3d5d4153156c628efca
  isAPartOfDay eef9b392e320323af196e53d3244a616
  isATimeOfDay a2b4b48ce4ca3f7f3233609871d7b272
  isAnHourOfDay bc97f69b43dc2d2df90b44226ee20ca3
  isDOMValue a75f4505522a6261eb139ce18b8c8069
  isIntegerBetween 4ddfafd45f067e53dd022f03a320ada4
  isMidnightOrNoon 08cc18b2ad0f18c3813da6cf492183bc
  isNotLatent af520ae8db0cd7f6cc029a5d415de673
  minutesBefore 26d7c508e9338277f894ce17210574bc
  mkLatent bb4e263adf4b0b304004f09445298afc
  mkRuleDaysOfWeek d22e54420f5c6fe9ee691b8dac2fcb2f
  mkRuleHolidays 28b05cbadc395d36273b101d3ce82ff0
  mkRuleMonths ee5307e2249b9f98490b8706f02ed8eb
  month e612601eb62465d574e425e34f2ee246
  monthDay 92f211380ff1d4ea25ed30ce0c993461
  notLatent 0b0dd40e58576673da9cb5fa089792a9
  now 29027e0560ae3f6aa24d31605dbe0b2d
  nthDOWOfMonth 2f2c5f8482e1cfc8c2ab96985ff32c59
  partOfDay 42b1b9e2193ddb75e4a89f0264066b05
  predNth 7b060806ad82a187fcca9c5dc2849df5
  timeOfDayAMPM 27b782e2c8d4311bcff4100bc017b8ec
  today cf41920e1910cd77da8687ae8f3f2610
  tt f22d8bf2c9795db5f03e801f54c190ba
  weekend 796810aafbd77d769a022e591d1e6366
  withDirection dc43bd016fa4ecae354d783901f5560e
  year ecf458a3089b8d8accd3eb4cccd4dc9e
  yearMonth 565065b6f15f3bf2f9021c5c77ed68ba
  yearMonthDay 02611c54d2ccb895b165f2c62c3bd9d1
import  -/  Duckling.Time.Types d4fac4be942a0a4255ab078596447429
  exports: 3606974139e9e7e95f5dfe8696d4fed1
  After 1c45a97c53c24ed470dbf708ab4f57c7
  Before c80a2b87cc49a746e8a410478cabfa47
  Closed 59fb6ceb27061a799839b62492c20537
  Open 13f6b88ec74c322c57b4cc5c52822d6c
  TimeData feaf694a915c741c0c15257597d31d4b
  TimeOfDay 13e2df7cb9f08c041e6388c0a98af759
  form 5d75858393e950a5dffdacc763c3c71c
import  -/  Duckling.TimeGrain.Types df1446d581d19c78205a53c0773a1394
  exports: 1edf6532c5926aae175720f5ee1798eb
  Day 8970ba78a9767ba3b8a7c6ba9b51a195
  Year 6f596c2b14ab7e9f5cbae1f027059b30
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  Duration b6c7737c196c51ea1993cf296ebd2165
  Numeral 37ea753945466ebddfe8bb90136c8911
  Ordinal 75669a2844683d059ffcc0481c467632
  Predicate 7b23b72c5da11bf15a4943a8b0a1fdb3
  RegexMatch 48a4c104f38c3a332becce55bbf47568
  Rule 68f6ad16b93bf0573b6e6f063820cf0e
  Rule 876893268fb58123567a47e946b5b6ba
  Time 9b9e182b74fc2b8e23927a2047960e70
  TimeGrain 080731afd4ca77e227c906ea69ec213a
  Token ed5ab3414f0516bc6b6fd996e839d3c3
  dimension d0737f4b2a091d17072dfde26c2eb47c
  name 76f427769b73e82db2c2df59caa60288
  pattern 6666cdf07a41b137593bc737023ac7f1
  prod a4c6750bd517e049c9ce8428e1e5dff2
  regex c51097368a8c266ad9942dc9e3370fd5
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
c675933debc73b14fe8fad86e5aa4c5a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Time.Rules.$trModule2
                   Duckling.Time.Rules.$trModule1) -}
49627346bcc43a0d3010f3c96342f8ff
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Time.Rules"#) -}
cec4b3966c6641be9bc59e68ccc47c4f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
742cb12c45d6cae40a643691e1491843
  rules :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Base.++
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules2
                   Duckling.Time.Rules.rules1) -}
75116ce3013f15d222737f5c11abd036
  rules1 :: [Duckling.Types.Rule]
7cda6edc172b014e5b6efe2c46dfef46
  rules10 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules656
                   Duckling.Time.Rules.rules11) -}
2978a69bbc1f1abbbd07a910effc97d6
  rules100 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules106
                   Duckling.Time.Rules.rules102
                   Duckling.Time.Rules.rules101) -}
c52521dd0ea482371c8edbb2e3c2da41
  rules101 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : yy ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case ds6 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : dd ds7
                                       -> case Duckling.Numeral.Helpers.parseInteger yy of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x1
                                            -> case Duckling.Numeral.Helpers.parseInteger
                                                      mm of wild8 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x2
                                                 -> case Duckling.Numeral.Helpers.parseInteger
                                                           dd of wild9 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x3
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ GHC.Types.Int
                                                                          (case GHC.Integer.Type.integerToInt
                                                                                  x3 of wild10 { DEFAULT ->
                                                                           GHC.Types.I# wild10 }))
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int))
                                                                    (Duckling.Time.Types.mkIntersectPredicate
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x2 of wild10 { DEFAULT ->
                                                                              GHC.Types.I#
                                                                                wild10 }))
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int))
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x1 of wild10 { DEFAULT ->
                                                                              case GHC.Prim.tagToEnum#
                                                                                     @ GHC.Types.Bool
                                                                                     (GHC.Prim.<=#
                                                                                        wild10
                                                                                        99#) of wild11 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.I#
                                                                                     wild10
                                                                                GHC.Types.True
                                                                                -> case GHC.Classes.modInt#
                                                                                          (GHC.Prim.+#
                                                                                             wild10
                                                                                             50#)
                                                                                          100# of ww2 { DEFAULT ->
                                                                                   GHC.Types.I#
                                                                                     (GHC.Prim.-#
                                                                                        (GHC.Prim.+#
                                                                                           ww2
                                                                                           2000#)
                                                                                        50#) } } })))))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Day
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } }) -}
6c4b560c4b80a8950806a5c12dde66a9
  rules102 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules103
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
c9e3bffd28589d08b0b98735b77c71fd
  rules103 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules104) -}
c28a930ab691defb30ddfe82e7536861
  rules104 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules105) -}
2f1e9e977f4c5c910688efa243cc66b0
  rules105 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(\\d{2,4})-(0?[1-9]|1[0-2])-(3[01]|[12]\\d|0?[1-9])"#) -}
7a01a4a9ad5e08592f9663f678782a06
  rules106 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yyyy-mm-dd"#) -}
fc38b33eb99fef0470e08f972534ab0f
  rules107 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules125
                   Duckling.Time.Rules.rules111
                   Duckling.Time.Rules.rules108) -}
e1e81eb28c918cd032a7302cf209a4c7
  rules108 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : td1 ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : td3 ds3
                             -> case ds3 of wild3 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds4 ds5
                                  -> case td1 of wild4 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds6 nd ->
                                     let {
                                       $j :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
                                         {- Arity: 1, Strictness: <L,1*U(U)> -}
                                       = \ (x :: GHC.Types.Int)[OneShot] ->
                                         case td3 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 nd1 ->
                                         case ds7 of wild6 {
                                           DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                           Duckling.Types.Numeral cobox0
                                           -> case nd1
                                                     `cast`
                                                   (Sub cobox0) of wild7 { Duckling.Numeral.Types.NumeralData ds8 ds9 ds10 ds11 ->
                                              case ds8 of ww { GHC.Types.D# ww1 ->
                                              case GHC.Prim.tagToEnum#
                                                     @ GHC.Types.Bool
                                                     (GHC.Prim.==## ww1 0.0##) of wild8 {
                                                GHC.Types.False
                                                -> let {
                                                     n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                                   } in
                                                   case GHC.Prim.tagToEnum#
                                                          @ GHC.Types.Bool
                                                          (GHC.Prim.==##
                                                             (GHC.Prim.-##
                                                                ww1
                                                                (GHC.Prim.int2Double# n2))
                                                             0.0##) of wild9 {
                                                     GHC.Types.False
                                                     -> GHC.Base.Nothing @ Duckling.Types.Token
                                                     GHC.Types.True
                                                     -> GHC.Base.Just
                                                          @ Duckling.Types.Token
                                                          (Duckling.Types.Token
                                                             @ Duckling.Time.Types.TimeData
                                                             Duckling.Time.Types.$fResolveTimeData
                                                             Duckling.Time.Types.$fEqTimeData
                                                             Duckling.Time.Types.$fHashableTimeData
                                                             Duckling.Time.Types.$fShowTimeData
                                                             Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                               `cast`
                                                             (Sym (Control.DeepSeq.N:NFData[0]
                                                                       <Duckling.Time.Types.TimeData>_N))
                                                             Duckling.Types.$WTime
                                                             (Duckling.Time.Types.TimeData
                                                                (Duckling.Time.Types.mkIntersectPredicate
                                                                   (Duckling.Time.Types.TimeDatePredicate
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ (GHC.Types.Bool,
                                                                            GHC.Types.Int))
                                                                      (GHC.Base.Nothing
                                                                         @ Duckling.Time.Types.AMPM)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Just
                                                                         @ GHC.Types.Int
                                                                         (GHC.Types.I# n2))
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int))
                                                                   (Duckling.Time.Types.TimeDatePredicate
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ (GHC.Types.Bool,
                                                                            GHC.Types.Int))
                                                                      (GHC.Base.Nothing
                                                                         @ Duckling.Time.Types.AMPM)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Nothing
                                                                         @ GHC.Types.Int)
                                                                      (GHC.Base.Just
                                                                         @ GHC.Types.Int
                                                                         (case x of wild10 { GHC.Types.I# x1 ->
                                                                          case GHC.Prim.tagToEnum#
                                                                                 @ GHC.Types.Bool
                                                                                 (GHC.Prim.<=#
                                                                                    x1
                                                                                    99#) of wild11 {
                                                                            GHC.Types.False
                                                                            -> wild10
                                                                            GHC.Types.True
                                                                            -> case GHC.Classes.modInt#
                                                                                      (GHC.Prim.+#
                                                                                         x1
                                                                                         50#)
                                                                                      100# of ww2 { DEFAULT ->
                                                                               GHC.Types.I#
                                                                                 (GHC.Prim.-#
                                                                                    (GHC.Prim.+#
                                                                                       ww2
                                                                                       2000#)
                                                                                    50#) } } }))))
                                                                GHC.Types.False
                                                                Duckling.TimeGrain.Types.Month
                                                                GHC.Types.False
                                                                (GHC.Base.Nothing
                                                                   @ Duckling.Time.Types.Form)
                                                                (GHC.Base.Nothing
                                                                   @ Duckling.Time.Types.IntervalDirection)
                                                                GHC.Types.False
                                                                (GHC.Base.Nothing
                                                                   @ Data.Text.Internal.Text)
                                                                GHC.Types.False)) }
                                                GHC.Types.True
                                                -> GHC.Base.Just
                                                     @ Duckling.Types.Token
                                                     (Duckling.Types.Token
                                                        @ Duckling.Time.Types.TimeData
                                                        Duckling.Time.Types.$fResolveTimeData
                                                        Duckling.Time.Types.$fEqTimeData
                                                        Duckling.Time.Types.$fHashableTimeData
                                                        Duckling.Time.Types.$fShowTimeData
                                                        Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                          `cast`
                                                        (Sym (Control.DeepSeq.N:NFData[0]
                                                                  <Duckling.Time.Types.TimeData>_N))
                                                        Duckling.Types.$WTime
                                                        (Duckling.Time.Types.TimeData
                                                           (Duckling.Time.Types.mkIntersectPredicate
                                                              Duckling.Time.Rules.rules109
                                                              (Duckling.Time.Types.TimeDatePredicate
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing
                                                                    @ (GHC.Types.Bool,
                                                                       GHC.Types.Int))
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.AMPM)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Nothing @ GHC.Types.Int)
                                                                 (GHC.Base.Just
                                                                    @ GHC.Types.Int
                                                                    (case x of wild9 { GHC.Types.I# x1 ->
                                                                     case GHC.Prim.tagToEnum#
                                                                            @ GHC.Types.Bool
                                                                            (GHC.Prim.<=#
                                                                               x1
                                                                               99#) of wild10 {
                                                                       GHC.Types.False -> wild9
                                                                       GHC.Types.True
                                                                       -> case GHC.Classes.modInt#
                                                                                 (GHC.Prim.+#
                                                                                    x1
                                                                                    50#)
                                                                                 100# of ww2 { DEFAULT ->
                                                                          GHC.Types.I#
                                                                            (GHC.Prim.-#
                                                                               (GHC.Prim.+#
                                                                                  ww2
                                                                                  2000#)
                                                                               50#) } } }))))
                                                           GHC.Types.False
                                                           Duckling.TimeGrain.Types.Month
                                                           GHC.Types.False
                                                           (GHC.Base.Nothing
                                                              @ Duckling.Time.Types.Form)
                                                           (GHC.Base.Nothing
                                                              @ Duckling.Time.Types.IntervalDirection)
                                                           GHC.Types.False
                                                           (GHC.Base.Nothing
                                                              @ Data.Text.Internal.Text)
                                                           GHC.Types.False)) } } }
                                           Duckling.Types.Ordinal cobox0
                                           -> GHC.Base.Just
                                                @ Duckling.Types.Token
                                                (Duckling.Types.Token
                                                   @ Duckling.Time.Types.TimeData
                                                   Duckling.Time.Types.$fResolveTimeData
                                                   Duckling.Time.Types.$fEqTimeData
                                                   Duckling.Time.Types.$fHashableTimeData
                                                   Duckling.Time.Types.$fShowTimeData
                                                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                     `cast`
                                                   (Sym (Control.DeepSeq.N:NFData[0]
                                                             <Duckling.Time.Types.TimeData>_N))
                                                   Duckling.Types.$WTime
                                                   (Duckling.Time.Helpers.yearMonth
                                                      x
                                                      nd1
                                                        `cast`
                                                      (Trans
                                                           (Sub cobox0)
                                                           (Duckling.Ordinal.Types.N:OrdinalData[0])))) } }
                                     } in
                                     case ds6 of wild5 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox0
                                       -> case nd
                                                 `cast`
                                               (Sub cobox0) of wild6 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild7 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild8 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True -> $j (GHC.Types.I# n2) }
                                            GHC.Types.True
                                            -> $j
                                                 GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                       Duckling.Types.Ordinal cobox0
                                       -> $j
                                            nd
                                              `cast`
                                            (Trans
                                                 (Sub cobox0)
                                                 (Duckling.Ordinal.Types.N:OrdinalData[0])) } } } } } }) -}
ac5533513154307e7c519d717686f04a
  rules109 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules110
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
fdb01b62fa257a6efc91e067fdc73aec
  rules11 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules652
                   Duckling.Time.Rules.rules12) -}
bff5df0eb11c06c8089ebfca8146e948
  rules110 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
bcb6c39888521337f43a043792e8fac9
  rules111 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules123
                   Duckling.Time.Rules.rules112) -}
905717b13bd49c6f8ea3d9b97220211f
  rules112 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules120
                   Duckling.Time.Rules.rules113) -}
3bd80f352b0dab12c05c6a8a97b747fc
  rules113 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules118
                   Duckling.Time.Rules.rules114) -}
e68bc5f7c339244b6d677e4475430efe
  rules114 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules115
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
5e244d2d06b1903634d6fc8c4d7dc797
  rules115 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules116) -}
cc997f943b1782473559405fc2b8403b
  rules116 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules117) -}
4103838d81c0fcb7a91ec607ab49fdbb
  rules117 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\156\\136"#) -}
453fe0a493c57c8379ceeab0b9590f52
  rules118 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules119) -}
a2f71d014f9a2833db20792622974a9f
  rules119 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 12#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
b1f224d68efe8b546d40a8088e3c2259
  rules12 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules637
                   Duckling.Time.Rules.rules13) -}
deaedd2fdaecd836816c1007ee72cbf4
  rules120 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules121) -}
52f1096abdffc58f029273c8d2f356ee
  rules121 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules122) -}
4443f8d0bf33ef1368cdae4ea9a8e345
  rules122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\185\\180"#) -}
8e167dc651c180c058071b63db762dc0
  rules123 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules124) -}
2f1dca98252d3e707544f45624df50e6
  rules124 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1000# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
527301fbd91d4f85518da524a5162992
  rules125 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "year-month"#) -}
e7409cbe49c08f4ddbf529cc52c5df79
  rules126 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules132
                   Duckling.Time.Rules.rules128
                   Duckling.Time.Rules.rules127) -}
47d37b5a9714951d3fb1c4aadf6fcbbf
  rules127 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : yy ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger yy of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x2 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x1 of wild8 { DEFAULT ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<=#
                                                                           wild8
                                                                           99#) of wild9 {
                                                                   GHC.Types.False
                                                                   -> GHC.Types.I# wild8
                                                                   GHC.Types.True
                                                                   -> case GHC.Classes.modInt#
                                                                             (GHC.Prim.+# wild8 50#)
                                                                             100# of ww2 { DEFAULT ->
                                                                      GHC.Types.I#
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.+# ww2 2000#)
                                                                           50#) } } }))))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Month
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
0facb354ae169f6b667ea54bda5cd661
  rules128 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules129
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
fbe4ad53a664cba38ffb0ab634e32915
  rules129 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules130) -}
abf7ae7aca01cd27a7b6f0f57c09faa7
  rules13 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules634
                   Duckling.Time.Rules.rules14) -}
41b2a019595c53d8d81a90b0a424592c
  rules130 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules131) -}
85f975326f1502adf787e3fc231b1da1
  rules131 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(\\d{4})\\s*[/-]\\s*(1[0-2]|0?[1-9])"#) -}
96ed6c3c4d9aab37b939b5984511b293
  rules132 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yyyy-mm"#) -}
fdc50e8632d7b0bca1537d7719fbb0c7
  rules133 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules146
                   Duckling.Time.Rules.rules142
                   Duckling.Time.Rules.rules134) -}
a60c0d9dd75c4505e6fdd136c913dba2
  rules134 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules135) -}
5986eb263184dd5c1bd60f8098a6b503
  rules135 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules136) -}
fd48f2370dcef7d4e963c699e0a0f2a6
  rules136 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules137) -}
f160a4f32d06fa8bb6cc81ef04b6990c
  rules137 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules138
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
46b3d053777ec2156868e4b430757045
  rules138 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules141
                        GHC.Types.False
                        Duckling.Time.Rules.rules139 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
c736546a5325dcb37fc2d3ce51dced21
  rules139 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Rules.rules140
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
b69a5e12fbd237cb308596a52dfc287b
  rules14 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules624
                   Duckling.Time.Rules.rules15) -}
097624bde7fc41690ec58bc6252e9e37
  rules140 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Day
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Day of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e48694a5a3a8fc08788f44d5dab62147
  rules141 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
d1aa8dd36dbc642393a3457e9bf29a69
  rules142 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules143
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2dfcd041fc7cf71aa95111c4f0713b38
  rules143 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules144) -}
82cc137ac468d45ec420533f928cc59a
  rules144 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules145) -}
8fa2f83c632b5b3dcc30d543e8717ccf
  rules145 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\168\\229\\164\\169|\\230\\152\\168\\230\\151\\165|\\229\\176\\139\\230\\151\\165"#) -}
0e8b518fa9541f938488551a7098a8a6
  rules146 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "yesterday"#) -}
255c338c5efde78e2bf4c36109f6bc49
  rules147 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules159
                   Duckling.Time.Rules.rules155
                   Duckling.Time.Rules.rules148) -}
399646b8897636a5ec6bffa7cea26925
  rules148 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ GHC.Types.Int
                                                   (case GHC.Prim.tagToEnum#
                                                           @ GHC.Types.Bool
                                                           (GHC.Prim.<=# n2 99#) of wild6 {
                                                      GHC.Types.False -> GHC.Types.I# n2
                                                      GHC.Types.True
                                                      -> case GHC.Classes.modInt#
                                                                (GHC.Prim.+# n2 50#)
                                                                100# of ww2 { DEFAULT ->
                                                         GHC.Types.I#
                                                           (GHC.Prim.-#
                                                              (GHC.Prim.+# ww2 2000#)
                                                              50#) } })))
                                             GHC.Types.False
                                             Duckling.TimeGrain.Types.Year
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules149 } } }
                        Duckling.Types.Ordinal cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.year
                                   nd
                                     `cast`
                                   (Trans
                                        (Sub cobox0)
                                        (Duckling.Ordinal.Types.N:OrdinalData[0])))) } } }) -}
52e30b4c20ff1dc0d9e696099a275ea8
  rules149 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules150) -}
795631b8b55c12587761295cae15b12e
  rules15 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules617
                   Duckling.Time.Rules.rules16) -}
4c158a4b4d0d11fa043fe79e0f995839
  rules150 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules151) -}
3a3101b02dac2b16f62e3e31131b7eef
  rules151 :: Duckling.Time.Types.TimeData
  {- Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules152
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
e9bb1961c6f3eb2d28e779a8b0897b96
  rules152 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules153) -}
d098756208a723099f8ae88fa4125e79
  rules153 :: GHC.Base.Maybe GHC.Types.Int
  {- Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules154) -}
a4044ff2e09c4022c56a8d9992c5806e
  rules154 :: GHC.Types.Int
  {- Unfolding: (case GHC.Classes.modInt#
                        50#
                        100# of ww2 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ww2 2000#) 50#) }) -}
e8e6bb88fc5e583614b7d82890e2a089
  rules155 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules157
                   Duckling.Time.Rules.rules156) -}
6402d1357ef84665c4aa47ab70df9fac
  rules156 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules120
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
99b3f4aadd87f1663caf0800de3d100a
  rules157 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules158) -}
bf30f354c1781488bec034d7779ab553
  rules158 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1000# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
94e794c37d3655e883e8fc5dfd995424
  rules159 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "year (numeric with year symbol)"#) -}
e9bb02d61f12a1673866e1054471f1cd
  rules16 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules607
                   Duckling.Time.Rules.rules17) -}
4e4da4d51cf9ceec45d7ee92fe04c705
  rules160 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules168
                   Duckling.Time.Rules.rules164
                   Duckling.Time.Rules.rules161) -}
627d41a661d9539d0c8f9044b7a47039
  rules161 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules162) -}
d47335230f5b941dc323c8bf1bb84a2f
  rules162 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules163) -}
2a80d5202a3923dd8865efed97c5ea42
  rules163 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.weekend) -}
578e334f23843a336dae20c7aae3d537
  rules164 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules165
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
9df3496f3ef157c55224dab313c25561
  rules165 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules166) -}
f10e640fb1629b3c87a5a4b6b5513c32
  rules166 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules167) -}
57c37ca6e07fff722ad6873976d225e0
  rules167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\145\\168\\230\\156\\171|\\233\\128\\177\\230\\156\\171"#) -}
fb71c148ed4d3f0e4be41ad16dce6828
  rules168 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "week-end"#) -}
6fcac2a86e782768d4feed017fd1efc1
  rules169 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules184
                   Duckling.Time.Rules.rules180
                   Duckling.Time.Rules.rules170) -}
fe8dd59ee28e37a2388deb1602ae2170
  rules17 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules599
                   Duckling.Time.Rules.rules18) -}
3556dc077c8bf65ade6407a0c7ff98d1
  rules170 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules171) -}
24807e065577737329943e3a66809531
  rules171 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules176 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules173 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules179 Duckling.Time.Rules.rules172
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
17a11bbe37fbbb24170d83b881e23933
  rules172 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules176
                   Duckling.Time.Rules.rules173) -}
4b041d003aef1b86a2721ac53842df2e
  rules173 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules174
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
819eba2a8527f33d67a1eee76dba4d37
  rules174 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules175) -}
e9e569f9636e4af9cff93441990012cf
  rules175 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n1)) -}
dce07d3fa17958b196a083364d536376
  rules176 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules177
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
b514f60a59d1972c03be1adea845d6fd
  rules177 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules178) -}
85b21bfd08a478ec535162ebe0a7d551
  rules178 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n2)) -}
e14b65ec3597f23f720d1fadf7423b12
  rules179 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Helpers.today1
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
fd2a0c18c609ad26893c2a6f416e6a33
  rules18 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules590
                   Duckling.Time.Rules.rules19) -}
33efd4cee543bf6262262212c6a816cf
  rules180 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules181
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
b54a2ff47eaf7ade6f5d370f477d5f17
  rules181 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules182) -}
26590cfc980ff2b4f176fbb4f7eb2c0a
  rules182 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules183) -}
653ea5c93543c3bab7e79b48a91b7f07
  rules183 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\230\\153\\154|\\228\\187\\138\\229\\164\\169\\230\\153\\154\\228\\184\\138"#) -}
7589692d0bf67357a1639a1532ce1c87
  rules184 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tonight"#) -}
9b75c589fa83222b55d969c5f9945d11
  rules185 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules194
                   Duckling.Time.Rules.rules190
                   Duckling.Time.Rules.rules186) -}
90b0b5184df4ec702bcf0407d2dc062c
  rules186 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules187) -}
942655e795e535c5e0a5672f053e347c
  rules187 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules176 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules173 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules188 Duckling.Time.Rules.rules172
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
a3d47faaf104d3caaf1d1fabc8d62a12
  rules188 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Rules.rules189
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
ea75a2b91f9e0c89a1ed99c38260924f
  rules189 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules82
                        GHC.Types.False
                        Duckling.Time.Rules.rules139 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
068cad9e92e8f6cc0cff74ec27e679d3
  rules19 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules583
                   Duckling.Time.Rules.rules20) -}
009f9d278413c3b99c95b8ec5c62a2cb
  rules190 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules191
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
ec6a1c12564c7fd81e16ebb60caf3bff
  rules191 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules192) -}
91e10cfbd4e58b3973c238ddde9db1c0
  rules192 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules193) -}
c68242855ae605eb12c4f011827b38b3
  rules193 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\230\\153\\154|\\230\\152\\142\\229\\164\\169\\230\\153\\154\\228\\184\\138|\\232\\129\\189\\230\\153\\154"#) -}
72cc8d19b0dc38195efacb44f0a4550d
  rules194 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tomorrow night"#) -}
7e33fdf418fea5eb3c608d9ea137d0b0
  rules195 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules204
                   Duckling.Time.Rules.rules200
                   Duckling.Time.Rules.rules196) -}
74ffad1dfc1ef39c2a67d6813215f077
  rules196 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules197) -}
2593da824b65dd6cd57e698081f383b6
  rules197 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules198) -}
dc8d8b38e9f820f1631f729b6da3a514
  rules198 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules199) -}
3649c99b2aeecb0634ccdbaa3845b8a4
  rules199 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules189
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
bfa148f3394cef17d45f01557ed324b8
  rules2 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules720
                   Duckling.Time.Rules.rules3) -}
ea6f2d8dd997135da82365788b7ba4e2
  rules20 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules572
                   Duckling.Time.Rules.rules21) -}
6e5d52f4c4ea2a9b958767b546bd5103
  rules200 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules201
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
9caa2ee43d21f15745a6fb309a48371b
  rules201 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules202) -}
99cec196e5af98901f97fee429051e47
  rules202 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules203) -}
5cb4b06be253fe82d83c463fa3784f18
  rules203 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\229\\164\\169|\\230\\152\\142\\230\\151\\165|\\232\\129\\189\\230\\151\\165"#) -}
dba2e8e3e5b0d22fb49180e1c1cbc6c7
  rules204 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "tomorrow"#) -}
c2be6a64025fd6f9ee96d54e74c07a0d
  rules205 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules213
                   Duckling.Time.Rules.rules209
                   Duckling.Time.Rules.rules206) -}
98d6bc320f7ef0a71185ffed2bf0c54a
  rules206 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules207) -}
4d2aecebd2b3dcc8a98edaead78020e9
  rules207 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules208) -}
42ac751efc655cd3425e95f92ea597dd
  rules208 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.today) -}
9c8aa83526000050213ce9f16caea8df
  rules209 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules210
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
ce53140d927b63793fcceb170d28baf0
  rules21 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules559
                   Duckling.Time.Rules.rules22) -}
fb061450020cbb1cde3767cd06f22c5f
  rules210 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules211) -}
d1c88d537918d5ec813a76c5c83887ec
  rules211 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules212) -}
e77aa4c161e5f109ce8c2bb77f423073
  rules212 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\229\\164\\169|\\228\\187\\138\\230\\151\\165"#) -}
bc9a69d935034fcb61fed40c37c59757
  rules213 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "today"#) -}
33932ab8a53a2ad7f20368493094d078
  rules214 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules222
                   Duckling.Time.Rules.rules216
                   Duckling.Time.Rules.rules215) -}
d2c347a3bf427b5b6f1e6686e00244c5
  rules215 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.notLatent td `cast` (Sub cobox0))) } } }) -}
d5a9995896112680881fa137aaaa70ed
  rules216 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules221
                   Duckling.Time.Rules.rules217) -}
d8d2f5f7a4fec5e3cf6ee2ccef925bee
  rules217 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules218
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
303cf2c2a292cad5bf885c1cc05a2f68
  rules218 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules219) -}
bb9651207fbd873946ae1c8371317344
  rules219 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules220) -}
3bbabf067a4abd895722b6b2daab583e
  rules22 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules552
                   Duckling.Time.Rules.rules23) -}
6c96de0213ad64015a093d0679e02896
  rules220 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\233\\187\\158|\\231\\130\\185|\\230\\153\\130|\\230\\151\\182"#) -}
121337226656bb78e0a74c2863e9f11b
  rules221 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isATimeOfDay) -}
c3680e3854123e380aaad07bbcd2ab02
  rules222 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<time-of-day> o'clock"#) -}
3cc22e8a411f6fbbc6d405ac5cb8f21e
  rules223 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules230
                   Duckling.Time.Rules.rules225
                   Duckling.Time.Rules.rules224) -}
0f51b4fe10c5bd4f6fdec4d8354642a4
  rules224 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1 -}
efa3116f97ec3f72e63a8991bc883015
  rules225 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules221
                   Duckling.Time.Rules.rules226) -}
650e4f0fab2e71bacdce3ca8b6060234
  rules226 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules227
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
91e96cbbbed6ce2d5cf5501e848c819c
  rules227 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules228) -}
9f7ac57976800ba2d13844cabcc77ab1
  rules228 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules229) -}
4ea3e27a79b5f4b181537c75d96d6331
  rules229 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "([ap])(\\s|\\.)?m?\\.?"#) -}
5a2bfbc51d3e5453096643eb01634d1f
  rules23 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules545
                   Duckling.Time.Rules.rules24) -}
05756ea147efb25b4d00ad5805f12d52
  rules230 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<time-of-day> am|pm"#) -}
9e7e0ead6c15090fa70775c7e8b22fd7
  rules231 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules239
                   Duckling.Time.Rules.rules233
                   Duckling.Time.Rules.rules232) -}
bc04e833d0a4baca2f7957c38d334278
  rules232 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n1
                                                GHC.Types.True
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
55a1954699341e555de1013ceedd7d71
  rules233 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules236
                   Duckling.Time.Rules.rules234) -}
2ff3c84bd2a67117c92c98dde30dc225
  rules234 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules235
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6b208b71587cd478b175ae7b425ff87c
  rules235 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isADayOfWeek) -}
cfed447f5e161597b89778083e95b53b
  rules236 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules237) -}
a8727540b7a36ecf3c9d79fcf39e04fa
  rules237 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules238) -}
a6d79a1063c9591d5098de29b0591cb1
  rules238 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142|\\228\\184\\139(\\228\\184\\170|\\229\\128\\139)?"#) -}
92c874567cc37dd0da571f6cb2b2b6dd
  rules239 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "next <day-of-week>"#) -}
0e23ce602aafc4b906958df4769559c5
  rules24 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules534
                   Duckling.Time.Rules.rules25) -}
161cb80666478d329080a4ba4a40ac4a
  rules240 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules252
                   Duckling.Time.Rules.rules248
                   Duckling.Time.Rules.rules241) -}
1850d8e520baa34cae5f98b437ee66c1
  rules241 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules242) -}
97021d766dbaf3a8e03f1fbcf73e18b2
  rules242 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules243) -}
88410bc884cf563b53afc9eb1cc8fe90
  rules243 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules244) -}
57435ee918076e955226396f5df00528
  rules244 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules245
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
74127ef953aa2fca8adc9e99be9db6ed
  rules245 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules_n1
                        GHC.Types.False
                        Duckling.Time.Rules.rules246 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
371394b95be53154933db85f0d0a710f
  rules246 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Rules.rules247
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
5c4917d0e5a3040698c4df4b4bd36e9d
  rules247 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Year
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Year of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
338a0c6fc7b7485d16f72b12ab845e76
  rules248 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules249
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
839e277b0d23287436632db32254e0d2
  rules249 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules250) -}
6c804b0abee46e8962b11d47d74c5862
  rules25 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules519
                   Duckling.Time.Rules.rules26) -}
08dfd24b7f88f504df1ab77ea16cdf84
  rules250 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules251) -}
69b67f1e986ea3efb28b43fd7ed09eb4
  rules251 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138\\229\\185\\180"#) -}
f3cfe9341b07959c6de42f4304e0ee32
  rules252 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this year"#) -}
0d6146ef689ac3cd544fffae8891a9b5
  rules253 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules262
                   Duckling.Time.Rules.rules255
                   Duckling.Time.Rules.rules254) -}
026ead877ca480a97bf7acc6185892ae
  rules254 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n1
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
742e92f78d0a17d898d6cff803b0448c
  rules255 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules259
                   Duckling.Time.Rules.rules256) -}
54484bccfaf3fbae50d9538e77e6f928
  rules256 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2d5592d354b68fff6d2caf2ac68d30d7
  rules257 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules258) -}
d24357f6cc662538acda948d2b744758
  rules258 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox1 -> GHC.Types.True } }) -}
1b90e27bc4b7524be1a293f7fa0b34ec
  rules259 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules260) -}
024873479374fedf43769e56523b7428
  rules26 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules507
                   Duckling.Time.Rules.rules27) -}
6504a5e0af56b7f50ab5859f45705b33
  rules260 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules261) -}
4b6b7adaaded09134653467ea4947b51
  rules261 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\187\\138(\\228\\184\\170|\\229\\128\\139)?|\\232\\191\\153(\\228\\184\\170)?|\\233\\128\\153(\\229\\128\\139)?"#) -}
d72412f04b35b0a2dc75dc2a71f63052
  rules262 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this <time>"#) -}
39e86926bd891c4e981b9dab0cc01368
  rules263 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules268
                   Duckling.Time.Rules.rules264
                   Duckling.Time.Rules.rules254) -}
5d21e529e9f9c4d52c65b1aaf326b9d9
  rules264 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules265
                   Duckling.Time.Rules.rules234) -}
7f9900b74d4913587f3c94d69fb9d0ef
  rules265 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules266) -}
26c86884a6ef54986b919676a382fe10
  rules266 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules267) -}
95dfba83deabee88dac4873a93cd2886
  rules267 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\153|\\233\\128\\153|\\228\\187\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
6e1adf6bfc632cba49a3d3e7adefb800
  rules268 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "this <day-of-week>"#) -}
4cfe3faf18a83d6acd457d77229be8f1
  rules269 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules278
                   Duckling.Time.Rules.rules271
                   Duckling.Time.Rules.rules270) -}
54fb4b7e6dec94d2a1dadda55fa9a75f
  rules27 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules500
                   Duckling.Time.Rules.rules28) -}
3783536578461d73b82dfe716007e3d9
  rules270 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules_n1
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
f74c923d806ea857c1d5f59b83b1c383
  rules271 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules275
                   Duckling.Time.Rules.rules272) -}
452e1043863f6ee4bcbb55f6abb8cb85
  rules272 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules273
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
8939099dc15d4b33633bc729ff1f52d7
  rules273 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules274) -}
2c66e551e25e9431db46e7b6b49b2f38
  rules274 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.TimeGrain cobox1 -> GHC.Types.True } }) -}
c10f73e40bab372653d5de6ea554e767
  rules275 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules276) -}
102a7c7f498705648126f7279c2c9d57
  rules276 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules277) -}
a92e8eb8097864d8408c72f32f05ed51
  rules277 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\232\\191\\153|\\233\\128\\153)(\\228\\184\\128)?|\\228\\187\\138\\229\\128\\139"#) -}
0de8d19984eb4ea6f6024ce6c8eee2b4
  rules278 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "this <cycle>"#) -}
b87945f1285bc25295f3500af021f8d7
  rules279 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules290
                   Duckling.Time.Rules.rules286
                   Duckling.Time.Rules.rules280) -}
42f2b2c69dd0790f469f7cfc57c15319
  rules28 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules491
                   Duckling.Time.Rules.rules29) -}
a13a8ea5eb7a1755d547495fde8c0c42
  rules280 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules281) -}
f449ae89d8b36f3549db317cc81cd7f6
  rules281 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules282) -}
01eb74ecc08bfc5b54565e3568c8377b
  rules282 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules283) -}
0f9ad42102827f043c94acfe506533d9
  rules283 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules284
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
6d45c2ef4a04e4beafca6fdcb75eb696
  rules284 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules285
                        GHC.Types.False
                        Duckling.Time.Rules.rules139 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
487016655b55c8bcdc6a0fbfd143e659
  rules285 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# -2#) -}
ea199a779884f54d586ee12b6b8cdca3
  rules286 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules287
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
4ff81346732551e6d1a14960f005e6d3
  rules287 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules288) -}
9daa54ad3c345fdef8b8f26864263713
  rules288 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules289) -}
328715d8eb792797da71909809ccb6a5
  rules289 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\137\\141\\229\\164\\169|\\229\\137\\141\\230\\151\\165"#) -}
e843bbc3f77b52659ce6625b1d0a99f5
  rules29 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules480
                   Duckling.Time.Rules.rules30) -}
32461e417d072416f7e93c1ac68b8e56
  rules290 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the day before yesterday"#) -}
d7e169daa05dc85286bcdba810c33a64
  rules291 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules302
                   Duckling.Time.Rules.rules298
                   Duckling.Time.Rules.rules292) -}
24323df059f7a1af24ec851ced207fe9
  rules292 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules293) -}
5151491b07cc6947057d623944a94776
  rules293 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules294) -}
8fe0a897c66e5e6f0b8a9a5d90976dd7
  rules294 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules295) -}
d744c4d13921d4c5868664396a829def
  rules295 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules296
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
97845495aa5dbd01960b97f1b551be10
  rules296 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules297
                        GHC.Types.False
                        Duckling.Time.Rules.rules139 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
845368c30747714da03cd602b6ac8f71
  rules297 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 2#) -}
dbe925f90b0e5e0b4b18040131bffccf
  rules298 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules299
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1a11318343b0708a76f0850c6acac0a3
  rules299 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules300) -}
d6a0a46206b41a4c7cbbbe412a4085cd
  rules3 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules706
                   Duckling.Time.Rules.rules4) -}
76dcaf532926e3b2c4dca10e367ce375
  rules30 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules476
                   Duckling.Time.Rules.rules31) -}
29d9058460307d68d8dd0974ca590e16
  rules300 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules301) -}
4c79e2a0738605fadce15508c3fa32f7
  rules301 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\144\\142\\229\\164\\169|\\229\\190\\140\\229\\164\\169|\\229\\190\\140\\230\\151\\165"#) -}
6c05bd2663f0e3590a66cbf17cb6e56f
  rules302 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the day after tomorrow"#) -}
8f0a1bce946d7ae2f3861ed49d9e45be
  rules303 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules314
                   Duckling.Time.Rules.rules305
                   Duckling.Time.Rules.rules304) -}
cd44ff0873bff18875f53c444dc48f99
  rules304 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case ds3 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds6 of wild5 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds7 ds8
                                       -> case ds7 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds9 td ->
                                          case ds9 of wild7 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox1
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case td
                                                            `cast`
                                                          (Sub cobox1) of wild8 { Duckling.Time.Types.TimeData ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                                                     Duckling.Time.Types.TimeData
                                                       (case Duckling.Time.Helpers.$wtakeNthAfter
                                                               Duckling.Time.Rules.rules141
                                                               GHC.Types.False
                                                               (Duckling.Time.Helpers.timeCycle
                                                                  grain `cast` (Sub cobox0))
                                                               ds10 of ww { Unit# ww1 ->
                                                        Duckling.Time.Types.SeriesPredicate ww1 })
                                                       GHC.Types.False
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False })) } } } } } } } }) -}
76c80add43a356946fe1674ec80040f1
  rules305 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules311
                   Duckling.Time.Rules.rules306) -}
519118af7631f0e945ff8731de186c83
  rules306 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules273
                   Duckling.Time.Rules.rules307) -}
c76d6fa8070e1426d6467b28e7c79e20
  rules307 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules308
                   Duckling.Time.Rules.rules256) -}
a0c6cb5c0dbcc7119a300263fc9e7fc0
  rules308 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules309) -}
03f6ce5912a47c5c3d8f0821faf57492
  rules309 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules310) -}
3865eb4cf9e4b45b3d2fca4731dd367a
  rules31 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules465
                   Duckling.Time.Rules.rules32) -}
8a2cb6c8b1384dbacedd1e3410ceabcf
  rules310 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\185\\139)?\\229\\137\\141"#) -}
0c5095790e4e355b4b4c402f7b0ba45e
  rules311 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules312) -}
e05945e97b57f1f6f953d7909b7aabae
  rules312 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules313) -}
8b6e37b1e1913804c4ee5a3c9c5785bd
  rules313 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\233\\130\\163"#) -}
5e7c327c8070aa6960a8be07c9d4a109
  rules314 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the <cycle> before <time>"#) -}
eaf31dff2fc7276a92c75f55ec072c19
  rules315 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules323
                   Duckling.Time.Rules.rules317
                   Duckling.Time.Rules.rules316) -}
abf9429738cbabd9096dc9b556c69381
  rules316 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case ds3 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds6 of wild5 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds7 ds8
                                       -> case ds7 of wild6 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds9 td ->
                                          case ds9 of wild7 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox1
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case td
                                                            `cast`
                                                          (Sub cobox1) of wild8 { Duckling.Time.Types.TimeData ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ->
                                                     Duckling.Time.Types.TimeData
                                                       (case Duckling.Time.Helpers.$wtakeNthAfter
                                                               Duckling.Time.Rules.rules82
                                                               GHC.Types.False
                                                               (Duckling.Time.Helpers.timeCycle
                                                                  grain `cast` (Sub cobox0))
                                                               ds10 of ww { Unit# ww1 ->
                                                        Duckling.Time.Types.SeriesPredicate ww1 })
                                                       GHC.Types.False
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False })) } } } } } } } }) -}
a50366469b8b9e34836949058a35e810
  rules317 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules311
                   Duckling.Time.Rules.rules318) -}
aebf9076c58e7a7fc516b5a794b23e40
  rules318 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules273
                   Duckling.Time.Rules.rules319) -}
d40208beed02584d2bd699b241d1e963
  rules319 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules320
                   Duckling.Time.Rules.rules256) -}
45b4dd78546213c473ec035979a51c29
  rules32 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules449
                   Duckling.Time.Rules.rules33) -}
8149253f62ada2475d689b11e44c47df
  rules320 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules321) -}
b451417c03dbc6a3e16319ed8ebf8826
  rules321 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules322) -}
f0017c24c7fd51f80f862c92a88fc84b
  rules322 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\185\\139)?(\\229\\144\\142|\\229\\190\\140)"#) -}
e445b19066476291a5ef61f9f7245b69
  rules323 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "the <cycle> after <time>"#) -}
834a0e0b745fc5aee95d5d34dbef4b51
  rules324 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules337
                   Duckling.Time.Rules.rules327
                   Duckling.Time.Rules.rules325) -}
77916f2715b391356a0db0ebc3d93198
  rules325 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case td
                                  `cast`
                                (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                           case Duckling.Time.Helpers.$wminutesBefore
                                  Duckling.Time.Rules.rules326
                                  ww5 of wild3 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just x
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                     $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                     $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                     $dShow `cast` (GHC.Show.Show cobox0)_R
                                     $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                     Duckling.Types.$WTime
                                     x) } } } } }) -}
4ccdbde824a55fddafe4ae85193d2b4f
  rules326 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 30#) -}
52e2b35f80eca3fb3f8997d2d7bce0dd
  rules327 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules328) -}
b50a8a698f5e3dfb0308ccfa4cad0e8a
  rules328 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules333
                   Duckling.Time.Rules.rules329) -}
46ca124353bbad8388bf37ef025e58c9
  rules329 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules330
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
10b0ffa592f210e38d92133a48dc6165
  rules33 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules440
                   Duckling.Time.Rules.rules34) -}
376dd193a2d24f679da18ee0f2359bea
  rules330 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules331) -}
61a1b0df71e5f076f83cab14b7f95430
  rules331 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules332) -}
b81d377396ce2c2f9e9f8fd580d49301
  rules332 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\141\\138"#) -}
3ee2d645654d7cc35ee80675b846a759
  rules333 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules334) -}
2632e637072da8c9f0d636a35d56a502
  rules334 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules335) -}
4a6551a1fede3c3d90926f3402911657
  rules335 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\183\\174"#) -}
204295aace1d641ff89714ec9bf45540
  rules336 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isMidnightOrNoon) -}
eff9bdc74518bcb13d608cc50f5620cf
  rules337 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half to|till|before noon|midnight"#) -}
4f6dfb80919ff43f4ab2a96af8c1514f
  rules338 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules345
                   Duckling.Time.Rules.rules339
                   Duckling.Time.Rules.rules325) -}
9a17802076a7e12450c4dd15bc8127bf
  rules339 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules340) -}
3708de72ceee430b61537f731a2d3eb9
  rules34 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules437
                   Duckling.Time.Rules.rules35) -}
75f0e131f74ed0ca950233b1fc9dc42d
  rules340 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules341
                   Duckling.Time.Rules.rules329) -}
64e894c73f1965551363aefef959c7b3
  rules341 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules342) -}
bce1c5b62a8a6de68fcedd8847b3401e
  rules342 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules343) -}
ebaae3b528c9aa1c74186e96f281a4c4
  rules343 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\230\\151\\182|\\231\\130\\185|\\233\\187\\158)\\229\\183\\174"#) -}
af77343ad1d63a43cc29d7f8458f3590
  rules344 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAnHourOfDay) -}
ad77cc77763621f8d71ea5ada3a64a5f
  rules345 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half to|till|before <integer> (hour-of-day)"#) -}
c78362a925da774da1fad75733814b65
  rules346 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules355
                   Duckling.Time.Rules.rules350
                   Duckling.Time.Rules.rules347) -}
d7c7107ae10308df8e17623b69529803
  rules347 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (Duckling.Time.Types.TimeData
                                                  (Duckling.Time.Types.mkIntersectPredicate
                                                     Duckling.Time.Rules.rules348
                                                     (Duckling.Time.Types.TimeDatePredicate
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Just
                                                           @ (GHC.Types.Bool, GHC.Types.Int)
                                                           (GHC.Types.True, hours))
                                                        (GHC.Base.Nothing
                                                           @ Duckling.Time.Types.AMPM)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)))
                                                  GHC.Types.False
                                                  Duckling.TimeGrain.Types.Minute
                                                  GHC.Types.False
                                                  (GHC.Base.Just
                                                     @ Duckling.Time.Types.Form
                                                     (Duckling.Time.Types.TimeOfDay
                                                        wild6
                                                        GHC.Types.True))
                                                  (GHC.Base.Nothing
                                                     @ Duckling.Time.Types.IntervalDirection)
                                                  GHC.Types.False
                                                  (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                  GHC.Types.False)) } } } } } } }) -}
6e216aab8424a9d5468759ac21f939d0
  rules348 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules349
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
b54453852ce16d3a5fe0e2d9a5be04e1
  rules349 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules326) -}
b04f529d649b921f7e4ff6b2084febe5
  rules35 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules426
                   Duckling.Time.Rules.rules36) -}
0d7af6f3f0653cebd769fc0ddc3897f1
  rules350 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules351) -}
027e6f557ffeea125f7d208a6c9373d6
  rules351 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules352
                   Duckling.Time.Rules.rules329) -}
cfbd71c04b7d08ab5679801f8c35c4dd
  rules352 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules353) -}
aef9231bb7e123304ad3a7dee9d12df5
  rules353 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules354) -}
1a93369d2ffdc33f9ccf86ccc1420906
  rules354 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\135"#) -}
e269acef384d9b9e4c015df5585db66f
  rules355 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half after|past noon|midnight"#) -}
c341fd2dbf18a788f12d7c47fa2c5917
  rules356 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules362
                   Duckling.Time.Rules.rules357
                   Duckling.Time.Rules.rules347) -}
94220a801ce15336365bb0a373ea8c72
  rules357 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules358) -}
9c80692eed672128d1937b99ad4e61af
  rules358 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules359
                   Duckling.Time.Rules.rules329) -}
a80f4db5c06b0b9348c2b45385d76f74
  rules359 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules360) -}
de991bfe171613dc088f642c881ec94a
  rules36 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules421
                   Duckling.Time.Rules.rules37) -}
105a6c3612a69da46af7f441a8d9c469
  rules360 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules361) -}
386b54aafa966db32caa5924d2f22fb6
  rules361 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\151\\182|\\231\\130\\185|\\233\\187\\158"#) -}
24f3338f7d6bc9d67cfdbcbbdadd83e6
  rules362 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "half after|past <integer> (hour-of-day)"#) -}
d6ad62654fa28fe3f765c886873231b4
  rules363 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules372
                   Duckling.Time.Rules.rules366
                   Duckling.Time.Rules.rules364) -}
31c265240074eb704f9586dfdc5832bb
  rules364 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case td
                                  `cast`
                                (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                           case Duckling.Time.Helpers.$wminutesBefore
                                  Duckling.Time.Rules.rules365
                                  ww5 of wild3 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just x
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                     $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                     $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                     $dShow `cast` (GHC.Show.Show cobox0)_R
                                     $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                     Duckling.Types.$WTime
                                     x) } } } } }) -}
ccdb4a62366f1517857d4e35fd4a5ae3
  rules365 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
dbcfb062df31d3a2c43da75db82e574e
  rules366 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules367) -}
2583b5cf9d49c6c5635a978709ec294c
  rules367 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules333
                   Duckling.Time.Rules.rules368) -}
634dd42e260abfd3b0a24c02f698a4af
  rules368 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules369
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
f10875f7a7a432913654c7a9b473ebbb
  rules369 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules370) -}
f4585c9abd1cd64b854c62f7749ef150
  rules37 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules414
                   Duckling.Time.Rules.rules38) -}
3165d1c59e20cf81469738bb501853da
  rules370 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules371) -}
282104ded910158f80e17e3c3b55bbab
  rules371 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\128\\229\\136\\187"#) -}
83020d64269150b9672281a979836fd5
  rules372 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter to|till|before noon|midnight"#) -}
2eb8e2810defdf5247b046d9c6e98b6c
  rules373 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules376
                   Duckling.Time.Rules.rules374
                   Duckling.Time.Rules.rules364) -}
c9962fb2be5c2d8f783b0b351bdfd8d7
  rules374 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules375) -}
08f0a5e07f579e1014f3b902b0f996cf
  rules375 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules341
                   Duckling.Time.Rules.rules368) -}
ab872486df28136238342fc567e577b3
  rules376 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter to|till|before <integer> (hour-of-day)"#) -}
0ef1234df1cb0a1df50da8091e1af01b
  rules377 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules383
                   Duckling.Time.Rules.rules381
                   Duckling.Time.Rules.rules378) -}
50e670f0fd0adee88c82ac6345e645e3
  rules378 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (Duckling.Time.Types.TimeData
                                                  (Duckling.Time.Types.mkIntersectPredicate
                                                     Duckling.Time.Rules.rules379
                                                     (Duckling.Time.Types.TimeDatePredicate
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Just
                                                           @ (GHC.Types.Bool, GHC.Types.Int)
                                                           (GHC.Types.True, hours))
                                                        (GHC.Base.Nothing
                                                           @ Duckling.Time.Types.AMPM)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)
                                                        (GHC.Base.Nothing @ GHC.Types.Int)))
                                                  GHC.Types.False
                                                  Duckling.TimeGrain.Types.Minute
                                                  GHC.Types.False
                                                  (GHC.Base.Just
                                                     @ Duckling.Time.Types.Form
                                                     (Duckling.Time.Types.TimeOfDay
                                                        wild6
                                                        GHC.Types.True))
                                                  (GHC.Base.Nothing
                                                     @ Duckling.Time.Types.IntervalDirection)
                                                  GHC.Types.False
                                                  (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                  GHC.Types.False)) } } } } } } }) -}
ea8c558e7f01a5c539cd0a3782cd99b3
  rules379 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules380
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
2710fba6a0b7165e6f0d9593a46755b7
  rules38 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules403
                   Duckling.Time.Rules.rules39) -}
d54dc48e8747d400ecb456f609d78723
  rules380 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules365) -}
892b613dab45a8dacfe60c18ba30ddd3
  rules381 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules382) -}
2ab05ad4ff6285381689273f7f4f50b7
  rules382 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules352
                   Duckling.Time.Rules.rules368) -}
29c189086ed5ea8097224a5a2dac022a
  rules383 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter after|past noon|midnight"#) -}
29c03eef76f9253497f51affb0924669
  rules384 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules387
                   Duckling.Time.Rules.rules385
                   Duckling.Time.Rules.rules378) -}
5656e75f39e09805165351017cd0a138
  rules385 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules386) -}
f439acc2a50108a25bbbfefc00fd4a62
  rules386 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules359
                   Duckling.Time.Rules.rules368) -}
e686175bd8bb536b240bda47fdf1e577
  rules387 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "quarter after|past <integer> (hour-of-day)"#) -}
4690b7b4b4b2e05226668ab1549a22b1
  rules388 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules395
                   Duckling.Time.Rules.rules390
                   Duckling.Time.Rules.rules389) -}
be7921dae6c2c6e25a70c278fc2b534e
  rules389 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : token ds5
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True
                                                 -> case td
                                                           `cast`
                                                         (Sub cobox0) of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                    case Duckling.Time.Helpers.$wminutesBefore
                                                           (GHC.Types.I# n2)
                                                           ww7 of wild10 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              $dResolve
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox0)_R
                                                              $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                              $dHashable
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox0)_R
                                                              $dShow `cast` (GHC.Show.Show cobox0)_R
                                                              $dNFData
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox0)_R
                                                              Duckling.Types.$WTime
                                                              x) } } }
                                            GHC.Types.True
                                            -> case td
                                                      `cast`
                                                    (Sub cobox0) of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                               case Duckling.Time.Helpers.$wminutesBefore
                                                      GHC.Float.RealFracMethods.properFractionDoubleInt3
                                                      ww7 of wild9 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         $dResolve
                                                           `cast`
                                                         (Duckling.Resolve.Resolve cobox0)_R
                                                         $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                         $dHashable
                                                           `cast`
                                                         (Data.Hashable.Class.Hashable cobox0)_R
                                                         $dShow `cast` (GHC.Show.Show cobox0)_R
                                                         $dNFData
                                                           `cast`
                                                         (Control.DeepSeq.NFData cobox0)_R
                                                         Duckling.Types.$WTime
                                                         x) } } } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> case td
                                                 `cast`
                                               (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                          case Duckling.Time.Helpers.$wminutesBefore
                                                 nd
                                                   `cast`
                                                 (Trans
                                                      (Sub cobox1)
                                                      (Duckling.Ordinal.Types.N:OrdinalData[0]))
                                                 ww5 of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    $dResolve
                                                      `cast`
                                                    (Duckling.Resolve.Resolve cobox0)_R
                                                    $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                    $dHashable
                                                      `cast`
                                                    (Data.Hashable.Class.Hashable cobox0)_R
                                                    $dShow `cast` (GHC.Show.Show cobox0)_R
                                                    $dNFData
                                                      `cast`
                                                    (Control.DeepSeq.NFData cobox0)_R
                                                    Duckling.Types.$WTime
                                                    x) } } } } } } } } }) -}
68f9b60ea9b71ea565df330936d7d6ae
  rules39 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules396
                   Duckling.Time.Rules.rules40) -}
dcda3597561a647b3c8e92b396272a71
  rules390 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules391) -}
10bd1aecd78efb04396489943a4d12b7
  rules391 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules333
                   Duckling.Time.Rules.rules392) -}
3595445a05c84f52e0af7ddd3eaea046
  rules392 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules393
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
ff0b6d4b8bcde9d0dad39761e44be5d9
  rules393 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules394) -}
cc13d5b1731ecfb4d5673011fec0c132
  rules394 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
b11ac91113674a4b2644320b93c60e2d
  rules395 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes to|till|before noon|midnight"#) -}
92dda01374d1615a1ad377c0a4ddf1d9
  rules396 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules402
                   Duckling.Time.Rules.rules397
                   Duckling.Time.Rules.rules389) -}
c2a40be3588380f1789627430a0a59a2
  rules397 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules398) -}
c325bee063214434a381daa0679c9801
  rules398 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules341
                   Duckling.Time.Rules.rules399) -}
24c539e6cd19caf13b592ab1e9f6f4ac
  rules399 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules400
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
cba7f58539ec17be16b940a5fdc08246
  rules4 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules702
                   Duckling.Time.Rules.rules5) -}
555f92a74103f52e308c2ea95919c827
  rules40 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules388
                   Duckling.Time.Rules.rules41) -}
5e213bea2289b256145a2084567f0d0a
  rules400 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules401) -}
4170d6c8b22dbbb64dfe08340849f94d
  rules401 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
afd05f0f2a13c5ace1a9aff2c0304ccd
  rules402 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes to|till|before <integer> (hour-of-day)"#) -}
68be16e592ef96f114fb19a910e1ef29
  rules403 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules413
                   Duckling.Time.Rules.rules405
                   Duckling.Time.Rules.rules404) -}
4372a20cb4ef163efbbd928807f82800
  rules404 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Time.Types.TimeData ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                           case ds8 of wild4 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                             GHC.Base.Just ds13
                             -> case ds13 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Time.Types.TimeOfDay ds14 ds15
                                  -> case ds14 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just hours
                                       -> case ds1 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds16 ds17
                                            -> case ds17 of wild8 {
                                                 [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 : token ds18
                                                 -> case token of wild9 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds19 nd ->
                                                    case ds19 of wild10 {
                                                      DEFAULT
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      Duckling.Types.Numeral cobox1
                                                      -> case nd
                                                                `cast`
                                                              (Sub cobox1) of wild11 { Duckling.Numeral.Types.NumeralData ds20 ds21 ds22 ds23 ->
                                                         case ds20 of ww { GHC.Types.D# ww1 ->
                                                         let {
                                                           $j :: GHC.Types.Int
                                                                 -> GHC.Base.Maybe
                                                                      Duckling.Types.Token
                                                             {- Arity: 1, Strictness: <L,U> -}
                                                           = \ (x :: GHC.Types.Int)[OneShot] ->
                                                             GHC.Base.Just
                                                               @ Duckling.Types.Token
                                                               (Duckling.Types.Token
                                                                  @ Duckling.Time.Types.TimeData
                                                                  Duckling.Time.Types.$fResolveTimeData
                                                                  Duckling.Time.Types.$fEqTimeData
                                                                  Duckling.Time.Types.$fHashableTimeData
                                                                  Duckling.Time.Types.$fShowTimeData
                                                                  Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                    `cast`
                                                                  (Sym (Control.DeepSeq.N:NFData[0]
                                                                            <Duckling.Time.Types.TimeData>_N))
                                                                  Duckling.Types.$WTime
                                                                  (Duckling.Time.Types.TimeData
                                                                     (Duckling.Time.Types.mkIntersectPredicate
                                                                        (Duckling.Time.Types.mkMinutePredicate
                                                                           x)
                                                                        (Duckling.Time.Types.TimeDatePredicate
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Just
                                                                              @ (GHC.Types.Bool,
                                                                                 GHC.Types.Int)
                                                                              (GHC.Types.True,
                                                                               hours))
                                                                           (GHC.Base.Nothing
                                                                              @ Duckling.Time.Types.AMPM)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)
                                                                           (GHC.Base.Nothing
                                                                              @ GHC.Types.Int)))
                                                                     GHC.Types.False
                                                                     Duckling.TimeGrain.Types.Minute
                                                                     GHC.Types.False
                                                                     (GHC.Base.Just
                                                                        @ Duckling.Time.Types.Form
                                                                        (Duckling.Time.Types.TimeOfDay
                                                                           wild6
                                                                           GHC.Types.True))
                                                                     (GHC.Base.Nothing
                                                                        @ Duckling.Time.Types.IntervalDirection)
                                                                     GHC.Types.False
                                                                     (GHC.Base.Nothing
                                                                        @ Data.Text.Internal.Text)
                                                                     GHC.Types.False))
                                                         } in
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.==##
                                                                   ww1
                                                                   0.0##) of wild12 {
                                                           GHC.Types.False
                                                           -> let {
                                                                n2 :: GHC.Prim.Int#
                                                                = GHC.Prim.double2Int# ww1
                                                              } in
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.==##
                                                                        (GHC.Prim.-##
                                                                           ww1
                                                                           (GHC.Prim.int2Double#
                                                                              n2))
                                                                        0.0##) of wild13 {
                                                                GHC.Types.False
                                                                -> GHC.Base.Nothing
                                                                     @ Duckling.Types.Token
                                                                GHC.Types.True
                                                                -> $j (GHC.Types.I# n2) }
                                                           GHC.Types.True
                                                           -> $j
                                                                GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                                      Duckling.Types.Ordinal cobox1
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.mkMinutePredicate
                                                                       nd
                                                                         `cast`
                                                                       (Trans
                                                                            (Sub cobox1)
                                                                            (Duckling.Ordinal.Types.N:OrdinalData[0])))
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int)
                                                                          (GHC.Types.True, hours))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Minute
                                                                 GHC.Types.False
                                                                 (GHC.Base.Just
                                                                    @ Duckling.Time.Types.Form
                                                                    (Duckling.Time.Types.TimeOfDay
                                                                       wild6
                                                                       GHC.Types.True))
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } } }) -}
aff8ae0b140ffb271def5d410d8b653e
  rules405 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules336
                   Duckling.Time.Rules.rules406) -}
4e0d4a08c3614d14f60dca82d197c0f3
  rules406 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules410
                   Duckling.Time.Rules.rules407) -}
73904a43bd80dde3c8558545d737e81c
  rules407 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules408
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
359cb98e9dd5c218016bd060c1f89d2d
  rules408 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules409) -}
99aa22e7d3efbb40dd88b8d9a7a06794
  rules409 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
34a6c904616f47b9ef139bee64332a33
  rules41 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules384
                   Duckling.Time.Rules.rules42) -}
ca670a3302e5368cd28d1f82c6d2df9b
  rules410 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules411) -}
83f0ef8b81e997ca9fb6d8177467f3f9
  rules411 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules412) -}
30bdd300bb0d578666899630237e1901
  rules412 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\232\\191\\135|\\233\\129\\142"#) -}
c3b6293c67e4b5752d9154db56558ff9
  rules413 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes after|past noon|midnight"#) -}
15b7abd0510351517f2f39a686a5ff10
  rules414 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules420
                   Duckling.Time.Rules.rules415
                   Duckling.Time.Rules.rules404) -}
7e193a1edf00334ea7193bbf652e3e7d
  rules415 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules344
                   Duckling.Time.Rules.rules416) -}
c0ee004c6e2ac2ade851874ef8536f6c
  rules416 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules359
                   Duckling.Time.Rules.rules417) -}
d9e3dc891c768c7ffcb4d5500d1ae2fb
  rules417 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules418
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2a48583506df9bf8cb74670c7fdf64df
  rules418 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules419) -}
85f1992591c6bac8178e49f26b86f7ab
  rules419 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 59#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
15d1d0685f82fd12fd4b37365cf3f12c
  rules42 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules377
                   Duckling.Time.Rules.rules43) -}
f5afa72f55ae8d7e08913898a0c7bfff
  rules420 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "relative minutes after|past <integer> (hour-of-day)"#) -}
d746133a21aafc8dd54dc0c3d4c0f7be
  rules421 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules425
                   Duckling.Time.Rules.rules423
                   Duckling.Time.Rules.rules422) -}
7e3aa830fad1ef7f20478046fcd6a028
  rules422 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 td2 ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Time cobox1
                                  -> case td1
                                            `cast`
                                          (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                     case td2
                                            `cast`
                                          (Sub cobox1) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                     case Duckling.Time.Helpers.$wintersect
                                            ww1
                                            ww3
                                            ww6
                                            ww8
                                            ww11
                                            ww13
                                            ww16
                                            ww18 of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                               $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                               $dHashable
                                                 `cast`
                                               (Data.Hashable.Class.Hashable cobox0)_R
                                               $dShow `cast` (GHC.Show.Show cobox0)_R
                                               $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                               Duckling.Types.$WTime
                                               x) } } } } } } } } }) -}
39bb767feece70dba71b7bbc81b8d1f1
  rules423 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules424
                   Duckling.Time.Rules.rules256) -}
8befc2f4de0e5dab3996f60531619eb9
  rules424 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAPartOfDay) -}
713e6248d2ef739408c8e9f14d3277fa
  rules425 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<part-of-day> <dim time>"#) -}
cc8d23cc059cd77e9646dca5c4c8d26a
  rules426 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules436
                   Duckling.Time.Rules.rules428
                   Duckling.Time.Rules.rules427) -}
e9abf8ac501c2997e3fb3db9702d04ea
  rules427 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds5 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 od ->
                                     case ds7 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Ordinal cobox1
                                       -> case ds6 of wild7 {
                                            [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                            : ds8 ds9
                                            -> case ds8 of wild8 { Duckling.Types.Token a2 $dResolve2 $dEq2 $dHashable2 $dShow2 $dNFData2 ds10 td2 ->
                                               case ds10 of wild9 {
                                                 DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 Duckling.Types.Time cobox2
                                                 -> case td2
                                                           `cast`
                                                         (Sub cobox2) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                    case td1
                                                           `cast`
                                                         (Sub cobox0) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                                    case Duckling.Time.Helpers.$wintersect
                                                           ww1
                                                           ww3
                                                           ww6
                                                           ww8
                                                           ww11
                                                           ww13
                                                           ww16
                                                           ww18 of wild10 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              $dResolve
                                                                `cast`
                                                              (Duckling.Resolve.Resolve cobox0)_R
                                                              $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                              $dHashable
                                                                `cast`
                                                              (Data.Hashable.Class.Hashable
                                                                 cobox0)_R
                                                              $dShow `cast` (GHC.Show.Show cobox0)_R
                                                              $dNFData
                                                                `cast`
                                                              (Control.DeepSeq.NFData cobox0)_R
                                                              Duckling.Types.$WTime
                                                              (case x of wild11 { Duckling.Time.Types.TimeData ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ->
                                                               Duckling.Time.Types.TimeData
                                                                 (case Duckling.Time.Helpers.$wtakeNth
                                                                         (case od
                                                                                 `cast`
                                                                               (Trans
                                                                                    (Sub cobox1)
                                                                                    (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild12 { GHC.Types.I# x1 ->
                                                                          GHC.Types.I#
                                                                            (GHC.Prim.-# x1 1#) })
                                                                         GHC.Types.False
                                                                         ds11 of ww22 { Unit# ww23 ->
                                                                  Duckling.Time.Types.SeriesPredicate
                                                                    ww23 })
                                                                 GHC.Types.False
                                                                 ds13
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 ds18
                                                                 GHC.Types.False })) } } } } } } } } } } } } }) -}
465a62f86c4c3774fc3a4c1d7db53122
  rules428 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules429) -}
023a21172547c31e9c614556de3f0aa5
  rules429 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules433
                   Duckling.Time.Rules.rules430) -}
ebad52c31c48830cd335b4822aa2a31f
  rules43 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules373
                   Duckling.Time.Rules.rules44) -}
718272df87de23021606d4f2d9fdef04
  rules430 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules431
                   Duckling.Time.Rules.rules256) -}
33634d5e3ab3a9769e9829b13f1a655d
  rules431 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules432) -}
b4aeb3564682ea42774743fb0a4610b7
  rules432 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Ordinal cobox1 -> GHC.Types.True } }) -}
829859a7c8ed64acb8d07d0add1c6845
  rules433 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules434) -}
e1e4b5c842f1f22c49f7af3a5ac6ffe5
  rules434 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules435) -}
d28d339f7d3a4727175f4f505e572b41
  rules435 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\231\\154\\132"#) -}
478ada45d52cac37b193c96e9f360fb8
  rules436 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "nth <time> of <time>"#) -}
0e9841503292cc19a5769e033c45003a
  rules437 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules436
                   Duckling.Time.Rules.rules439
                   Duckling.Time.Rules.rules438) -}
bbee9472e7c317ca71772a701df9f470
  rules438 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds5 od ->
                                case ds5 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Ordinal cobox1
                                  -> case ds4 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : ds6 ds7
                                       -> case ds6 of wild7 { Duckling.Types.Token a2 $dResolve2 $dEq2 $dHashable2 $dShow2 $dNFData2 ds8 td2 ->
                                          case ds8 of wild8 {
                                            DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                            Duckling.Types.Time cobox2
                                            -> case td2
                                                      `cast`
                                                    (Sub cobox2) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                               case td1
                                                      `cast`
                                                    (Sub cobox0) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                               case Duckling.Time.Helpers.$wintersect
                                                      ww1
                                                      ww3
                                                      ww6
                                                      ww8
                                                      ww11
                                                      ww13
                                                      ww16
                                                      ww18 of wild9 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         $dResolve
                                                           `cast`
                                                         (Duckling.Resolve.Resolve cobox0)_R
                                                         $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                         $dHashable
                                                           `cast`
                                                         (Data.Hashable.Class.Hashable cobox0)_R
                                                         $dShow `cast` (GHC.Show.Show cobox0)_R
                                                         $dNFData
                                                           `cast`
                                                         (Control.DeepSeq.NFData cobox0)_R
                                                         Duckling.Types.$WTime
                                                         (case x of wild10 { Duckling.Time.Types.TimeData ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                                                          Duckling.Time.Types.TimeData
                                                            (case Duckling.Time.Helpers.$wtakeNth
                                                                    (case od
                                                                            `cast`
                                                                          (Trans
                                                                               (Sub cobox1)
                                                                               (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild11 { GHC.Types.I# x1 ->
                                                                     GHC.Types.I#
                                                                       (GHC.Prim.-# x1 1#) })
                                                                    GHC.Types.False
                                                                    ds9 of ww22 { Unit# ww23 ->
                                                             Duckling.Time.Types.SeriesPredicate
                                                               ww23 })
                                                            GHC.Types.False
                                                            ds11
                                                            GHC.Types.False
                                                            (GHC.Base.Nothing
                                                               @ Duckling.Time.Types.Form)
                                                            (GHC.Base.Nothing
                                                               @ Duckling.Time.Types.IntervalDirection)
                                                            GHC.Types.False
                                                            ds16
                                                            GHC.Types.False })) } } } } } } } } } } } }) -}
6e863cc131cc060ff04440778dc2083d
  rules439 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules430) -}
d5d3f18c216eafedb33bca04c9986703
  rules44 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules363
                   Duckling.Time.Rules.rules45) -}
33211bd8a4b9ae2e7e7ccb32bfef2796
  rules440 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules448
                   Duckling.Time.Rules.rules444
                   Duckling.Time.Rules.rules441) -}
0a606a8e4ca2c8b86c7f8b2185e159a0
  rules441 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules442) -}
8610c4ea01c5efc003d404618faec790
  rules442 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules443) -}
a03881a3962719bbd6aff05bd15a5085
  rules443 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Helpers.now) -}
90450e18378e65c943e96ea92ffd562a
  rules444 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules445
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
a9a5fdfa5b999bec3085010c38a1136f
  rules445 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules446) -}
aa930dffd30aaaf8e4fcde7a8f6e593a
  rules446 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules447) -}
837f3e5dda5f7a5a9db8fb0afe65bd12
  rules447 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\231\\142\\176\\229\\156\\168|\\230\\173\\164\\230\\151\\182|\\230\\173\\164\\229\\136\\187|\\229\\189\\147\\229\\137\\141|\\231\\143\\190\\229\\156\\168|\\230\\173\\164\\230\\153\\130|\\231\\149\\182\\229\\137\\141|\\229\\174\\156\\229\\174\\182|\\232\\128\\140\\229\\174\\182|\\228\\190\\157\\229\\174\\182"#) -}
e431face4d067e82baba65bd4c4e8c0a
  rules448 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "now"#) -}
e8e202156807f48ae063569e0e5894d8
  rules449 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules464
                   Duckling.Time.Rules.rules460
                   Duckling.Time.Rules.rules450) -}
45e3804a0a308ed1ef458df27a94d46a
  rules45 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules356
                   Duckling.Time.Rules.rules46) -}
effc823150600acc204768fe2a9d7408
  rules450 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules451) -}
a1953fcaae972fc0917239e60424e83e
  rules451 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules452) -}
30e494e20a0fc44e890350c997c55fc2
  rules452 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules453) -}
8adef6a57224694722a0243bbb26b653
  rules453 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules457
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules454
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
2766ba05122aacad20979be5ff0652d7
  rules454 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules455) -}
57e645120018639c945cc816f0c16a9e
  rules455 :: Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules456
                   GHC.Types.False) -}
1b3f6bca3fa6c945bb9f769ff10c848b
  rules456 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules_n3) -}
f257066817748d6580fb25fd3a298600
  rules457 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules458
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
4ece5dae6474674bb35e0a1d5f4dd904
  rules458 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules459) -}
b2cc6146135e8a75441db4b9798388e5
  rules459 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n3)) -}
483e7ca1dc82ec7eeaf6b90c443ad09a
  rules46 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules346
                   Duckling.Time.Rules.rules47) -}
1b9b98e288d6ff08c5b7fcace76b6fd6
  rules460 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules461
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3f544c8119b7507725890c883d7da828
  rules461 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules462) -}
7b0bc569523decb17dc26e4f10a86fbd
  rules462 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules463) -}
3e0a086d8d01a82936b756d9d5226473
  rules463 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\173\\229\\141\\136"#) -}
d78356d6134ced54921572ac66b92886
  rules464 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "noon"#) -}
6ef2003f41e240fdc6cda32707f57b3f
  rules465 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules475
                   Duckling.Time.Rules.rules471
                   Duckling.Time.Rules.rules466) -}
a2864da90a596092d39e3561426bc2aa
  rules466 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules467) -}
2073a7e65185d174d0d204382cccfc73
  rules467 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules468) -}
eded0d00df54bc0c55cb454b6ed62920
  rules468 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules469) -}
f448cfe9d1d186a2835beda948d52a5d
  rules469 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules470
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
8177bcce78611068aaeb73cfa4b3b059
  rules47 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules338
                   Duckling.Time.Rules.rules48) -}
d5497fc93413eed951bc20d2dac9efb6
  rules470 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules82
                        GHC.Types.False
                        Duckling.Time.Rules.rules246 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
595a816ebad97e63a5d1aad20b89c3ab
  rules471 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules472
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
83b6aa0ba4f97fa6734314c44e0eda5f
  rules472 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules473) -}
fca8bd00dfb264f42a86f2bac51f0fc7
  rules473 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules474) -}
0c0fa2887788d3723028ba4e53f7c38c
  rules474 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\142\\229\\185\\180|\\228\\184\\139\\229\\185\\180"#) -}
c3b342e8db947384405e1095b58ec1a6
  rules475 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next year"#) -}
12b4f5321c6d8b87a852cc7986a40e8a
  rules476 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules479
                   Duckling.Time.Rules.rules478
                   Duckling.Time.Rules.rules477) -}
c24e762e462f784934edf04e9cba8a3e
  rules477 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules82
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
17c245b2e798e0a5be7bad3bc325e699
  rules478 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules236
                   Duckling.Time.Rules.rules256) -}
7d356a3106329ab3484671fe8eb4d752
  rules479 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next <time>"#) -}
504cdc3df5066c3c946a748b65f40b5a
  rules48 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules324
                   Duckling.Time.Rules.rules49) -}
94ee1c0ab5657fdad0cb09cb1d9145cb
  rules480 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules490
                   Duckling.Time.Rules.rules482
                   Duckling.Time.Rules.rules481) -}
c002ae240189b6a4ac1439f987ba74f0
  rules481 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds1 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 grain ->
                           case ds3 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case token of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds4 nd ->
                                case ds4 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Numeral cobox1
                                  -> case nd
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                                     case ds5 of ww { GHC.Types.D# ww1 ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==## ww1 0.0##) of wild7 {
                                       GHC.Types.False
                                       -> let {
                                            n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==##
                                                    (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                                    0.0##) of wild8 {
                                            GHC.Types.False
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Types.True
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case Duckling.Time.Helpers.$wcycleN
                                                            GHC.Types.True
                                                            grain `cast` (Sub cobox0)
                                                            (GHC.Types.I#
                                                               n2) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                     Duckling.Time.Types.TimeData
                                                       ww3
                                                       ww4
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       ww9
                                                       ww10
                                                       ww11 })) }
                                       GHC.Types.True
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       GHC.Float.RealFracMethods.properFractionDoubleInt3 of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                Duckling.Time.Types.TimeData
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9
                                                  ww10
                                                  ww11 })) } } }
                                  Duckling.Types.Ordinal cobox1
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (case Duckling.Time.Helpers.$wcycleN
                                                  GHC.Types.True
                                                  grain `cast` (Sub cobox0)
                                                  nd
                                                    `cast`
                                                  (Trans
                                                       (Sub cobox1)
                                                       (Duckling.Ordinal.Types.N:OrdinalData[0])) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                           Duckling.Time.Types.TimeData
                                             ww1
                                             ww2
                                             ww3
                                             ww4
                                             ww5
                                             ww6
                                             ww7
                                             ww8
                                             ww9 })) } } } } } }) -}
3aa007f8c20eb9625e577f0383603616
  rules482 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules488
                   Duckling.Time.Rules.rules483) -}
ab070f41e38b2ce0920079b1b4d52b94
  rules483 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules273
                   Duckling.Time.Rules.rules484) -}
803ac96ec582f4b3d6450114222a2741
  rules484 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules485
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3396c86ff3177250d902fc3de335686d
  rules485 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules486) -}
7246063d6c0d61c8764c8b0bce9a296a
  rules486 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules487) -}
a41048de0a5e141c0db212b1d411246e
  rules487 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\139|(\\228\\185\\139)?\\229\\144\\142|(\\228\\185\\139)?\\229\\190\\140"#) -}
e13581ad4193304d807f0afb82e1d06e
  rules488 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules489) -}
bb68feec6d6b29cf8728d5c833d293ff
  rules489 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
d4e35698d02e85597c576f83408a7fb9
  rules49 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules315
                   Duckling.Time.Rules.rules50) -}
0579ccbe34ab1073733f6f1eb0ca57f5
  rules490 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next n <cycle>"#) -}
b8a557cc8ae2a928005c148e6543731a
  rules491 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules490
                   Duckling.Time.Rules.rules493
                   Duckling.Time.Rules.rules492) -}
0f72302e31b0cbace97cc24bccb30175
  rules492 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild3 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 grain ->
                                case ds5 of wild4 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.TimeGrain cobox0
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True
                                                 -> GHC.Base.Just
                                                      @ Duckling.Types.Token
                                                      (Duckling.Types.Token
                                                         @ Duckling.Time.Types.TimeData
                                                         Duckling.Time.Types.$fResolveTimeData
                                                         Duckling.Time.Types.$fEqTimeData
                                                         Duckling.Time.Types.$fHashableTimeData
                                                         Duckling.Time.Types.$fShowTimeData
                                                         Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                           `cast`
                                                         (Sym (Control.DeepSeq.N:NFData[0]
                                                                   <Duckling.Time.Types.TimeData>_N))
                                                         Duckling.Types.$WTime
                                                         (case Duckling.Time.Helpers.$wcycleN
                                                                 GHC.Types.True
                                                                 grain `cast` (Sub cobox0)
                                                                 (GHC.Types.I#
                                                                    n2) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                          Duckling.Time.Types.TimeData
                                                            ww3
                                                            ww4
                                                            ww5
                                                            ww6
                                                            ww7
                                                            ww8
                                                            ww9
                                                            ww10
                                                            ww11 })) }
                                            GHC.Types.True
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (case Duckling.Time.Helpers.$wcycleN
                                                            GHC.Types.True
                                                            grain `cast` (Sub cobox0)
                                                            GHC.Float.RealFracMethods.properFractionDoubleInt3 of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                     Duckling.Time.Types.TimeData
                                                       ww3
                                                       ww4
                                                       ww5
                                                       ww6
                                                       ww7
                                                       ww8
                                                       ww9
                                                       ww10
                                                       ww11 })) } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       nd
                                                         `cast`
                                                       (Trans
                                                            (Sub cobox1)
                                                            (Duckling.Ordinal.Types.N:OrdinalData[0])) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                Duckling.Time.Types.TimeData
                                                  ww1
                                                  ww2
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9 })) } } } } } } }) -}
c5c505a2e87677a3474e239b6dfd3ab9
  rules493 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules497
                   Duckling.Time.Rules.rules494) -}
fc8e8d78da5d33983e2c05253627ec57
  rules494 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules495
                   Duckling.Time.Rules.rules272) -}
95a83173600d5d0f2f4347e1bf36dd83
  rules495 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules496) -}
8d6ef0325f718708410668457998a99f
  rules496 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
7644b8e1d7cc882c46904db007a9a5f9
  rules497 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules498) -}
8cad961a0bd97de338024679d372c0b2
  rules498 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules499) -}
6a89a372d998d6f4046530a8830e0f83
  rules499 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\139|\\229\\144\\142|\\229\\190\\140"#) -}
9b02b8dc5abccc1e60ba6b3601256f80
  rules5 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules698
                   Duckling.Time.Rules.rules6) -}
12cb74cf23dd0b114eb94de62fd8da41
  rules50 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules303
                   Duckling.Time.Rules.rules51) -}
a806286b5a5e13454a959a1657dda989
  rules500 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules506
                   Duckling.Time.Rules.rules502
                   Duckling.Time.Rules.rules501) -}
c675928ff9f939cd108316d8f2d55b00
  rules501 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules82
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
505b780f70d5214eeaa35c58715d3141
  rules502 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules503
                   Duckling.Time.Rules.rules272) -}
842001b7d5302755cd83ceea83462ee2
  rules503 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules504) -}
c32983fac52e7dc0a0c0aa83eea0cd15
  rules504 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules505) -}
ffc7e9b95944040a08230887885c6d7f
  rules505 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\228\\184\\139|\\230\\156\\170\\230\\157\\165)(\\228\\184\\170|\\229\\128\\139)?"#) -}
285e7fbcca0a8a69ffaee9d143997451
  rules506 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "next <cycle>"#) -}
bc0ef661fe6f69e26d3dda3174884e36
  rules507 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules518
                   Duckling.Time.Rules.rules509
                   Duckling.Time.Rules.rules508) -}
9b07af8a24c8f25b7344593d2712c0c7
  rules508 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : token ds3
                             -> case Duckling.Time.Helpers.intersectDOM
                                       td `cast` (Sub cobox0)
                                       token of wild4 {
                                  GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          $dResolve `cast` (Duckling.Resolve.Resolve cobox0)_R
                                          $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                          $dHashable `cast` (Data.Hashable.Class.Hashable cobox0)_R
                                          $dShow `cast` (GHC.Show.Show cobox0)_R
                                          $dNFData `cast` (Control.DeepSeq.NFData cobox0)_R
                                          Duckling.Types.$WTime
                                          x) } } } } }) -}
b310616590fd3e805e700b96f5db37fa
  rules509 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules517
                   Duckling.Time.Rules.rules510) -}
49b633fd1a0a7c77365b3990df9cfa5f
  rules51 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules291
                   Duckling.Time.Rules.rules52) -}
726cde16a3e0c48a5b6b0d29f801921d
  rules510 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules515
                   Duckling.Time.Rules.rules511) -}
4f8bf31702a9fbc2342e4e6a1106f179
  rules511 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules512
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
fdc264ac59a4f8ccef40500fe7d166ea
  rules512 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules513) -}
43967160e6d17bd4d45e23dd05464af3
  rules513 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules514) -}
f211a543b1ec6278686b29924f3e52a5
  rules514 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\143\\183|\\232\\153\\159|\\230\\151\\165"#) -}
b2c133460c3ff377ed1f183694981b7f
  rules515 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules516) -}
c25e99f696954d6bd762b681b22bc75c
  rules516 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox1 -> GHC.Types.True } }) -}
20da6d4024cb22ed68dbe1541bf4eae4
  rules517 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isAMonth) -}
c58b56ceb76887f2212eb52eb89d9d74
  rules518 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<named-month> <day-of-month>"#) -}
0c8d4cb6a75ac4a87ba6425fefcc8c7a
  rules519 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules533
                   Duckling.Time.Rules.rules529
                   Duckling.Time.Rules.rules520) -}
14b3666e44825d17cf8491968fcdcc6c
  rules52 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules279
                   Duckling.Time.Rules.rules53) -}
7549ceee46c5e40a49402f8f20dd5e69
  rules520 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules521) -}
533ca09efa95638e100c0bd607bc4219
  rules521 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules526 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules457 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules522
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
1b931a1f0cfa49b16de2e25ad672eb8e
  rules522 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules523) -}
d45a6244591aef2a83e95acb18f9152c
  rules523 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules525
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules524
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
97e8f594bd20419883eb93103256863a
  rules524 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Types.PartOfDay) -}
2100c4985a9ccb68a4d728fcb710494a
  rules525 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules526
                   Duckling.Time.Rules.rules457) -}
e38728cd5f069c8b249ecf10cf91498e
  rules526 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules527
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
0963016fdb29778a9711c292f5a04b9c
  rules527 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules528) -}
c8c12cccd12f37a4999887746067f025
  rules528 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n4)) -}
d6fe537940537d7fa22ec0c5e1d3c001
  rules529 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules530
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
60d7e775c7d01ea8178ddda9a1ba56eb
  rules53 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules269
                   Duckling.Time.Rules.rules54) -}
f4579886cac8c303a3582be45ccc9557
  rules530 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules531) -}
c2f9b3865046c79756080f28cf8bef07
  rules531 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules532) -}
c9440ec3613c5c3dd1d515fee9aaee1c
  rules532 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\151\\169\\228\\184\\138|\\230\\151\\169\\230\\153\\168"#) -}
f3403186d5c68bc801aa99bf901f55ea
  rules533 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "morning"#) -}
57755d231c464ea2dedcd6c791f6302c
  rules534 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules544
                   Duckling.Time.Rules.rules541
                   Duckling.Time.Rules.rules535) -}
77b7dbb90c4f378ea28ad5fa8b4b362d
  rules535 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> let {
                                       x :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# n2
                                     } in
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just @ GHC.Types.Int x)
                                                (GHC.Base.Nothing @ GHC.Types.Int))
                                             GHC.Types.True
                                             Duckling.TimeGrain.Types.Month
                                             GHC.Types.False
                                             (GHC.Base.Just
                                                @ Duckling.Time.Types.Form
                                                (Duckling.Time.Types.Month x))
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules536 } } }
                        Duckling.Types.Ordinal cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Types.TimeData
                                   (Duckling.Time.Types.mkMonthPredicate
                                      nd
                                        `cast`
                                      (Trans
                                           (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])))
                                   GHC.Types.True
                                   Duckling.TimeGrain.Types.Month
                                   GHC.Types.False
                                   (GHC.Base.Just
                                      @ Duckling.Time.Types.Form
                                      (Duckling.Time.Types.Month
                                         nd
                                           `cast`
                                         (Trans
                                              (Sub cobox0)
                                              (Duckling.Ordinal.Types.N:OrdinalData[0]))))
                                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                   GHC.Types.False
                                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                   GHC.Types.False)) } } }) -}
961794853863db59d06f63bd52988851
  rules536 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules537) -}
132c074e34123092affb4feb69e8313f
  rules537 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules538) -}
5f4c17d9e949212621585b87ae03e381
  rules538 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules109
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Month
                   GHC.Types.False
                   Duckling.Time.Rules.rules539
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
7d7117544bad6e4ca0ec2aba223d8ba5
  rules539 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules540) -}
3d0ab4de97c1e296dd9dee4053505e5d
  rules54 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules263
                   Duckling.Time.Rules.rules55) -}
e15635feb2248dd88887c2025b852e12
  rules540 :: Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.Month
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
8fdddd5e03b1541f4d4488c6e5797f6a
  rules541 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules542
                   Duckling.Time.Rules.rules114) -}
c1b3fb5ba6cac93455bd8ae93aa7c1d5
  rules542 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules543) -}
33428e4e2934878d0b9fd90703928614
  rules543 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 12#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
e5177057e84e9f46cb31aeb8f6677ee0
  rules544 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "month (numeric with month symbol)"#) -}
1ba0e5ea1b07fb3086498ced71dba736
  rules545 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules551
                   Duckling.Time.Rules.rules547
                   Duckling.Time.Rules.rules546) -}
b3de68122f7b79046ed6e7f659d4e866
  rules546 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : mm ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : dd ds6
                                  -> case ds6 of wild6 {
                                       [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                       : yy ds7
                                       -> case Duckling.Numeral.Helpers.parseInteger yy of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x1
                                            -> case Duckling.Numeral.Helpers.parseInteger
                                                      mm of wild8 {
                                                 GHC.Base.Nothing
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Base.Just x2
                                                 -> case Duckling.Numeral.Helpers.parseInteger
                                                           dd of wild9 {
                                                      GHC.Base.Nothing
                                                      -> GHC.Base.Nothing @ Duckling.Types.Token
                                                      GHC.Base.Just x3
                                                      -> GHC.Base.Just
                                                           @ Duckling.Types.Token
                                                           (Duckling.Types.Token
                                                              @ Duckling.Time.Types.TimeData
                                                              Duckling.Time.Types.$fResolveTimeData
                                                              Duckling.Time.Types.$fEqTimeData
                                                              Duckling.Time.Types.$fHashableTimeData
                                                              Duckling.Time.Types.$fShowTimeData
                                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                                `cast`
                                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                                        <Duckling.Time.Types.TimeData>_N))
                                                              Duckling.Types.$WTime
                                                              (Duckling.Time.Types.TimeData
                                                                 (Duckling.Time.Types.mkIntersectPredicate
                                                                    (Duckling.Time.Types.TimeDatePredicate
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ (GHC.Types.Bool,
                                                                             GHC.Types.Int))
                                                                       (GHC.Base.Nothing
                                                                          @ Duckling.Time.Types.AMPM)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Just
                                                                          @ GHC.Types.Int
                                                                          (case GHC.Integer.Type.integerToInt
                                                                                  x3 of wild10 { DEFAULT ->
                                                                           GHC.Types.I# wild10 }))
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int)
                                                                       (GHC.Base.Nothing
                                                                          @ GHC.Types.Int))
                                                                    (Duckling.Time.Types.mkIntersectPredicate
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x2 of wild10 { DEFAULT ->
                                                                              GHC.Types.I#
                                                                                wild10 }))
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int))
                                                                       (Duckling.Time.Types.TimeDatePredicate
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ (GHC.Types.Bool,
                                                                                GHC.Types.Int))
                                                                          (GHC.Base.Nothing
                                                                             @ Duckling.Time.Types.AMPM)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Nothing
                                                                             @ GHC.Types.Int)
                                                                          (GHC.Base.Just
                                                                             @ GHC.Types.Int
                                                                             (case GHC.Integer.Type.integerToInt
                                                                                     x1 of wild10 { DEFAULT ->
                                                                              case GHC.Prim.tagToEnum#
                                                                                     @ GHC.Types.Bool
                                                                                     (GHC.Prim.<=#
                                                                                        wild10
                                                                                        99#) of wild11 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.I#
                                                                                     wild10
                                                                                GHC.Types.True
                                                                                -> case GHC.Classes.modInt#
                                                                                          (GHC.Prim.+#
                                                                                             wild10
                                                                                             50#)
                                                                                          100# of ww2 { DEFAULT ->
                                                                                   GHC.Types.I#
                                                                                     (GHC.Prim.-#
                                                                                        (GHC.Prim.+#
                                                                                           ww2
                                                                                           2000#)
                                                                                        50#) } } })))))
                                                                 GHC.Types.False
                                                                 Duckling.TimeGrain.Types.Day
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.Form)
                                                                 (GHC.Base.Nothing
                                                                    @ Duckling.Time.Types.IntervalDirection)
                                                                 GHC.Types.False
                                                                 (GHC.Base.Nothing
                                                                    @ Data.Text.Internal.Text)
                                                                 GHC.Types.False)) } } } } } } } } } }) -}
a09cb763c09dbcee21f0e66861e7679c
  rules547 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules548
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
91ab41b9c68d68f356beb458c302528e
  rules548 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules549) -}
f93bd827401961ec289bd96a290461b6
  rules549 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules550) -}
07e23d82cf2986ac791a16437b95bfea
  rules55 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules253
                   Duckling.Time.Rules.rules56) -}
22338d55453d910bf5b258411fa76c96
  rules550 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(0?[1-9]|1[0-2])/(3[01]|[12]\\d|0?[1-9])/(\\d{2,4})"#) -}
94313419209d0994626622571bf014de
  rules551 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mm/dd/yyyy"#) -}
70504e3867b9b20bb51b4ae211ccdda0
  rules552 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules558
                   Duckling.Time.Rules.rules554
                   Duckling.Time.Rules.rules553) -}
be5ead5e7f829e758bca61a55d986726
  rules553 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : mm ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : dd ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger mm of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger dd of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x2 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (case GHC.Integer.Type.integerToInt
                                                                        x1 of wild8 { DEFAULT ->
                                                                 GHC.Types.I# wild8 }))
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Day
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
2f1097a5719391faf07865a3ad77774d
  rules554 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules555
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
78ac477cc43048c7ef9feb55accf52e9
  rules555 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules556) -}
eb2f351195c013b9c7a01b63c541e001
  rules556 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules557) -}
de1b1593b10e25bff0c2480cf8cc63f5
  rules557 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(0?[1-9]|1[0-2])/(3[01]|[12]\\d|0?[1-9])"#) -}
b019961bd076f2d956970fe4bb79d796
  rules558 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mm/dd"#) -}
629e3ec324e4d393e5e7f8f82a5c1ce6
  rules559 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules571
                   Duckling.Time.Rules.rules567
                   Duckling.Time.Rules.rules560) -}
4c0459fad4f261fe891d5e4a40a020e8
  rules56 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules240
                   Duckling.Time.Rules.rules57) -}
e7aec06858e203a457ccf9f3b7186432
  rules560 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules561) -}
de1591b1aa8196aebd73686ba81b2207
  rules561 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules562) -}
b20a3ec405cb3c54887995d05c2de650
  rules562 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules563) -}
f417475f0c71be67e2b5f0c31b2b6eea
  rules563 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules173
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules564
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
1defd4a01386cef5748c3a4222ba8d0d
  rules564 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules565) -}
0c5769ce74784df130be2c0579343092
  rules565 :: Duckling.Time.Types.Form
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules566
                   GHC.Types.False) -}
e7e5a60d93cd2c92f809a48e3d1e4beb
  rules566 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules_n1) -}
a9a9a7d9814202ffa6219d301d3834b3
  rules567 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules568
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
3133e1ba8c2f6841a3405e252e0c7c8b
  rules568 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules569) -}
dc55b81f14a4a2f4e8909c976136849e
  rules569 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules570) -}
6ec34e548c6beeaf42613253b72cd552
  rules57 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules231
                   Duckling.Time.Rules.rules58) -}
a23749f0c6ed44ddb7aa6d83a1ee4dd4
  rules570 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\141\\136\\229\\164\\156|\\229\\135\\140\\230\\153\\168|\\229\\141\\138\\229\\164\\156"#) -}
de52971e15c7b11e98b2e8a6e3021024
  rules571 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "midnight"#) -}
69c4319d7e21b19c1003d9d18ef7afc0
  rules572 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules582
                   Duckling.Time.Rules.rules578
                   Duckling.Time.Rules.rules573) -}
2beb4fbfb0dd5abb9be168f40849066f
  rules573 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules574) -}
1bb11176a617b595ab5e0d6999c4c177
  rules574 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules575) -}
db9d344027a8bec213a2d1195c5ea591
  rules575 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules576) -}
398f7ad076583602d4e3fc90c0b2ddb7
  rules576 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules577
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
3f9bdee23482204368c5811283e83b1d
  rules577 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Rules.rules141
                        GHC.Types.False
                        Duckling.Time.Rules.rules246 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
d7ef204171cf9b740abb483e45cfafd6
  rules578 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules579
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
897dccb8bf54a35319675434d90f7b62
  rules579 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules580) -}
ff7611dd37671bdd4cb2517bfb1b9f8e
  rules58 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules223
                   Duckling.Time.Rules.rules59) -}
c0e711ec1b6b03ec026f0ceeeddae120
  rules580 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules581) -}
6fd055f43564a8830f8fce491d050786
  rules581 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\142\\187\\229\\185\\180|\\228\\184\\138\\229\\185\\180|\\232\\191\\135\\229\\142\\187\\228\\184\\128\\229\\185\\180"#) -}
61700a111c7f3fc65e97923dcd6c6d18
  rules582 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last year"#) -}
c2413a0449ec0cf2d77405a7f1119e7c
  rules583 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules589
                   Duckling.Time.Rules.rules585
                   Duckling.Time.Rules.rules584) -}
54c2a469ba963c947d869a418fdd6d46
  rules584 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 td ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Time cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (case td
                                             `cast`
                                           (Sub cobox0) of wild4 { Duckling.Time.Types.TimeData ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                      Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules141
                                                GHC.Types.False
                                                ds5 of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        ds7
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        ds12
                                        GHC.Types.False })) } } } }) -}
1d66108f8b13923c5f79a3b3b227844d
  rules585 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules586
                   Duckling.Time.Rules.rules256) -}
561db599d5c4cfd226eba071a0de1a2a
  rules586 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules587) -}
79eb01566d5dccb8bcf33bb14f570e48
  rules587 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules588) -}
f816109a63bae7925fc7b9915911c4c2
  rules588 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\142\\187|\\228\\184\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
a00d31b1ece705974e27e4ff0b93c600
  rules589 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last <time>"#) -}
cd4b3799bf5331d0a4ba9357b8ae6a26
  rules59 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules214
                   Duckling.Time.Rules.rules60) -}
084247857c3bde2ba9ec6ac52c78b23d
  rules590 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules598
                   Duckling.Time.Rules.rules594
                   Duckling.Time.Rules.rules591) -}
ab4dcf29a4f295502bc3a9392d60c47b
  rules591 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules592) -}
82b9ca3127be538175369569e3bd7893
  rules592 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules176 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules173 of wild3 {
                        GHC.Types.False
                        -> Duckling.Time.Rules.rules593 Duckling.Time.Rules.rules172
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
97929b13de9076c8af0818c1d208a9bc
  rules593 ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (wild1 :: Duckling.Time.Types.Predicate)[OneShot] ->
                 case Duckling.Time.Helpers.$wintersect
                        Duckling.Time.Rules.rules138
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        wild1
                        Duckling.TimeGrain.Types.Hour
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Types.Token
                        (Duckling.Types.Token
                           @ Duckling.Time.Types.TimeData
                           Duckling.Time.Types.$fResolveTimeData
                           Duckling.Time.Types.$fEqTimeData
                           Duckling.Time.Types.$fHashableTimeData
                           Duckling.Time.Types.$fShowTimeData
                           Duckling.Time.Types.$fNFDataTimeData_$crnf
                             `cast`
                           (Sym (Control.DeepSeq.N:NFData[0]
                                     <Duckling.Time.Types.TimeData>_N))
                           Duckling.Types.$WTime
                           (Duckling.Time.Helpers.partOfDay x)) }) -}
955e12a689047871c881347bffa1f27b
  rules594 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules595
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
14200541424f086540c36acc49af9c82
  rules595 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules596) -}
a794b7ac0be06df70eeb4c298ee2f612
  rules596 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules597) -}
f2ba204c3999c5d1e9ce4c907611d212
  rules597 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\152\\168\\230\\153\\154|\\230\\152\\168\\229\\164\\169\\230\\153\\154\\228\\184\\138|\\229\\176\\139\\230\\153\\154"#) -}
a7ef9423aa88a637b239b7345709617f
  rules598 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last night"#) -}
04af0e292a92a25d0cb676ae62b0c8c6
  rules599 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules606
                   Duckling.Time.Rules.rules601
                   Duckling.Time.Rules.rules600) -}
01e79dc39368b83819aad9a497dfbb2a
  rules6 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules690
                   Duckling.Time.Rules.rules7) -}
7865e95a413ea166fb5ff8d050d42e8c
  rules60 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules205
                   Duckling.Time.Rules.rules61) -}
72f6917c371fe077d665796d696925fc
  rules600 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case ds of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds1 ds2
                        -> case ds1 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds3 grain ->
                           case ds3 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> case token of wild4 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds4 nd ->
                                case ds4 of wild5 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.Numeral cobox1
                                  -> case nd
                                            `cast`
                                          (Sub cobox1) of wild6 { Duckling.Numeral.Types.NumeralData ds5 ds6 ds7 ds8 ->
                                     case ds5 of ww { GHC.Types.D# ww1 ->
                                     let {
                                       $j :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
                                         {- Arity: 1, Strictness: <L,1*U(U)> -}
                                       = \ (x :: GHC.Types.Int)[OneShot] ->
                                         GHC.Base.Just
                                           @ Duckling.Types.Token
                                           (Duckling.Types.Token
                                              @ Duckling.Time.Types.TimeData
                                              Duckling.Time.Types.$fResolveTimeData
                                              Duckling.Time.Types.$fEqTimeData
                                              Duckling.Time.Types.$fHashableTimeData
                                              Duckling.Time.Types.$fShowTimeData
                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                `cast`
                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                        <Duckling.Time.Types.TimeData>_N))
                                              Duckling.Types.$WTime
                                              (case Duckling.Time.Helpers.$wcycleN
                                                      GHC.Types.True
                                                      grain `cast` (Sub cobox0)
                                                      (GHC.Num.$fNumInt_$cnegate
                                                         x) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                               Duckling.Time.Types.TimeData
                                                 ww3
                                                 ww4
                                                 ww5
                                                 ww6
                                                 ww7
                                                 ww8
                                                 ww9
                                                 ww10
                                                 ww11 }))
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==## ww1 0.0##) of wild7 {
                                       GHC.Types.False
                                       -> let {
                                            n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==##
                                                    (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                                    0.0##) of wild8 {
                                            GHC.Types.False
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Types.True -> $j (GHC.Types.I# n2) }
                                       GHC.Types.True
                                       -> $j
                                            GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                  Duckling.Types.Ordinal cobox1
                                  -> GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (case Duckling.Time.Helpers.$wcycleN
                                                  GHC.Types.True
                                                  grain `cast` (Sub cobox0)
                                                  (GHC.Num.$fNumInt_$cnegate
                                                     nd
                                                       `cast`
                                                     (Trans
                                                          (Sub cobox1)
                                                          (Duckling.Ordinal.Types.N:OrdinalData[0]))) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                           Duckling.Time.Types.TimeData
                                             ww1
                                             ww2
                                             ww3
                                             ww4
                                             ww5
                                             ww6
                                             ww7
                                             ww8
                                             ww9 })) } } } } } }) -}
5e4ae364203500d6f730d758ca5ff927
  rules601 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules604
                   Duckling.Time.Rules.rules602) -}
1546d853c39d7fb5649eedcc8da9436d
  rules602 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules273
                   Duckling.Time.Rules.rules603) -}
04cbce4f1b0983c362d2e783217ecd71
  rules603 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules308
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
628bb63a0f2b6eb32cf4b78a3d3c78b9
  rules604 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules605) -}
d54febe7e1f4dee9006c6b888506131f
  rules605 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
ffcfaee40e81327da3422b7e920c2132
  rules606 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "n <cycle> last"#) -}
bbaf3322ca17f696ba76683d84fe765f
  rules607 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules616
                   Duckling.Time.Rules.rules609
                   Duckling.Time.Rules.rules608) -}
9b0f845200aadb36e7fb858b9097cc0b
  rules608 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : token ds2
                        -> case ds2 of wild2 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds3 of wild3 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds5 grain ->
                                case ds5 of wild4 {
                                  DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                  Duckling.Types.TimeGrain cobox0
                                  -> case token of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds6 nd ->
                                     case ds6 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Numeral cobox1
                                       -> case nd
                                                 `cast`
                                               (Sub cobox1) of wild7 { Duckling.Numeral.Types.NumeralData ds7 ds8 ds9 ds10 ->
                                          case ds7 of ww { GHC.Types.D# ww1 ->
                                          let {
                                            $j :: GHC.Types.Int
                                                  -> GHC.Base.Maybe Duckling.Types.Token
                                              {- Arity: 1, Strictness: <L,1*U(U)> -}
                                            = \ (x :: GHC.Types.Int)[OneShot] ->
                                              GHC.Base.Just
                                                @ Duckling.Types.Token
                                                (Duckling.Types.Token
                                                   @ Duckling.Time.Types.TimeData
                                                   Duckling.Time.Types.$fResolveTimeData
                                                   Duckling.Time.Types.$fEqTimeData
                                                   Duckling.Time.Types.$fHashableTimeData
                                                   Duckling.Time.Types.$fShowTimeData
                                                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                     `cast`
                                                   (Sym (Control.DeepSeq.N:NFData[0]
                                                             <Duckling.Time.Types.TimeData>_N))
                                                   Duckling.Types.$WTime
                                                   (case Duckling.Time.Helpers.$wcycleN
                                                           GHC.Types.True
                                                           grain `cast` (Sub cobox0)
                                                           (GHC.Num.$fNumInt_$cnegate
                                                              x) of ww2 { (#,,,,,,,,#) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                                    Duckling.Time.Types.TimeData
                                                      ww3
                                                      ww4
                                                      ww5
                                                      ww6
                                                      ww7
                                                      ww8
                                                      ww9
                                                      ww10
                                                      ww11 }))
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==## ww1 0.0##) of wild8 {
                                            GHC.Types.False
                                            -> let {
                                                 n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.==##
                                                         (GHC.Prim.-##
                                                            ww1
                                                            (GHC.Prim.int2Double# n2))
                                                         0.0##) of wild9 {
                                                 GHC.Types.False
                                                 -> GHC.Base.Nothing @ Duckling.Types.Token
                                                 GHC.Types.True -> $j (GHC.Types.I# n2) }
                                            GHC.Types.True
                                            -> $j
                                                 GHC.Float.RealFracMethods.properFractionDoubleInt3 } } }
                                       Duckling.Types.Ordinal cobox1
                                       -> GHC.Base.Just
                                            @ Duckling.Types.Token
                                            (Duckling.Types.Token
                                               @ Duckling.Time.Types.TimeData
                                               Duckling.Time.Types.$fResolveTimeData
                                               Duckling.Time.Types.$fEqTimeData
                                               Duckling.Time.Types.$fHashableTimeData
                                               Duckling.Time.Types.$fShowTimeData
                                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                 `cast`
                                               (Sym (Control.DeepSeq.N:NFData[0]
                                                         <Duckling.Time.Types.TimeData>_N))
                                               Duckling.Types.$WTime
                                               (case Duckling.Time.Helpers.$wcycleN
                                                       GHC.Types.True
                                                       grain `cast` (Sub cobox0)
                                                       (GHC.Num.$fNumInt_$cnegate
                                                          nd
                                                            `cast`
                                                          (Trans
                                                               (Sub cobox1)
                                                               (Duckling.Ordinal.Types.N:OrdinalData[0]))) of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                Duckling.Time.Types.TimeData
                                                  ww1
                                                  ww2
                                                  ww3
                                                  ww4
                                                  ww5
                                                  ww6
                                                  ww7
                                                  ww8
                                                  ww9 })) } } } } } } }) -}
2ac65985af0562225a97c1858c443c73
  rules609 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules613
                   Duckling.Time.Rules.rules610) -}
0f27f01fe619d123056b74b23170eda5
  rules61 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules195
                   Duckling.Time.Rules.rules62) -}
726fee93896ddc778aaea653431b033f
  rules610 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules611
                   Duckling.Time.Rules.rules272) -}
4b97f02de27a7a90de076ea5320852e9
  rules611 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules612) -}
8189056e1f38961982b11005545067c1
  rules612 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 9999#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
9af9770438faa9d2c096cf059ddca395
  rules613 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules614) -}
02faafcc21d1b0def896259af00972ed
  rules614 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules615) -}
7a81a4c836a6702196178a122a647de8
  rules615 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\138|\\229\\137\\141"#) -}
d27aac4738e956e8451397b4482d679b
  rules616 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last n <cycle>"#) -}
4c62d456d5244fb398313bc8d805fb2b
  rules617 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules623
                   Duckling.Time.Rules.rules619
                   Duckling.Time.Rules.rules618) -}
8a76a55062706ba0a6260ad6d1c9833b
  rules618 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 grain ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.TimeGrain cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Types.TimeData
                                        (case Duckling.Time.Helpers.$wtakeNth
                                                Duckling.Time.Rules.rules141
                                                GHC.Types.False
                                                (Duckling.Time.Helpers.timeCycle
                                                   grain `cast` (Sub cobox0)) of ww { Unit# ww1 ->
                                         Duckling.Time.Types.SeriesPredicate ww1 })
                                        GHC.Types.False
                                        grain `cast` (Sub cobox0)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                        GHC.Types.False
                                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                        GHC.Types.False)) } } } }) -}
261752d2a9d85db4ad989fc83c848840
  rules619 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules620
                   Duckling.Time.Rules.rules272) -}
28d9f1dbd1c3c3fb6d69c4bf79343947
  rules62 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules185
                   Duckling.Time.Rules.rules63) -}
c3c577836bf4d007fdff619200d6bbc4
  rules620 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules621) -}
92703ea29a89950c763564969a577049
  rules621 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules622) -}
5f4608dd6951dc7109c27a30a969bdd4
  rules622 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\138(\\228\\184\\170|\\229\\128\\139)?"#) -}
01ab86822e6dc470a7e317cbd61fbff1
  rules623 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "last <cycle>"#) -}
d48c76bcebb2c6ca81672a95e4cf04e2
  rules624 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules633
                   Duckling.Time.Rules.rules626
                   Duckling.Time.Rules.rules625) -}
cfaa987d1e672f891c8edadd09b10afd
  rules625 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 td1 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Time cobox0
                        -> case ds1 of wild3 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : ds3 ds4
                             -> case ds4 of wild4 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : ds5 ds6
                                  -> case ds5 of wild5 { Duckling.Types.Token a1 $dResolve1 $dEq1 $dHashable1 $dShow1 $dNFData1 ds7 td2 ->
                                     case ds7 of wild6 {
                                       DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                                       Duckling.Types.Time cobox1
                                       -> case td1
                                                 `cast`
                                               (Sub cobox0) of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                          case td2
                                                 `cast`
                                               (Sub cobox1) of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                                          case Duckling.Time.Helpers.$wintersect
                                                 ww1
                                                 ww3
                                                 ww6
                                                 ww8
                                                 ww11
                                                 ww13
                                                 ww16
                                                 ww18 of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    $dResolve
                                                      `cast`
                                                    (Duckling.Resolve.Resolve cobox0)_R
                                                    $dEq `cast` (GHC.Classes.Eq cobox0)_R
                                                    $dHashable
                                                      `cast`
                                                    (Data.Hashable.Class.Hashable cobox0)_R
                                                    $dShow `cast` (GHC.Show.Show cobox0)_R
                                                    $dNFData
                                                      `cast`
                                                    (Control.DeepSeq.NFData cobox0)_R
                                                    Duckling.Types.$WTime
                                                    x) } } } } } } } } } }) -}
320f3bb78cd5e9f8c8879ec2617108aa
  rules626 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules629
                   Duckling.Time.Rules.rules627) -}
540ced5e79299f9866da40ba2966759b
  rules627 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules630
                   Duckling.Time.Rules.rules628) -}
90315db5bf9eb20975aa137351e40742
  rules628 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules629
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
5ee56daddcd47145977c8b743ee25a21
  rules629 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Helpers.isNotLatent) -}
edb4684fa262b7f206fe9b690746656e
  rules63 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules169
                   Duckling.Time.Rules.rules64) -}
9b71da7b5842d01d3e7c7610b4668d01
  rules630 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules631) -}
c34ab54705f6624383865ab282e8c00f
  rules631 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules632) -}
8900242e9c1a4c5e62dfc21bd0b1fdeb
  rules632 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
3a15f1269ab19db3dc98774fe75cd553
  rules633 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "intersect by \",\""#) -}
2c00442499fdd7613e9b2f4b2358f13b
  rules634 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules636
                   Duckling.Time.Rules.rules635
                   Duckling.Time.Rules.rules422) -}
15f6d5ff32adde99776a2a6720249d62
  rules635 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules629
                   Duckling.Time.Rules.rules628) -}
0bf2509fe1caef4c45c289b97ad078d9
  rules636 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "intersect"#) -}
2d27b1103df931143e9e8f7e3c88235e
  rules637 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules651
                   Duckling.Time.Rules.rules648
                   Duckling.Time.Rules.rules638) -}
b3d15966bbdcb16be59fcd3a9036a049
  rules638 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : token ds
                   -> case token of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Numeral cobox0
                        -> case nd
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                           case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Base.Nothing @ Duckling.Types.Token
                                  GHC.Types.True
                                  -> let {
                                       w :: GHC.Types.Int = GHC.Types.I# n2
                                     } in
                                     GHC.Base.Just
                                       @ Duckling.Types.Token
                                       (Duckling.Types.Token
                                          @ Duckling.Time.Types.TimeData
                                          Duckling.Time.Types.$fResolveTimeData
                                          Duckling.Time.Types.$fEqTimeData
                                          Duckling.Time.Types.$fHashableTimeData
                                          Duckling.Time.Types.$fShowTimeData
                                          Duckling.Time.Types.$fNFDataTimeData_$crnf
                                            `cast`
                                          (Sym (Control.DeepSeq.N:NFData[0]
                                                    <Duckling.Time.Types.TimeData>_N))
                                          Duckling.Types.$WTime
                                          (Duckling.Time.Types.TimeData
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ (GHC.Types.Bool, GHC.Types.Int)
                                                   (GHC.Types.True, w))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int))
                                             GHC.Types.True
                                             Duckling.TimeGrain.Types.Hour
                                             GHC.Types.False
                                             (GHC.Base.Just
                                                @ Duckling.Time.Types.Form
                                                (Duckling.Time.Types.TimeOfDay
                                                   (GHC.Base.Just @ GHC.Types.Int w)
                                                   GHC.Types.True))
                                             (GHC.Base.Nothing
                                                @ Duckling.Time.Types.IntervalDirection)
                                             GHC.Types.False
                                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                             GHC.Types.False)) }
                             GHC.Types.True -> Duckling.Time.Rules.rules640 } } }
                        Duckling.Types.Ordinal cobox0
                        -> Duckling.Time.Rules.rules639
                             nd
                               `cast`
                             (Trans
                                  (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])) } } }) -}
15ffa56a2005ef37592be5aa26bd54c5
  rules639 :: GHC.Types.Int -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int)[OneShot] ->
                 GHC.Base.Just
                   @ Duckling.Types.Token
                   (Duckling.Types.Token
                      @ Duckling.Time.Types.TimeData
                      Duckling.Time.Types.$fResolveTimeData
                      Duckling.Time.Types.$fEqTimeData
                      Duckling.Time.Types.$fHashableTimeData
                      Duckling.Time.Types.$fShowTimeData
                      Duckling.Time.Types.$fNFDataTimeData_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Duckling.Time.Types.TimeData>_N))
                      Duckling.Types.$WTime
                      (Duckling.Time.Types.TimeData
                         (Duckling.Time.Types.TimeDatePredicate
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Just
                               @ (GHC.Types.Bool, GHC.Types.Int)
                               (GHC.Types.True, w))
                            (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int)
                            (GHC.Base.Nothing @ GHC.Types.Int))
                         GHC.Types.True
                         Duckling.TimeGrain.Types.Hour
                         GHC.Types.False
                         (GHC.Base.Just
                            @ Duckling.Time.Types.Form
                            (Duckling.Time.Types.TimeOfDay
                               (GHC.Base.Just @ GHC.Types.Int w)
                               GHC.Types.True))
                         (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                         GHC.Types.False
                         (GHC.Base.Nothing @ Data.Text.Internal.Text)
                         GHC.Types.False))) -}
9eb6b2c6b64c1488bdcc6558d2352022
  rules64 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules160
                   Duckling.Time.Rules.rules65) -}
db26872daf3c9b3878d68b7ed8e4a9df
  rules640 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules641) -}
dd4df16868663b853b8e362746a9de9c
  rules641 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules642) -}
6afa31f7e71ba1b8dc3658349b0ceee6
  rules642 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules645
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules643
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
b06d0612b3037158c3195e4c448266ae
  rules643 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Rules.rules644) -}
e07d6bbd5f8b5cbb428f244cbeb22dc6
  rules644 :: Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Rules.rules110
                   GHC.Types.True) -}
498273a8ff8532c620aa5ce1ea4dab38
  rules645 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules646
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
70c3b6845a48bf13ff696e85904583cd
  rules646 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules647) -}
a784850d3f816c34e7eacdf1db04767a
  rules647 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.True,
                  GHC.Float.RealFracMethods.properFractionDoubleInt3)) -}
6f2e03421f09cb0a212195db5f7d4c9b
  rules648 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules649
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
324f3d7cf11664dc90581f502926b3e5
  rules649 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules650) -}
8995a8831645135d1416943948ebb104
  rules65 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules147
                   Duckling.Time.Rules.rules66) -}
77a503c9256b73ca57d62abdfe032592
  rules650 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n2 :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n2))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 0# n2) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n2 23#) } }
                             GHC.Types.True -> GHC.Types.True } } } } } }) -}
bdd0a025efe5ab8b39293d553ee34337
  rules651 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<integer> (latent time-of-day)"#) -}
2152461c2afdb39cdf564876447ab974
  rules652 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules655
                   Duckling.Time.Rules.rules653
                   Duckling.Time.Rules.rules215) -}
25fa608bec4774a3ed5a77dcd8cc1eca
  rules653 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules424
                   Duckling.Time.Rules.rules654) -}
bebd5df375204d2a79ab49b7ffcb1383
  rules654 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules359
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
6130f39e291e1ea3af8fda163d9f6580
  rules655 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "in|during the <part-of-day>"#) -}
1d1fbd43fee8b9799795b01501e9f5e9
  rules656 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules665
                   Duckling.Time.Rules.rules658
                   Duckling.Time.Rules.rules657) -}
21395bed74d4777d2da432e66261e16c
  rules657 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds1 of wild1 {
                        [] -> GHC.Base.Nothing @ Duckling.Types.Token
                        : ds2 ds3
                        -> case ds2 of wild2 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds4 dd ->
                           case ds4 of wild3 {
                             DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                             Duckling.Types.Duration cobox0
                             -> GHC.Base.Just
                                  @ Duckling.Types.Token
                                  (Duckling.Types.Token
                                     @ Duckling.Time.Types.TimeData
                                     Duckling.Time.Types.$fResolveTimeData
                                     Duckling.Time.Types.$fEqTimeData
                                     Duckling.Time.Types.$fHashableTimeData
                                     Duckling.Time.Types.$fShowTimeData
                                     Duckling.Time.Types.$fNFDataTimeData_$crnf
                                       `cast`
                                     (Sym (Control.DeepSeq.N:NFData[0]
                                               <Duckling.Time.Types.TimeData>_N))
                                     Duckling.Types.$WTime
                                     (Duckling.Time.Helpers.inDuration
                                        dd `cast` (Sub cobox0))) } } } }) -}
c2f5540700a42ed1e1bb5d58364e7213
  rules658 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules662
                   Duckling.Time.Rules.rules659) -}
854f8139527056e9cb972fe8749643c6
  rules659 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules660
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
bee6f903801060e2f80adb042457a7c9
  rules66 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules133
                   Duckling.Time.Rules.rules67) -}
4f9c5055fa5d46276fe534c5697a9944
  rules660 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules661) -}
758691d05a65bdc4c9f7a168ee2b613f
  rules661 :: Duckling.Types.Token -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a1 $dResolve $dEq $dHashable $dShow $dNFData dim' ds1 ->
                 case dim' of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Duration cobox1 -> GHC.Types.True } }) -}
bb2731aa2187f2eaebb667177fdf2764
  rules662 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules663) -}
503652afa1f9b64ed84fafa36ddbe839
  rules663 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules664) -}
05acfc32c125eb717ffd1d726b65efa9
  rules664 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\134\\141"#) -}
ea56066c09df0adf9bac12eeaf2e91d7
  rules665 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "in <duration>"#) -}
ad8f44807dfea94dabde0d40b9dde318
  rules666 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules672
                   Duckling.Time.Rules.rules668
                   Duckling.Time.Rules.rules667) -}
d9fc7b58fe5aaf3db2773bd5010aa6c8
  rules667 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : hh ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger hh of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (let {
                                                       w1 :: GHC.Types.Int
                                                       = case GHC.Integer.Type.integerToInt
                                                                x1 of wild8 { DEFAULT ->
                                                         GHC.Types.I# wild8 }
                                                     } in
                                                     Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (GHC.Num.$fNumInt_$cfromInteger x2))
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ (GHC.Types.Bool, GHC.Types.Int)
                                                                (GHC.Types.True, w1))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.False
                                                       Duckling.TimeGrain.Types.Minute
                                                       GHC.Types.False
                                                       (GHC.Base.Just
                                                          @ Duckling.Time.Types.Form
                                                          (Duckling.Time.Types.TimeOfDay
                                                             (GHC.Base.Just @ GHC.Types.Int w1)
                                                             GHC.Types.True))
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
1050f04ad7e87478276bc608a9c25039
  rules668 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules669
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1c72c3ba5bf9cbabbfb446800f62bd4f
  rules669 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules670) -}
5e001522e9d10051d5fe52dc20d2e783
  rules67 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules126
                   Duckling.Time.Rules.rules68) -}
127f7e701bf9ef4ab7c5926e2551db3e
  rules670 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules671) -}
3e0cdc38b74e60b47a6491500ba36e5f
  rules671 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "((?:[01]?\\d)|(?:2[0-3])):([0-5]\\d)"#) -}
5dcc07f012b605de036c4ad2c8bd4959
  rules672 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "hh:mm (time-of-day)"#) -}
afd45edded040065466be077e3c725f7
  rules673 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules679
                   Duckling.Time.Rules.rules675
                   Duckling.Time.Rules.rules674) -}
e1356617ab08c58ff07281c951f5b7ab
  rules674 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 ds3 ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.RegexMatch cobox0
                        -> case ds3
                                  `cast`
                                (Sub cobox0) of wild3 { Duckling.Regex.Types.GroupMatch ds4 ->
                           case ds4 of wild4 {
                             [] -> GHC.Base.Nothing @ Duckling.Types.Token
                             : hh ds5
                             -> case ds5 of wild5 {
                                  [] -> GHC.Base.Nothing @ Duckling.Types.Token
                                  : mm ds6
                                  -> case Duckling.Numeral.Helpers.parseInteger hh of wild6 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                                       GHC.Base.Just x1
                                       -> case Duckling.Numeral.Helpers.parseInteger mm of wild7 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing @ Duckling.Types.Token
                                            GHC.Base.Just x2
                                            -> GHC.Base.Just
                                                 @ Duckling.Types.Token
                                                 (Duckling.Types.Token
                                                    @ Duckling.Time.Types.TimeData
                                                    Duckling.Time.Types.$fResolveTimeData
                                                    Duckling.Time.Types.$fEqTimeData
                                                    Duckling.Time.Types.$fHashableTimeData
                                                    Duckling.Time.Types.$fShowTimeData
                                                    Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                      `cast`
                                                    (Sym (Control.DeepSeq.N:NFData[0]
                                                              <Duckling.Time.Types.TimeData>_N))
                                                    Duckling.Types.$WTime
                                                    (let {
                                                       w1 :: GHC.Types.Int
                                                       = case GHC.Integer.Type.integerToInt
                                                                x1 of wild8 { DEFAULT ->
                                                         GHC.Types.I# wild8 }
                                                     } in
                                                     Duckling.Time.Types.TimeData
                                                       (Duckling.Time.Types.mkIntersectPredicate
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ GHC.Types.Int
                                                                (GHC.Num.$fNumInt_$cfromInteger x2))
                                                             (GHC.Base.Nothing
                                                                @ (GHC.Types.Bool, GHC.Types.Int))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int))
                                                          (Duckling.Time.Types.TimeDatePredicate
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Just
                                                                @ (GHC.Types.Bool, GHC.Types.Int)
                                                                (GHC.Types.False, w1))
                                                             (GHC.Base.Nothing
                                                                @ Duckling.Time.Types.AMPM)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)
                                                             (GHC.Base.Nothing @ GHC.Types.Int)))
                                                       GHC.Types.True
                                                       Duckling.TimeGrain.Types.Minute
                                                       GHC.Types.False
                                                       (GHC.Base.Just
                                                          @ Duckling.Time.Types.Form
                                                          (Duckling.Time.Types.TimeOfDay
                                                             (GHC.Base.Just @ GHC.Types.Int w1)
                                                             GHC.Types.False))
                                                       (GHC.Base.Nothing
                                                          @ Duckling.Time.Types.IntervalDirection)
                                                       GHC.Types.False
                                                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                       GHC.Types.False)) } } } } } } } }) -}
0aff61d3f63528f737fddb824a50b770
  rules675 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules676
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
cd5951b14ce3957977fa3159f40b9ec8
  rules676 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules677) -}
2b567c7074a75659f3a1535d6fcc0093
  rules677 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules678) -}
0d8653dbe15a45c8e41ca6c3824926f9
  rules678 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "((?:[01]?\\d)|(?:2[0-3]))([0-5]\\d)"#) -}
74800e501689b5505c912bccbae2f707
  rules679 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "hhmm (military time-of-day)"#) -}
4b5ff4459695ff5e67ae91fe49545184
  rules68 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules107
                   Duckling.Time.Rules.rules69) -}
1ff5100b74c5358e0f9805e726000156
  rules680 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules689
                   Duckling.Time.Rules.rules685
                   Duckling.Time.Rules.rules681) -}
cf8dd7642f5eaf1544bbc35935887afb
  rules681 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules682) -}
0af95ae09c7bfb59f3c9085bcb997f1e
  rules682 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules176 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules173 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules683
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
9440ece23ab01e3075776355835035e6
  rules683 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules684) -}
601a419612d1b0e062d856abedf346d7
  rules684 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules172
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules524
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
9d2c491b327db6ea627d07013b480d9a
  rules685 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules686
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
1dffc842125ca71a10183d39bc921bd7
  rules686 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules687) -}
6b6e73254170c64c4c03e4377623a49b
  rules687 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules688) -}
51379a60ace42d5ec0f1ab7ee733485a
  rules688 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\230\\153\\154\\228\\184\\138|\\230\\153\\154\\233\\151\\180"#) -}
ea5da702e551a07008ac3137ce31b719
  rules689 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "evening|night"#) -}
502c757e66e41c78a49d9d658d5bc960
  rules69 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules100
                   Duckling.Time.Rules.rules70) -}
5737c5055f173b0e31c4c3c2e79fe3fd
  rules690 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules697
                   Duckling.Time.Rules.rules692
                   Duckling.Time.Rules.rules691) -}
e2fc22b364c638093ffa98ddbdb235c0
  rules691 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 dd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Duration cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.inDuration
                                   dd `cast` (Sub cobox0))) } } }) -}
9b2d5eb431f1d4ec2ec0cd785bb0ae2a
  rules692 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules660
                   Duckling.Time.Rules.rules693) -}
1b80f9d06caf4b8ceb528c27ff1dd86a
  rules693 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules694
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
27e16a2dbbc9f05843b465c0283815a4
  rules694 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules695) -}
62e8054582415bde67f39d4afe37b21c
  rules695 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules696) -}
21c8e684b756691c07eda14619854bcd
  rules696 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\229\\144\\142|\\229\\190\\140|\\228\\185\\139\\229\\190\\140|\\228\\185\\139\\229\\144\\142"#) -}
69475e29e7cf4a6e6c4daf89540924ca
  rules697 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<duration> from now"#) -}
02b71d1a433e30ab80c0be53129627cb
  rules698 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules701
                   Duckling.Time.Rules.rules700
                   Duckling.Time.Rules.rules699) -}
1a0d2931395eeb7271df69f6f5d8b6cc
  rules699 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : ds ds1
                   -> case ds of wild1 { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds2 dd ->
                      case ds2 of wild2 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Types.Token
                        Duckling.Types.Duration cobox0
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             (Duckling.Types.Token
                                @ Duckling.Time.Types.TimeData
                                Duckling.Time.Types.$fResolveTimeData
                                Duckling.Time.Types.$fEqTimeData
                                Duckling.Time.Types.$fHashableTimeData
                                Duckling.Time.Types.$fShowTimeData
                                Duckling.Time.Types.$fNFDataTimeData_$crnf
                                  `cast`
                                (Sym (Control.DeepSeq.N:NFData[0]
                                          <Duckling.Time.Types.TimeData>_N))
                                Duckling.Types.$WTime
                                (Duckling.Time.Helpers.durationAgo
                                   dd `cast` (Sub cobox0))) } } }) -}
d4cddfa5e09a5636becafc83dc6c8f8f
  rules7 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules680
                   Duckling.Time.Rules.rules8) -}
f916fc18ef8f54cff76fb51868c87e1d
  rules70 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules88
                   Duckling.Time.Rules.rules71) -}
5be579f6e047ad929c5e95b89305b68d
  rules700 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules660
                   Duckling.Time.Rules.rules603) -}
4848153725f3c42fd961da7f3818891e
  rules701 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<duration> ago"#) -}
6197b3a8dd14c41b2fbd4ea506d9e7d5
  rules702 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules705
                   Duckling.Time.Rules.rules703
                   Duckling.Time.Rules.rules422) -}
3829006819d78861e88907fb85ea56a2
  rules703 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules257
                   Duckling.Time.Rules.rules704) -}
357d4cf822db8c259c4b4d0033d20a23
  rules704 :: [Duckling.Types.PatternItem]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules424
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
f569dab7dd0047b07e6585638f9b0a8d
  rules705 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "<dim time> <part-of-day>"#) -}
6dbef64d3c5b368adff044d8cbf8c08d
  rules706 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules719
                   Duckling.Time.Rules.rules715
                   Duckling.Time.Rules.rules707) -}
4e05e50b79f63ea3e524b31e73fec141
  rules707 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules708) -}
54539e1e55f1733290bccf61c3882a2c
  rules708 :: GHC.Base.Maybe Duckling.Types.Token
  {- Unfolding: (case Duckling.Time.Types.containsTimeIntervalsPredicate
                        Duckling.Time.Rules.rules457 of wild2 {
                   GHC.Types.False
                   -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                             Duckling.Time.Rules.rules712 of wild3 {
                        GHC.Types.False
                        -> GHC.Base.Just
                             @ Duckling.Types.Token
                             Duckling.Time.Rules.rules709
                        GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                   GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }) -}
8cc67a8b4f3616acf6bee47b4b2d234e
  rules709 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules710) -}
39a80e68f6e32b289d6fa66b68e60b82
  rules71 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules72
                   (GHC.Types.[] @ Duckling.Types.Rule)) -}
c12fea3619992a1485eb56b7da8067e3
  rules710 :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules711
                   GHC.Types.True
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   Duckling.Time.Rules.rules524
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
c3af713d416e9cef2b0c5b1dc770a665
  rules711 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeIntervalsPredicate
                   Duckling.Time.Types.Open
                   Duckling.Time.Rules.rules457
                   Duckling.Time.Rules.rules712) -}
545d2201606e5c799726625408a94a5a
  rules712 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules713
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
37455b538133b7539225c0eae0dc14ae
  rules713 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Rules.rules714) -}
d96feee243b3afabf741d3e5d4c57f63
  rules714 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False, Duckling.Time.Rules.rules_n5)) -}
080ced3ce9f1a08499b151155ea6d9fb
  rules715 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules716
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
19d465507c078f83f05fef5d1133226f
  rules716 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex
                   Duckling.Time.Rules.rules717) -}
0f4e25fa16bd67ae8002e3cb706fa48d
  rules717 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules718) -}
e2f08bd7847fa681c2f3910ee876172e
  rules718 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "\\228\\184\\173\\229\\141\\136|\\228\\184\\139\\229\\141\\136"#) -}
bcb957ba5c05c52cbd48be3c092d773b
  rules719 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "afternoon"#) -}
8c5d5a141eab2ee81c865560db0187d1
  rules72 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules87
                   Duckling.Time.Rules.rules83
                   Duckling.Time.Rules.rules73) -}
1f9450e2b72e80ea511f4b8d0f09fb21
  rules720 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules724
                   Duckling.Time.Rules.rules722
                   Duckling.Time.Rules.rules721) -}
ad21778d64ebcf52ee7f3632e34f8a50
  rules721 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (tokens :: [Duckling.Types.Token]) ->
                 case tokens of wild {
                   [] -> GHC.Base.Nothing @ Duckling.Types.Token
                   : x ds -> GHC.Base.Just @ Duckling.Types.Token x }) -}
80beac65ec2bba380251fa478ddff576
  rules722 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules235
                   Duckling.Time.Rules.rules723) -}
595553dee47071bfe4a2a47e6dc60b81
  rules723 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules630
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
f07db47875b474e302d3e243b161117a
  rules724 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "absorption of , after named day"#) -}
411520206461669b45876e116adf183d
  rules73 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1,
     Unfolding: (\ (ds :: [Duckling.Types.Token]) ->
                 Duckling.Time.Rules.rules74) -}
d79eeb4381969934ecf89b363ec0ed7a
  rules74 :: GHC.Base.Maybe Duckling.Types.Token
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Types.Token
                   Duckling.Time.Rules.rules75) -}
64a51a694b0ae1459ef0d245c96ea163
  rules75 :: Duckling.Types.Token
  {- Unfolding: (Duckling.Types.Token
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fResolveTimeData
                   Duckling.Time.Types.$fEqTimeData
                   Duckling.Time.Types.$fHashableTimeData
                   Duckling.Time.Types.$fShowTimeData
                   Duckling.Time.Types.$fNFDataTimeData_$crnf
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Duckling.Time.Types.TimeData>_N))
                   Duckling.Types.$WTime
                   Duckling.Time.Rules.rules76) -}
5c0525c8e5fbbf2399b7dea0ae923503
  rules76 :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Rules.rules77
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
186a7c93131896cc8bf42ea8f1ce1fa0
  rules77 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.mkIntersectPredicate
                   Duckling.Time.Rules.rules80
                   Duckling.Time.Rules.rules78) -}
976366994372fd15663fd2de3834bd8f
  rules78 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules79
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
779b4ccabb31bc940bd40f9ee6abc1e3
  rules79 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules_n) -}
e14f46d212dd8b3ba757f2e54179c3bd
  rules8 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules673
                   Duckling.Time.Rules.rules9) -}
00b575e8a5dda1f316d173f4d33df774
  rules80 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Rules.rules81
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
a1243eae27f1c6059874b01f07c891f8
  rules81 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Rules.rules82) -}
dd2b4077ba91a01f725e136eebbbbaad
  rules82 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
f54b7fd78c6551f8d28784073b41c9dd
  rules83 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules84
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
2684d7702ffad0ef965613fb1f451c1e
  rules84 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex Duckling.Time.Rules.rules85) -}
c01be8ab04942b1e67640673046d5ae7
  rules85 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules86) -}
03b26802447625938b94085f62118e1e
  rules86 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8#
                   "(\\229\\155\\189\\229\\186\\134|\\229\\156\\139\\230\\133\\182)(\\232\\138\\130|\\231\\175\\128)?"#) -}
de6f9cb398f44555628f8bc04c9508f2
  rules87 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "national day"#) -}
8891e583a0ed4ac38d0431f4d5b90389
  rules88 :: Duckling.Types.Rule
  {- Unfolding: (Duckling.Types.Rule
                   Duckling.Time.Rules.rules99
                   Duckling.Time.Rules.rules90
                   Duckling.Time.Rules.rules89) -}
e1917d24f972ad1a6320073c9a994060
  rules89 ::
    [Duckling.Types.Token] -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1 -}
e076f3364e3899537765c59bb13dac0b
  rules9 :: [Duckling.Types.Rule]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.Rule
                   Duckling.Time.Rules.rules666
                   Duckling.Time.Rules.rules10) -}
cb5e23b846aa5adcef51284e48011a71
  rules90 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules95
                   Duckling.Time.Rules.rules91) -}
f8e89b2706d26f9b2a6a12fd7e1c79a1
  rules91 :: [Duckling.Types.PatternItem]
  {- Unfolding: (GHC.Types.:
                   @ Duckling.Types.PatternItem
                   Duckling.Time.Rules.rules92
                   (GHC.Types.[] @ Duckling.Types.PatternItem)) -}
37993c8a1c9ded875f7ad45bfa275e16
  rules92 :: Duckling.Types.PatternItem
  {- Unfolding: (Duckling.Types.Regex Duckling.Time.Rules.rules93) -}
a9305d1523b22321560daa9ba92049b7
  rules93 :: Text.Regex.PCRE.Wrap.Regex
  {- Unfolding: (Text.Regex.PCRE.String.$fRegexMakerRegexCompOptionExecOption[]_$cmakeRegexOpts
                   Duckling.Types.regex1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:CompOption[0])))
                   Text.Regex.PCRE.Wrap.execBlank1
                     `cast`
                   (Trans
                        (Sym (Foreign.C.Types.N:CInt[0]))
                        (Sym (Text.Regex.PCRE.Wrap.N:ExecOption[0])))
                   Duckling.Time.Rules.rules94) -}
ef884e1dcdba76c4b23c8c18aa29e8ea
  rules94 :: [GHC.Types.Char]
bb2b4d35a1f67e660210ad05509e86e7
  rules95 :: Duckling.Types.PatternItem
  {- HasNoCafRefs,
     Unfolding: (Duckling.Types.Predicate
                   Duckling.Time.Rules.rules96
                     `cast`
                   (<Duckling.Types.Token>_R ->_R Data.Monoid.N:All[0])) -}
851e7b8066e1c4445159cf7ab0212366
  rules96 :: Duckling.Types.Token -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.Time.Rules.rules_go1
                   (Duckling.Time.Rules.rules_go Duckling.Time.Rules.rules97 x)) -}
c1763d0428a8590a1c4ae27d1a0c4941
  rules97 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isNotLatent
                   Duckling.Time.Rules.rules98) -}
80a1e769a8779e56088cd68b204a597f
  rules98 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isATimeOfDay
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
4c3fb1ae52036cb4e9288ed1c703381b
  rules99 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "<time> timezone"#) -}
13cac8e352bbdb84c7e223a5d73d4ae7
  rules_go ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
0adb63b6c4fe7608637dfe70dd7d378d
  rules_go1 :: [GHC.Types.Bool] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
70d486b24e94ce7a5cc23a0b8656baee
  rules_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
6c880fd0386dce8c77ab69b89b11d287
  rules_n1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4709d7d5ba2b353b65ca6ff61d80b4c7
  rules_n2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
88639a54757770116834dfd1260d56c5
  rules_n3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
822f09ccaa2ad57b8d14aaea0daf3973
  rules_n4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
6ff78e410811822e3a84c3394307cad0
  rules_n5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 19#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

