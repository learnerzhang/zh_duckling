
==================== FINAL INTERFACE ====================
2019-03-14 03:00:55.927471 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Helpers 8002
  interface hash: f4921032421d031a6e6cbe85676b4504
  ABI hash: aaf28cd3360a5c23764acdc7df3005e2
  export-list hash: 55df1b359d5a489b2ded4c149d857592
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2bb8b77673bb54cc987877b79e66fed7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Duckling.Time.Helpers.cycleLastOf
  Duckling.Time.Helpers.cycleN
  Duckling.Time.Helpers.cycleNth
  Duckling.Time.Helpers.cycleNthAfter
  Duckling.Time.Helpers.dayOfMonth
  Duckling.Time.Helpers.dayOfWeek
  Duckling.Time.Helpers.durationAfter
  Duckling.Time.Helpers.durationAgo
  Duckling.Time.Helpers.durationBefore
  Duckling.Time.Helpers.durationIntervalAgo
  Duckling.Time.Helpers.form
  Duckling.Time.Helpers.getIntValue
  Duckling.Time.Helpers.hasNoDirection
  Duckling.Time.Helpers.hasNoTimezone
  Duckling.Time.Helpers.hasTimezone
  Duckling.Time.Helpers.hour
  Duckling.Time.Helpers.hourMinute
  Duckling.Time.Helpers.hourMinuteSecond
  Duckling.Time.Helpers.inDuration
  Duckling.Time.Helpers.inDurationInterval
  Duckling.Time.Helpers.inTimezone
  Duckling.Time.Helpers.intersect
  Duckling.Time.Helpers.intersectDOM
  Duckling.Time.Helpers.intersectWithReplacement
  Duckling.Time.Helpers.interval
  Duckling.Time.Helpers.isADayOfWeek
  Duckling.Time.Helpers.isAMonth
  Duckling.Time.Helpers.isAPartOfDay
  Duckling.Time.Helpers.isATimeOfDay
  Duckling.Time.Helpers.isAnHourOfDay
  Duckling.Time.Helpers.isDOMInteger
  Duckling.Time.Helpers.isDOMOrdinal
  Duckling.Time.Helpers.isDOMValue
  Duckling.Time.Helpers.isDurationGreaterThan
  Duckling.Time.Helpers.isGrain
  Duckling.Time.Helpers.isGrainFinerThan
  Duckling.Time.Helpers.isGrainOfTime
  Duckling.Time.Helpers.isIntegerBetween
  Duckling.Time.Helpers.isMidnightOrNoon
  Duckling.Time.Helpers.isNotLatent
  Duckling.Time.Helpers.isOkWithThisNext
  Duckling.Time.Helpers.isOrdinalBetween
  Duckling.Time.Helpers.longWEBefore
  Duckling.Time.Helpers.minute
  Duckling.Time.Helpers.minutesAfter
  Duckling.Time.Helpers.minutesBefore
  Duckling.Time.Helpers.mkLatent
  Duckling.Time.Helpers.mkOkForThisNext
  Duckling.Time.Helpers.mkRuleDaysOfWeek
  Duckling.Time.Helpers.mkRuleHolidays
  Duckling.Time.Helpers.mkRuleHolidays'
  Duckling.Time.Helpers.mkRuleInstants
  Duckling.Time.Helpers.mkRuleMonths
  Duckling.Time.Helpers.mkRuleMonthsWithLatent
  Duckling.Time.Helpers.mkRuleSeasons
  Duckling.Time.Helpers.month
  Duckling.Time.Helpers.monthDay
  Duckling.Time.Helpers.notLatent
  Duckling.Time.Helpers.now
  Duckling.Time.Helpers.nthDOWOfMonth
  Duckling.Time.Helpers.partOfDay
  Duckling.Time.Helpers.predEveryNDaysFrom
  Duckling.Time.Helpers.predLastOf
  Duckling.Time.Helpers.predNth
  Duckling.Time.Helpers.predNthAfter
  Duckling.Time.Helpers.predNthClosest
  Duckling.Time.Helpers.sameGrain
  Duckling.Time.Helpers.season
  Duckling.Time.Helpers.second
  Duckling.Time.Helpers.timeComputed
  Duckling.Time.Helpers.timeOfDayAMPM
  Duckling.Time.Helpers.toTimeObjectM
  Duckling.Time.Helpers.today
  Duckling.Time.Helpers.tt
  Duckling.Time.Helpers.weekday
  Duckling.Time.Helpers.weekend
  Duckling.Time.Helpers.withDirection
  Duckling.Time.Helpers.workweek
  Duckling.Time.Helpers.year
  Duckling.Time.Helpers.yearADBC
  Duckling.Time.Helpers.yearMonth
  Duckling.Time.Helpers.yearMonthDay
module dependencies: Duckling.AmountOfMoney.Types
                     Duckling.CreditCardNumber.Types Duckling.Dimensions.Types
                     Duckling.Distance.Types Duckling.Duration.Types
                     Duckling.Email.Types Duckling.Gender.Types Duckling.Identity.Types
                     Duckling.Locale Duckling.Numeral.Types Duckling.Ordinal.Types
                     Duckling.PhoneNumber.Types Duckling.Quantity.Types
                     Duckling.Regex.Types Duckling.Region Duckling.Resolve
                     Duckling.Temperature.Types Duckling.Time.TimeZone.Parse
                     Duckling.Time.Types Duckling.TimeGrain.Types Duckling.Types
                     Duckling.Url.Types Duckling.Volume.Types Duckling.Weight.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         dependent-sum-0.4@dependent-sum-0.4-32kCW1hJUMSBd03CvIwqZl:Data.GADT.Compare
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.ByteString.Lazy
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.Sequence
         regex-pcre-0.94.4@regex-pcre-0.94.4-Dlv5UOV35E3Fsya0hon6HM:Text.Regex.PCRE.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.AmountOfMoney.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.CreditCardNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Distance.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Duration.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Email.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Gender.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Identity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Numeral.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Ordinal.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.PhoneNumber.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Quantity.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Regex.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Temperature.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Url.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Volume.Types
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Weight.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Ord 7fde5c9d64d4c27431689be19182758a
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  Duckling.Dimensions.Types 0550b66ebec07a66dfc3ea4104e21efe
  exports: 1d319a78c66b2cad5cc751ccac3cd721
import  -/  Duckling.Duration.Types 92ca01ea79d3ed3655d51eee185eae9d
  exports: 9e93299743dcd5e9b14927e2c2715f74
  DurationData 3d91cb7896bf04e3158c370d5829301d
  DurationData ccad41359f5fe198b91e5f76cc156f86
  grain 4788a067f5c747ccd044998ffcc2cda6
  value 1f381efbea1158e64b4475bbd3a9d146
import  -/  Duckling.Numeral.Types 5130bfd045a9ca6085fec0a42ae9c523
  exports: 94344b1dfc906561c4234f30cd403539
  getIntValue add6a5820b8bb58aa51daac6fca5489c
  isIntegerBetween f32fdc07e902258b5a209c9e76ca7b4d
  okForAnyTime a8d76294ecfce8fcefc709ae62ceccfc
  value 8ada7f17e1d24c76a72ee8a3669186b6
import  -/  Duckling.Ordinal.Types 338cef02dda50d8eb48357da4a409fec
  exports: 775285a26ee37c34a56d1069720093f1
  OrdinalData b0dbb3cefc94ed0567c71ae18a55097c
  isBetween 1187b6ed8c481ea961ca8016c03bbc8e
  value 2f66f4e563cf8f416d92a789623cda71
import  -/  Duckling.Time.TimeZone.Parse fc1e6b91e8339ab0333dada605488559
  exports: 927665efc0793e06996d7a75e9d56335
  parseTimezone b036bbd13c340895dbfff74158da9d48
import  -/  Duckling.Time.Types d4fac4be942a0a4255ab078596447429
  exports: 3606974139e9e7e95f5dfe8696d4fed1
  AM 2206840f488fb1bdeb44c55f534e463a
  Closed 59fb6ceb27061a799839b62492c20537
  DayOfWeek 3e9a419df985dc8dfefdf3819a0c63e8
  Form c80185ec1b344a03f6bbe3b44173e850
  IntervalDirection 794da663254a4d37bc004d93a2fd1e20
  Month 2ff97459e1a5d0b676b0ab8dfd272677
  Open 13f6b88ec74c322c57b4cc5c52822d6c
  PM b7e70b49409fec5fd9514590084169b7
  PartOfDay 2b2c8373ac6ce76111542c77a32f3b7c
  Predicate 533ec79e58f99d7c8cbf3906fba5ba38
  TimeContext 4999a10408d1aab9bb91afde392d9166
  TimeData feaf694a915c741c0c15257597d31d4b
  TimeData 30afdebe049cca4783f2b6e6cd997b57
  TimeIntervalType c095d8efdfdd07a22d96cdf4e02bfd32
  TimeObject 13bbf9afe44f17d62fb7c76485dccd8a
  TimeObject cebf1bb42889d6dda342d21248135915
  TimeOfDay 13e2df7cb9f08c041e6388c0a98af759
  diffStartTime 2e6e48b681f76f4265c81db5f93f792b
  direction 49aaf37331fbb17a8554f38ebcceb742
  end f7bd28bbfc0a186d8711d16afdc2834b
  form 5d75858393e950a5dffdacc763c3c71c
  grain aff9c459c6e426343fed71d8614711a2
  hasTimezone 974094a4a88b970115b5ee4241f079bb
  holiday e870b0e5dd86c7f1ab80374223a7c6ee
  hours fa71ade54f9babe5af5de4e4d3aa2f13
  is12H 26411434d382aeb214da4839b7f0e9c9
  isEmptyPredicate ea04d4fe1871fd8e093faa4f4212b221
  latent 987c7bf7ba813ade90ab5d6f328e5c3a
  mkAMPMPredicate e7d44180035c02cb6d6ba05f0cb71720
  mkDayOfTheMonthPredicate 96cd4fba168336ae1ebe340757375e8c
  mkDayOfTheWeekPredicate 9dac1f62d71d10f4d9e28e12c129c4f9
  mkHourPredicate 965d4139291e7ff6ef3f18d6a4669268
  mkIntersectPredicate fa91a0d34c215d90f4e387bbbf6ba9a8
  mkMinutePredicate 17c39c5ce8269edf58fec88f24aaceb6
  mkMonthPredicate cf118fcdb028764981f034d2d87a7f82
  mkReplaceIntersectPredicate 208bf684ab498f1f451f8557766c0971
  mkSecondPredicate f2d98080a1f1b3675ccf859bf337c5ce
  mkSeriesPredicate 0b9a7ad882f27f383da3a59a0e8705ca
  mkTimeIntervalsPredicate 3399fd9b6922536260c28c717fa05baa
  mkYearPredicate f290a8d397fca8018c654ef851605f38
  month c60d10cc754c3987cf88bd2f4e42df9c
  notImmediate c89038909843728e7764ee386b4b9358
  okForThisNext 0b3e31b8f5c0de443a28690950f5d37b
  periodicPredicate 97534611374119647f6c14897f539d71
  refTime 0d3635fdf72133e97a3839266128c429
  runPredicate 596be755d4f7ad6759fbd23191e04465
  seasonPredicate e114e6f4e3c64de43fb3f6e395aa9dc9
  start e7231e294893810fe4c705d3d926e0b7
  timeBefore ab85db0b49f1825d0dc44d79181fa6e1
  timeGrain fefaa48c4f4a9379d8fdf0734504ea9f
  timeIntersect e41fd52b8c083016300bbe0f6b294c46
  timeInterval 9c4bf99f906b79eace5d08dfffa8b403
  timePlus 556f0f10e7ad16e9bcaed40568e7e739
  timePred 23dec17fd13d668dd1aaebf3f54d039e
  timeRound e230105aea1834fc774d3d019107b601
  timeSeqMap 1c231a860b8814456c7905f58526a7a0
  timeSequence 85b0e7ea5d605994f0ad8caf1b71a2ad
  timeStartingAtTheEndOf e807889771f87fe793ff768ad2281074
  timeStartsBeforeTheEndOf 30ab70146374d84e3de6fe468bec8fa3
  timedata' 62c1482eb36d980dd8d03a00db9190af
  tzSeries c5b008e39657b4c80a3dbccc92d3f891
  weekdayPredicate 629ef9ecfd92aeb8075e3921afe5f7ac
import  -/  Duckling.TimeGrain.Types df1446d581d19c78205a53c0773a1394
  exports: 1edf6532c5926aae175720f5ee1798eb
  Day 8970ba78a9767ba3b8a7c6ba9b51a195
  Grain 39f514c392611535b9c35c2b5fb6eab3
  Hour f413bd39f6a3df4d024809dd397238f5
  Minute 57c14cb5d1c88e1e2781deaf29a43d44
  Month cdb07e4928b6255bf5c5d09382398536
  NoGrain 1b470f7b941bed9f13ee049504d19531
  Second 3d7b52f366224c0a3363b787e55a7c7b
  Year 6f596c2b14ab7e9f5cbae1f027059b30
  lower c35e0aad86467085476877cfe378272a
import  -/  Duckling.Types 801e304eb17ff8eb30c8b6726b1646d0
  exports: 234683482d9f074d977aa6ca4a8259f1
  Duration b6c7737c196c51ea1993cf296ebd2165
  Numeral 37ea753945466ebddfe8bb90136c8911
  Ordinal 75669a2844683d059ffcc0481c467632
  Predicate 876893268fb58123567a47e946b5b6ba
  Rule 68f6ad16b93bf0573b6e6f063820cf0e
  Rule 876893268fb58123567a47e946b5b6ba
  Time 9b9e182b74fc2b8e23927a2047960e70
  TimeGrain 080731afd4ca77e227c906ea69ec213a
  Token ed5ab3414f0516bc6b6fd996e839d3c3
  Token 876893268fb58123567a47e946b5b6ba
  name 76f427769b73e82db2c2df59caa60288
  pattern 6666cdf07a41b137593bc737023ac7f1
  prod a4c6750bd517e049c9ce8428e1e5dff2
  regex c51097368a8c266ad9942dc9e3370fd5
import  -/  extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL:Data.Tuple.Extra 8c15ace6bd7b755c28913d46b6000e0a
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time f3fc075e226487ba9b287f2bf43f4b8f
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian 6bfe6a0d86b130087d12d0228a47fb8a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.WeekDate 1c6f359ca8442bede68d944be01def43
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC 042a9b8f7ae05c2937d1ff59fdfe0852
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.TimeZone 40efa2c566bfef99e63d59b8f6d567cf
import  -/  timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT:Data.Time.LocalTime.TimeZone.Series 2b73fd98294ae95b5699ae442ea94d5c
aa5ea713cd4468242c67a56e3160646a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Time.Helpers.$trModule2
                   Duckling.Time.Helpers.$trModule1) -}
ddd3d0802f1c0c3bc2c8d31413bc8e16
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Time.Helpers"#) -}
8c6d3cd1528f3662fe39dee791bf7694
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
6b79362a79e114ab9059313293d83e3e
  $wcycleN ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> (# Duckling.Time.Types.Predicate, GHC.Types.Bool,
          Duckling.TimeGrain.Types.Grain, GHC.Types.Bool,
          GHC.Base.Maybe Duckling.Time.Types.Form,
          GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
          GHC.Types.Bool, GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Types.Bool #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>, Inline: [0] -}
b019be831b3ebeae83d1acb8a3b94654
  $wdurationAfter ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> (# Duckling.Time.Types.Predicate, GHC.Types.Bool,
          Duckling.TimeGrain.Types.Grain, GHC.Types.Bool,
          GHC.Base.Maybe Duckling.Time.Types.Form,
          GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
          GHC.Types.Bool, GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Types.Bool #)
  {- Arity: 3, Strictness: <L,U(U(U),U)><L,U><L,1*U>, Inline: [0] -}
31c388e477757a5e756a32ae58139816
  $wgo ::
    Data.Text.Internal.Text
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> GHC.Base.String
    -> (# Data.Text.Internal.Text, Duckling.Types.Pattern,
          Duckling.Types.Production #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Base.String) ->
                 let {
                   token1 :: Duckling.Time.Types.Predicate
                   = case Duckling.Time.Helpers.$wtakeNth
                            ww2
                            GHC.Types.False
                            (Duckling.Time.Helpers.timeCycle ww1) of ww4 { Unit# ww5 ->
                     Duckling.Time.Types.SeriesPredicate ww5 }
                 } in
                 let {
                   token2 :: Duckling.Time.Types.TimeData {- Strictness: m -}
                   = Duckling.Time.Types.TimeData
                       token1
                       GHC.Types.False
                       ww1
                       GHC.Types.False
                       (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                       (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                       GHC.Types.False
                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                       GHC.Types.False
                 } in
                 let {
                   token3 :: Duckling.Types.Token
                   = Duckling.Types.Token
                       @ Duckling.Time.Types.TimeData
                       Duckling.Time.Types.$fResolveTimeData
                       Duckling.Time.Types.$fEqTimeData
                       Duckling.Time.Types.$fHashableTimeData
                       Duckling.Time.Types.$fShowTimeData
                       Duckling.Time.Types.$fNFDataTimeData_$crnf
                         `cast`
                       (Sym (Control.DeepSeq.N:NFData[0]
                                 <Duckling.Time.Types.TimeData>_N))
                       Duckling.Types.$WTime
                       token2
                 } in
                 let {
                   token4 :: GHC.Base.Maybe Duckling.Types.Token
                   = GHC.Base.Just @ Duckling.Types.Token token3
                 } in
                 (# ww,
                    GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww3)
                      (GHC.Types.[] @ Duckling.Types.PatternItem),
                    \ (ds :: [Duckling.Types.Token]) -> token4 #)) -}
9d869ecca45829dec54ad66a5000f873
  $wgo1 ::
    Data.Text.Internal.Text
    -> GHC.Base.String
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> (# Data.Text.Internal.Text, Duckling.Types.Pattern,
          Duckling.Types.Production #)
  {- Arity: 4,
     Strictness: <L,U><L,U><L,1*U(1*U,A,U,A,A,A,A,A,A)><L,1*U(1*U,A,U,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Duckling.Time.Types.TimeData)
                   (ww3 :: Duckling.Time.Types.TimeData) ->
                 let {
                   token1 :: GHC.Base.Maybe Duckling.Types.Token
                   = case ww2 of ww4 { Duckling.Time.Types.TimeData ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                     case ww3 of ww14 { Duckling.Time.Types.TimeData ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ->
                     case ww5 of wild {
                       DEFAULT
                       -> case ww15 of wild1 {
                            DEFAULT
                            -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                      wild of wild2 {
                                 GHC.Types.False
                                 -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                           wild1 of wild3 {
                                      GHC.Types.False
                                      -> GHC.Base.Just
                                           @ Duckling.Types.Token
                                           (Duckling.Types.Token
                                              @ Duckling.Time.Types.TimeData
                                              Duckling.Time.Types.$fResolveTimeData
                                              Duckling.Time.Types.$fEqTimeData
                                              Duckling.Time.Types.$fHashableTimeData
                                              Duckling.Time.Types.$fShowTimeData
                                              Duckling.Time.Types.$fNFDataTimeData_$crnf
                                                `cast`
                                              (Sym (Control.DeepSeq.N:NFData[0]
                                                        <Duckling.Time.Types.TimeData>_N))
                                              Duckling.Types.$WTime
                                              (Duckling.Time.Types.TimeData
                                                 (Duckling.Time.Types.TimeIntervalsPredicate
                                                    (case ww7 of wild4 {
                                                       Duckling.TimeGrain.Types.NoGrain
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Second
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Minute
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Hour
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Day
                                                       -> case ww17 of wild5 {
                                                            DEFAULT -> Duckling.Time.Types.Open
                                                            Duckling.TimeGrain.Types.Day
                                                            -> Duckling.Time.Types.Closed }
                                                       Duckling.TimeGrain.Types.Week
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Month
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Quarter
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open }
                                                       Duckling.TimeGrain.Types.Year
                                                       -> case ww17 of wild5 { DEFAULT ->
                                                          Duckling.Time.Types.Open } })
                                                    wild
                                                    wild1)
                                                 GHC.Types.False
                                                 (Duckling.TimeGrain.Types.$fOrdGrain_$cmin
                                                    ww7
                                                    ww17)
                                                 GHC.Types.False
                                                 (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                                 (GHC.Base.Nothing
                                                    @ Duckling.Time.Types.IntervalDirection)
                                                 GHC.Types.True
                                                 (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                                 GHC.Types.False))
                                      GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                                 GHC.Types.True -> GHC.Base.Nothing @ Duckling.Types.Token }
                            Duckling.Time.Types.EmptyPredicate
                            -> GHC.Base.Nothing @ Duckling.Types.Token }
                       Duckling.Time.Types.EmptyPredicate
                       -> GHC.Base.Nothing @ Duckling.Types.Token } } }
                 } in
                 (# ww,
                    GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww1)
                      (GHC.Types.[] @ Duckling.Types.PatternItem),
                    \ (ds :: [Duckling.Types.Token]) -> token1 #)) -}
ec185f909bc5e89c0576a507bf573e5b
  $winDurationInterval ::
    Duckling.Duration.Types.DurationData
    -> (# Duckling.Time.Types.Predicate, GHC.Types.Bool,
          Duckling.TimeGrain.Types.Grain, GHC.Types.Bool,
          GHC.Base.Maybe Duckling.Time.Types.Form,
          GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
          GHC.Types.Bool, GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Types.Bool #)
  {- Arity: 1, Strictness: <L,U(U(U),U)>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Duration.Types.DurationData) ->
                 let {
                   dd :: Duckling.Duration.Types.DurationData
                   = case w of wild { Duckling.Duration.Types.DurationData ds ds1 ->
                     Duckling.Duration.Types.DurationData
                       (case ds of wild1 { GHC.Types.I# x ->
                        GHC.Types.I# (GHC.Prim.+# x 1#) })
                       ds1 }
                 } in
                 let {
                   ww :: Duckling.TimeGrain.Types.Grain
                   = case dd of wild { Duckling.Duration.Types.DurationData ds1 ds2 ->
                     ds2 }
                 } in
                 let {
                   ww1 :: Duckling.TimeGrain.Types.Grain
                   = case w of wild { Duckling.Duration.Types.DurationData ds1 ds2 ->
                     ds2 }
                 } in
                 (# case w of ww2 { Duckling.Duration.Types.DurationData ww3 ww4 ->
                    case Duckling.Time.Helpers.$wshiftDuration
                           Duckling.Time.Helpers.durationAgo1
                           ww3
                           ww4 of ww5 { Unit# ww6 ->
                    case dd of ww7 { Duckling.Duration.Types.DurationData ww8 ww9 ->
                    case Duckling.Time.Helpers.$wshiftDuration
                           Duckling.Time.Helpers.durationAgo1
                           ww8
                           ww9 of ww10 { Unit# ww11 ->
                    let {
                      wild :: Duckling.Time.Types.Predicate
                      = Duckling.Time.Types.SeriesPredicate ww6
                    } in
                    case Duckling.Time.Types.containsTimeIntervalsPredicate
                           wild of wild2 {
                      GHC.Types.False
                      -> let {
                           wild1 :: Duckling.Time.Types.Predicate
                           = Duckling.Time.Types.SeriesPredicate ww11
                         } in
                         case Duckling.Time.Types.containsTimeIntervalsPredicate
                                wild1 of wild3 {
                           GHC.Types.False
                           -> Duckling.Time.Types.TimeIntervalsPredicate
                                (case ww1 of wild4 {
                                   Duckling.TimeGrain.Types.NoGrain
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Second
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Minute
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Hour
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Day
                                   -> case ww of wild5 {
                                        DEFAULT -> Duckling.Time.Types.Open
                                        Duckling.TimeGrain.Types.Day -> Duckling.Time.Types.Closed }
                                   Duckling.TimeGrain.Types.Week
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Month
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Quarter
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open }
                                   Duckling.TimeGrain.Types.Year
                                   -> case ww of wild5 { DEFAULT -> Duckling.Time.Types.Open } })
                                wild
                                wild1
                           GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                      GHC.Types.True -> Duckling.Time.Types.EmptyPredicate } } } } },
                    GHC.Types.False, Duckling.TimeGrain.Types.$fOrdGrain_$cmin ww1 ww,
                    GHC.Types.False, GHC.Base.Nothing @ Duckling.Time.Types.Form,
                    GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection,
                    GHC.Types.False, GHC.Base.Nothing @ Data.Text.Internal.Text,
                    GHC.Types.False #)) -}
21cf6b621e6f8c2982fb0d27abbd1831
  $winTimezone ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Duckling.Time.Types.Predicate
    -> GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 11,
     Strictness: <S,U><S,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Duckling.Time.Types.Predicate)
                   (ww4 :: GHC.Types.Bool)
                   (ww5 :: Duckling.TimeGrain.Types.Grain)
                   (ww6 :: GHC.Types.Bool)
                   (ww7 :: GHC.Base.Maybe Duckling.Time.Types.Form)
                   (ww8 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection)
                   (ww9 :: GHC.Types.Bool)
                   (ww10 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 case Duckling.Time.TimeZone.Parse.$w$slookup
                        @ Data.Time.LocalTime.TimeZone.TimeZone
                        ww
                        ww1
                        ww2
                        Duckling.Time.TimeZone.Parse.tzs of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ Duckling.Time.Types.TimeData
                        (Duckling.Time.Types.TimeData
                           (Duckling.Time.Types.SeriesPredicate
                              (let {
                                 $ww1 :: Data.Time.Clock.UTC.UTCTime
                                         -> Duckling.TimeGrain.Types.Grain
                                         -> Duckling.Time.Types.TimeContext
                                         -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
                                   {- Arity: 3,
                                      Strictness: <L,U(U,U)><L,1*U><L,1*U(A,1*U(1*U(U,U,U),1*U),A,A)>,
                                      Inline: [0] -}
                                 = \ (ww11 :: Data.Time.Clock.UTC.UTCTime)
                                     (ww12 :: Duckling.TimeGrain.Types.Grain)
                                     (w :: Duckling.Time.Types.TimeContext)[OneShot] ->
                                   GHC.Base.Just
                                     @ Duckling.Time.Types.TimeObject
                                     (Duckling.Time.Types.TimeObject
                                        (case Duckling.TimeGrain.Types.$wadd
                                                ww11
                                                Duckling.TimeGrain.Types.Minute
                                                (case w of wild1 { Duckling.Time.Types.TimeContext ds1 ds2 ds3 ds4 ->
                                                 case ds2 of ww13 { Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries ww14 ww15 ->
                                                 case Data.Time.LocalTime.TimeZone.Series.$wtimeZoneFromSeries
                                                        ww14
                                                        ww15
                                                        ww11 of wild2 { Data.Time.LocalTime.TimeZone.TimeZone ctxOffset ds ds7 ->
                                                 case ctxOffset of wild3 { GHC.Types.I# x1 ->
                                                 case Data.Time.LocalTime.TimeZone.Series.$wtimeZoneFromSeries
                                                        x
                                                        (GHC.Types.[]
                                                           @ (Data.Time.Clock.UTC.UTCTime,
                                                              Data.Time.LocalTime.TimeZone.TimeZone))
                                                        ww11 of wild4 { Data.Time.LocalTime.TimeZone.TimeZone providedOffset ds8 ds9 ->
                                                 case providedOffset of wild5 { GHC.Types.I# y ->
                                                 GHC.Integer.Type.smallInteger
                                                   (GHC.Prim.-#
                                                      x1
                                                      y) } } } } } }) of ww13 { (#,#) ww14 ww15 ->
                                         Data.Time.Clock.UTC.UTCTime ww14 ww15 })
                                        (case GHC.Prim.tagToEnum#
                                                @ GHC.Types.Bool
                                                (GHC.Prim.<=#
                                                   (GHC.Prim.dataToTag#
                                                      @ Duckling.TimeGrain.Types.Grain
                                                      ww12)
                                                   2#) of wild1 {
                                           GHC.Types.False -> Duckling.TimeGrain.Types.Minute
                                           GHC.Types.True -> ww12 })
                                        (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime))
                               } in
                               let {
                                 w1 :: Duckling.Time.Types.TimeObject
                                       -> Duckling.Time.Types.TimeContext
                                       -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
                                   {- Arity: 2,
                                      Strictness: <S,1*U(U(U,U),1*U,A)><L,1*U(A,1*U(1*U(U,U,U),1*U),A,A)>,
                                      Inline: INLINE[0],
                                      Unfolding: InlineRule (2, True, False)
                                                 (\ (w :: Duckling.Time.Types.TimeObject)
                                                    (w1 :: Duckling.Time.Types.TimeContext)[OneShot] ->
                                                  case w of ww11 { Duckling.Time.Types.TimeObject ww12 ww13 ww14 ->
                                                  $ww1 ww12 ww13 w1 }) -}
                                 = \ (w :: Duckling.Time.Types.TimeObject)
                                     (w2 :: Duckling.Time.Types.TimeContext)[OneShot] ->
                                   case w of ww11 { Duckling.Time.Types.TimeObject ww12 ww13 ww14 ->
                                   $ww1 ww12 ww13 w2 }
                               } in
                               (\ (w3 :: Duckling.Time.Types.TimeObject)
                                  (w4 :: Duckling.Time.Types.TimeContext) ->
                                case Duckling.Time.Types.$wtimeSeqMap
                                       GHC.Types.False
                                       w1
                                       ww3
                                       w3
                                       w4 of ww11 { (#,#) ww12 ww13 ->
                                (ww12, ww13) })
                                 `cast`
                               (Sym (Duckling.Time.Types.N:NoShow[0]
                                         <Duckling.Time.Types.SeriesPredicate>_R))))
                           ww4
                           ww5
                           ww6
                           ww7
                           ww8
                           ww9
                           ww10
                           GHC.Types.True) }) -}
dc94fd00ddec3a98db32df2183d36cf4
  $wintersect ::
    Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Duckling.Time.Types.Predicate)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection)
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww4 :: Duckling.Time.Types.Predicate)
                   (ww5 :: Duckling.TimeGrain.Types.Grain)
                   (ww6 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection)
                   (ww7 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<#
                           (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww1)
                           (GHC.Prim.dataToTag#
                              @ Duckling.TimeGrain.Types.Grain
                              ww5)) of wild {
                   GHC.Types.False
                   -> case Duckling.Time.Types.mkIntersectPredicate ww4 ww of wild1 {
                        DEFAULT
                        -> GHC.Base.Just
                             @ Duckling.Time.Types.TimeData
                             (Duckling.Time.Types.TimeData
                                wild1
                                GHC.Types.False
                                ww5
                                GHC.Types.False
                                (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                (GHC.Base.$fAlternativeMaybe_$c<|>
                                   @ Duckling.Time.Types.IntervalDirection
                                   ww2
                                   ww6)
                                GHC.Types.False
                                (GHC.Base.$fAlternativeMaybe_$c<|>
                                   @ Data.Text.Internal.Text
                                   ww3
                                   ww7)
                                GHC.Types.False)
                        Duckling.Time.Types.EmptyPredicate
                        -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData }
                   GHC.Types.True
                   -> case Duckling.Time.Types.mkIntersectPredicate ww ww4 of wild1 {
                        DEFAULT
                        -> GHC.Base.Just
                             @ Duckling.Time.Types.TimeData
                             (Duckling.Time.Types.TimeData
                                wild1
                                GHC.Types.False
                                ww1
                                GHC.Types.False
                                (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                (GHC.Base.$fAlternativeMaybe_$c<|>
                                   @ Duckling.Time.Types.IntervalDirection
                                   ww2
                                   ww6)
                                GHC.Types.False
                                (GHC.Base.$fAlternativeMaybe_$c<|>
                                   @ Data.Text.Internal.Text
                                   ww3
                                   ww7)
                                GHC.Types.False)
                        Duckling.Time.Types.EmptyPredicate
                        -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData } }) -}
7e7691ddfbaeda0b21ea0a73e32133c1
  $wintersectWithReplacement ::
    Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,U><S,U><L,1*U><L,U><S,U><L,1*U><L,U><L,1*U><L,1*U>,
     Inline: [0] -}
e25071998cb0825f30f968c17e70b022
  $wlongWEBefore ::
    Duckling.Time.Types.Predicate
    -> (# Duckling.Time.Types.Predicate, GHC.Types.Bool,
          Duckling.TimeGrain.Types.Grain, GHC.Types.Bool,
          GHC.Base.Maybe Duckling.Time.Types.Form,
          GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
          GHC.Types.Bool, GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Types.Bool #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Time.Types.Predicate) ->
                 (# case Duckling.Time.Types.mkIntersectPredicate
                           Duckling.Time.Helpers.longWEBefore7
                           (case Duckling.Time.Helpers.$wtakeNthAfter
                                   Duckling.Time.Helpers.longWEBefore6
                                   GHC.Types.False
                                   Duckling.Time.Helpers.longWEBefore4
                                   ww of ww1 { Unit# ww2 ->
                            Duckling.Time.Types.SeriesPredicate ww2 }) of wild {
                      DEFAULT
                      -> case Duckling.Time.Types.mkIntersectPredicate
                                Duckling.Time.Helpers.longWEBefore1
                                (case Duckling.Time.Helpers.$wtakeNthAfter
                                        Duckling.Time.Helpers.cycleLastOf1
                                        GHC.Types.False
                                        Duckling.Time.Helpers.longWEBefore4
                                        ww of ww1 { Unit# ww2 ->
                                 Duckling.Time.Types.SeriesPredicate ww2 }) of wild1 {
                           DEFAULT
                           -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                     wild of wild2 {
                                GHC.Types.False
                                -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                          wild1 of wild3 {
                                     GHC.Types.False
                                     -> Duckling.Time.Types.TimeIntervalsPredicate
                                          Duckling.Time.Types.Open
                                          wild
                                          wild1
                                     GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                                GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                           Duckling.Time.Types.EmptyPredicate
                           -> Duckling.Time.Types.EmptyPredicate }
                      Duckling.Time.Types.EmptyPredicate
                      -> Duckling.Time.Types.EmptyPredicate },
                    GHC.Types.False, Duckling.TimeGrain.Types.Hour, GHC.Types.False,
                    GHC.Base.Nothing @ Duckling.Time.Types.Form,
                    GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection,
                    GHC.Types.False, GHC.Base.Nothing @ Data.Text.Internal.Text,
                    GHC.Types.False #)) -}
832758b9e91637513b5716f963449bc3
  $wlvl ::
    Data.Text.Internal.Text
    -> GHC.Base.String
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> (# Data.Text.Internal.Text, Duckling.Types.Pattern,
          Duckling.Types.Production #)
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Types.Bool)
                   (w :: GHC.Types.Int)[OneShot] ->
                 let {
                   token1 :: Duckling.Time.Types.TimeData
                   = case ww2 of wild {
                       GHC.Types.False
                       -> Duckling.Time.Types.TimeData
                            (Duckling.Time.Types.TimeDatePredicate
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                               (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Just @ GHC.Types.Int w)
                               (GHC.Base.Nothing @ GHC.Types.Int))
                            GHC.Types.False
                            Duckling.TimeGrain.Types.Month
                            GHC.Types.False
                            (GHC.Base.Just
                               @ Duckling.Time.Types.Form
                               (Duckling.Time.Types.Month w))
                            (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                            GHC.Types.True
                            (GHC.Base.Nothing @ Data.Text.Internal.Text)
                            GHC.Types.False
                       GHC.Types.True
                       -> Duckling.Time.Types.TimeData
                            (Duckling.Time.Types.TimeDatePredicate
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                               (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Nothing @ GHC.Types.Int)
                               (GHC.Base.Just @ GHC.Types.Int w)
                               (GHC.Base.Nothing @ GHC.Types.Int))
                            GHC.Types.True
                            Duckling.TimeGrain.Types.Month
                            GHC.Types.False
                            (GHC.Base.Just
                               @ Duckling.Time.Types.Form
                               (Duckling.Time.Types.Month w))
                            (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                            GHC.Types.True
                            (GHC.Base.Nothing @ Data.Text.Internal.Text)
                            GHC.Types.False }
                 } in
                 let {
                   token2 :: Duckling.Types.Token
                   = Duckling.Types.Token
                       @ Duckling.Time.Types.TimeData
                       Duckling.Time.Types.$fResolveTimeData
                       Duckling.Time.Types.$fEqTimeData
                       Duckling.Time.Types.$fHashableTimeData
                       Duckling.Time.Types.$fShowTimeData
                       Duckling.Time.Types.$fNFDataTimeData_$crnf
                         `cast`
                       (Sym (Control.DeepSeq.N:NFData[0]
                                 <Duckling.Time.Types.TimeData>_N))
                       Duckling.Types.$WTime
                       token1
                 } in
                 let {
                   token3 :: GHC.Base.Maybe Duckling.Types.Token
                   = GHC.Base.Just @ Duckling.Types.Token token2
                 } in
                 (# ww,
                    GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww1)
                      (GHC.Types.[] @ Duckling.Types.PatternItem),
                    \ (ds :: [Duckling.Types.Token]) -> token3 #)) -}
d12f58e6f04ae5e207601605f5b4152e
  $wminutesAfter ::
    GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Base.Maybe Duckling.Time.Types.Form) ->
                 case ww of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                        Duckling.Time.Types.TimeOfDay ds1 is12H
                        -> case ds1 of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                             GHC.Base.Just h
                             -> GHC.Base.Just
                                  @ Duckling.Time.Types.TimeData
                                  (Duckling.Time.Helpers.hourMinute is12H h w) } } }) -}
1e038b1b135e3d4e3f689019df68e2de
  $wminutesBefore ::
    GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Base.Maybe Duckling.Time.Types.Form) ->
                 case ww of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                        Duckling.Time.Types.TimeOfDay ds1 is12H
                        -> case ds1 of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                             GHC.Base.Just ds2
                             -> case ds2 of wild3 { GHC.Types.I# ds3 ->
                                let {
                                  fail :: GHC.Prim.Void#
                                          -> GHC.Base.Maybe Duckling.Time.Types.TimeData
                                    {- Arity: 1, Strictness: <L,A> -}
                                  = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                                    GHC.Base.Just
                                      @ Duckling.Time.Types.TimeData
                                      (let {
                                         h :: GHC.Prim.Int# = GHC.Prim.-# ds3 1#
                                       } in
                                       let {
                                         h1 :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# h
                                       } in
                                       Duckling.Time.Types.TimeData
                                         (Duckling.Time.Types.mkIntersectPredicate
                                            (Duckling.Time.Types.TimeDatePredicate
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Just
                                                  @ GHC.Types.Int
                                                  (case w of wild4 { GHC.Types.I# y ->
                                                   GHC.Types.I# (GHC.Prim.-# 60# y) }))
                                               (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                               (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int))
                                            (Duckling.Time.Types.TimeDatePredicate
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Just
                                                  @ (GHC.Types.Bool, GHC.Types.Int)
                                                  (is12H, h1))
                                               (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)
                                               (GHC.Base.Nothing @ GHC.Types.Int)))
                                         GHC.Types.False
                                         Duckling.TimeGrain.Types.Minute
                                         GHC.Types.False
                                         (GHC.Base.Just
                                            @ Duckling.Time.Types.Form
                                            (Duckling.Time.Types.TimeOfDay
                                               (GHC.Base.Just @ GHC.Types.Int h1)
                                               is12H))
                                         (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                         GHC.Types.False
                                         (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                         GHC.Types.False)
                                } in
                                case ds3 of ds4 {
                                  DEFAULT -> fail GHC.Prim.void#
                                  0#
                                  -> GHC.Base.Just
                                       @ Duckling.Time.Types.TimeData
                                       (Duckling.Time.Types.TimeData
                                          (Duckling.Time.Types.mkIntersectPredicate
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ GHC.Types.Int
                                                   (case w of wild4 { GHC.Types.I# y ->
                                                    GHC.Types.I# (GHC.Prim.-# 60# y) }))
                                                (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int))
                                             (Duckling.Time.Types.TimeDatePredicate
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Just
                                                   @ (GHC.Types.Bool, GHC.Types.Int)
                                                   (is12H, Duckling.Time.Helpers.minutesBefore9))
                                                (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)
                                                (GHC.Base.Nothing @ GHC.Types.Int)))
                                          GHC.Types.False
                                          Duckling.TimeGrain.Types.Minute
                                          GHC.Types.False
                                          (GHC.Base.Just
                                             @ Duckling.Time.Types.Form
                                             (Duckling.Time.Types.TimeOfDay
                                                Duckling.Time.Helpers.minutesBefore8
                                                is12H))
                                          (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                          GHC.Types.False
                                          (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                          GHC.Types.False)
                                  1#
                                  -> case is12H of wild4 {
                                       GHC.Types.False -> fail GHC.Prim.void#
                                       GHC.Types.True
                                       -> GHC.Base.Just
                                            @ Duckling.Time.Types.TimeData
                                            (Duckling.Time.Types.TimeData
                                               (Duckling.Time.Types.mkIntersectPredicate
                                                  (Duckling.Time.Types.TimeDatePredicate
                                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                                     (GHC.Base.Just
                                                        @ GHC.Types.Int
                                                        (case w of wild5 { GHC.Types.I# y ->
                                                         GHC.Types.I# (GHC.Prim.-# 60# y) }))
                                                     (GHC.Base.Nothing
                                                        @ (GHC.Types.Bool, GHC.Types.Int))
                                                     (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                                     (GHC.Base.Nothing @ GHC.Types.Int))
                                                  Duckling.Time.Helpers.minutesBefore5)
                                               GHC.Types.False
                                               Duckling.TimeGrain.Types.Minute
                                               GHC.Types.False
                                               Duckling.Time.Helpers.minutesBefore1
                                               (GHC.Base.Nothing
                                                  @ Duckling.Time.Types.IntervalDirection)
                                               GHC.Types.False
                                               (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                               GHC.Types.False) } } } } } }) -}
bda23b16e379fcefb1c924c4b1b57e3e
  $wpredEveryNDaysFrom ::
    GHC.Types.Int
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 4, Strictness: <L,U(U)><L,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Types.Int) ->
                 case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYearValid
                        (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                        ww1
                        ww2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                   GHC.Base.Just x
                   -> case x of ww3 { GHC.Types.I# ww4 ->
                      case Data.Time.Calendar.OrdinalDate.$wfromOrdinalDateValid
                             ww
                             ww4 of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                        GHC.Base.Just x1
                        -> GHC.Base.Just
                             @ Duckling.Time.Types.TimeData
                             (Duckling.Time.Types.TimeData
                                (case Duckling.Time.Types.$wperiodicPredicate
                                        Duckling.TimeGrain.Types.Day
                                        w
                                        (Duckling.Time.Types.TimeObject
                                           (Data.Time.Clock.UTC.UTCTime
                                              x1
                                              Duckling.Time.Helpers.predEveryNDaysFrom1
                                                `cast`
                                              (Trans
                                                   (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                                                   (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))))
                                           Duckling.TimeGrain.Types.Day
                                           (GHC.Base.Nothing
                                              @ Data.Time.Clock.UTC.UTCTime)) of ww5 { Unit# ww6 ->
                                 Duckling.Time.Types.SeriesPredicate ww6 })
                                GHC.Types.False
                                Duckling.TimeGrain.Types.Day
                                GHC.Types.False
                                (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                                (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                GHC.Types.False
                                (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                GHC.Types.False) } } }) -}
daceed71646fbf3ecb9a3cca1602cbb1
  $wpredNthClosest ::
    GHC.Types.Int
    -> Duckling.Time.Types.Predicate
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Duckling.Time.Types.TimeData
    -> (# Duckling.Time.Types.Predicate, GHC.Types.Bool,
          Duckling.TimeGrain.Types.Grain, GHC.Types.Bool,
          GHC.Base.Maybe Duckling.Time.Types.Form,
          GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
          GHC.Types.Bool, GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Types.Bool #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,U><L,U><L,U><L,1*U(1*U,A,A,A,A,A,A,A,A)>,
     Inline: [0] -}
95b26aa274cc1456873a6f6baf869eb1
  $wshiftDuration ::
    Duckling.Time.Types.Predicate
    -> GHC.Types.Int
    -> Duckling.TimeGrain.Types.Grain
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.Predicate)
                   (ww :: GHC.Types.Int)
                   (ww1 :: Duckling.TimeGrain.Types.Grain) ->
                 let {
                   lvl7 :: Duckling.TimeGrain.Types.Grain
                   = case ww1 of wild {
                       DEFAULT
                       -> case GHC.Prim.dataToTag#
                                 @ Duckling.TimeGrain.Types.Grain
                                 wild of wild1 {
                            DEFAULT
                            -> GHC.Prim.tagToEnum#
                                 @ Duckling.TimeGrain.Types.Grain
                                 (GHC.Prim.+# wild1 -1#)
                            0# -> Duckling.TimeGrain.Types.$fEnumGrain2 }
                       Duckling.TimeGrain.Types.NoGrain -> Duckling.TimeGrain.Types.Second
                       Duckling.TimeGrain.Types.Second -> Duckling.TimeGrain.Types.Second
                       Duckling.TimeGrain.Types.Month -> Duckling.TimeGrain.Types.Day
                       Duckling.TimeGrain.Types.Year -> Duckling.TimeGrain.Types.Month }
                 } in
                 let {
                   lvl8 :: GHC.Integer.Type.Integer
                   = case ww of wild { GHC.Types.I# i ->
                     GHC.Integer.Type.smallInteger i }
                 } in
                 (# let {
                      $ww1 :: Duckling.Time.Types.TimeObject
                              -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
                        {- Arity: 1, Strictness: <L,1*U(1*U(U,U),A,A)>, Inline: [0] -}
                      = \ (w1 :: Duckling.Time.Types.TimeObject) ->
                        GHC.Base.Just
                          @ Duckling.Time.Types.TimeObject
                          (case Duckling.Time.Types.$wtimeRound
                                  w1
                                  lvl7 of ww2 { (#,,#) ww3 ww4 ww5 ->
                           Duckling.Time.Types.TimeObject
                             (case Duckling.TimeGrain.Types.$wadd
                                     ww3
                                     ww1
                                     lvl8 of ww6 { (#,#) ww7 ww8 ->
                              Data.Time.Clock.UTC.UTCTime ww7 ww8 })
                             (Duckling.TimeGrain.Types.$fOrdGrain_$cmin ww4 ww1)
                             (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })
                    } in
                    let {
                      w1 :: Duckling.Time.Types.TimeObject
                            -> Duckling.Time.Types.TimeContext
                            -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
                        {- Arity: 2, Strictness: <L,1*U(1*U(U,U),A,A)><L,A>,
                           Inline: INLINE[0],
                           Unfolding: InlineRule (2, True, True)
                                      (\ (w1 :: Duckling.Time.Types.TimeObject)
                                         (w2 :: Duckling.Time.Types.TimeContext)[OneShot] ->
                                       $ww1 w1) -}
                      = \ (w2 :: Duckling.Time.Types.TimeObject)
                          (w3 :: Duckling.Time.Types.TimeContext)[OneShot] ->
                        $ww1 w2
                    } in
                    (\ (w3 :: Duckling.Time.Types.TimeObject)
                       (w4 :: Duckling.Time.Types.TimeContext) ->
                     case Duckling.Time.Types.$wtimeSeqMap
                            GHC.Types.False
                            w1
                            w
                            w3
                            w4 of ww2 { (#,#) ww3 ww4 ->
                     (ww3, ww4) })
                      `cast`
                    (Sym (Duckling.Time.Types.N:NoShow[0]
                              <Duckling.Time.Types.SeriesPredicate>_R)) #)) -}
87fbf6ff26258b80e5c73ad502e3ec8f
  $wtakeLastOf ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.Predicate)
                   (w1 :: Duckling.Time.Types.Predicate) ->
                 let {
                   lvl7 :: Duckling.Time.Types.SeriesPredicate
                   = Duckling.Time.Types.runPredicate w
                 } in
                 (# let {
                      w2 :: Duckling.Time.Types.TimeObject
                            -> Duckling.Time.Types.TimeContext
                            -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
                        {- Arity: 2, Strictness: <L,U(U(U,U),U,U)><L,U> -}
                      = \ (t :: Duckling.Time.Types.TimeObject)
                          (ctx :: Duckling.Time.Types.TimeContext)[OneShot] ->
                        case lvl7
                               (Duckling.Time.Types.timeStartingAtTheEndOf t)
                               ctx of wild { (,) ds ds1 ->
                        case ds of wild1 {
                          [] -> GHC.Base.Nothing @ Duckling.Time.Types.TimeObject
                          : nth ds2 -> GHC.Base.Just @ Duckling.Time.Types.TimeObject nth } }
                    } in
                    (\ (w3 :: Duckling.Time.Types.TimeObject)
                       (w4 :: Duckling.Time.Types.TimeContext) ->
                     case Duckling.Time.Types.$wtimeSeqMap
                            GHC.Types.False
                            w2
                            w1
                            w3
                            w4 of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) })
                      `cast`
                    (Sym (Duckling.Time.Types.N:NoShow[0]
                              <Duckling.Time.Types.SeriesPredicate>_R)) #)) -}
e328a19db035d77345b857628d5eb6e4
  $wtakeNth ::
    GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Time.Types.Predicate
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>, Inline: [0] -}
481688926bd37529be656d02fc631460
  $wtakeNthAfter ::
    GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><L,U>, Inline: [0] -}
2997b2fbcc30b3d795db7ee475bedbcd
  $wtimeComputed ::
    [Duckling.Time.Types.TimeObject]
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: [Duckling.Time.Types.TimeObject]) ->
                 (# (\ (t :: Duckling.Time.Types.TimeObject)
                       (ds :: Duckling.Time.Types.TimeContext) ->
                     let {
                       ds1 :: ([Duckling.Time.Types.TimeObject],
                               [Duckling.Time.Types.TimeObject])
                       = case GHC.List.$wspan
                                @ Duckling.Time.Types.TimeObject
                                (\ (y :: Duckling.Time.Types.TimeObject) ->
                                 Duckling.Time.Types.timeBefore y t)
                                w of ww { (#,#) ww1 ww2 ->
                         (ww1, ww2) }
                     } in
                     (case ds1 of wild { (,) start end ->
                      GHC.List.reverse1
                        @ Duckling.Time.Types.TimeObject
                        start
                        (GHC.Types.[] @ Duckling.Time.Types.TimeObject) },
                      case ds1 of wild { (,) start end -> end }))
                      `cast`
                    (Sym (Duckling.Time.Types.N:NoShow[0]
                              <Duckling.Time.Types.SeriesPredicate>_R)) #)) -}
6e966883816dfa9b415980e86fcbdf39
  $wtoTimeObjectM ::
    GHC.Integer.Type.Integer
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
  {- Arity: 3, Strictness: <L,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Types.Int) ->
                 case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYearValid
                        (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                        ww1
                        ww2 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ Duckling.Time.Types.TimeObject
                   GHC.Base.Just x
                   -> case x of ww3 { GHC.Types.I# ww4 ->
                      case Data.Time.Calendar.OrdinalDate.$wfromOrdinalDateValid
                             ww
                             ww4 of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing @ Duckling.Time.Types.TimeObject
                        GHC.Base.Just x1
                        -> Duckling.Time.Helpers.toTimeObjectM1 x1 } } }) -}
c8d86e85ef1224044213e47562d68f6f
  cycleLastOf ::
    Duckling.TimeGrain.Types.Grain
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, Strictness: <L,U><S,1*U(U,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (grain :: Duckling.TimeGrain.Types.Grain)
                   (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeLastOf
                      (Duckling.Time.Helpers.timeCycle grain)
                      ds1)
                   GHC.Types.False
                   grain
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False }) -}
5be29baf2c3cb8e13cedb7468001ff5e
  cycleLastOf1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
2890794563c0d4e57dbf11230d3673e9
  cycleN ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeData
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: Duckling.TimeGrain.Types.Grain)
                   (w2 :: GHC.Types.Int) ->
                 case Duckling.Time.Helpers.$wcycleN
                        w
                        w1
                        w2 of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Types.TimeData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 }) -}
4daf0a4690b61e6b89447861865f331f
  cycleNth ::
    Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 2, Strictness: <L,U><L,U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (grain :: Duckling.TimeGrain.Types.Grain)
                   (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeNth
                      n
                      GHC.Types.False
                      (Duckling.Time.Helpers.timeCycle grain))
                   GHC.Types.False
                   grain
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
47bc55ee9800eb1b47747445d00705eb
  cycleNthAfter ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
  {- Arity: 4,
     Strictness: <L,U><L,U><L,U(U)><S,1*U(U,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (notImmediate :: GHC.Types.Bool)
                   (grain :: Duckling.TimeGrain.Types.Grain)
                   (n :: GHC.Types.Int)
                   (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeNthAfter
                      n
                      notImmediate
                      (Duckling.Time.Helpers.timeCycle grain)
                      ds1)
                   GHC.Types.False
                   grain
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False }) -}
b9d888fe0d735c5840c612c4d21623ff
  dayOfMonth :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkDayOfTheMonthPredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
62a3e3c0a3159425f0797203fb3a2ab4
  dayOfWeek :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkDayOfTheWeekPredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.True
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      Duckling.Time.Types.DayOfWeek)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
38eb09c2b6a00f89ca79d257aa8976fa
  durationAfter ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2,
     Strictness: <L,U(U(U),U)><S,1*U(U,A,1*U,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Duration.Types.DurationData)
                   (w1 :: Duckling.Time.Types.TimeData) ->
                 case w1 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case Duckling.Time.Helpers.$wdurationAfter
                        w
                        ww1
                        ww3 of ww10 { (#,,,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Types.TimeData
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19 } }) -}
8a9550242e86dbdfe25bcaef01ba1ee5
  durationAgo ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData
  {- Arity: 1, Strictness: <L,1*U(1*U(U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Duration.Types.DurationData) ->
                 let {
                   dd :: Duckling.Duration.Types.DurationData
                   = case w of wild { Duckling.Duration.Types.DurationData v g ->
                     Duckling.Duration.Types.DurationData
                       (GHC.Num.$fNumInt_$cnegate v)
                       g }
                 } in
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.shiftDuration
                      Duckling.Time.Helpers.durationAgo1
                      dd)
                   GHC.Types.False
                   (Duckling.Duration.Types.grain dd)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
64c7af64b57059132b5f973887af3686
  durationAgo1 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Helpers.durationAgo_n
                        GHC.Types.False
                        Duckling.Time.Helpers.durationAgo2 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
7374b14362f0c4e5f37d2013d6bca321
  durationAgo2 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Helpers.durationAgo3
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
1863fed166d4da45d070e6ffff627a64
  durationAgo3 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Second
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Second of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d02f0f3edd6a17fc6713dc64d7136a1f
  durationAgo_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
cc1b234fae31bc416cccbef6c177024d
  durationBefore ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2,
     Strictness: <L,1*U(1*U(U),U)><S,1*U(U,A,1*U,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (dd :: Duckling.Duration.Types.DurationData)
                   (pred1 :: Duckling.Time.Types.TimeData) ->
                 Duckling.Time.Helpers.durationAfter
                   (case dd of wild { Duckling.Duration.Types.DurationData v g ->
                    Duckling.Duration.Types.DurationData
                      (GHC.Num.$fNumInt_$cnegate v)
                      g })
                   pred1) -}
b3924267d30dbfc3a38fd85889c16b45
  durationIntervalAgo ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData
  {- Arity: 1, Strictness: <L,1*U(1*U(U),U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (dd :: Duckling.Duration.Types.DurationData) ->
                 Duckling.Time.Helpers.inDurationInterval
                   (case dd of wild { Duckling.Duration.Types.DurationData v g ->
                    Duckling.Duration.Types.DurationData
                      (GHC.Num.$fNumInt_$cnegate v)
                      g })) -}
2523d25ec5c2f1ba3787309271e8f3e5
  form ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(U,U,U,U,A,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: Duckling.Time.Types.Form)
                   (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   ds1
                   ds2
                   ds3
                   (GHC.Base.Just @ Duckling.Time.Types.Form f)
                   ds5
                   ds6
                   ds7
                   ds8 }) -}
69afad92c8c340c7b7edccde43bfed42
  getIntValue :: Duckling.Types.Token -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds2 of ww { GHC.Types.D# ww1 ->
                      Duckling.Numeral.Types.$wgetIntValue ww1 } }
                   Duckling.Types.Ordinal cobox0
                   -> GHC.Base.Just
                        @ GHC.Types.Int
                        nd
                          `cast`
                        (Trans
                             (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])) } }) -}
59574d49b8ebe2dfba0390526af8518d
  hasNoDirection :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds7 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False } } } }) -}
667759cab9c2ccfe709e56a6ae9703d2
  hasNoTimezone :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Types.Token) ->
                 case x of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds ds1 ->
                 case ds of wild1 {
                   DEFAULT -> GHC.Types.True
                   Duckling.Types.Time cobox0
                   -> case ds1
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds10 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
abdd0f731aa3461879812593bcf37b7d
  hasTimezone :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                      ds11 } } }) -}
a43cb2b3b9254ffecab776dbdfa251a3
  hour ::
    GHC.Types.Bool -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (is12H :: GHC.Types.Bool) (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkHourPredicate is12H n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      (Duckling.Time.Types.TimeOfDay
                         (GHC.Base.Just @ GHC.Types.Int n)
                         is12H))
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
125eb5afab138df7cfc04c748bbef185
  hourMinute ::
    GHC.Types.Bool
    -> GHC.Types.Int -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkIntersectPredicate
                      (Duckling.Time.Types.mkMinutePredicate w2)
                      (Duckling.Time.Types.mkHourPredicate w w1))
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Minute
                   GHC.Types.False
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      (Duckling.Time.Types.TimeOfDay
                         (GHC.Base.Just @ GHC.Types.Int w1)
                         w))
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
d230b9ee0788ed2f253820b925f14c7c
  hourMinuteSecond ::
    GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeData
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkIntersectPredicate
                      (Duckling.Time.Types.mkSecondPredicate w3)
                      (Duckling.Time.Types.mkIntersectPredicate
                         (Duckling.Time.Types.mkMinutePredicate w2)
                         (Duckling.Time.Types.mkHourPredicate w w1)))
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Second
                   GHC.Types.False
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      (Duckling.Time.Types.TimeOfDay
                         (GHC.Base.Just @ GHC.Types.Int w1)
                         w))
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
e827ecc2a07e97e90059d28556a5c441
  inDuration ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData
  {- Arity: 1, Strictness: <L,U(U(U),U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (dd :: Duckling.Duration.Types.DurationData) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.shiftDuration
                      Duckling.Time.Helpers.durationAgo1
                      dd)
                   GHC.Types.False
                   (Duckling.Duration.Types.grain dd)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
d0cbc13a8471a0cc652f3b5822366174
  inDurationInterval ::
    Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.TimeData
  {- Arity: 1, Strictness: <L,U(U(U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Duration.Types.DurationData) ->
                 case Duckling.Time.Helpers.$winDurationInterval
                        w of ww { (#,,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Types.TimeData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 }) -}
33a576ff4ea25e85387d9397518a32b9
  inTimezone ::
    Data.Text.Internal.Text
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U(U,U,U,U,U,U,U,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { Duckling.Time.Types.TimeData ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ->
                 Duckling.Time.Helpers.$winTimezone
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12 } }) -}
c019e8e87d7494bf6f19662a6fbed0aa
  intersect ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(1*U,A,1*U,A,A,1*U,A,1*U,A)><S(LLSLLLLLL),1*U(1*U,A,1*U,A,A,1*U,A,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeData)
                   (w1 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case w1 of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Helpers.$wintersect
                   ww1
                   ww3
                   ww6
                   ww8
                   ww11
                   ww13
                   ww16
                   ww18 } }) -}
215ad5966c7f6f1aac59a1e229945ac5
  intersect' ::
    (Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)
    -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLSLLLLLL)S(LLSLLLLLL)),1*U(1*U(1*U,A,1*U,A,A,1*U,A,1*U,A),1*U(1*U,A,1*U,A,A,1*U,A,1*U,A))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Duckling.Time.Types.TimeData,
                          Duckling.Time.Types.TimeData)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Duckling.Time.Types.TimeData ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww2 of ww13 { Duckling.Time.Types.TimeData ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<#
                           (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww6)
                           (GHC.Prim.dataToTag#
                              @ Duckling.TimeGrain.Types.Grain
                              ww16)) of wild {
                   GHC.Types.False
                   -> Duckling.Time.Types.TimeData
                        (Duckling.Time.Types.mkIntersectPredicate ww14 ww4)
                        GHC.Types.False
                        ww16
                        GHC.Types.False
                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                        (GHC.Base.$fAlternativeMaybe_$c<|>
                           @ Duckling.Time.Types.IntervalDirection
                           ww9
                           ww19)
                        GHC.Types.False
                        (GHC.Base.$fAlternativeMaybe_$c<|>
                           @ Data.Text.Internal.Text
                           ww11
                           ww21)
                        GHC.Types.False
                   GHC.Types.True
                   -> Duckling.Time.Types.TimeData
                        (Duckling.Time.Types.mkIntersectPredicate ww4 ww14)
                        GHC.Types.False
                        ww6
                        GHC.Types.False
                        (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                        (GHC.Base.$fAlternativeMaybe_$c<|>
                           @ Duckling.Time.Types.IntervalDirection
                           ww9
                           ww19)
                        GHC.Types.False
                        (GHC.Base.$fAlternativeMaybe_$c<|>
                           @ Data.Text.Internal.Text
                           ww11
                           ww21)
                        GHC.Types.False } } } }) -}
d85836a20ce2ceadbf49fab724af3beb
  intersectDOM ::
    Duckling.Time.Types.TimeData
    -> Duckling.Types.Token
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U,A,1*U,A,A,1*U,A,1*U,A)><S,1*U>,
     Unfolding: (\ (td :: Duckling.Time.Types.TimeData)
                   (token1 :: Duckling.Types.Token) ->
                 case token1 of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds nd ->
                 case ds of wild1 {
                   DEFAULT -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds1 ds2 ds3 ds4 ->
                      case ds1 of ww { GHC.Types.D# ww1 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==## ww1 0.0##) of wild3 {
                        GHC.Types.False
                        -> let {
                             n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==##
                                     (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n))
                                     0.0##) of wild4 {
                             GHC.Types.False -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData
                             GHC.Types.True
                             -> case td of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                                Duckling.Time.Helpers.$wintersect
                                  (Duckling.Time.Types.TimeDatePredicate
                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                     (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                                     (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                     (GHC.Base.Just @ GHC.Types.Int (GHC.Types.I# n))
                                     (GHC.Base.Nothing @ GHC.Types.Int)
                                     (GHC.Base.Nothing @ GHC.Types.Int))
                                  Duckling.TimeGrain.Types.Day
                                  (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                                  (GHC.Base.Nothing @ Data.Text.Internal.Text)
                                  ww3
                                  ww5
                                  ww8
                                  ww10 } }
                        GHC.Types.True
                        -> case td of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                           Duckling.Time.Helpers.$wintersect
                             Duckling.Time.Helpers.intersectDOM1
                             Duckling.TimeGrain.Types.Day
                             (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                             (GHC.Base.Nothing @ Data.Text.Internal.Text)
                             ww3
                             ww5
                             ww8
                             ww10 } } } }
                   Duckling.Types.Ordinal cobox0
                   -> case td of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                      Duckling.Time.Helpers.$wintersect
                        (Duckling.Time.Types.mkDayOfTheMonthPredicate
                           nd
                             `cast`
                           (Trans (Sub cobox0) (Duckling.Ordinal.Types.N:OrdinalData[0])))
                        Duckling.TimeGrain.Types.Day
                        (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                        (GHC.Base.Nothing @ Data.Text.Internal.Text)
                        ww1
                        ww3
                        ww6
                        ww8 } } }) -}
9339c244a9b08ddb776eb717c7c54f32
  intersectDOM1 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Helpers.intersectDOM2
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
fee1a22f3f8ab1060eb62891ea01db2e
  intersectDOM2 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   GHC.Float.RealFracMethods.properFractionDoubleInt3) -}
3d069a5fa3ac600bd0b3ddfc0ee60de4
  intersectWithReplacement ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(U,A,U,A,A,A,A,1*U,A)><S(LLSLLLLLL),1*U(U,A,U,A,A,A,A,1*U,A)><S,1*U(U,A,1*U,A,A,A,A,1*U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Time.Types.TimeData)
                   (w1 :: Duckling.Time.Types.TimeData)
                   (w2 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case w1 of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 case w2 of ww20 { Duckling.Time.Types.TimeData ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ->
                 Duckling.Time.Helpers.$wintersectWithReplacement
                   ww1
                   ww3
                   ww8
                   ww11
                   ww13
                   ww18
                   ww21
                   ww23
                   ww28 } } }) -}
5583aa324e4d42feb8f0702430b96441
  interval ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U(1*U,A,U,A,A,A,A,A,A)><S,1*U(1*U,A,U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (3, True, False)
                (\ (intervalType :: Duckling.Time.Types.TimeIntervalType)
                   (td1 :: Duckling.Time.Types.TimeData)
                   (td2 :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Helpers.interval'
                        intervalType
                        (td1,
                         td2) of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds of wild1 {
                   DEFAULT -> GHC.Base.Just @ Duckling.Time.Types.TimeData wild
                   Duckling.Time.Types.EmptyPredicate
                   -> GHC.Base.Nothing @ Duckling.Time.Types.TimeData } }) -}
811060f3b610e1edf2aff973ce8b2de5
  interval' ::
    Duckling.Time.Types.TimeIntervalType
    -> (Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)
    -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S(SS),1*U(1*U(1*U,A,U,A,A,A,A,A,A),1*U(1*U,A,U,A,A,A,A,A,A))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeIntervalType)
                   (w1 :: (Duckling.Time.Types.TimeData,
                           Duckling.Time.Types.TimeData)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Duckling.Time.Types.TimeData ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ->
                 case ww2 of ww13 { Duckling.Time.Types.TimeData ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkTimeIntervalsPredicate
                      (case ww6 of wild {
                         Duckling.TimeGrain.Types.NoGrain
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Second
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Minute
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Hour
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Day
                         -> case ww16 of wild1 {
                              DEFAULT -> w
                              Duckling.TimeGrain.Types.Day -> Duckling.Time.Types.Closed }
                         Duckling.TimeGrain.Types.Week
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Month
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Quarter
                         -> case ww16 of wild1 { DEFAULT -> w }
                         Duckling.TimeGrain.Types.Year
                         -> case ww16 of wild1 { DEFAULT -> w } })
                      ww4
                      ww14)
                   GHC.Types.False
                   (Duckling.TimeGrain.Types.$fOrdGrain_$cmin ww6 ww16)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False } } }) -}
4158d08ef782c071e1bafd506ffffb3f
  isADayOfWeek :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.DayOfWeek -> GHC.Types.True } } } } }) -}
ff8462cceb89e3d5d4153156c628efca
  isAMonth :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.Month ds12 -> GHC.Types.True } } } } }) -}
eef9b392e320323af196e53d3244a616
  isAPartOfDay :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.PartOfDay -> GHC.Types.True } } } } }) -}
a2b4b48ce4ca3f7f3233609871d7b272
  isATimeOfDay :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.TimeOfDay ds12 ds13
                             -> GHC.Types.True } } } } }) -}
bc97f69b43dc2d2df90b44226ee20ca3
  isAnHourOfDay :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.TimeOfDay ds12 ds13
                             -> case ds12 of wild5 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just ds14
                                  -> GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>#
                                          (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ds4)
                                          2#) } } } } } }) -}
91b5117e6465ba0e7a1305966aff97d7
  isDOMInteger :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ds2 of ww { GHC.Types.D# ww1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==## ww1 0.0##) of wild4 {
                             GHC.Types.False
                             -> let {
                                  n :: GHC.Prim.Int# = GHC.Prim.double2Int# ww1
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==##
                                          (GHC.Prim.-## ww1 (GHC.Prim.int2Double# n))
                                          0.0##) of wild5 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# 1# n) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# n 31#) } }
                             GHC.Types.True -> GHC.Types.False } } } } } }) -}
9d8f90f9c37f0a3afd1ea6f6b09dca3b
  isDOMOrdinal :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 od ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Ordinal cobox0
                   -> case od
                             `cast`
                           (Trans
                                (Sub cobox0)
                                (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# 1# y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# y 31#) } } } }) -}
a75f4505522a6261eb139ce18b8c8069
  isDOMValue :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Helpers.isDOMValue1
                  `cast`
                (<Duckling.Types.Token>_R ->_R Data.Monoid.N:Any[0]) -}
cfefe154b8569ebc7665af4b830ec95d
  isDOMValue1 :: Duckling.Types.Token -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: (\ (x :: Duckling.Types.Token) ->
                 Duckling.Time.Helpers.isDOMValue_go1
                   (Duckling.Time.Helpers.isDOMValue_go
                      Duckling.Time.Helpers.isDOMValue2
                      x)) -}
b817770c648cc8d722646a55ee6bcf42
  isDOMValue2 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isDOMOrdinal
                   Duckling.Time.Helpers.isDOMValue3) -}
a0083ccac18e2e4b430b2d42ac7fb1ae
  isDOMValue3 :: [Duckling.Types.Token -> GHC.Types.Bool]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Duckling.Types.Token -> GHC.Types.Bool)
                   Duckling.Time.Helpers.isDOMInteger
                   (GHC.Types.[] @ (Duckling.Types.Token -> GHC.Types.Bool))) -}
2c16eaf1f33a9a7da0190569ec3c3f08
  isDOMValue_go ::
    [Duckling.Types.Token -> GHC.Types.Bool]
    -> Duckling.Types.Token -> [GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
02290473b9077424835eaf209aae8c8e
  isDOMValue_go1 :: [GHC.Types.Bool] -> Data.Monoid.Any
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b4ec099f6a0aca9703ab34ef395ccbd5
  isDurationGreaterThan ::
    Duckling.TimeGrain.Types.Grain -> Duckling.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (value :: Duckling.TimeGrain.Types.Grain)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Duration cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Duration.Types.DurationData ds3 ds4 ->
                      Duckling.TimeGrain.Types.$fOrdGrain_$c> ds4 value } } }) -}
94a38abcb8f294a86d82c338a8ed8a16
  isGrain ::
    Duckling.TimeGrain.Types.Grain -> Duckling.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (value :: Duckling.TimeGrain.Types.Grain)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 grain ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.TimeGrain cobox0
                   -> Duckling.TimeGrain.Types.$fEqGrain_$c==
                        grain `cast` (Sub cobox0)
                        value } }) -}
5fcaa8847a595b6e777082170927d78f
  isGrainFinerThan ::
    Duckling.TimeGrain.Types.Grain -> Duckling.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (value :: Duckling.TimeGrain.Types.Grain)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                      Duckling.TimeGrain.Types.$fOrdGrain_$c< ds5 value } } }) -}
e6c34bb19da8e7659a8d06527250e650
  isGrainOfTime ::
    Duckling.TimeGrain.Types.Grain -> Duckling.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (value :: Duckling.TimeGrain.Types.Grain)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                      Duckling.TimeGrain.Types.$fEqGrain_$c== ds5 value } } }) -}
4ddfafd45f067e53dd022f03a320ada4
  isIntegerBetween ::
    GHC.Types.Int -> GHC.Types.Int -> Duckling.Types.Predicate
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (low :: GHC.Types.Int)
                   (high :: GHC.Types.Int)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 nd ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Numeral cobox0
                   -> case nd
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Numeral.Types.NumeralData ds2 ds3 ds4 ds5 ->
                      case ds5 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> Duckling.Numeral.Types.isIntegerBetween ds2 low high } } } }) -}
08cc18b2ad0f18c3813da6cf492183bc
  isMidnightOrNoon :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds6 of wild3 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ds11
                        -> case ds11 of wild4 {
                             DEFAULT -> GHC.Types.False
                             Duckling.Time.Types.TimeOfDay ds12 ds13
                             -> case ds12 of wild5 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just x
                                  -> case x of wild6 { GHC.Types.I# x1 ->
                                     case x1 of wild7 {
                                       DEFAULT -> GHC.Types.False
                                       0# -> GHC.Types.True
                                       12# -> GHC.Types.True } } } } } } } }) -}
af520ae8db0cd7f6cc029a5d415de673
  isNotLatent :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 td ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case td
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      case ds3 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
980d5edba8a528b566e0172a1fad2074
  isOkWithThisNext :: Duckling.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 ds2 ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Time cobox0
                   -> case ds2
                             `cast`
                           (Sub cobox0) of wild2 { Duckling.Time.Types.TimeData ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                      ds9 } } }) -}
24404df03e27e8d867c68bf789c8bea1
  isOrdinalBetween ::
    GHC.Types.Int -> GHC.Types.Int -> Duckling.Types.Predicate
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (low :: GHC.Types.Int)
                   (high :: GHC.Types.Int)
                   (ds :: Duckling.Types.Token) ->
                 case ds of wild { Duckling.Types.Token a $dResolve $dEq $dHashable $dShow $dNFData ds1 od ->
                 case ds1 of wild1 {
                   DEFAULT -> GHC.Types.False
                   Duckling.Types.Ordinal cobox0
                   -> case low of wild2 { GHC.Types.I# x ->
                      case od
                             `cast`
                           (Trans
                                (Sub cobox0)
                                (Duckling.Ordinal.Types.N:OrdinalData[0])) of wild3 { GHC.Types.I# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x y) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case high of wild5 { GHC.Types.I# y1 ->
                           GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# y y1) } } } } } }) -}
10b2810246c4ef15f39a05d0e657ea2e
  longWEBefore ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 1, Strictness: <S,U(U,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case Duckling.Time.Helpers.$wlongWEBefore
                        ww1 of ww10 { (#,,,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Types.TimeData
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19 } }) -}
eee4133b4275e74d5f3fa460e83a0ce3
  longWEBefore1 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Helpers.longWEBefore2
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
b4747252e397f91b84bc00397e6f2f9d
  longWEBefore2 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Helpers.longWEBefore3) -}
b6c95ced079919f1981b2744dfd528a6
  longWEBefore3 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Duckling.Time.Helpers.durationAgo_n)) -}
507825e50536ebcead6e0b7e4c323485
  longWEBefore4 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Helpers.longWEBefore5
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
4bb4eeb47e4d95515d6db83cf456c935
  longWEBefore5 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 2,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject)
                   (ds :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSequence
                        Duckling.TimeGrain.Types.Day
                        Duckling.Time.Helpers.cycleLastOf1
                        (case Duckling.Time.Types.$wtimeRound
                                t
                                Duckling.TimeGrain.Types.Day of ww { (#,,#) ww1 ww2 ww3 ->
                         Duckling.Time.Types.TimeObject
                           ww1
                           ww2
                           ww3 }) of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f5dabb6c3f3ee49ae27f227f29183110
  longWEBefore6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -3#) -}
50a7edfec6f3776da7279d6cc6679929
  longWEBefore7 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Helpers.longWEBefore8
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
3e904614499985657aa65c8a1e6655d2
  longWEBefore8 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Helpers.longWEBefore9) -}
ea04263257887a35946d4d6c4546bd84
  longWEBefore9 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.False,
                  Duckling.Time.Helpers.longWEBefore_n)) -}
8bec18ca92b5baed8ea496a927657347
  longWEBefore_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 18#) -}
b240437b63912c9639cdd0d88e0471c1
  minute :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkMinutePredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Minute
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
4208078fcf915de99ee8fbf82aba110b
  minutesAfter ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.TimeData) ->
                 case w1 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Helpers.$wminutesAfter w ww5 }) -}
26d7c508e9338277f894ce17210574bc
  minutesBefore ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U)><S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.TimeData) ->
                 case w1 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Helpers.$wminutesBefore w ww5 }) -}
0adbb711c53b6166030846e9f6bbc80f
  minutesBefore1 :: GHC.Base.Maybe Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Helpers.minutesBefore2) -}
f27e7b7b666c56d5f12ac5f15aea8780
  minutesBefore2 :: Duckling.Time.Types.Form
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeOfDay
                   Duckling.Time.Helpers.minutesBefore3
                   GHC.Types.True) -}
8151f7c192fcc08d7e4993744b9d7b2c
  minutesBefore3 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Helpers.minutesBefore4) -}
a0ea69c788fcd6efa02cd735ad4076d9
  minutesBefore4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
b705999c70539ee867f7cfcbef4f7c42
  minutesBefore5 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Helpers.minutesBefore6
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
ee9c40271b98736a7dcb080d15a5ff4a
  minutesBefore6 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Helpers.minutesBefore7) -}
c846afb6c216f2fa4fdba880a56b7851
  minutesBefore7 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.True,
                  Duckling.Time.Helpers.minutesBefore4)) -}
1eeb49d562e870ba0fa892a6de5d6eb6
  minutesBefore8 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Helpers.minutesBefore9) -}
34db808c37986f1bca317574bbf787bc
  minutesBefore9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 23#) -}
bb4e263adf4b0b304004f09445298afc
  mkLatent ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,A,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   GHC.Types.True
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6
                   ds7
                   ds8 }) -}
3a6971b31f3cd9fc2fa92f53fea49019
  mkOkForThisNext ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U,A,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   ds1
                   ds2
                   ds3
                   ds4
                   ds5
                   GHC.Types.True
                   ds7
                   ds8 }) -}
d22e54420f5c6fe9ee691b8dac2fcb2f
  mkRuleDaysOfWeek ::
    [(Data.Text.Internal.Text, GHC.Base.String)]
    -> [Duckling.Types.Rule]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (daysOfWeek :: [(Data.Text.Internal.Text, GHC.Base.String)]) ->
                 GHC.Base.build
                   @ Duckling.Types.Rule
                   (\ @ b1
                      (c1 :: Duckling.Types.Rule -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.List.foldr2
                      @ (Data.Text.Internal.Text, GHC.Base.String)
                      @ GHC.Types.Int
                      @ b1
                      (GHC.List.zipWithFB
                         @ Duckling.Types.Rule
                         @ b1
                         @ b1
                         @ (Data.Text.Internal.Text, GHC.Base.String)
                         @ GHC.Types.Int
                         c1
                         Duckling.Time.Helpers.mkRuleDaysOfWeek2)
                      n
                      daysOfWeek
                      Duckling.Time.Helpers.mkRuleDaysOfWeek1)) -}
e67cd649c51ed66c850129567fe4733a
  mkRuleDaysOfWeek1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 7#) -}
92a976d4f15df6ab755e3c6b677bc50d
  mkRuleDaysOfWeek2 ::
    (Data.Text.Internal.Text, GHC.Base.String)
    -> GHC.Types.Int -> Duckling.Types.Rule
  {- Arity: 2, Strictness: <S,1*U(U,U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Data.Text.Internal.Text, GHC.Base.String))
                   (w1 :: GHC.Types.Int)[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 let {
                   token1 :: GHC.Base.Maybe Duckling.Time.Types.Form
                   = GHC.Base.Just
                       @ Duckling.Time.Types.Form
                       Duckling.Time.Types.DayOfWeek
                 } in
                 let {
                   token2 :: GHC.Base.Maybe GHC.Types.Int
                   = GHC.Base.Just @ GHC.Types.Int w1
                 } in
                 let {
                   token3 :: Duckling.Time.Types.Predicate
                   = Duckling.Time.Types.TimeDatePredicate
                       (GHC.Base.Nothing @ GHC.Types.Int)
                       (GHC.Base.Nothing @ GHC.Types.Int)
                       (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                       (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                       token2
                       (GHC.Base.Nothing @ GHC.Types.Int)
                       (GHC.Base.Nothing @ GHC.Types.Int)
                       (GHC.Base.Nothing @ GHC.Types.Int)
                 } in
                 let {
                   token4 :: Duckling.Time.Types.TimeData {- Strictness: m -}
                   = Duckling.Time.Types.TimeData
                       token3
                       GHC.Types.False
                       Duckling.TimeGrain.Types.Day
                       GHC.Types.True
                       token1
                       (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                       GHC.Types.True
                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                       GHC.Types.False
                 } in
                 let {
                   token5 :: Duckling.Types.Token
                   = Duckling.Types.Token
                       @ Duckling.Time.Types.TimeData
                       Duckling.Time.Types.$fResolveTimeData
                       Duckling.Time.Types.$fEqTimeData
                       Duckling.Time.Types.$fHashableTimeData
                       Duckling.Time.Types.$fShowTimeData
                       Duckling.Time.Types.$fNFDataTimeData_$crnf
                         `cast`
                       (Sym (Control.DeepSeq.N:NFData[0]
                                 <Duckling.Time.Types.TimeData>_N))
                       Duckling.Types.$WTime
                       token4
                 } in
                 let {
                   token6 :: GHC.Base.Maybe Duckling.Types.Token
                   = GHC.Base.Just @ Duckling.Types.Token token5
                 } in
                 Duckling.Types.Rule
                   ww1
                   (GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww2)
                      (GHC.Types.[] @ Duckling.Types.PatternItem))
                   (\ (ds :: [Duckling.Types.Token]) -> token6) }) -}
28b05cbadc395d36273b101d3ce82ff0
  mkRuleHolidays ::
    [(Data.Text.Internal.Text, GHC.Base.String,
      Duckling.Time.Types.TimeData)]
    -> [Duckling.Types.Rule]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ (Data.Text.Internal.Text, GHC.Base.String,
                      Duckling.Time.Types.TimeData)
                   @ Duckling.Types.Rule
                   Duckling.Time.Helpers.mkRuleHolidays_go) -}
60d709ef18dab9f15d47dba3e169e7cd
  mkRuleHolidays' ::
    [(Data.Text.Internal.Text, GHC.Base.String,
      GHC.Base.Maybe Duckling.Time.Types.TimeData)]
    -> [Duckling.Types.Rule]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ (Data.Text.Internal.Text, GHC.Base.String,
                      GHC.Base.Maybe Duckling.Time.Types.TimeData)
                   @ Duckling.Types.Rule
                   Duckling.Time.Helpers.mkRuleHolidays'_go) -}
d24bdbb2566de764cfb906cd289ceb64
  mkRuleHolidays'_go ::
    (Data.Text.Internal.Text, GHC.Base.String,
     GHC.Base.Maybe Duckling.Time.Types.TimeData)
    -> Duckling.Types.Rule
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Text.Internal.Text, GHC.Base.String,
                          GHC.Base.Maybe Duckling.Time.Types.TimeData)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 let {
                   token1 :: GHC.Base.Maybe Duckling.Types.Token
                   = case ww3 of wild {
                       GHC.Base.Nothing -> GHC.Base.Nothing @ Duckling.Types.Token
                       GHC.Base.Just x
                       -> GHC.Base.Just
                            @ Duckling.Types.Token
                            (Duckling.Types.Token
                               @ Duckling.Time.Types.TimeData
                               Duckling.Time.Types.$fResolveTimeData
                               Duckling.Time.Types.$fEqTimeData
                               Duckling.Time.Types.$fHashableTimeData
                               Duckling.Time.Types.$fShowTimeData
                               Duckling.Time.Types.$fNFDataTimeData_$crnf
                                 `cast`
                               (Sym (Control.DeepSeq.N:NFData[0]
                                         <Duckling.Time.Types.TimeData>_N))
                               Duckling.Types.$WTime
                               (case x of wild1 { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                                Duckling.Time.Types.TimeData
                                  ds
                                  ds1
                                  ds2
                                  ds3
                                  ds4
                                  ds5
                                  GHC.Types.True
                                  (GHC.Base.Just @ Data.Text.Internal.Text ww1)
                                  ds8 })) }
                 } in
                 Duckling.Types.Rule
                   ww1
                   (GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww2)
                      (GHC.Types.[] @ Duckling.Types.PatternItem))
                   (\ (ds :: [Duckling.Types.Token]) -> token1) }) -}
d97e10156a1988efdbc8ae7d300bdecb
  mkRuleHolidays_go ::
    (Data.Text.Internal.Text, GHC.Base.String,
     Duckling.Time.Types.TimeData)
    -> Duckling.Types.Rule
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U(U,U,U,U,U,U,A,A,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Text.Internal.Text, GHC.Base.String,
                          Duckling.Time.Types.TimeData)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 let {
                   token1 :: Duckling.Time.Types.TimeData
                   = case ww3 of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     Duckling.Time.Types.TimeData
                       ds
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       GHC.Types.True
                       (GHC.Base.Just @ Data.Text.Internal.Text ww1)
                       ds8 }
                 } in
                 let {
                   token2 :: Duckling.Types.Token
                   = Duckling.Types.Token
                       @ Duckling.Time.Types.TimeData
                       Duckling.Time.Types.$fResolveTimeData
                       Duckling.Time.Types.$fEqTimeData
                       Duckling.Time.Types.$fHashableTimeData
                       Duckling.Time.Types.$fShowTimeData
                       Duckling.Time.Types.$fNFDataTimeData_$crnf
                         `cast`
                       (Sym (Control.DeepSeq.N:NFData[0]
                                 <Duckling.Time.Types.TimeData>_N))
                       Duckling.Types.$WTime
                       token1
                 } in
                 let {
                   token3 :: GHC.Base.Maybe Duckling.Types.Token
                   = GHC.Base.Just @ Duckling.Types.Token token2
                 } in
                 Duckling.Types.Rule
                   ww1
                   (GHC.Types.:
                      @ Duckling.Types.PatternItem
                      (Duckling.Types.regex ww2)
                      (GHC.Types.[] @ Duckling.Types.PatternItem))
                   (\ (ds :: [Duckling.Types.Token]) -> token3) }) -}
72b21b152dbe09b1de817033527316b4
  mkRuleInstants ::
    [(Data.Text.Internal.Text, Duckling.TimeGrain.Types.Grain,
      GHC.Types.Int, GHC.Base.String)]
    -> [Duckling.Types.Rule]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ (Data.Text.Internal.Text, Duckling.TimeGrain.Types.Grain,
                      GHC.Types.Int, GHC.Base.String)
                   @ Duckling.Types.Rule
                   Duckling.Time.Helpers.mkRuleInstants_go) -}
2695420e2930a1edd7448285a8ba21f3
  mkRuleInstants_go ::
    (Data.Text.Internal.Text, Duckling.TimeGrain.Types.Grain,
     GHC.Types.Int, GHC.Base.String)
    -> Duckling.Types.Rule
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U),U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Text.Internal.Text, Duckling.TimeGrain.Types.Grain,
                          GHC.Types.Int, GHC.Base.String)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case Duckling.Time.Helpers.$wgo
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,#) ww6 ww7 ww8 ->
                 Duckling.Types.Rule ww6 ww7 ww8 } }) -}
ee5307e2249b9f98490b8706f02ed8eb
  mkRuleMonths ::
    [(Data.Text.Internal.Text, GHC.Base.String)]
    -> [Duckling.Types.Rule]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [(Data.Text.Internal.Text, GHC.Base.String)]) ->
                 GHC.Base.build
                   @ Duckling.Types.Rule
                   (\ @ b1
                      (c1 :: Duckling.Types.Rule -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Data.Text.Internal.Text, GHC.Base.String)
                      @ ([GHC.Types.Int] -> b1)
                      (GHC.Base.mapFB
                         @ (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
                         @ ([GHC.Types.Int] -> b1)
                         @ (Data.Text.Internal.Text, GHC.Base.String)
                         (GHC.List.foldr2_left
                            @ (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
                            @ GHC.Types.Int
                            @ b1
                            @ b1
                            (GHC.List.zipWithFB
                               @ Duckling.Types.Rule
                               @ b1
                               @ b1
                               @ (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
                               @ GHC.Types.Int
                               c1
                               Duckling.Time.Helpers.mkRuleMonths3)
                            n)
                         Duckling.Time.Helpers.mkRuleMonths2)
                      (\ (ds :: [GHC.Types.Int]) -> n)
                      x
                      Duckling.Time.Helpers.mkRuleMonths1)) -}
98bfd93c1ef06ea6e68c6f2584741d5c
  mkRuleMonths1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 12#) -}
338396f6c088abbb365185a2a5e6ec90
  mkRuleMonths2 ::
    (Data.Text.Internal.Text, GHC.Base.String)
    -> (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: (Data.Text.Internal.Text, GHC.Base.String)) ->
                 (case p of wild { (,) x ds -> x },
                  case p of wild { (,) ds y -> y }, GHC.Types.False)) -}
5c9a643ef3df459ec5b404b0e4804d91
  mkRuleMonths3 ::
    (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
    -> GHC.Types.Int -> Duckling.Types.Rule
  {- Arity: 2, Strictness: <S,1*U(U,U,1*U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Data.Text.Internal.Text, GHC.Base.String,
                          GHC.Types.Bool))
                   (w1 :: GHC.Types.Int)[OneShot] ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case Duckling.Time.Helpers.$wlvl
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Duckling.Types.Rule ww5 ww6 ww7 } }) -}
cefcc9b597fb8a4827028f3360de1595
  mkRuleMonthsWithLatent ::
    [(Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)]
    -> [Duckling.Types.Rule]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (months :: [(Data.Text.Internal.Text, GHC.Base.String,
                                GHC.Types.Bool)]) ->
                 GHC.Base.build
                   @ Duckling.Types.Rule
                   (\ @ b1
                      (c1 :: Duckling.Types.Rule -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.List.foldr2
                      @ (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
                      @ GHC.Types.Int
                      @ b1
                      (GHC.List.zipWithFB
                         @ Duckling.Types.Rule
                         @ b1
                         @ b1
                         @ (Data.Text.Internal.Text, GHC.Base.String, GHC.Types.Bool)
                         @ GHC.Types.Int
                         c1
                         Duckling.Time.Helpers.mkRuleMonths3)
                      n
                      months
                      Duckling.Time.Helpers.mkRuleMonths1)) -}
be7cef4923a6602fcf75e4f327f18fbd
  mkRuleSeasons ::
    [(Data.Text.Internal.Text, GHC.Base.String,
      Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)]
    -> [Duckling.Types.Rule]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ (Data.Text.Internal.Text, GHC.Base.String,
                      Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)
                   @ Duckling.Types.Rule
                   Duckling.Time.Helpers.mkRuleSeasons_go) -}
8907b1720121ab38f0b5f62a4be5d5f6
  mkRuleSeasons_go ::
    (Data.Text.Internal.Text, GHC.Base.String,
     Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)
    -> Duckling.Types.Rule
  {- Arity: 1,
     Strictness: <S,1*U(U,U,1*U(1*U,A,U,A,A,A,A,A,A),1*U(1*U,A,U,A,A,A,A,A,A))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.Text.Internal.Text, GHC.Base.String,
                          Duckling.Time.Types.TimeData, Duckling.Time.Types.TimeData)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 case Duckling.Time.Helpers.$wgo1
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,,#) ww6 ww7 ww8 ->
                 Duckling.Types.Rule ww6 ww7 ww8 } }) -}
e612601eb62465d574e425e34f2ee246
  month :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkMonthPredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Month
                   GHC.Types.False
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      (Duckling.Time.Types.Month n))
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
92f211380ff1d4ea25ed30ce0c993461
  monthDay ::
    GHC.Types.Int -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (m :: GHC.Types.Int) (d :: GHC.Types.Int) ->
                 Duckling.Time.Helpers.intersect'
                   (Duckling.Time.Helpers.month m,
                    Duckling.Time.Helpers.dayOfMonth d)) -}
0b0dd40e58576673da9cb5fa089792a9
  notLatent ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,A,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   GHC.Types.False
                   ds2
                   ds3
                   ds4
                   ds5
                   ds6
                   ds7
                   ds8 }) -}
29027e0560ae3f6aa24d31605dbe0b2d
  now :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Helpers.durationAgo1
                   GHC.Types.False
                   Duckling.TimeGrain.Types.NoGrain
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
2f2c5f8482e1cfc8c2ab96985ff32c59
  nthDOWOfMonth ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 3, Strictness: <L,1*U(U)><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (case Duckling.Time.Helpers.$wtakeNthAfter
                           (case w of wild { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.-# x 1#) })
                           GHC.Types.True
                           (Duckling.Time.Types.mkDayOfTheWeekPredicate w1)
                           (Duckling.Time.Types.mkMonthPredicate w2) of ww { Unit# ww1 ->
                    Duckling.Time.Types.SeriesPredicate ww1 })
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
42b1b9e2193ddb75e4a89f0264066b05
  partOfDay ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,A,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   ds1
                   ds2
                   ds3
                   (GHC.Base.Just
                      @ Duckling.Time.Types.Form
                      Duckling.Time.Types.PartOfDay)
                   ds5
                   ds6
                   ds7
                   ds8 }) -}
bc78c0612156ea6d708c7cdee961b02b
  predEveryNDaysFrom ::
    GHC.Types.Int
    -> (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe Duckling.Time.Types.TimeData
  {- Arity: 2, Strictness: <L,U(U)><S(LS(S)L),1*U(U,1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,,) ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Types.I# ww5 ->
                 Duckling.Time.Helpers.$wpredEveryNDaysFrom w ww1 ww5 ww3 } }) -}
736feec6d864b2f4cd3a1304440c08cd
  predEveryNDaysFrom1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
39b3ff8dc65f6a62af58d0c72c5dc571
  predLastOf ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2,
     Strictness: <S,1*U(U,A,U,A,A,A,A,A,A)><L,1*U(1*U,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData)
                   (base :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeLastOf
                      ds1
                      (Duckling.Time.Types.timePred base))
                   GHC.Types.False
                   ds3
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False }) -}
7b060806ad82a187fcca9c5dc2849df5
  predNth ::
    GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
  {- Arity: 3, Strictness: <L,U(U)><L,U><S,1*U(U,A,U,A,A,A,A,U,A)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (n :: GHC.Types.Int)
                   (notImmediate :: GHC.Types.Bool)
                   (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeNth n notImmediate ds1)
                   GHC.Types.False
                   ds3
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   ds8
                   GHC.Types.False }) -}
11319397a33c94ae35f91c6e18c2a9da
  predNthAfter ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
  {- Arity: 3,
     Strictness: <L,U(U)><S,1*U(U,A,U,A,A,A,A,A,A)><L,1*U(1*U,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (n :: GHC.Types.Int)
                   (ds :: Duckling.Time.Types.TimeData)
                   (base :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Helpers.takeNthAfter
                      n
                      GHC.Types.True
                      ds1
                      (Duckling.Time.Types.timePred base))
                   GHC.Types.False
                   ds3
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False }) -}
1cf123fca4f2b69f86f86f166ec90243
  predNthClosest ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData
  {- Arity: 3,
     Strictness: <L,1*U(U)><S,1*U(U,A,U,A,A,A,A,U,A)><L,1*U(1*U,A,A,A,A,A,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeData)
                   (w2 :: Duckling.Time.Types.TimeData) ->
                 case w1 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case Duckling.Time.Helpers.$wpredNthClosest
                        w
                        ww1
                        ww3
                        ww8
                        w2 of ww10 { (#,,,,,,,,#) ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Types.TimeData
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19 } }) -}
c1bb30062cd8294c64066300c50e070a
  sameGrain ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)><S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData)
                   (ds1 :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                 case ds1 of wild1 { Duckling.Time.Types.TimeData ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ->
                 Duckling.TimeGrain.Types.$fEqGrain_$c== ds4 ds13 } }) -}
f4ffcc5c6a9d0f5d7f37955c9083c582
  season :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Types.seasonPredicate
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
3b2f505b2e6d157fbbc0a9cd5881fa82
  second :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkSecondPredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Second
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
728ef2647909be66193abb70e5a9b7a1
  shiftDuration ::
    Duckling.Time.Types.Predicate
    -> Duckling.Duration.Types.DurationData
    -> Duckling.Time.Types.Predicate
  {- Arity: 2, Strictness: <L,U><S,1*U(U(U),U)>m1, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Predicate)
                   (w1 :: Duckling.Duration.Types.DurationData) ->
                 case w1 of ww { Duckling.Duration.Types.DurationData ww1 ww2 ->
                 case Duckling.Time.Helpers.$wshiftDuration
                        w
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Duckling.Time.Types.SeriesPredicate ww4 } }) -}
0341c317203e08f3f8b42bd895a0a0d1
  takeLastOf ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate -> Duckling.Time.Types.Predicate
  {- Arity: 2, Strictness: <L,U><L,U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Predicate)
                   (w1 :: Duckling.Time.Types.Predicate) ->
                 case Duckling.Time.Helpers.$wtakeLastOf w w1 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
83980c8d43a92f20e88771a7242f64ff
  takeNth ::
    GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: Duckling.Time.Types.Predicate) ->
                 case Duckling.Time.Helpers.$wtakeNth w w1 w2 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
49ace62c2be224333dc5bf4471415dfc
  takeNthAfter ::
    GHC.Types.Int
    -> GHC.Types.Bool
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: Duckling.Time.Types.Predicate)
                   (w3 :: Duckling.Time.Types.Predicate) ->
                 case Duckling.Time.Helpers.$wtakeNthAfter
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
8b78c15e7a461b16b050a4ad791f8631
  timeComputed ::
    [Duckling.Time.Types.TimeObject] -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Duckling.Time.Types.TimeObject]) ->
                 case Duckling.Time.Helpers.$wtimeComputed w of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
5fae4ba3fba594ced078229d89cb6a35
  timeCycle ::
    Duckling.TimeGrain.Types.Grain -> Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <L,U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.TimeGrain.Types.Grain) ->
                 Duckling.Time.Types.SeriesPredicate
                   (\ (t :: Duckling.Time.Types.TimeObject)
                      (ds :: Duckling.Time.Types.TimeContext) ->
                    case Duckling.Time.Types.$wtimeSequence
                           w
                           Duckling.Time.Helpers.cycleLastOf1
                           (Duckling.Time.Types.timeRound t w) of ww { (#,#) ww1 ww2 ->
                    (ww1, ww2) })
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
27b782e2c8d4311bcff4100bc017b8ec
  timeOfDayAMPM ::
    GHC.Types.Bool
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U><S(LLSLLLLLL),1*U(1*U,A,1*U,A,A,U,A,U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Bool) (w1 :: Duckling.Time.Types.TimeData) ->
                 case w1 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<#
                           (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww3)
                           3#) of wild {
                   GHC.Types.False
                   -> Duckling.Time.Types.TimeData
                        (case w of wild1 {
                           GHC.Types.False
                           -> Duckling.Time.Types.mkIntersectPredicate
                                Duckling.Time.Helpers.timeOfDayAMPM3
                                ww1
                           GHC.Types.True
                           -> Duckling.Time.Types.mkIntersectPredicate
                                Duckling.Time.Helpers.timeOfDayAMPM1
                                ww1 })
                        GHC.Types.False
                        Duckling.TimeGrain.Types.Hour
                        GHC.Types.False
                        (GHC.Base.Just
                           @ Duckling.Time.Types.Form
                           (Duckling.Time.Types.TimeOfDay
                              (GHC.Base.Nothing @ GHC.Types.Int)
                              GHC.Types.False))
                        ww6
                        GHC.Types.False
                        ww8
                        GHC.Types.False
                   GHC.Types.True
                   -> Duckling.Time.Types.TimeData
                        (Duckling.Time.Types.mkIntersectPredicate
                           ww1
                           (case w of wild1 {
                              GHC.Types.False -> Duckling.Time.Helpers.timeOfDayAMPM3
                              GHC.Types.True -> Duckling.Time.Helpers.timeOfDayAMPM1 }))
                        GHC.Types.False
                        ww3
                        GHC.Types.False
                        (GHC.Base.Just
                           @ Duckling.Time.Types.Form
                           (Duckling.Time.Types.TimeOfDay
                              (GHC.Base.Nothing @ GHC.Types.Int)
                              GHC.Types.False))
                        ww6
                        GHC.Types.False
                        ww8
                        GHC.Types.False } }) -}
a7299ba2eac687af9c2417cbdb540ee4
  timeOfDayAMPM1 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   Duckling.Time.Helpers.timeOfDayAMPM2
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
3d05ef1371effbeb6f271f928aee1354
  timeOfDayAMPM2 :: GHC.Base.Maybe Duckling.Time.Types.AMPM
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.AMPM
                   Duckling.Time.Types.AM) -}
8c0e08b2273e6d679d7a5c9de175ee1a
  timeOfDayAMPM3 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   Duckling.Time.Helpers.timeOfDayAMPM4
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
35814f33902a1bbc0f9a615b187152e3
  timeOfDayAMPM4 :: GHC.Base.Maybe Duckling.Time.Types.AMPM
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Duckling.Time.Types.AMPM
                   Duckling.Time.Types.PM) -}
bc26995abab9870874087d696b17345b
  toTimeObjectM ::
    (GHC.Integer.Type.Integer, GHC.Types.Int, GHC.Types.Int)
    -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
  {- Arity: 1, Strictness: <S(LS(S)L),1*U(U,1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Integer.Type.Integer, GHC.Types.Int,
                          GHC.Types.Int)) ->
                 case w of ww { (,,) ww1 ww2 ww3 ->
                 case ww2 of ww4 { GHC.Types.I# ww5 ->
                 Duckling.Time.Helpers.$wtoTimeObjectM ww1 ww5 ww3 } }) -}
5e5488904e94aad66c6a77decd709343
  toTimeObjectM1 ::
    Data.Time.Calendar.Days.Day
    -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Time.Calendar.Days.Day)[OneShot] ->
                 GHC.Base.Just
                   @ Duckling.Time.Types.TimeObject
                   (Duckling.Time.Types.TimeObject
                      (Data.Time.Clock.UTC.UTCTime
                         w
                         Duckling.Time.Helpers.predEveryNDaysFrom1
                           `cast`
                         (Trans
                              (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                              (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))))
                      Duckling.TimeGrain.Types.Day
                      (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime))) -}
cf41920e1910cd77da8687ae8f3f2610
  today :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Helpers.today1
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
76800c8c2d9f92edaa00a28fa51692fc
  today1 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.$wtakeNth
                        Duckling.Time.Helpers.durationAgo_n
                        GHC.Types.False
                        Duckling.Time.Helpers.longWEBefore4 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
f22d8bf2c9795db5f03e801f54c190ba
  tt ::
    Duckling.Time.Types.TimeData -> GHC.Base.Maybe Duckling.Types.Token
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.TimeData) ->
                 GHC.Base.Just
                   @ Duckling.Types.Token
                   (Duckling.Types.Token
                      @ Duckling.Time.Types.TimeData
                      Duckling.Time.Types.$fResolveTimeData
                      Duckling.Time.Types.$fEqTimeData
                      Duckling.Time.Types.$fHashableTimeData
                      Duckling.Time.Types.$fShowTimeData
                      Duckling.Time.Types.$fNFDataTimeData_$crnf
                        `cast`
                      (Sym (Control.DeepSeq.N:NFData[0]
                                <Duckling.Time.Types.TimeData>_N))
                      Duckling.Types.$WTime
                      x)) -}
d0f780bfe32dcb29b09f507ad720e006
  weekday :: Duckling.Time.Types.TimeData
  {- Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Types.weekdayPredicate
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Day
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
796810aafbd77d769a022e591d1e6366
  weekend :: Duckling.Time.Types.TimeData
  {- Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Helpers.weekend1
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
b7bf06ca559a8dfac2b587c53338172b
  weekend1 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.weekend5 of wild {
                   DEFAULT
                   -> case Duckling.Time.Helpers.weekend2 of wild1 {
                        DEFAULT
                        -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                  wild of wild2 {
                             GHC.Types.False
                             -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                       wild1 of wild3 {
                                  GHC.Types.False
                                  -> Duckling.Time.Types.TimeIntervalsPredicate
                                       Duckling.Time.Types.Open
                                       wild
                                       wild1
                                  GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                             GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                        Duckling.Time.Types.EmptyPredicate
                        -> Duckling.Time.Types.EmptyPredicate }
                   Duckling.Time.Types.EmptyPredicate
                   -> Duckling.Time.Types.EmptyPredicate }) -}
325cdc5c6b90d09c2f244dafda015227
  weekend2 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.mkIntersectPredicate
                   Duckling.Time.Helpers.longWEBefore1
                   Duckling.Time.Helpers.weekend3) -}
3e285e96e2a280a7aa70d2f5b2e84e33
  weekend3 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   Duckling.Time.Helpers.weekend4
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
6c41388e4f5b7004ad557e1045498d0c
  weekend4 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Helpers.cycleLastOf1) -}
aaaa14885434e41ff8e30607f44978dd
  weekend5 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.mkIntersectPredicate
                   Duckling.Time.Helpers.longWEBefore7
                   Duckling.Time.Helpers.weekend6) -}
b6d6421db76ab07dcbad842c7d274829
  weekend6 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   Duckling.Time.Helpers.weekend7
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
4f7c70cec987b5cd1aed69f264563970
  weekend7 :: GHC.Base.Maybe GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ GHC.Types.Int
                   Duckling.Time.Helpers.weekend8) -}
7276ad8b88f10ac914094e79b36def76
  weekend8 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
dc43bd016fa4ecae354d783901f5560e
  withDirection ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U><S,1*U(U,U,U,U,U,A,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (dir :: Duckling.Time.Types.IntervalDirection)
                   (td :: Duckling.Time.Types.TimeData) ->
                 case td of wild { Duckling.Time.Types.TimeData ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 Duckling.Time.Types.TimeData
                   ds
                   ds1
                   ds2
                   ds3
                   ds4
                   (GHC.Base.Just @ Duckling.Time.Types.IntervalDirection dir)
                   ds6
                   ds7
                   ds8 }) -}
df3c81d2dc4d892b938d6dcf4d898580
  workweek :: Duckling.Time.Types.TimeData
  {- Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Helpers.workweek1
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Hour
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
e8d4eb98d77ea03adcc9d31c15873529
  workweek1 :: Duckling.Time.Types.Predicate
  {- Unfolding: (case Duckling.Time.Helpers.workweek2 of wild {
                   DEFAULT
                   -> case Duckling.Time.Helpers.weekend5 of wild1 {
                        DEFAULT
                        -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                  wild of wild2 {
                             GHC.Types.False
                             -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                       wild1 of wild3 {
                                  GHC.Types.False
                                  -> Duckling.Time.Types.TimeIntervalsPredicate
                                       Duckling.Time.Types.Open
                                       wild
                                       wild1
                                  GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                             GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                        Duckling.Time.Types.EmptyPredicate
                        -> Duckling.Time.Types.EmptyPredicate }
                   Duckling.Time.Types.EmptyPredicate
                   -> Duckling.Time.Types.EmptyPredicate }) -}
24bd17abf0565e14a264f15926b223b5
  workweek2 :: Duckling.Time.Types.Predicate
  {- Unfolding: (Duckling.Time.Types.mkIntersectPredicate
                   Duckling.Time.Helpers.workweek3
                   Duckling.Time.Helpers.weekend3) -}
be9340beb8eabc65d94416043edbe695
  workweek3 :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Duckling.Time.Helpers.workweek4
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
c8cf8bcda00b7d700ac16dd61d53db2d
  workweek4 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   Duckling.Time.Helpers.workweek5) -}
9127789dcd2b6172f6f428ed971ef740
  workweek5 :: (GHC.Types.Bool, GHC.Types.Int)
  {- HasNoCafRefs,
     Unfolding: ((GHC.Types.False, Duckling.Time.Helpers.workweek_n)) -}
23d478171bc04d5100361e52c3c1f1c1
  workweek_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
ecf458a3089b8d8accd3eb4cccd4dc9e
  year :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.TimeDatePredicate
                      (GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                      (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                      (GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Base.Nothing @ GHC.Types.Int)
                      (GHC.Base.Just
                         @ GHC.Types.Int
                         (case w of wild { GHC.Types.I# x ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=# x 99#) of wild1 {
                            GHC.Types.False -> wild
                            GHC.Types.True
                            -> case GHC.Classes.modInt#
                                      (GHC.Prim.+# x 50#)
                                      100# of ww2 { DEFAULT ->
                               GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ww2 2000#) 50#) } } })))
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
e7e524b95c731d236124786d903ca0c2
  yearADBC :: GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeData
                   (Duckling.Time.Types.mkYearPredicate n)
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Year
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
565065b6f15f3bf2f9021c5c77ed68ba
  yearMonth ::
    GHC.Types.Int -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (y :: GHC.Types.Int) (m :: GHC.Types.Int) ->
                 Duckling.Time.Helpers.intersect'
                   (Duckling.Time.Helpers.year y, Duckling.Time.Helpers.month m)) -}
02611c54d2ccb895b165f2c62c3bd9d1
  yearMonthDay ::
    GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> Duckling.Time.Types.TimeData
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (y :: GHC.Types.Int)
                   (m :: GHC.Types.Int)
                   (d :: GHC.Types.Int) ->
                 Duckling.Time.Helpers.intersect'
                   (Duckling.Time.Helpers.yearMonth y m,
                    Duckling.Time.Helpers.dayOfMonth d)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

