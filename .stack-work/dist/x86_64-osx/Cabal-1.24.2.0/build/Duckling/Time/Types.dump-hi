
==================== FINAL INTERFACE ====================
2019-01-30 07:24:26.053696 UTC

interface duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Time.Types [family instance module] 8002
  interface hash: f6c03cf38a3490e3740037a877760c90
  ABI hash: d4fac4be942a0a4255ab078596447429
  export-list hash: 3606974139e9e7e95f5dfe8696d4fed1
  orphan hash: e0632d5d3d8292e79b6cd57ea8dc31af
  flag hash: e4be852f6591f1b150ebd0ba566455bb
  sig of: Nothing
  used TH splices: True
  where
exports:
  Duckling.Time.Types.containsTimeIntervalsPredicate
  Duckling.Time.Types.diffStartTime
  Duckling.Time.Types.emptyTimeDatePredicate
  Duckling.Time.Types.instantValue
  Duckling.Time.Types.isEmptyPredicate
  Duckling.Time.Types.mkAMPMPredicate
  Duckling.Time.Types.mkDayOfTheMonthPredicate
  Duckling.Time.Types.mkDayOfTheWeekPredicate
  Duckling.Time.Types.mkEmptyPredicate
  Duckling.Time.Types.mkHourPredicate
  Duckling.Time.Types.mkIntersectPredicate
  Duckling.Time.Types.mkMinutePredicate
  Duckling.Time.Types.mkMonthPredicate
  Duckling.Time.Types.mkReplaceIntersectPredicate
  Duckling.Time.Types.mkSecondPredicate
  Duckling.Time.Types.mkSeriesPredicate
  Duckling.Time.Types.mkTimeIntervalsPredicate
  Duckling.Time.Types.mkYearPredicate
  Duckling.Time.Types.nextSeason
  Duckling.Time.Types.openInterval
  Duckling.Time.Types.pad
  Duckling.Time.Types.periodicPredicate
  Duckling.Time.Types.prevSeason
  Duckling.Time.Types.runAMPMPredicate
  Duckling.Time.Types.runCompose
  Duckling.Time.Types.runComposeWithReplacement
  Duckling.Time.Types.runDayOfTheMonthPredicate
  Duckling.Time.Types.runDayOfTheWeekPredicate
  Duckling.Time.Types.runHourPredicate
  Duckling.Time.Types.runIntersectPredicate
  Duckling.Time.Types.runMinutePredicate
  Duckling.Time.Types.runMonthPredicate
  Duckling.Time.Types.runPredicate
  Duckling.Time.Types.runReplaceIntersectPredicate
  Duckling.Time.Types.runSecondPredicate
  Duckling.Time.Types.runTimeIntervalsPredicate
  Duckling.Time.Types.runYearPredicate
  Duckling.Time.Types.safeMax
  Duckling.Time.Types.safeMaxInterval
  Duckling.Time.Types.seasonEnd
  Duckling.Time.Types.seasonOf
  Duckling.Time.Types.seasonPredicate
  Duckling.Time.Types.seasonStart
  Duckling.Time.Types.timeBefore
  Duckling.Time.Types.timeEnd
  Duckling.Time.Types.timeIntersect
  Duckling.Time.Types.timeInterval
  Duckling.Time.Types.timePlus
  Duckling.Time.Types.timePlusEnd
  Duckling.Time.Types.timeRound
  Duckling.Time.Types.timeSeqMap
  Duckling.Time.Types.timeSequence
  Duckling.Time.Types.timeStartingAtTheEndOf
  Duckling.Time.Types.timeStartsBeforeTheEndOf
  Duckling.Time.Types.timeValue
  Duckling.Time.Types.timedata'
  Duckling.Time.Types.timezoneOffset
  Duckling.Time.Types.toMidnight
  Duckling.Time.Types.toRFC3339
  Duckling.Time.Types.weekdayPredicate
  Duckling.Time.Types.AMPM{Duckling.Time.Types.AM Duckling.Time.Types.PM}
  Duckling.Time.Types.Form{Duckling.Time.Types.DayOfWeek Duckling.Time.Types.Month Duckling.Time.Types.PartOfDay Duckling.Time.Types.TimeOfDay hours is12H month}
  Duckling.Time.Types.InstantValue{Duckling.Time.Types.InstantValue vGrain vValue}
  Duckling.Time.Types.IntervalDirection{Duckling.Time.Types.After Duckling.Time.Types.Before}
  Duckling.Time.Types.NoShow{Duckling.Time.Types.NoShow}
  Duckling.Time.Types.Predicate{Duckling.Time.Types.EmptyPredicate Duckling.Time.Types.IntersectPredicate Duckling.Time.Types.ReplaceIntersectPredicate Duckling.Time.Types.SeriesPredicate Duckling.Time.Types.TimeDatePredicate Duckling.Time.Types.TimeIntervalsPredicate tdAMPM tdDayOfTheMonth tdDayOfTheWeek tdHour tdMinute tdMonth tdSecond tdYear}
  Duckling.Time.Types.Season{Duckling.Time.Types.Season seasonName startYear}
  Duckling.Time.Types.SeasonName{Duckling.Time.Types.Fall Duckling.Time.Types.Spring Duckling.Time.Types.Summer Duckling.Time.Types.Winter}
  Duckling.Time.Types.SeriesPredicate
  Duckling.Time.Types.SingleTimeValue{Duckling.Time.Types.IntervalValue Duckling.Time.Types.OpenIntervalValue Duckling.Time.Types.SimpleValue}
  Duckling.Time.Types.TimeContext{Duckling.Time.Types.TimeContext maxTime minTime refTime tzSeries}
  Duckling.Time.Types.TimeData{Duckling.Time.Types.TimeData direction form hasTimezone holiday latent notImmediate okForThisNext timeGrain timePred}
  Duckling.Time.Types.TimeIntervalType{Duckling.Time.Types.Closed Duckling.Time.Types.Open}
  Duckling.Time.Types.TimeObject{Duckling.Time.Types.TimeObject end grain start}
  Duckling.Time.Types.TimeValue{Duckling.Time.Types.TimeValue}
module dependencies: Duckling.Locale Duckling.Region
                     Duckling.Resolve Duckling.TimeGrain.Types
package dependencies: aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL
                      generic-deriving-1.11.2@generic-deriving-1.11.2-FTRmVS5RM6G7R2MgyiZHgW
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI
                      th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Applicative
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Concurrent
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Exception
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Control.Monad.ST
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Array
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Bool
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.ByteString
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Char
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Complex
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Data
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Dynamic
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Either
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Fixed
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Floating
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Compose
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Identity
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Product
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Functor.Sum
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Integral
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.List.NonEmpty
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Maybe
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Monoid
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ord
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Proxy
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Ratio
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Semigroup
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Text
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Tuple
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Coercion
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Type.Equality
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Typeable
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Version
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Data.Void
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.C.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Foreign.Ptr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Event
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Fingerprint
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Generics
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.RTS.Flags
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stack
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.StaticPtr
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.Stats
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.GHC.TypeLits
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Numeric.Natural
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Exit
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.IO
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.System.Posix.Types
         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JWI9Gh7wB0MC9Q5wqv5aoI:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Locale
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.Region
                         duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1:Duckling.TimeGrain.Types
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.FromStringTextShow
                         text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Options
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson 1af00541e969ad203c27ee12864de00d
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.Internal 4c7adfaf9946e7eb59b1a47b47e68246
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-7ssY6fy1GxZGXxTPcOtf2k:Data.Aeson.Types.ToJSON d6ae344f2a743c9940980d0869569ad4
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 0a99763cf6016b16bbf55422778a79b2
import  -/  Duckling.Resolve 15ce2eadafd5cc42f057e1d0f9191938
  exports: 6e20ad884e276a7b8b73219b25eea656
  DucklingTime e17339c460fde239380db26d55d8b70c
  Options a14b7dbb5f8e04ac7d0ee45b74b5adbb
  Resolve 857149e63f1fbb61ae9c206e0802b0fa
  ResolvedValue d3c9ab28ab95ed33280b467fbe72cd58
  fromUTC 75cf257bdc71508f7f392fa74f4e9244
  referenceTime 1de216c3b60f68eb7958305130c4a454
  withLatent ab3c85f032ac59bd92f86f0c919d2256
import  -/  Duckling.TimeGrain.Types df1446d581d19c78205a53c0773a1394
  exports: 1edf6532c5926aae175720f5ee1798eb
  Day 8970ba78a9767ba3b8a7c6ba9b51a195
  Grain 39f514c392611535b9c35c2b5fb6eab3
  Hour f413bd39f6a3df4d024809dd397238f5
  Minute 57c14cb5d1c88e1e2781deaf29a43d44
  Month cdb07e4928b6255bf5c5d09382398536
  Quarter 7eaf8a417c8d658177e7622833720000
  Second 3d7b52f366224c0a3363b787e55a7c7b
  Week 24e58e057a627ca1d36056a6f162829e
  Year 6f596c2b14ab7e9f5cbae1f027059b30
  add fb623a39946e77d73a6b19e5ab745d64
import  -/  extra-1.5.3@extra-1.5.3-DgI7Z6Dwkeh8JGXDlNC5BL:Data.Tuple.Extra 8c15ace6bd7b755c28913d46b6000e0a
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 0e86f32bd46d4c618b1e312455011c77
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class bc4f00f60e55accb5753c8e0ce3cde5f
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text f7d3d648ffeef1043fe2e522e7e66c1b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow aa23f2706bb607d0c81ed1e25d7f545f
import  -/  text-show-3.6@text-show-3.6-60Dmy5IB2MTJMsJHXN7mDI:TextShow.Classes dedda7fb5ea7a6680ca797592cc143d8
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time f3fc075e226487ba9b287f2bf43f4b8f
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Days 78ed9a2705f389e7f436788cb8a1127d
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian 6bfe6a0d86b130087d12d0228a47fb8a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.WeekDate 1c6f359ca8442bede68d944be01def43
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTC 042a9b8f7ae05c2937d1ff59fdfe0852
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.UTCDiff 4276657682db70c3ec390c75f5d4bf04
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime 7c0577d8171eae7ec83c841433ddc85a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.TimeOfDay 72c150f669114e7e5950fd45988d923a
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.TimeZone 40efa2c566bfef99e63d59b8f6d567cf
import  -/  timezone-series-0.1.8@timezone-series-0.1.8-4K4l0A0wjZPUt7r2oV8PT:Data.Time.LocalTime.TimeZone.Series 2b73fd98294ae95b5699ae442ea94d5c
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 05331f9dbdce4e8225c18ce1a8ba2f88
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict 74fd7b14a4a2f9eaf95c7dc9a18e61b1
Named target runPredicate annotated by 1311 of type [Char]
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName :: GHC.Enum.Enum Duckling.Time.Types.SeasonName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SeasonName
                  Duckling.Time.Types.$fEnumSeasonName_$csucc
                  Duckling.Time.Types.$fEnumSeasonName_$cpred
                  Duckling.Time.Types.$fEnumSeasonName_$ctoEnum
                  Duckling.Time.Types.$fEnumSeasonName_$cfromEnum
                  Duckling.Time.Types.$fEnumSeasonName_$cenumFrom
                  Duckling.Time.Types.$fEnumSeasonName_$cenumFromThen
                  Duckling.Time.Types.$fEnumSeasonName_$cenumFromTo
                  Duckling.Time.Types.$fEnumSeasonName_$cenumFromThenTo -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName1 :: [Duckling.Time.Types.SeasonName]
  {- Unfolding: (Duckling.Time.Types.$fEnumSeasonName_go4 3#) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName2 :: [Duckling.Time.Types.SeasonName]
  {- Unfolding: (Duckling.Time.Types.$fEnumSeasonName_go5 2#) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName3 :: [Duckling.Time.Types.SeasonName]
  {- Unfolding: (Duckling.Time.Types.$fEnumSeasonName_go6 1#) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName4 :: [Duckling.Time.Types.SeasonName]
  {- Unfolding: (Duckling.Time.Types.$fEnumSeasonName_go7 0#) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName5 ::
    GHC.Prim.Int# -> Duckling.Time.Types.SeasonName
  {- Arity: 1, Strictness: <L,U>x -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName6 :: Duckling.Time.Types.SeasonName
  {- Strictness: x -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName7 :: Duckling.Time.Types.SeasonName
  {- Strictness: x -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cenumFrom ::
    Duckling.Time.Types.SeasonName -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring -> Duckling.Time.Types.$fEnumSeasonName4
                   Duckling.Time.Types.Summer -> Duckling.Time.Types.$fEnumSeasonName3
                   Duckling.Time.Types.Fall -> Duckling.Time.Types.$fEnumSeasonName2
                   Duckling.Time.Types.Winter
                   -> Duckling.Time.Types.$fEnumSeasonName1 }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cenumFromThen ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName
    -> [Duckling.Time.Types.SeasonName]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 let {
                   $j1 :: GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j2 :: GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j3 :: GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [Duckling.Time.Types.SeasonName]
                                    Duckling.Time.Types.$fEnumSeasonName_c
                                    (GHC.Types.[] @ Duckling.Time.Types.SeasonName)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [Duckling.Time.Types.SeasonName]
                                    Duckling.Time.Types.$fEnumSeasonName_c
                                    (GHC.Types.[] @ Duckling.Time.Types.SeasonName)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j3 3# GHC.Types.True -> $j3 0# }
                     } in
                     case b of wild {
                       Duckling.Time.Types.Spring -> $j2 0#
                       Duckling.Time.Types.Summer -> $j2 1#
                       Duckling.Time.Types.Fall -> $j2 2#
                       Duckling.Time.Types.Winter -> $j2 3# }
                 } in
                 case a of wild {
                   Duckling.Time.Types.Spring -> $j1 0#
                   Duckling.Time.Types.Summer -> $j1 1#
                   Duckling.Time.Types.Fall -> $j1 2#
                   Duckling.Time.Types.Winter -> $j1 3# }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cenumFromThenTo ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName
    -> [Duckling.Time.Types.SeasonName]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cenumFromTo ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName
    -> [Duckling.Time.Types.SeasonName]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Duckling.Time.Types.SeasonName)
                   (y :: Duckling.Time.Types.SeasonName) ->
                 let {
                   $j1 :: GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       Duckling.Time.Types.Spring
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName_go3 x1
                            GHC.Types.True -> GHC.Types.[] @ Duckling.Time.Types.SeasonName }
                       Duckling.Time.Types.Summer
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ Duckling.Time.Types.SeasonName }
                       Duckling.Time.Types.Fall
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ Duckling.Time.Types.SeasonName }
                       Duckling.Time.Types.Winter
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 3#) of wild1 {
                            GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName_go x1
                            GHC.Types.True -> GHC.Types.[] @ Duckling.Time.Types.SeasonName } }
                 } in
                 case x of wild {
                   Duckling.Time.Types.Spring -> $j1 0#
                   Duckling.Time.Types.Summer -> $j1 1#
                   Duckling.Time.Types.Fall -> $j1 2#
                   Duckling.Time.Types.Winter -> $j1 3# }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cfromEnum ::
    Duckling.Time.Types.SeasonName -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring -> GHC.Types.I# 0#
                   Duckling.Time.Types.Summer -> GHC.Types.I# 1#
                   Duckling.Time.Types.Fall -> GHC.Types.I# 2#
                   Duckling.Time.Types.Winter -> GHC.Types.I# 3# }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$cpred ::
    Duckling.Time.Types.SeasonName -> Duckling.Time.Types.SeasonName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring -> Duckling.Time.Types.$fEnumSeasonName6
                   Duckling.Time.Types.Summer -> Duckling.Time.Types.Spring
                   Duckling.Time.Types.Fall -> Duckling.Time.Types.Summer
                   Duckling.Time.Types.Winter -> Duckling.Time.Types.Fall }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$csucc ::
    Duckling.Time.Types.SeasonName -> Duckling.Time.Types.SeasonName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring -> Duckling.Time.Types.Summer
                   Duckling.Time.Types.Summer -> Duckling.Time.Types.Fall
                   Duckling.Time.Types.Fall -> Duckling.Time.Types.Winter
                   Duckling.Time.Types.Winter
                   -> Duckling.Time.Types.$fEnumSeasonName7 }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_$ctoEnum ::
    GHC.Types.Int -> Duckling.Time.Types.SeasonName
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Time.Types.$w$ctoEnum ww1 }) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_c ::
    GHC.Types.Int
    -> [Duckling.Time.Types.SeasonName]
    -> [Duckling.Time.Types.SeasonName]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [Duckling.Time.Types.SeasonName]) ->
                 GHC.Types.:
                   @ Duckling.Time.Types.SeasonName
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ Duckling.Time.Types.SeasonName a })
                   ys) -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go1 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go2 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go3 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go4 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go5 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go6 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
a824c814fefb773479920a17bad751eb
  $fEnumSeasonName_go7 ::
    GHC.Prim.Int# -> [Duckling.Time.Types.SeasonName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
33bd2d4717799d9d00463f5a488c3cf2
  $fEqAMPM :: GHC.Classes.Eq Duckling.Time.Types.AMPM
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.AMPM
                  Duckling.Time.Types.$fEqAMPM_$c==
                  Duckling.Time.Types.$fEqAMPM_$c/= -}
33bd2d4717799d9d00463f5a488c3cf2
  $fEqAMPM_$c/= ::
    Duckling.Time.Types.AMPM
    -> Duckling.Time.Types.AMPM -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.AMPM)
                   (b :: Duckling.Time.Types.AMPM) ->
                 case a of wild {
                   Duckling.Time.Types.AM
                   -> case b of wild1 {
                        Duckling.Time.Types.AM -> GHC.Types.False
                        Duckling.Time.Types.PM -> GHC.Types.True }
                   Duckling.Time.Types.PM
                   -> case b of wild1 {
                        Duckling.Time.Types.AM -> GHC.Types.True
                        Duckling.Time.Types.PM -> GHC.Types.False } }) -}
33bd2d4717799d9d00463f5a488c3cf2
  $fEqAMPM_$c== ::
    Duckling.Time.Types.AMPM
    -> Duckling.Time.Types.AMPM -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.AMPM)
                   (ds1 :: Duckling.Time.Types.AMPM) ->
                 case ds of wild {
                   Duckling.Time.Types.AM
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.AM -> GHC.Types.True
                        Duckling.Time.Types.PM -> GHC.Types.False }
                   Duckling.Time.Types.PM
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.AM -> GHC.Types.False
                        Duckling.Time.Types.PM -> GHC.Types.True } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fEqForm :: GHC.Classes.Eq Duckling.Time.Types.Form
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Form
                  Duckling.Time.Types.$fEqForm_$c==
                  Duckling.Time.Types.$fEqForm_$c/= -}
c80185ec1b344a03f6bbe3b44173e850
  $fEqForm_$c/= ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.Form)
                   (b :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fEqForm_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fEqForm_$c== ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Time.Types.Form)
                   (ds1 :: Duckling.Time.Types.Form) ->
                 case ds of wild {
                   Duckling.Time.Types.DayOfWeek
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.DayOfWeek -> GHC.Types.True }
                   Duckling.Time.Types.TimeOfDay a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.TimeOfDay b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Classes.$fEqBool_$c== a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a4 of wild4 { GHC.Types.I# x ->
                                     case b4 of wild5 { GHC.Types.I# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.==# x y) of wild6 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True -> GHC.Classes.$fEqBool_$c== a2 b2 } } } } } }
                   Duckling.Time.Types.Month a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Month b1 -> GHC.Classes.eqInt a1 b1 }
                   Duckling.Time.Types.PartOfDay
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.PartOfDay -> GHC.Types.True } }) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fEqInstantValue :: GHC.Classes.Eq Duckling.Time.Types.InstantValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.InstantValue
                  Duckling.Time.Types.$fEqInstantValue_$c==
                  Duckling.Time.Types.$fEqInstantValue_$c/= -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fEqInstantValue_$c/= ::
    Duckling.Time.Types.InstantValue
    -> Duckling.Time.Types.InstantValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Duckling.Time.Types.InstantValue)
                   (y :: Duckling.Time.Types.InstantValue) ->
                 GHC.Classes.not (Duckling.Time.Types.$fEqInstantValue_$c== x y)) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fEqInstantValue_$c== ::
    Duckling.Time.Types.InstantValue
    -> Duckling.Time.Types.InstantValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),1*U)),1*U(1*U(U),1*U,1*U)),1*U)><S(SS),1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),1*U)),1*U(1*U(U),1*U,1*U)),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.InstantValue)
                   (w1 :: Duckling.Time.Types.InstantValue) ->
                 case w of ww { Duckling.Time.Types.InstantValue ww1 ww2 ->
                 case ww1 of ww3 { Data.Time.LocalTime.LocalTime.ZonedTime ww4 ww5 ->
                 case w1 of ww6 { Duckling.Time.Types.InstantValue ww7 ww8 ->
                 case ww7 of ww9 { Data.Time.LocalTime.LocalTime.ZonedTime ww10 ww11 ->
                 Duckling.Time.Types.$w$c== ww4 ww5 ww2 ww10 ww11 ww8 } } } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fEqIntervalDirection ::
    GHC.Classes.Eq Duckling.Time.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.IntervalDirection
                  Duckling.Time.Types.$fEqIntervalDirection_$c==
                  Duckling.Time.Types.$fEqIntervalDirection_$c/= -}
794da663254a4d37bc004d93a2fd1e20
  $fEqIntervalDirection_$c/= ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.False
                        Duckling.Time.Types.After -> GHC.Types.True }
                   Duckling.Time.Types.After
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.True
                        Duckling.Time.Types.After -> GHC.Types.False } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fEqIntervalDirection_$c== ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.IntervalDirection)
                   (ds1 :: Duckling.Time.Types.IntervalDirection) ->
                 case ds of wild {
                   Duckling.Time.Types.Before
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.True
                        Duckling.Time.Types.After -> GHC.Types.False }
                   Duckling.Time.Types.After
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.False
                        Duckling.Time.Types.After -> GHC.Types.True } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fEqSeason :: GHC.Classes.Eq Duckling.Time.Types.Season
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Season
                  Duckling.Time.Types.$fEqSeason_$c==
                  Duckling.Time.Types.$fEqSeason_$c/= -}
a824c814fefb773479920a17bad751eb
  $fEqSeasonName :: GHC.Classes.Eq Duckling.Time.Types.SeasonName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SeasonName
                  Duckling.Time.Types.$fEqSeason_$c==1
                  Duckling.Time.Types.$fEqSeasonName_$c/= -}
a824c814fefb773479920a17bad751eb
  $fEqSeasonName_$c/= ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Spring -> GHC.Types.False }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Summer -> GHC.Types.False }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Fall -> GHC.Types.False }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.False } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fEqSeason_$c/= ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.Season)
                   (b :: Duckling.Time.Types.Season) ->
                 case Duckling.Time.Types.$fEqSeason_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fEqSeason_$c== ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$c==1 ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fEqSeason_$c==1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Time.Types.SeasonName)
                   (ds1 :: Duckling.Time.Types.SeasonName) ->
                 case ds of wild {
                   Duckling.Time.Types.Spring
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Spring -> GHC.Types.True }
                   Duckling.Time.Types.Summer
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Summer -> GHC.Types.True }
                   Duckling.Time.Types.Fall
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Fall -> GHC.Types.True }
                   Duckling.Time.Types.Winter
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.True } }) -}
bdbf0c070c694d198978600704691028
  $fEqSingleTimeValue ::
    GHC.Classes.Eq Duckling.Time.Types.SingleTimeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SingleTimeValue
                  Duckling.Time.Types.$fEqSingleTimeValue_$c==
                  Duckling.Time.Types.$fEqSingleTimeValue_$c/= -}
bdbf0c070c694d198978600704691028
  $fEqSingleTimeValue_$c/= ::
    Duckling.Time.Types.SingleTimeValue
    -> Duckling.Time.Types.SingleTimeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.SingleTimeValue)
                   (b :: Duckling.Time.Types.SingleTimeValue) ->
                 case Duckling.Time.Types.$fEqSingleTimeValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bdbf0c070c694d198978600704691028
  $fEqSingleTimeValue_$c== ::
    Duckling.Time.Types.SingleTimeValue
    -> Duckling.Time.Types.SingleTimeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Duckling.Time.Types.SingleTimeValue)
                   (ds1 :: Duckling.Time.Types.SingleTimeValue) ->
                 case ds of wild {
                   Duckling.Time.Types.SimpleValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.SimpleValue b1
                        -> Duckling.Time.Types.$fEqInstantValue_$c== a1 b1 }
                   Duckling.Time.Types.IntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.IntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Time.Types.InstantValue ww8 ww9 ->
                           case ww8 of ww10 { Data.Time.LocalTime.LocalTime.ZonedTime ww11 ww12 ->
                           case ww4 of ww13 { Duckling.Time.Types.InstantValue ww14 ww15 ->
                           case ww14 of ww16 { Data.Time.LocalTime.LocalTime.ZonedTime ww17 ww18 ->
                           case Duckling.Time.Types.$w$c==
                                  ww11
                                  ww12
                                  ww9
                                  ww17
                                  ww18
                                  ww15 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Time.Types.$fEqInstantValue_$c==
                                  ww2
                                  ww5 } } } } } } } }
                   Duckling.Time.Types.OpenIntervalValue a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.OpenIntervalValue b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of ww7 { Duckling.Time.Types.InstantValue ww8 ww9 ->
                           case ww8 of ww10 { Data.Time.LocalTime.LocalTime.ZonedTime ww11 ww12 ->
                           case ww4 of ww13 { Duckling.Time.Types.InstantValue ww14 ww15 ->
                           case ww14 of ww16 { Data.Time.LocalTime.LocalTime.ZonedTime ww17 ww18 ->
                           case Duckling.Time.Types.$w$c==
                                  ww11
                                  ww12
                                  ww9
                                  ww17
                                  ww18
                                  ww15 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Duckling.Time.Types.$fEqIntervalDirection_$c==
                                  ww2
                                  ww5 } } } } } } } } }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fEqTimeData :: GHC.Classes.Eq Duckling.Time.Types.TimeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeData
                  Duckling.Time.Types.$fEqTimeData_$c==
                  Duckling.Time.Types.$fEqTimeData_$c/= -}
30afdebe049cca4783f2b6e6cd997b57
  $fEqTimeData_$c/= ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 GHC.Classes.not (Duckling.Time.Types.$fEqTimeData_$c== x y)) -}
30afdebe049cca4783f2b6e6cd997b57
  $fEqTimeData_$c== ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,1*U)><S(LSLLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeData)
                   (w1 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case w1 of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Types.$w$c==2
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww9
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww19 } }) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fEqTimeIntervalType ::
    GHC.Classes.Eq Duckling.Time.Types.TimeIntervalType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeIntervalType
                  Duckling.Time.Types.$fEqTimeIntervalType_$c==
                  Duckling.Time.Types.$fEqTimeIntervalType_$c/= -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fEqTimeIntervalType_$c/= ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.TimeIntervalType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.TimeIntervalType)
                   (b :: Duckling.Time.Types.TimeIntervalType) ->
                 case a of wild {
                   Duckling.Time.Types.Open
                   -> case b of wild1 {
                        Duckling.Time.Types.Open -> GHC.Types.False
                        Duckling.Time.Types.Closed -> GHC.Types.True }
                   Duckling.Time.Types.Closed
                   -> case b of wild1 {
                        Duckling.Time.Types.Open -> GHC.Types.True
                        Duckling.Time.Types.Closed -> GHC.Types.False } }) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fEqTimeIntervalType_$c== ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.TimeIntervalType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.TimeIntervalType)
                   (ds1 :: Duckling.Time.Types.TimeIntervalType) ->
                 case ds of wild {
                   Duckling.Time.Types.Open
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.Open -> GHC.Types.True
                        Duckling.Time.Types.Closed -> GHC.Types.False }
                   Duckling.Time.Types.Closed
                   -> case ds1 of wild1 {
                        Duckling.Time.Types.Open -> GHC.Types.False
                        Duckling.Time.Types.Closed -> GHC.Types.True } }) -}
cebf1bb42889d6dda342d21248135915
  $fEqTimeObject :: GHC.Classes.Eq Duckling.Time.Types.TimeObject
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeObject
                  Duckling.Time.Types.$fEqTimeObject_$c==
                  Duckling.Time.Types.$fEqTimeObject_$c/= -}
cebf1bb42889d6dda342d21248135915
  $fEqTimeObject_$c/= ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U,1*U)><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.TimeObject)
                   (b :: Duckling.Time.Types.TimeObject) ->
                 case Duckling.Time.Types.$fEqTimeObject_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cebf1bb42889d6dda342d21248135915
  $fEqTimeObject_$c== ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),1*U,1*U)><S(S(SL)LL),1*U(1*U(1*U,1*U),1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                 case w1 of ww7 { Duckling.Time.Types.TimeObject ww8 ww9 ww10 ->
                 case ww8 of ww11 { Data.Time.Clock.UTC.UTCTime ww12 ww13 ->
                 Duckling.Time.Types.$w$c==3
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
d712de0b6b1b686da9f87f91641709f6
  $fEqTimeValue :: GHC.Classes.Eq Duckling.Time.Types.TimeValue
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeValue
                  Duckling.Time.Types.$fEqTimeValue_$c==
                  Duckling.Time.Types.$fEqTimeValue_$c/= -}
d712de0b6b1b686da9f87f91641709f6
  $fEqTimeValue_$c/= ::
    Duckling.Time.Types.TimeValue
    -> Duckling.Time.Types.TimeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.TimeValue)
                   (b :: Duckling.Time.Types.TimeValue) ->
                 case Duckling.Time.Types.$fEqTimeValue_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d712de0b6b1b686da9f87f91641709f6
  $fEqTimeValue_$c== ::
    Duckling.Time.Types.TimeValue
    -> Duckling.Time.Types.TimeValue -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeValue)
                   (w1 :: Duckling.Time.Types.TimeValue) ->
                 case w of ww { Duckling.Time.Types.TimeValue ww1 ww2 ww3 ->
                 case w1 of ww4 { Duckling.Time.Types.TimeValue ww5 ww6 ww7 ->
                 Duckling.Time.Types.$w$c==4 ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fGenericForm :: GHC.Generics.Generic Duckling.Time.Types.Form
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Form
                  Duckling.Time.Types.$fGenericForm_$cfrom
                  Duckling.Time.Types.$fGenericForm_$cto -}
c80185ec1b344a03f6bbe3b44173e850
  $fGenericForm1 ::
    Duckling.Time.Types.Form
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "hours")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "is12H")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Base.Just "month")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x (x1 :: Duckling.Time.Types.Form) ->
                 case x1 of wild {
                   Duckling.Time.Types.DayOfWeek
                   -> Duckling.Time.Types.$fGenericForm4 @ x
                   Duckling.Time.Types.TimeOfDay g1 g2
                   -> GHC.Generics.L1
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "hours")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "is12H")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Types.Bool)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "month")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        (GHC.Generics.R1
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "hours")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "is12H")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Types.Bool)))
                           @ x
                           (GHC.Generics.:*:
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "hours")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "is12H")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool))
                              @ x
                              g1
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <GHC.Generics.R>_P
                                             <GHC.Base.Maybe GHC.Types.Int>_R
                                             <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "hours")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                (GHC.Base.Maybe GHC.Types.Int)>_R) <x>_N))
                              g2
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "is12H")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R GHC.Types.Bool>_R) <x>_N)))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "hours")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "is12H")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Bool)>_R) <x>_N))
                   Duckling.Time.Types.Month g1
                   -> GHC.Generics.R1
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "hours")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "is12H")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     GHC.Types.Bool)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "month")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        (GHC.Generics.L1
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "month")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                           @ x
                           g1
                             `cast`
                           (Trans
                                (Sym (GHC.Generics.N:K1[0]
                                          <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                                (Trans
                                     (Sym (GHC.Generics.N:M1[0]
                                               <GHC.Generics.S>_P
                                               <'GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "month")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy>_P
                                               <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R))
                                     (Sym (GHC.Generics.N:M1[0]
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "Month" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "month")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R GHC.Types.Int)>_R)) <x>_N)))
                   Duckling.Time.Types.PartOfDay
                   -> Duckling.Time.Types.$fGenericForm2 @ x }) -}
2f466063430365c1efb9e20f02950cf3
  $fGenericForm2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                          (GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "hours")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                           GHC.Generics.:*: GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "is12H")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "month")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                         (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "hours")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "is12H")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Types.Bool)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "month")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Time.Types.$fGenericForm3 @ x)) -}
14dd6d18cb32a7e03cde040a0f48366f
  $fGenericForm3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "month")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "month")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
4d9c97d0175c9da81095fe015db3c1f5
  $fGenericForm4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                          (GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "hours")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                           GHC.Generics.:*: GHC.Generics.M1
                                              GHC.Generics.S
                                              ('GHC.Generics.MetaSel
                                                 ('GHC.Base.Just "is12H")
                                                 'GHC.Generics.NoSourceUnpackedness
                                                 'GHC.Generics.NoSourceStrictness
                                                 'GHC.Generics.DecidedLazy)
                                              (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "month")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                         (GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "hours")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                          GHC.Generics.:*: GHC.Generics.M1
                                                             GHC.Generics.S
                                                             ('GHC.Generics.MetaSel
                                                                ('GHC.Base.Just "is12H")
                                                                'GHC.Generics.NoSourceUnpackedness
                                                                'GHC.Generics.NoSourceStrictness
                                                                'GHC.Generics.DecidedLazy)
                                                             (GHC.Generics.K1
                                                                GHC.Generics.R GHC.Types.Bool)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "month")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Duckling.Time.Types.$fGenericForm5 @ x)) -}
c93c73e765f188690996fb798b2559e8
  $fGenericForm5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "hours")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "is12H")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              ('GHC.Base.Just "hours")
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               ('GHC.Base.Just "is12H")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool)))
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
c80185ec1b344a03f6bbe3b44173e850
  $fGenericForm_$cfrom ::
    Duckling.Time.Types.Form
    -> GHC.Generics.Rep Duckling.Time.Types.Form x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.$fGenericForm1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Time.Types.Form>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Form"
                                       "Duckling.Time.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <(GHC.Generics.M1
                                        GHC.Generics.C
                                        ('GHC.Generics.MetaCons
                                           "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                        GHC.Generics.U1
                                      GHC.Generics.:+: GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "TimeOfDay"
                                                            'GHC.Generics.PrefixI
                                                            'GHC.Types.True)
                                                         (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "hours")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (GHC.Base.Maybe GHC.Types.Int))
                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                             GHC.Generics.S
                                                                             ('GHC.Generics.MetaSel
                                                                                ('GHC.Base.Just
                                                                                   "is12H")
                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                'GHC.Generics.NoSourceStrictness
                                                                                'GHC.Generics.DecidedLazy)
                                                                             (GHC.Generics.K1
                                                                                GHC.Generics.R
                                                                                GHC.Types.Bool)))
                                     GHC.Generics.:+: (GHC.Generics.M1
                                                         GHC.Generics.C
                                                         ('GHC.Generics.MetaCons
                                                            "Month"
                                                            'GHC.Generics.PrefixI
                                                            'GHC.Types.True)
                                                         (GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "month")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R GHC.Types.Int))
                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                          GHC.Generics.C
                                                                          ('GHC.Generics.MetaCons
                                                                             "PartOfDay"
                                                                             'GHC.Generics.PrefixI
                                                                             'GHC.Types.False)
                                                                          GHC.Generics.U1)>_R))
                          (Sub (Sym (Duckling.Time.Types.Rep_Form[0]))) <x>_N) -}
c80185ec1b344a03f6bbe3b44173e850
  $fGenericForm_$cto ::
    GHC.Generics.Rep Duckling.Time.Types.Form x
    -> Duckling.Time.Types.Form
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Time.Types.Form x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Time.Types.Rep_Form[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "Form"
                                   "Duckling.Time.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <(GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                    GHC.Generics.U1
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "TimeOfDay"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.True)
                                                     (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           ('GHC.Base.Just "hours")
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           (GHC.Base.Maybe GHC.Types.Int))
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            ('GHC.Base.Just "is12H")
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            GHC.Types.Bool)))
                                 GHC.Generics.:+: (GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "Month"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.True)
                                                     (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           ('GHC.Base.Just "month")
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R GHC.Types.Int))
                                                   GHC.Generics.:+: GHC.Generics.M1
                                                                      GHC.Generics.C
                                                                      ('GHC.Generics.MetaCons
                                                                         "PartOfDay"
                                                                         'GHC.Generics.PrefixI
                                                                         'GHC.Types.False)
                                                                      GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of tpl { DEFAULT -> Duckling.Time.Types.DayOfWeek }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "hours")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "is12H")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Types.Bool)>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Duckling.Time.Types.TimeOfDay
                             ds3
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "hours")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R (GHC.Base.Maybe GHC.Types.Int)>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P <GHC.Base.Maybe GHC.Types.Int>_R <x>_P))
                             ds4
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "is12H")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1 GHC.Generics.R GHC.Types.Bool>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <GHC.Generics.R>_P <GHC.Types.Bool>_R <x>_P)) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> Duckling.Time.Types.Month
                             ds2
                               `cast`
                             (Trans
                                  (Trans
                                       (GHC.Generics.N:M1[0]
                                            <GHC.Generics.C>_P
                                            <'GHC.Generics.MetaCons
                                               "Month" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "month")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1 GHC.Generics.R GHC.Types.Int)>_R)
                                       (GHC.Generics.N:M1[0]
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               ('GHC.Base.Just "month")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1 GHC.Generics.R GHC.Types.Int>_R) <x>_N)
                                  (GHC.Generics.N:K1[0] <GHC.Generics.R>_P <GHC.Types.Int>_R <x>_P))
                        GHC.Generics.R1 ds2
                        -> case ds2 of tpl { DEFAULT ->
                           Duckling.Time.Types.PartOfDay } } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fGenericIntervalDirection ::
    GHC.Generics.Generic Duckling.Time.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.IntervalDirection
                  Duckling.Time.Types.$fGenericIntervalDirection_$cfrom
                  Duckling.Time.Types.$fGenericIntervalDirection_$cto -}
794da663254a4d37bc004d93a2fd1e20
  $fGenericIntervalDirection1 ::
    Duckling.Time.Types.IntervalDirection
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Duckling.Time.Types.IntervalDirection) ->
                 case x1 of wild {
                   Duckling.Time.Types.Before
                   -> Duckling.Time.Types.$fGenericIntervalDirection3 @ x
                   Duckling.Time.Types.After
                   -> Duckling.Time.Types.$fGenericIntervalDirection2 @ x }) -}
428a4ab2c26b7113334833ce2bf404e9
  $fGenericIntervalDirection2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "After" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
43b2d7489231d9af58afee03d1d2d83b
  $fGenericIntervalDirection3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Before" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
794da663254a4d37bc004d93a2fd1e20
  $fGenericIntervalDirection_$cfrom ::
    Duckling.Time.Types.IntervalDirection
    -> GHC.Generics.Rep Duckling.Time.Types.IntervalDirection x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.$fGenericIntervalDirection1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Duckling.Time.Types.IntervalDirection>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "IntervalDirection"
                                       "Duckling.Time.Types"
                                       "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "After"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R))
                          (Sub (Sym (Duckling.Time.Types.Rep_IntervalDirection[0]))) <x>_N) -}
794da663254a4d37bc004d93a2fd1e20
  $fGenericIntervalDirection_$cto ::
    GHC.Generics.Rep Duckling.Time.Types.IntervalDirection x
    -> Duckling.Time.Types.IntervalDirection
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Duckling.Time.Types.IntervalDirection x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Duckling.Time.Types.Rep_IntervalDirection[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "IntervalDirection"
                                   "Duckling.Time.Types"
                                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "After"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Time.Types.Before }
                   GHC.Generics.R1 ds1
                   -> case ds1 of tpl { DEFAULT -> Duckling.Time.Types.After } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fHashableForm ::
    Data.Hashable.Class.Hashable Duckling.Time.Types.Form
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Form
                  Duckling.Time.Types.$fHashableForm_$chashWithSalt
                  Duckling.Time.Types.$fHashableForm_$chash -}
c80185ec1b344a03f6bbe3b44173e850
  $fHashableForm_$chash :: Duckling.Time.Types.Form -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.$fHashableForm_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
c80185ec1b344a03f6bbe3b44173e850
  $fHashableForm_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Time.Types.Form -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.Form) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Duckling.Time.Types.$w$chashWithSalt
                        ww1
                        w1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fHashableIntervalDirection ::
    Data.Hashable.Class.Hashable Duckling.Time.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.IntervalDirection
                  Duckling.Time.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
                  Duckling.Time.Types.$fHashableIntervalDirection_$chash -}
33852ac1668bba3dcefdac94ee41d8d9
  $fHashableIntervalDirection1 ::
    Data.Hashable.Class.GHashable
      Data.Hashable.Class.Zero
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Time.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.$fHashableIntervalDirection2
                  `cast`
                (Sym (Data.Hashable.Class.N:GHashable[0]
                          <Data.Hashable.Class.Zero>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Time.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
61dd7895ea30456943779ecedd473170
  $fHashableIntervalDirection2 ::
    Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1
    -> GHC.Types.Int
    -> GHC.Generics.M1
         GHC.Generics.D
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Time.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         a1
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (targs :: Data.Hashable.Class.HashArgs Data.Hashable.Class.Zero a1)
                   (salt :: GHC.Types.Int)
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case salt of ww { GHC.Types.I# ww1 ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I# (GHC.Prim.*# (GHC.Prim.*# ww1 16777619#) 16777619#) }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT ->
                      GHC.Types.I#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww1 16777619#) 1#)
                           16777619#) } } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fHashableIntervalDirection_$chash ::
    Duckling.Time.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ (x :: Duckling.Time.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Time.Types.Before -> GHC.Types.I# -7234408896634655932#
                   Duckling.Time.Types.After
                   -> GHC.Types.I# -7234408896617878313# }) -}
794da663254a4d37bc004d93a2fd1e20
  $fHashableIntervalDirection_$s$dmhashWithSalt ::
    GHC.Types.Int
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (-3, True, False)
                (\ (salt :: GHC.Types.Int)
                   (x :: Duckling.Time.Types.IntervalDirection) ->
                 Duckling.Time.Types.$fHashableIntervalDirection1
                   `cast`
                 (Data.Hashable.Class.N:GHashable[0]
                      <Data.Hashable.Class.Zero>_N
                      (Sym (Duckling.Time.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Data.Hashable.Class.$WHashArgs0 @ GHC.Prim.Any)
                   salt
                   (Duckling.Time.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      x)) -}
30afdebe049cca4783f2b6e6cd997b57
  $fHashableTimeData ::
    Data.Hashable.Class.Hashable Duckling.Time.Types.TimeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeData
                  Duckling.Time.Types.$fHashableTimeData_$chashWithSalt
                  Duckling.Time.Types.$fHashableTimeData_$chash -}
30afdebe049cca4783f2b6e6cd997b57
  $fHashableTimeData_$chash ::
    Duckling.Time.Types.TimeData -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Duckling.Time.Types.$fHashableTimeData_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
30afdebe049cca4783f2b6e6cd997b57
  $fHashableTimeData_$chashWithSalt ::
    GHC.Types.Int -> Duckling.Time.Types.TimeData -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(LSSSSSLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Time.Types.TimeData ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                 case Duckling.Time.Types.$w$chashWithSalt1
                        ww1
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww12 { DEFAULT ->
                 GHC.Types.I# ww12 } } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fNFDataForm :: Control.DeepSeq.NFData Duckling.Time.Types.Form
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Time.Types.$fNFDataForm_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0] <Duckling.Time.Types.Form>_N)) -}
fdc51292ecec855a5f9169cab6931c16
  $fNFDataForm1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "Form"
            "Duckling.Time.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         ((GHC.Generics.C1
             ('GHC.Generics.MetaCons
                "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
             GHC.Generics.U1
           GHC.Generics.:+: GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "hours")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                               GHC.Generics.:*: GHC.Generics.S1
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "is12H")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.Rec0 GHC.Types.Bool)))
          GHC.Generics.:+: (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                              (GHC.Generics.S1
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "month")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.Rec0 GHC.Types.Int))
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "PartOfDay"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1)))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.$fNFDataForm2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "Form"
                                "Duckling.Time.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             ((GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "TimeOfDay"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.True)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "hours")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (GHC.Base.Maybe GHC.Types.Int))
                                                   GHC.Generics.:*: GHC.Generics.S1
                                                                      ('GHC.Generics.MetaSel
                                                                         ('GHC.Base.Just "is12H")
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.Rec0
                                                                         GHC.Types.Bool)))
                              GHC.Generics.:+: (GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                  (GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "month")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Types.Int))
                                                GHC.Generics.:+: GHC.Generics.C1
                                                                   ('GHC.Generics.MetaCons
                                                                      "PartOfDay"
                                                                      'GHC.Generics.PrefixI
                                                                      'GHC.Types.False)
                                                                   GHC.Generics.U1))>_N)) -}
42319174d18c3551a8d18f0956af8951
  $fNFDataForm2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "Form"
         "Duckling.Time.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      ((GHC.Generics.C1
          ('GHC.Generics.MetaCons
             "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
          GHC.Generics.U1
        GHC.Generics.:+: GHC.Generics.C1
                           ('GHC.Generics.MetaCons
                              "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "hours")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                            GHC.Generics.:*: GHC.Generics.S1
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "is12H")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.Rec0 GHC.Types.Bool)))
       GHC.Generics.:+: (GHC.Generics.C1
                           ('GHC.Generics.MetaCons
                              "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                           (GHC.Generics.S1
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "month")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.Rec0 GHC.Types.Int))
                         GHC.Generics.:+: GHC.Generics.C1
                                            ('GHC.Generics.MetaCons
                                               "PartOfDay" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                            GHC.Generics.U1))
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "Form"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           ((GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "TimeOfDay"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.True)
                                                (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "hours")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0
                                                      (GHC.Base.Maybe GHC.Types.Int))
                                                 GHC.Generics.:*: GHC.Generics.S1
                                                                    ('GHC.Generics.MetaSel
                                                                       ('GHC.Base.Just "is12H")
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.Rec0
                                                                       GHC.Types.Bool)))
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "month")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0 GHC.Types.Int))
                                              GHC.Generics.:+: GHC.Generics.C1
                                                                 ('GHC.Generics.MetaCons
                                                                    "PartOfDay"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1))
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "Form"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <(GHC.Generics.C1
                               ('GHC.Generics.MetaCons
                                  "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                               GHC.Generics.U1
                             GHC.Generics.:+: GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "TimeOfDay"
                                                   'GHC.Generics.PrefixI
                                                   'GHC.Types.True)
                                                (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "hours")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0
                                                      (GHC.Base.Maybe GHC.Types.Int))
                                                 GHC.Generics.:*: GHC.Generics.S1
                                                                    ('GHC.Generics.MetaSel
                                                                       ('GHC.Base.Just "is12H")
                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                       'GHC.Generics.NoSourceStrictness
                                                                       'GHC.Generics.DecidedLazy)
                                                                    (GHC.Generics.Rec0
                                                                       GHC.Types.Bool)))
                            GHC.Generics.:+: (GHC.Generics.C1
                                                ('GHC.Generics.MetaCons
                                                   "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                (GHC.Generics.S1
                                                   ('GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "month")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy)
                                                   (GHC.Generics.Rec0 GHC.Types.Int))
                                              GHC.Generics.:+: GHC.Generics.C1
                                                                 ('GHC.Generics.MetaCons
                                                                    "PartOfDay"
                                                                    'GHC.Generics.PrefixI
                                                                    'GHC.Types.False)
                                                                 GHC.Generics.U1)>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1
                   -> case x1 of wild1 {
                        GHC.Generics.L1 x2 -> case x2 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x2
                        -> case x2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.S1
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "hours")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                                      GHC.Generics.:*: GHC.Generics.S1
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "is12H")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.Rec0
                                                            GHC.Types.Bool)>_R <a1>_N) of wild2 { GHC.Generics.:*: x3 y ->
                           case case x3
                                       `cast`
                                     (Trans
                                          (GHC.Generics.N:M1[0]
                                               <GHC.Generics.S>_P
                                               <'GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "hours")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy>_P
                                               <GHC.Generics.K1
                                                  GHC.Generics.R
                                                  (GHC.Base.Maybe GHC.Types.Int)>_R <a1>_N)
                                          (GHC.Generics.N:K1[0]
                                               <GHC.Generics.R>_P
                                               <GHC.Base.Maybe GHC.Types.Int>_R
                                               <a1>_P)) of wild3 {
                                  GHC.Base.Nothing -> GHC.Tuple.()
                                  GHC.Base.Just x4
                                  -> Control.DeepSeq.$fNFDataInt_$crnf x4 } of wild3 { () ->
                           case y of tpl { DEFAULT -> GHC.Tuple.() } } } }
                   GHC.Generics.R1 x1
                   -> case x1 of wild1 {
                        GHC.Generics.L1 x2 -> case x2 of tpl { DEFAULT -> GHC.Tuple.() }
                        GHC.Generics.R1 x2
                        -> case x2 of tpl { DEFAULT -> GHC.Tuple.() } } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fNFDataForm_$s$dmrnf :: Duckling.Time.Types.Form -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Time.Types.Form) ->
                 Duckling.Time.Types.$fNFDataForm1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N (Sym (Duckling.Time.Types.Rep_Form[0])))
                   @ GHC.Prim.Any
                   (Duckling.Time.Types.$fGenericForm_$cfrom @ GHC.Prim.Any eta)) -}
794da663254a4d37bc004d93a2fd1e20
  $fNFDataIntervalDirection ::
    Control.DeepSeq.NFData Duckling.Time.Types.IntervalDirection
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Time.Types.$fNFDataIntervalDirection_$s$dmrnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Time.Types.IntervalDirection>_N)) -}
58f150030c0b62f6945d00c62f68ac64
  $fNFDataIntervalDirection1 ::
    Control.DeepSeq.GNFData
      (GHC.Generics.D1
         ('GHC.Generics.MetaData
            "IntervalDirection"
            "Duckling.Time.Types"
            "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
            'GHC.Types.False)
         (GHC.Generics.C1
            ('GHC.Generics.MetaCons
               "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.C1
                             ('GHC.Generics.MetaCons
                                "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.$fNFDataIntervalDirection2
                  `cast`
                (Sym (Control.DeepSeq.N:GNFData[0]
                          <GHC.Types.*>_N
                          <GHC.Generics.M1
                             GHC.Generics.D
                             ('GHC.Generics.MetaData
                                "IntervalDirection"
                                "Duckling.Time.Types"
                                "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                                'GHC.Types.False)
                             (GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1
                              GHC.Generics.:+: GHC.Generics.C1
                                                 ('GHC.Generics.MetaCons
                                                    "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 GHC.Generics.U1)>_N)) -}
6c99c09994db3765dc24b32b7e0fae01
  $fNFDataIntervalDirection2 ::
    GHC.Generics.M1
      GHC.Generics.D
      ('GHC.Generics.MetaData
         "IntervalDirection"
         "Duckling.Time.Types"
         "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
         'GHC.Types.False)
      (GHC.Generics.C1
         ('GHC.Generics.MetaCons
            "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.C1
                          ('GHC.Generics.MetaCons
                             "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      a1
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a1
                   (x :: GHC.Generics.M1
                           GHC.Generics.D
                           ('GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False)
                           (GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1)
                           a1) ->
                 case x `cast`
                      (GHC.Generics.N:M1[0]
                           <GHC.Generics.D>_P
                           <'GHC.Generics.MetaData
                              "IntervalDirection"
                              "Duckling.Time.Types"
                              "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
                              'GHC.Types.False>_P
                           <GHC.Generics.C1
                              ('GHC.Generics.MetaCons
                                 "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.C1
                                               ('GHC.Generics.MetaCons
                                                  "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               GHC.Generics.U1>_R <a1>_N) of wild {
                   GHC.Generics.L1 x1 -> case x1 of tpl { DEFAULT -> GHC.Tuple.() }
                   GHC.Generics.R1 x1
                   -> case x1 of tpl { DEFAULT -> GHC.Tuple.() } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fNFDataIntervalDirection_$s$dmrnf ::
    Duckling.Time.Types.IntervalDirection -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (-3, True, False)
                (\ (eta :: Duckling.Time.Types.IntervalDirection) ->
                 Duckling.Time.Types.$fNFDataIntervalDirection1
                   `cast`
                 (Control.DeepSeq.N:GNFData[0]
                      <GHC.Types.*>_N
                      (Sym (Duckling.Time.Types.Rep_IntervalDirection[0])))
                   @ GHC.Prim.Any
                   (Duckling.Time.Types.$fGenericIntervalDirection_$cfrom
                      @ GHC.Prim.Any
                      eta)) -}
30afdebe049cca4783f2b6e6cd997b57
  $fNFDataTimeData ::
    Control.DeepSeq.NFData Duckling.Time.Types.TimeData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSSSSSLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Duckling.Time.Types.$fNFDataTimeData_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Duckling.Time.Types.TimeData>_N)) -}
bcf20d155b738aef63d115ed40de3195
  $fNFDataTimeData1 ::
    GHC.Base.Maybe Duckling.Time.Types.IntervalDirection -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> case x of wild1 { DEFAULT -> GHC.Tuple.() } }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fNFDataTimeData_$crnf :: Duckling.Time.Types.TimeData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSSSSSLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Types.$w$crnf ww2 ww3 ww4 ww5 ww6 }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm :: GHC.Classes.Ord Duckling.Time.Types.Form
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Form
                  Duckling.Time.Types.$fEqForm
                  Duckling.Time.Types.$fOrdForm_$ccompare
                  Duckling.Time.Types.$fOrdForm_$c<
                  Duckling.Time.Types.$fOrdForm_$c<=
                  Duckling.Time.Types.$fOrdForm_$c>
                  Duckling.Time.Types.$fOrdForm_$c>=
                  Duckling.Time.Types.$fOrdForm_$cmax
                  Duckling.Time.Types.$fOrdForm_$cmin -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$c< ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$c<= ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$c> ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$c>= ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$ccompare ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.Form)
                   (b :: Duckling.Time.Types.Form) ->
                 case a of wild {
                   Duckling.Time.Types.DayOfWeek
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Duckling.Time.Types.DayOfWeek -> GHC.Types.EQ }
                   Duckling.Time.Types.TimeOfDay a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Duckling.Time.Types.DayOfWeek -> GHC.Types.GT
                        Duckling.Time.Types.TimeOfDay b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Classes.$fOrdBool_$ccompare a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b4
                                  -> case a4 of wild4 { GHC.Types.I# x# ->
                                     case b4 of wild5 { GHC.Types.I# y# ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x# y#) of wild6 {
                                       GHC.Types.False
                                       -> case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.==# x# y#) of wild7 {
                                            GHC.Types.False -> GHC.Types.GT
                                            GHC.Types.True
                                            -> GHC.Classes.$fOrdBool_$ccompare a2 b2 }
                                       GHC.Types.True -> GHC.Types.LT } } } } } }
                   Duckling.Time.Types.Month a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Time.Types.Month b1 -> GHC.Classes.compareInt a1 b1
                        Duckling.Time.Types.PartOfDay -> GHC.Types.LT }
                   Duckling.Time.Types.PartOfDay
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Time.Types.PartOfDay -> GHC.Types.EQ } }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$cmax ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> Duckling.Time.Types.Form
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fOrdForm_$cmin ::
    Duckling.Time.Types.Form
    -> Duckling.Time.Types.Form -> Duckling.Time.Types.Form
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.Form)
                   (y :: Duckling.Time.Types.Form) ->
                 case Duckling.Time.Types.$fOrdForm_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection ::
    GHC.Classes.Ord Duckling.Time.Types.IntervalDirection
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.IntervalDirection
                  Duckling.Time.Types.$fEqIntervalDirection
                  Duckling.Time.Types.$fOrdIntervalDirection_$ccompare
                  Duckling.Time.Types.$fOrdIntervalDirection_$c<
                  Duckling.Time.Types.$fOrdIntervalDirection_$c<=
                  Duckling.Time.Types.$fOrdIntervalDirection_$c>
                  Duckling.Time.Types.$fOrdIntervalDirection_$c>=
                  Duckling.Time.Types.$fOrdIntervalDirection_$cmax
                  Duckling.Time.Types.$fOrdIntervalDirection_$cmin -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$c< ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.False
                        Duckling.Time.Types.After -> GHC.Types.True }
                   Duckling.Time.Types.After
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$c<= ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Time.Types.After
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.False
                        Duckling.Time.Types.After -> GHC.Types.True } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$c> ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Time.Types.After
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.True
                        Duckling.Time.Types.After -> GHC.Types.False } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$c>= ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.True
                        Duckling.Time.Types.After -> GHC.Types.False }
                   Duckling.Time.Types.After
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$ccompare ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Duckling.Time.Types.IntervalDirection)
                   (b :: Duckling.Time.Types.IntervalDirection) ->
                 case a of wild {
                   Duckling.Time.Types.Before
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.EQ
                        Duckling.Time.Types.After -> GHC.Types.LT }
                   Duckling.Time.Types.After
                   -> case b of wild1 {
                        Duckling.Time.Types.Before -> GHC.Types.GT
                        Duckling.Time.Types.After -> GHC.Types.EQ } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$cmax ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.IntervalDirection)
                   (y :: Duckling.Time.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Time.Types.Before -> y
                   Duckling.Time.Types.After
                   -> case y of wild1 { DEFAULT -> Duckling.Time.Types.After } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fOrdIntervalDirection_$cmin ::
    Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.IntervalDirection
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.IntervalDirection)
                   (y :: Duckling.Time.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Time.Types.Before
                   -> case y of wild1 { DEFAULT -> Duckling.Time.Types.Before }
                   Duckling.Time.Types.After -> y }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason :: GHC.Classes.Ord Duckling.Time.Types.Season
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Season
                  Duckling.Time.Types.$fEqSeason
                  Duckling.Time.Types.$fOrdSeason_$ccompare
                  Duckling.Time.Types.$fOrdSeason_$c<
                  Duckling.Time.Types.$fOrdSeason_$c<=
                  Duckling.Time.Types.$fOrdSeason_$c>
                  Duckling.Time.Types.$fOrdSeason_$c>=
                  Duckling.Time.Types.$fOrdSeason_$cmax
                  Duckling.Time.Types.$fOrdSeason_$cmin -}
a824c814fefb773479920a17bad751eb
  $fOrdSeasonName :: GHC.Classes.Ord Duckling.Time.Types.SeasonName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SeasonName
                  Duckling.Time.Types.$fEqSeasonName
                  Duckling.Time.Types.$fOrdSeason_$ccompare1
                  Duckling.Time.Types.$fOrdSeason_$c<1
                  Duckling.Time.Types.$fOrdSeason_$c<=1
                  Duckling.Time.Types.$fOrdSeason_$c>1
                  Duckling.Time.Types.$fOrdSeason_$c>=1
                  Duckling.Time.Types.$fOrdSeasonName_$cmax
                  Duckling.Time.Types.$fOrdSeasonName_$cmin -}
a824c814fefb773479920a17bad751eb
  $fOrdSeasonName_$cmax ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> Duckling.Time.Types.SeasonName
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Duckling.Time.Types.SeasonName)
                   (y :: Duckling.Time.Types.SeasonName) ->
                 case x of wild {
                   Duckling.Time.Types.Spring -> y
                   Duckling.Time.Types.Summer
                   -> case y of wild1 {
                        DEFAULT -> Duckling.Time.Types.Summer
                        Duckling.Time.Types.Fall -> Duckling.Time.Types.Fall
                        Duckling.Time.Types.Winter -> Duckling.Time.Types.Winter }
                   Duckling.Time.Types.Fall
                   -> case y of wild1 {
                        DEFAULT -> Duckling.Time.Types.Fall
                        Duckling.Time.Types.Winter -> Duckling.Time.Types.Winter }
                   Duckling.Time.Types.Winter
                   -> case y of wild1 { DEFAULT -> Duckling.Time.Types.Winter } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeasonName_$cmin ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> Duckling.Time.Types.SeasonName
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Duckling.Time.Types.SeasonName)
                   (y :: Duckling.Time.Types.SeasonName) ->
                 case x of wild {
                   Duckling.Time.Types.Spring
                   -> case y of wild1 { DEFAULT -> Duckling.Time.Types.Spring }
                   Duckling.Time.Types.Summer
                   -> case y of wild1 {
                        Duckling.Time.Types.Spring -> Duckling.Time.Types.Spring
                        Duckling.Time.Types.Summer -> Duckling.Time.Types.Summer
                        Duckling.Time.Types.Fall -> Duckling.Time.Types.Summer
                        Duckling.Time.Types.Winter -> Duckling.Time.Types.Summer }
                   Duckling.Time.Types.Fall
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Duckling.Time.Types.Fall -> Duckling.Time.Types.Fall
                        Duckling.Time.Types.Winter -> Duckling.Time.Types.Fall }
                   Duckling.Time.Types.Winter -> y }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$c< ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$c< ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeason_$c<1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.False
                        Duckling.Time.Types.Summer -> GHC.Types.True
                        Duckling.Time.Types.Fall -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.True }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Fall -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.True }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.True }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$c<= ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$c<= ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeason_$c<=1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.False
                        Duckling.Time.Types.Summer -> GHC.Types.True
                        Duckling.Time.Types.Fall -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.True }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Fall -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.True }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.True } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$c> ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$c> ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeason_$c>1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.True
                        Duckling.Time.Types.Summer -> GHC.Types.False
                        Duckling.Time.Types.Fall -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.False }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Fall -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.False }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.False } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$c>= ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$c>= ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeason_$c>=1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.True
                        Duckling.Time.Types.Summer -> GHC.Types.False
                        Duckling.Time.Types.Fall -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.False }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Fall -> GHC.Types.False
                        Duckling.Time.Types.Winter -> GHC.Types.False }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Duckling.Time.Types.Winter -> GHC.Types.False }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$ccompare ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 Duckling.Time.Types.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
a824c814fefb773479920a17bad751eb
  $fOrdSeason_$ccompare1 ::
    Duckling.Time.Types.SeasonName
    -> Duckling.Time.Types.SeasonName -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Duckling.Time.Types.SeasonName)
                   (b :: Duckling.Time.Types.SeasonName) ->
                 case a of wild {
                   Duckling.Time.Types.Spring
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.EQ
                        Duckling.Time.Types.Summer -> GHC.Types.LT
                        Duckling.Time.Types.Fall -> GHC.Types.LT
                        Duckling.Time.Types.Winter -> GHC.Types.LT }
                   Duckling.Time.Types.Summer
                   -> case b of wild1 {
                        Duckling.Time.Types.Spring -> GHC.Types.GT
                        Duckling.Time.Types.Summer -> GHC.Types.EQ
                        Duckling.Time.Types.Fall -> GHC.Types.LT
                        Duckling.Time.Types.Winter -> GHC.Types.LT }
                   Duckling.Time.Types.Fall
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Time.Types.Fall -> GHC.Types.EQ
                        Duckling.Time.Types.Winter -> GHC.Types.LT }
                   Duckling.Time.Types.Winter
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Duckling.Time.Types.Winter -> GHC.Types.EQ } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$cmax ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> Duckling.Time.Types.Season
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 case GHC.Integer.Type.compareInteger ww1 ww4 of wild {
                   GHC.Types.LT -> Duckling.Time.Types.Season ww4 ww5
                   GHC.Types.EQ
                   -> case ww2 of wild1 {
                        Duckling.Time.Types.Spring
                        -> case ww5 of wild2 { DEFAULT ->
                           Duckling.Time.Types.Season ww4 wild2 }
                        Duckling.Time.Types.Summer
                        -> case ww5 of wild2 {
                             Duckling.Time.Types.Spring
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Summer
                             Duckling.Time.Types.Summer
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Summer
                             Duckling.Time.Types.Fall
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Fall
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Winter }
                        Duckling.Time.Types.Fall
                        -> case ww5 of wild2 {
                             DEFAULT -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Fall
                             Duckling.Time.Types.Fall
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Fall
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Winter }
                        Duckling.Time.Types.Winter
                        -> case ww5 of wild2 {
                             DEFAULT
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Winter
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Winter } }
                   GHC.Types.GT -> Duckling.Time.Types.Season ww1 ww2 } } }) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fOrdSeason_$cmin ::
    Duckling.Time.Types.Season
    -> Duckling.Time.Types.Season -> Duckling.Time.Types.Season
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case w1 of ww3 { Duckling.Time.Types.Season ww4 ww5 ->
                 case GHC.Integer.Type.compareInteger ww1 ww4 of wild {
                   GHC.Types.LT -> Duckling.Time.Types.Season ww1 ww2
                   GHC.Types.EQ
                   -> case ww2 of wild1 {
                        Duckling.Time.Types.Spring
                        -> case ww5 of wild2 { DEFAULT ->
                           Duckling.Time.Types.Season ww1 Duckling.Time.Types.Spring }
                        Duckling.Time.Types.Summer
                        -> case ww5 of wild2 {
                             Duckling.Time.Types.Spring
                             -> Duckling.Time.Types.Season ww4 Duckling.Time.Types.Spring
                             Duckling.Time.Types.Summer
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Summer
                             Duckling.Time.Types.Fall
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Summer
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Summer }
                        Duckling.Time.Types.Fall
                        -> case ww5 of wild2 {
                             DEFAULT -> Duckling.Time.Types.Season ww4 wild2
                             Duckling.Time.Types.Fall
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Fall
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Fall }
                        Duckling.Time.Types.Winter
                        -> case ww5 of wild2 {
                             DEFAULT -> Duckling.Time.Types.Season ww4 wild2
                             Duckling.Time.Types.Winter
                             -> Duckling.Time.Types.Season ww1 Duckling.Time.Types.Winter } }
                   GHC.Types.GT -> Duckling.Time.Types.Season ww4 ww5 } } }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData :: GHC.Classes.Ord Duckling.Time.Types.TimeData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeData
                  Duckling.Time.Types.$fEqTimeData
                  Duckling.Time.Types.$fOrdTimeData_$ccompare
                  Duckling.Time.Types.$fOrdTimeData_$c<
                  Duckling.Time.Types.$fOrdTimeData_$c<=
                  Duckling.Time.Types.$fOrdTimeData_$c>
                  Duckling.Time.Types.$fOrdTimeData_$c>=
                  Duckling.Time.Types.$fOrdTimeData_$cmax
                  Duckling.Time.Types.$fOrdTimeData_$cmin -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$c< ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)><S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$c<= ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)><S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$c> ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)><S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$c>= ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)><S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$ccompare ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)><S(LLSLLLLLL),1*U(A,1*U,1*U,1*U,1*U,1*U,A,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeData)
                   (w1 :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case w1 of ww10 { Duckling.Time.Types.TimeData ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Duckling.Time.Types.$w$ccompare1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 } }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$cmax ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),U(U,U,U,U,U,U,U,U,U)><S(LLSLLLLLL),U(U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fOrdTimeData_$cmin ::
    Duckling.Time.Types.TimeData
    -> Duckling.Time.Types.TimeData -> Duckling.Time.Types.TimeData
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),U(U,U,U,U,U,U,U,U,U)><S(LLSLLLLLL),U(U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Duckling.Time.Types.TimeData)
                   (y :: Duckling.Time.Types.TimeData) ->
                 case Duckling.Time.Types.$fOrdTimeData_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fResolveTimeData ::
    Duckling.Resolve.Resolve Duckling.Time.Types.TimeData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeData
                  Duckling.Time.Types.$fEqTimeValue
                    `cast`
                  (GHC.Classes.Eq
                     (Sym (Duckling.Time.Types.D:R:ResolvedValueTimeData[0])))_R
                  Duckling.Time.Types.$fShowTimeValue
                    `cast`
                  (GHC.Show.Show
                     (Sym (Duckling.Time.Types.D:R:ResolvedValueTimeData[0])))_R
                  Duckling.Time.Types.$fToJSONTimeValue
                    `cast`
                  (Data.Aeson.Types.ToJSON.ToJSON
                     (Sym (Duckling.Time.Types.D:R:ResolvedValueTimeData[0])))_R
                  Duckling.Time.Types.$fResolveTimeData_$cresolve -}
30afdebe049cca4783f2b6e6cd997b57
  $fResolveTimeData_$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue Duckling.Time.Types.TimeData,
          GHC.Types.Bool)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U,U),A)><S,1*U><S,U(1*U,U,A,1*U,A,1*U,A,U,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Resolve.Context)
                   (w1 :: Duckling.Resolve.Options)
                   (w2 :: Duckling.Time.Types.TimeData) ->
                 case w2 of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Types.$w$cresolve w w1 ww1 ww2 ww4 ww6 ww8 }) -}
33bd2d4717799d9d00463f5a488c3cf2
  $fShowAMPM :: GHC.Show.Show Duckling.Time.Types.AMPM
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.AMPM
                  Duckling.Time.Types.$fShowAMPM_$cshowsPrec
                  Duckling.Time.Types.$fShowAMPM_$cshow
                  Duckling.Time.Types.$fShowAMPM_$cshowList -}
33bd2d4717799d9d00463f5a488c3cf2
  $fShowAMPM1 :: Duckling.Time.Types.AMPM -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.AMPM) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Time.Types.AM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowAMPM3)
                        eta
                   Duckling.Time.Types.PM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowAMPM2)
                        eta }) -}
6450e167aad58d1d8bb5183639514a09
  $fShowAMPM2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PM"#) -}
321acd5a70939a15817a7837a6639a71
  $fShowAMPM3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AM"#) -}
33bd2d4717799d9d00463f5a488c3cf2
  $fShowAMPM_$cshow :: Duckling.Time.Types.AMPM -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.AMPM) ->
                 case x of wild {
                   Duckling.Time.Types.AM -> Duckling.Time.Types.$fShowAMPM3
                   Duckling.Time.Types.PM -> Duckling.Time.Types.$fShowAMPM2 }) -}
33bd2d4717799d9d00463f5a488c3cf2
  $fShowAMPM_$cshowList ::
    [Duckling.Time.Types.AMPM] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.AMPM
                   Duckling.Time.Types.$fShowAMPM1) -}
33bd2d4717799d9d00463f5a488c3cf2
  $fShowAMPM_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.AMPM -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Time.Types.AMPM)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Time.Types.AM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowAMPM3)
                        eta
                   Duckling.Time.Types.PM
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowAMPM2)
                        eta }) -}
c80185ec1b344a03f6bbe3b44173e850
  $fShowForm :: GHC.Show.Show Duckling.Time.Types.Form
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Form
                  Duckling.Time.Types.$fShowForm_$cshowsPrec
                  Duckling.Time.Types.$fShowForm_$cshow
                  Duckling.Time.Types.$fShowForm_$cshowList -}
c80185ec1b344a03f6bbe3b44173e850
  $fShowForm1 :: Duckling.Time.Types.Form -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Duckling.Time.Types.$fShowForm_$cshowsPrec
                   Duckling.Time.Types.$fToJSONTimeValue11) -}
d89d070818947e7aae9de1e752634b48
  $fShowForm10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimeOfDay {"#) -}
ab9a0bf9d1fd3612c02c70f20838399e
  $fShowForm11 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Time.Types.$fShowForm12) -}
0a77d8115f6f6692a85819004ad381f9
  $fShowForm12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DayOfWeek"#) -}
c17e7ad06772867e50b10f9af6f82269
  $fShowForm2 :: GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Duckling.Time.Types.$fShowForm3) -}
c4b5cc8a4c543ca454712ac56126d9c0
  $fShowForm3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PartOfDay"#) -}
4e88ba2f287054b769f64614f4b25682
  $fShowForm4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "month = "#) -}
95249e45a7cfa64580e51d86588fdef6
  $fShowForm5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Month {"#) -}
a096c9681feb1c182a3836193a2c328c
  $fShowForm6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
dcf940de3ace68d715f8860e9d1a2722
  $fShowForm7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "is12H = "#) -}
853d1339c7819ff2fa93e371fcc73701
  $fShowForm8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
d427c46016641c91fd671ef7e767dca2
  $fShowForm9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "hours = "#) -}
c80185ec1b344a03f6bbe3b44173e850
  $fShowForm_$cshow :: Duckling.Time.Types.Form -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.Form) ->
                 Duckling.Time.Types.$fShowForm_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c80185ec1b344a03f6bbe3b44173e850
  $fShowForm_$cshowList ::
    [Duckling.Time.Types.Form] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.Form
                   Duckling.Time.Types.$fShowForm1) -}
c80185ec1b344a03f6bbe3b44173e850
  $fShowForm_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.Form -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Time.Types.Form) ->
                 case ds1 of wild {
                   Duckling.Time.Types.DayOfWeek -> Duckling.Time.Types.$fShowForm11
                   Duckling.Time.Types.TimeOfDay b1 b2
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ GHC.Types.Int
                            GHC.Show.$fShowInt
                            Duckling.Time.Types.$fToJSONTimeValue11
                            b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Time.Types.$fShowForm10
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Duckling.Time.Types.$fShowForm9
                               (f (GHC.Base.++
                                     @ GHC.Types.Char
                                     Duckling.Time.Types.$fShowForm8
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Duckling.Time.Types.$fShowForm7
                                        (case b2 of wild2 {
                                           GHC.Types.False
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                GHC.Show.shows18
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Duckling.Time.Types.$fShowForm6
                                                   x1)
                                           GHC.Types.True
                                           -> GHC.Base.++
                                                @ GHC.Types.Char
                                                GHC.Show.shows17
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Duckling.Time.Types.$fShowForm6
                                                   x1) })))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1)) } }
                   Duckling.Time.Types.Month b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ (x1 :: GHC.Base.String) ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Duckling.Time.Types.$fShowForm5
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Duckling.Time.Types.$fShowForm4
                               (case b1 of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt
                                       0#
                                       ww3
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          Duckling.Time.Types.$fShowForm6
                                          x1) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# x 11#) of wild2 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x1)) } }
                   Duckling.Time.Types.PartOfDay
                   -> Duckling.Time.Types.$fShowForm2 }) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fShowInstantValue ::
    GHC.Show.Show Duckling.Time.Types.InstantValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.InstantValue
                  Duckling.Time.Types.$fShowInstantValue_$cshowsPrec
                  Duckling.Time.Types.$fShowInstantValue_$cshow
                  Duckling.Time.Types.$fShowInstantValue_$cshowList -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fShowInstantValue1 ::
    Duckling.Time.Types.InstantValue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Time.Types.InstantValue)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Duckling.Time.Types.InstantValue ww1 ww2 ->
                 Duckling.Time.Types.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
f61eca274c358cf5288645b2675681b4
  $fShowInstantValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vGrain = "#) -}
532088c15d9b42368bd5885599eefa5d
  $fShowInstantValue3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vValue = "#) -}
7cb73faaa6b8430897d1f53841075aee
  $fShowInstantValue4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InstantValue {"#) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fShowInstantValue_$cshow ::
    Duckling.Time.Types.InstantValue -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,1*U)),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.InstantValue) ->
                 Duckling.Time.Types.$fShowInstantValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fShowInstantValue_$cshowList ::
    [Duckling.Time.Types.InstantValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.InstantValue
                   Duckling.Time.Types.$fShowInstantValue1) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fShowInstantValue_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.InstantValue -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,1*U)),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.InstantValue)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Time.Types.InstantValue ww3 ww4 ->
                 Duckling.Time.Types.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
794da663254a4d37bc004d93a2fd1e20
  $fShowIntervalDirection ::
    GHC.Show.Show Duckling.Time.Types.IntervalDirection
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.IntervalDirection
                  Duckling.Time.Types.$fShowIntervalDirection_$cshowsPrec
                  Duckling.Time.Types.$fShowIntervalDirection_$cshow
                  Duckling.Time.Types.$fShowIntervalDirection_$cshowList -}
794da663254a4d37bc004d93a2fd1e20
  $fShowIntervalDirection1 ::
    Duckling.Time.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Time.Types.Before
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowIntervalDirection3)
                        eta
                   Duckling.Time.Types.After
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowIntervalDirection2)
                        eta }) -}
42f9ebb658d49c8ab224f3b3e944478a
  $fShowIntervalDirection2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "After"#) -}
b494605e39bc874414352dcc9275f85b
  $fShowIntervalDirection3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Before"#) -}
794da663254a4d37bc004d93a2fd1e20
  $fShowIntervalDirection_$cshow ::
    Duckling.Time.Types.IntervalDirection -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.IntervalDirection) ->
                 case x of wild {
                   Duckling.Time.Types.Before
                   -> Duckling.Time.Types.$fShowIntervalDirection3
                   Duckling.Time.Types.After
                   -> Duckling.Time.Types.$fShowIntervalDirection2 }) -}
794da663254a4d37bc004d93a2fd1e20
  $fShowIntervalDirection_$cshowList ::
    [Duckling.Time.Types.IntervalDirection] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.IntervalDirection
                   Duckling.Time.Types.$fShowIntervalDirection1) -}
794da663254a4d37bc004d93a2fd1e20
  $fShowIntervalDirection_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Time.Types.IntervalDirection -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Time.Types.IntervalDirection)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Time.Types.Before
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowIntervalDirection3)
                        eta
                   Duckling.Time.Types.After
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowIntervalDirection2)
                        eta }) -}
406784162425eaceb69fef4bfcf3fc69
  $fShowNoShow :: GHC.Show.Show (Duckling.Time.Types.NoShow a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Duckling.Time.Types.NoShow a)
                  (Duckling.Time.Types.$fShowNoShow_$cshowsPrec @ a)
                  (Duckling.Time.Types.$fShowNoShow_$cshow @ a)
                  (Duckling.Time.Types.$fShowNoShow_$cshowList @ a) -}
73c3acfe50b078a0064a09a8c1a9bfe7
  $fShowNoShow1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "??"#) -}
406784162425eaceb69fef4bfcf3fc69
  $fShowNoShow_$cshow ::
    Duckling.Time.Types.NoShow a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Duckling.Time.Types.NoShow a) ->
                 Duckling.Time.Types.$fShowNoShow1) -}
406784162425eaceb69fef4bfcf3fc69
  $fShowNoShow_$cshowList ::
    [Duckling.Time.Types.NoShow a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Duckling.Time.Types.NoShow a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Duckling.Time.Types.NoShow a)
                   (\ (x :: Duckling.Time.Types.NoShow a)
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c1
                         n
                         Duckling.Time.Types.$fShowNoShow1)
                      s1)
                   ls
                   s) -}
406784162425eaceb69fef4bfcf3fc69
  $fShowNoShow_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.NoShow a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,A><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Duckling.Time.Types.NoShow a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c1
                      n
                      Duckling.Time.Types.$fShowNoShow1)
                   s) -}
533ec79e58f99d7c8cbf3906fba5ba38
  $fShowPredicate :: GHC.Show.Show Duckling.Time.Types.Predicate
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Predicate
                  Duckling.Time.Types.$fShowPredicate_$cshowsPrec
                  Duckling.Time.Types.$fShowPredicate_$cshow
                  Duckling.Time.Types.$fShowPredicate_$cshowList -}
533ec79e58f99d7c8cbf3906fba5ba38
  $fShowPredicate1 :: Duckling.Time.Types.Predicate -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Duckling.Time.Types.$fShowPredicate_$cshowsPrec
                   Duckling.Time.Types.$fToJSONTimeValue11) -}
533ec79e58f99d7c8cbf3906fba5ba38
  $fShowPredicate_$cshow ::
    Duckling.Time.Types.Predicate -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.Predicate) ->
                 Duckling.Time.Types.$fShowPredicate_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
533ec79e58f99d7c8cbf3906fba5ba38
  $fShowPredicate_$cshowList ::
    [Duckling.Time.Types.Predicate] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.Predicate
                   Duckling.Time.Types.$fShowPredicate1) -}
533ec79e58f99d7c8cbf3906fba5ba38
  $fShowPredicate_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.Predicate -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U> -}
973e527f0b8e86f8d0fe08affcec9f01
  $fShowSeason :: GHC.Show.Show Duckling.Time.Types.Season
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.Season
                  Duckling.Time.Types.$fShowSeason_$cshowsPrec
                  Duckling.Time.Types.$fShowSeason_$cshow
                  Duckling.Time.Types.$fShowSeason_$cshowList -}
973e527f0b8e86f8d0fe08affcec9f01
  $fShowSeason1 :: Duckling.Time.Types.Season -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Time.Types.Season)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 Duckling.Time.Types.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
379bdbf1c73e785df7199ad7b189c9c9
  $fShowSeason2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Season {"#) -}
4da726c94b38ca143dd01b9d40751788
  $fShowSeason3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Winter"#) -}
70f2393433c3876f982cac7659de5013
  $fShowSeason4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Fall"#) -}
54618dd6a277c905d0f086a6dc635754
  $fShowSeason5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Summer"#) -}
d7292cbe1fc1d6b81fb69c41e0e6cd06
  $fShowSeason6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Spring"#) -}
a476d778107f0abf7aa60baccb85ee9e
  $fShowSeason7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "seasonName = "#) -}
2c7762056a5e15b79130fd779ea9c33d
  $fShowSeason8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "startYear = "#) -}
a824c814fefb773479920a17bad751eb
  $fShowSeasonName :: GHC.Show.Show Duckling.Time.Types.SeasonName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SeasonName
                  Duckling.Time.Types.$fShowSeasonName_$cshowsPrec
                  Duckling.Time.Types.$fShowSeasonName_$cshow
                  Duckling.Time.Types.$fShowSeasonName_$cshowList -}
a824c814fefb773479920a17bad751eb
  $fShowSeasonName_$cshow ::
    Duckling.Time.Types.SeasonName -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.SeasonName) ->
                 Duckling.Time.Types.$fShowSeasonName_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a824c814fefb773479920a17bad751eb
  $fShowSeasonName_$cshowList ::
    [Duckling.Time.Types.SeasonName] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.SeasonName
                   Duckling.Time.Types.$w$cshowsPrec4) -}
a824c814fefb773479920a17bad751eb
  $fShowSeasonName_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.SeasonName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.SeasonName)
                   (w2 :: GHC.Base.String) ->
                 Duckling.Time.Types.$w$cshowsPrec4 w1 w2) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fShowSeason_$cshow ::
    Duckling.Time.Types.Season -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.Season) ->
                 Duckling.Time.Types.$fShowSeason_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fShowSeason_$cshowList ::
    [Duckling.Time.Types.Season] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.Season
                   Duckling.Time.Types.$fShowSeason1) -}
973e527f0b8e86f8d0fe08affcec9f01
  $fShowSeason_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.Season -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.Season)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Time.Types.Season ww3 ww4 ->
                 Duckling.Time.Types.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
bdbf0c070c694d198978600704691028
  $fShowSingleTimeValue ::
    GHC.Show.Show Duckling.Time.Types.SingleTimeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SingleTimeValue
                  Duckling.Time.Types.$fShowSingleTimeValue_$cshowsPrec
                  Duckling.Time.Types.$fShowSingleTimeValue_$cshow
                  Duckling.Time.Types.$fShowSingleTimeValue_$cshowList -}
bdbf0c070c694d198978600704691028
  $fShowSingleTimeValue_$cshow ::
    Duckling.Time.Types.SingleTimeValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.SingleTimeValue) ->
                 Duckling.Time.Types.$fShowSingleTimeValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bdbf0c070c694d198978600704691028
  $fShowSingleTimeValue_$cshowList ::
    [Duckling.Time.Types.SingleTimeValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.SingleTimeValue
                   Duckling.Time.Types.$fShowTimeValue3) -}
bdbf0c070c694d198978600704691028
  $fShowSingleTimeValue_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Time.Types.SingleTimeValue -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.SingleTimeValue)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Time.Types.$w$cshowsPrec1 ww1 w1 w2 }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fShowTimeData :: GHC.Show.Show Duckling.Time.Types.TimeData
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeData
                  Duckling.Time.Types.$fShowTimeData_$cshowsPrec
                  Duckling.Time.Types.$fShowTimeData_$cshow
                  Duckling.Time.Types.$fShowTimeData_$cshowList -}
30afdebe049cca4783f2b6e6cd997b57
  $fShowTimeData1 ::
    Duckling.Time.Types.TimeData -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Duckling.Time.Types.TimeData)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Duckling.Time.Types.$w$cshow ww2 ww3 ww5 ww6 ww8 ww9)
                   s }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fShowTimeData_$cshow ::
    Duckling.Time.Types.TimeData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(A,1*U,1*U,A,1*U,1*U,A,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeData) ->
                 case w of ww { Duckling.Time.Types.TimeData ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Duckling.Time.Types.$w$cshow ww2 ww3 ww5 ww6 ww8 ww9 }) -}
30afdebe049cca4783f2b6e6cd997b57
  $fShowTimeData_$cshowList ::
    [Duckling.Time.Types.TimeData] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Duckling.Time.Types.TimeData])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Duckling.Time.Types.TimeData
                   Duckling.Time.Types.$fShowTimeData1
                   ls
                   s) -}
30afdebe049cca4783f2b6e6cd997b57
  $fShowTimeData_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.TimeData -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,A><S,1*U(A,1*U,1*U,A,1*U,1*U,A,1*U,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: Duckling.Time.Types.TimeData)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c1
                      n
                      (Duckling.Time.Types.$fShowTimeData_$cshow x))
                   s) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fShowTimeIntervalType ::
    GHC.Show.Show Duckling.Time.Types.TimeIntervalType
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeIntervalType
                  Duckling.Time.Types.$fShowTimeIntervalType_$cshowsPrec
                  Duckling.Time.Types.$fShowTimeIntervalType_$cshow
                  Duckling.Time.Types.$fShowTimeIntervalType_$cshowList -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fShowTimeIntervalType1 ::
    Duckling.Time.Types.TimeIntervalType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Duckling.Time.Types.TimeIntervalType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Duckling.Time.Types.Open
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowTimeIntervalType3)
                        eta
                   Duckling.Time.Types.Closed
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowTimeIntervalType2)
                        eta }) -}
6cac01462a32fb67f91c29fd9159477e
  $fShowTimeIntervalType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Closed"#) -}
2e4a5bd6d7a80128cebdac2faed5f3a3
  $fShowTimeIntervalType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Open"#) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fShowTimeIntervalType_$cshow ::
    Duckling.Time.Types.TimeIntervalType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.TimeIntervalType) ->
                 case x of wild {
                   Duckling.Time.Types.Open
                   -> Duckling.Time.Types.$fShowTimeIntervalType3
                   Duckling.Time.Types.Closed
                   -> Duckling.Time.Types.$fShowTimeIntervalType2 }) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fShowTimeIntervalType_$cshowList ::
    [Duckling.Time.Types.TimeIntervalType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.TimeIntervalType
                   Duckling.Time.Types.$fShowTimeIntervalType1) -}
c095d8efdfdd07a22d96cdf4e02bfd32
  $fShowTimeIntervalType_$cshowsPrec ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeIntervalType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Duckling.Time.Types.TimeIntervalType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Duckling.Time.Types.Open
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowTimeIntervalType3)
                        eta
                   Duckling.Time.Types.Closed
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Duckling.Time.Types.$fShowTimeIntervalType2)
                        eta }) -}
cebf1bb42889d6dda342d21248135915
  $fShowTimeObject :: GHC.Show.Show Duckling.Time.Types.TimeObject
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeObject
                  Duckling.Time.Types.$fShowTimeObject_$cshowsPrec
                  Duckling.Time.Types.$fShowTimeObject_$cshow
                  Duckling.Time.Types.$fShowTimeObject_$cshowList -}
cebf1bb42889d6dda342d21248135915
  $fShowTimeObject1 ::
    Duckling.Time.Types.TimeObject -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 Duckling.Time.Types.$w$cshowsPrec5 0# ww1 ww2 ww3 }) -}
f94acc31fbf3a9d1ea4cafa2029b7fc2
  $fShowTimeObject2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "end = "#) -}
b8cf472aee214a2eb9b4a0399ec9b907
  $fShowTimeObject3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "grain = "#) -}
2e2836d1fd00bf7e1d40cc5b6b469c12
  $fShowTimeObject4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "start = "#) -}
4ec0d4422109a25a56e9c24c856388b1
  $fShowTimeObject5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimeObject {"#) -}
cebf1bb42889d6dda342d21248135915
  $fShowTimeObject_$cshow ::
    Duckling.Time.Types.TimeObject -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.$fShowTimeObject_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cebf1bb42889d6dda342d21248135915
  $fShowTimeObject_$cshowList ::
    [Duckling.Time.Types.TimeObject] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.TimeObject
                   Duckling.Time.Types.$fShowTimeObject1) -}
cebf1bb42889d6dda342d21248135915
  $fShowTimeObject_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.TimeObject -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U),U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Time.Types.TimeObject ww3 ww4 ww5 ->
                 Duckling.Time.Types.$w$cshowsPrec5 ww1 ww3 ww4 ww5 } }) -}
d712de0b6b1b686da9f87f91641709f6
  $fShowTimeValue :: GHC.Show.Show Duckling.Time.Types.TimeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeValue
                  Duckling.Time.Types.$fShowTimeValue_$cshowsPrec
                  Duckling.Time.Types.$fShowTimeValue_$cshow
                  Duckling.Time.Types.$fShowTimeValue_$cshowList -}
d712de0b6b1b686da9f87f91641709f6
  $fShowTimeValue1 :: Duckling.Time.Types.TimeValue -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Duckling.Time.Types.TimeValue) ->
                 case w of ww { Duckling.Time.Types.TimeValue ww1 ww2 ww3 ->
                 Duckling.Time.Types.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
49baa0c97d5b1c2e38a15a422c6e0896
  $fShowTimeValue2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimeValue "#) -}
bdbf0c070c694d198978600704691028
  $fShowTimeValue3 ::
    Duckling.Time.Types.SingleTimeValue -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Duckling.Time.Types.SingleTimeValue)
                   (w1 :: GHC.Base.String) ->
                 Duckling.Time.Types.$w$cshowsPrec1 0# w w1) -}
2a81fd52658bdee79c0961b31c4a968f
  $fShowTimeValue4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d712de0b6b1b686da9f87f91641709f6
  $fShowTimeValue_$cshow ::
    Duckling.Time.Types.TimeValue -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Duckling.Time.Types.TimeValue) ->
                 Duckling.Time.Types.$fShowTimeValue_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d712de0b6b1b686da9f87f91641709f6
  $fShowTimeValue_$cshowList ::
    [Duckling.Time.Types.TimeValue] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Duckling.Time.Types.TimeValue
                   Duckling.Time.Types.$fShowTimeValue1) -}
d712de0b6b1b686da9f87f91641709f6
  $fShowTimeValue_$cshowsPrec ::
    GHC.Types.Int -> Duckling.Time.Types.TimeValue -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Duckling.Time.Types.TimeValue) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Duckling.Time.Types.TimeValue ww3 ww4 ww5 ->
                 Duckling.Time.Types.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fToJSONInstantValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Time.Types.InstantValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.InstantValue
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2
                  Duckling.Time.Types.$fToJSONInstantValue_$ctoEncoding
                  Duckling.Time.Types.$fToJSONInstantValue_$ctoJSONList
                  Duckling.Time.Types.$fToJSONInstantValue_$ctoEncodingList -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fToJSONInstantValue_$ctoEncoding ::
    Duckling.Time.Types.InstantValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,A)),1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Time.Types.InstantValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 eta)) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fToJSONInstantValue_$ctoEncodingList ::
    [Duckling.Time.Types.InstantValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.InstantValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Time.Types.InstantValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Time.Types.InstantValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Time.Types.InstantValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fToJSONInstantValue_$ctoJSONList ::
    [Duckling.Time.Types.InstantValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.InstantValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c1 :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Time.Types.InstantValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Time.Types.InstantValue
                                       c1
                                       Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
bdbf0c070c694d198978600704691028
  $fToJSONSingleTimeValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Time.Types.SingleTimeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.SingleTimeValue
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1
                  Duckling.Time.Types.$fToJSONSingleTimeValue_$ctoEncoding
                  Duckling.Time.Types.$fToJSONSingleTimeValue_$ctoJSONList
                  Duckling.Time.Types.$fToJSONSingleTimeValue_$ctoEncodingList -}
bdbf0c070c694d198978600704691028
  $fToJSONSingleTimeValue_$ctoEncoding ::
    Duckling.Time.Types.SingleTimeValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Time.Types.SingleTimeValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1 eta)) -}
bdbf0c070c694d198978600704691028
  $fToJSONSingleTimeValue_$ctoEncodingList ::
    [Duckling.Time.Types.SingleTimeValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.SingleTimeValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1 x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Time.Types.SingleTimeValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Time.Types.SingleTimeValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1 v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Time.Types.SingleTimeValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
bdbf0c070c694d198978600704691028
  $fToJSONSingleTimeValue_$ctoJSONList ::
    [Duckling.Time.Types.SingleTimeValue]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.SingleTimeValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c1 :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Time.Types.SingleTimeValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Time.Types.SingleTimeValue
                                       c1
                                       Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
d712de0b6b1b686da9f87f91641709f6
  $fToJSONTimeValue ::
    Data.Aeson.Types.ToJSON.ToJSON Duckling.Time.Types.TimeValue
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Duckling.Time.Types.TimeValue
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoEncoding
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoJSONList
                  Duckling.Time.Types.$fToJSONTimeValue_$ctoEncodingList -}
23cbb3b4b69b1785c81161782d6e8f62
  $fToJSONTimeValue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "holidayBeta"#) -}
49576e2e414692e39851ea24386ff680
  $fToJSONTimeValue10 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
9322f2700d0dbdfe99769d418e64c48a
  $fToJSONTimeValue11 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
c2c2c5789eb64fc02bb7ebd9e30b0e9c
  $fToJSONTimeValue12 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
161bdb4de04c7a0fe42fae14e4c9c549
  $fToJSONTimeValue2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "values"#) -}
967cba1ec1bfe7840057248769f2e034
  $fToJSONTimeValue3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "to"#) -}
4f182d4058c7e53f2578dd12d154d5cc
  $fToJSONTimeValue4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "grain"#) -}
07331de6fb837727372f27db25b80de6
  $fToJSONTimeValue5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "value"#) -}
95825f9f6ad64f1d5cd91fa8d84fedba
  $fToJSONTimeValue6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "from"#) -}
ea35ae54e2142c5a3056d50a70624449
  $fToJSONTimeValue7 :: Data.Aeson.Types.Internal.Pair
  {- Strictness: m,
     Unfolding: ((Duckling.Time.Types.$fToJSONTimeValue9,
                  Duckling.Time.Types.$fToJSONTimeValue8)) -}
a1d733e42713a4bf214455470757f887
  $fToJSONTimeValue8 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "interval"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
f2eeec203503373ef139c3f5d7f8703e
  $fToJSONTimeValue9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "type"#) -}
d712de0b6b1b686da9f87f91641709f6
  $fToJSONTimeValue_$ctoEncoding ::
    Duckling.Time.Types.TimeValue
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Duckling.Time.Types.TimeValue) ->
                 Data.Aeson.Encoding.Internal.value
                   (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON eta)) -}
d712de0b6b1b686da9f87f91641709f6
  $fToJSONTimeValue_$ctoEncodingList ::
    [Duckling.Time.Types.TimeValue]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.TimeValue]) ->
                 case eta of wild {
                   [] -> Data.Aeson.Encoding.Internal.emptyArray_
                   : x xs
                   -> (Data.ByteString.Builder.Internal.append
                         (Data.Aeson.Encoding.Internal.openBracket
                            @ Data.Aeson.Types.Internal.Value)
                           `cast`
                         (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                              <Data.Aeson.Types.Internal.Value>_P)
                         (Data.ByteString.Builder.Internal.append
                            (Data.Aeson.Encoding.Internal.value
                               (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON x))
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P)
                            (Data.ByteString.Builder.Internal.append
                               (GHC.Base.foldr
                                  @ Duckling.Time.Types.TimeValue
                                  @ (Data.Aeson.Encoding.Internal.Encoding'
                                       Data.Aeson.Types.Internal.Value)
                                  (\ (v :: Duckling.Time.Types.TimeValue)
                                     (vs :: Data.Aeson.Encoding.Internal.Encoding'
                                              Data.Aeson.Types.Internal.Value)[OneShot] ->
                                   Data.ByteString.Builder.Internal.append
                                     (Data.Aeson.Encoding.Internal.comma
                                        @ Data.Aeson.Types.Internal.Value)
                                       `cast`
                                     (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                          <Data.Aeson.Types.Internal.Value>_P)
                                     (Data.ByteString.Builder.Internal.append
                                        (Data.Aeson.Encoding.Internal.value
                                           (Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON v))
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)
                                        vs
                                          `cast`
                                        (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                             <Data.Aeson.Types.Internal.Value>_P)))
                                    `cast`
                                  (<Duckling.Time.Types.TimeValue>_R
                                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                                           Data.Aeson.Types.Internal.Value>_R
                                   ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                 <Data.Aeson.Types.Internal.Value>_P))
                                  (Data.Aeson.Encoding.Internal.empty
                                     @ Data.Aeson.Types.Internal.Value)
                                  xs)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P)
                               (Data.Aeson.Encoding.Internal.closeBracket
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                    <Data.Aeson.Types.Internal.Value>_P))))
                        `cast`
                      (Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P)) }) -}
d712de0b6b1b686da9f87f91641709f6
  $fToJSONTimeValue_$ctoJSON ::
    Duckling.Time.Types.TimeValue -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,1*U,1*U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeValue) ->
                 case w of ww { Duckling.Time.Types.TimeValue ww1 ww2 ww3 ->
                 case Duckling.Time.Types.$w$ctoJSON
                        ww1
                        ww2
                        ww3 of ww4 { Unit# ww5 ->
                 Data.Aeson.Types.Internal.Object ww5 } }) -}
bdbf0c070c694d198978600704691028
  $fToJSONTimeValue_$ctoJSON1 ::
    Duckling.Time.Types.SingleTimeValue
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.SingleTimeValue) ->
                 case Duckling.Time.Types.$w$ctoJSON1 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
d0f859179691e515a8b3fc5f8b42c1d9
  $fToJSONTimeValue_$ctoJSON2 ::
    Duckling.Time.Types.InstantValue -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,A)),1*U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.InstantValue) ->
                 case w of ww { Duckling.Time.Types.InstantValue ww1 ww2 ->
                 case Duckling.Time.Types.$w$ctoJSON2 ww1 ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
d712de0b6b1b686da9f87f91641709f6
  $fToJSONTimeValue_$ctoJSONList ::
    [Duckling.Time.Types.TimeValue] -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: [Duckling.Time.Types.TimeValue]) ->
                 case Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c1 :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ Duckling.Time.Types.TimeValue
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ Duckling.Time.Types.TimeValue
                                       c1
                                       Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON)
                                    n
                                    eta)))) of dt1 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.Array dt1 }) -}
3d21f1387973e7f6614711a4efc3b35c
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Bool, GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Bool, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Bool
                     @ GHC.Types.Int
                     GHC.Show.$fShowBool
                     GHC.Show.$fShowInt)
                  Duckling.Time.Types.$s$fShow(,)_$s$fShow(,)_$cshow
                  Duckling.Time.Types.$s$fShow(,)_$s$fShow(,)_$cshowList -}
61549db929a981696a1eb158568fc042
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (GHC.Types.Bool, GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: (GHC.Types.Bool, GHC.Types.Int)) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Bool
                   @ GHC.Types.Int
                   GHC.Show.$fShowBool
                   GHC.Show.$fShowInt
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2d94007901a90f91342c1780d80cbf81
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(GHC.Types.Bool, GHC.Types.Int)] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(GHC.Types.Bool, GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Types.Bool, GHC.Types.Int)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Bool
                      @ GHC.Types.Int
                      GHC.Show.$fShowBool
                      GHC.Show.$fShowInt
                      GHC.Show.shows22)
                   eta
                   eta1) -}
2ba6675bf04b4128cbfece05e6ce6297
  $tc'AM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11326706781622137409##
                   3600093508215035126##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'AM1) -}
ecb8908d2809bd38724f145d54adad63
  $tc'AM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AM"#) -}
4b708b552c9f44941eaa35b3a9da3e24
  $tc'After :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8699103863851381267##
                   11711372596135975510##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'After1) -}
7bfa6d15ab377a33dfd58587ac3c3702
  $tc'After1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'After"#) -}
ae0aab50804586912a18f58d3c14fdb7
  $tc'Before :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11691233642924887607##
                   15580763522916282282##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Before1) -}
df68062779813d49ae50899dc4be90d7
  $tc'Before1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Before"#) -}
6125a81d06777a6d1d22b71933359fd8
  $tc'Closed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10712445550679348688##
                   13540214956845873566##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Closed1) -}
19b52335c2c6657127e3ee79d3c6d80d
  $tc'Closed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Closed"#) -}
dad5d9196c259017a372fab3db8900bb
  $tc'DayOfWeek :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   578998717950700279##
                   15526096541841051498##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'DayOfWeek1) -}
3d862585fae3852ef5f9c509efd70d0a
  $tc'DayOfWeek1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DayOfWeek"#) -}
2e58b5a651400bb5d6c43c16f9834f5c
  $tc'EmptyPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14261223235557671980##
                   189249081870188853##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'EmptyPredicate1) -}
97b4ead933ec6a0e5fd9a8b8dda3de5e
  $tc'EmptyPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptyPredicate"#) -}
3b28bf5b4384caf16dab235a764c8dbb
  $tc'Fall :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13814040106880925747##
                   11274165784653627337##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Fall1) -}
2263729d5d471cee124edc0d87994e76
  $tc'Fall1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fall"#) -}
4176da6c4c4d0421fa1acaea754120cc
  $tc'InstantValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9334067858497149012##
                   2637701204273756458##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'InstantValue1) -}
50ab2678b0381a779f3baf7c2b2b81f1
  $tc'InstantValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InstantValue"#) -}
190d41cb5413e36540a1a13026a12d4f
  $tc'IntersectPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13844919193612471807##
                   16485470015634626224##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'IntersectPredicate1) -}
a9144e4dcacaf6003e5f14909211e9dc
  $tc'IntersectPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntersectPredicate"#) -}
67844017e816221d57efb7ab115504de
  $tc'IntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12323044985280583266##
                   13056216408754021574##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'IntervalValue1) -}
7c6acbdd5a5e6620ab2bbada48111f9b
  $tc'IntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntervalValue"#) -}
f0efa33e183ab8e4234c1610e7cb3eb4
  $tc'Month :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1730891071125184042##
                   948701089351781200##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Month1) -}
70139dd3b6bcad7f28a3a9229ae1f053
  $tc'Month1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Month"#) -}
71008184de50c23eb798b3a92ae23929
  $tc'NoShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14871196335262620377##
                   1205299921911595634##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'NoShow1) -}
80dcf9e6d7b8aa2730ce808666a8ce4a
  $tc'NoShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoShow"#) -}
32383866fcfd229d8c86d466c2d35fab
  $tc'Open :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14673152207024922795##
                   707352034133954759##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Open1) -}
7851a1d5344dda9c35e892c10a9c834c
  $tc'Open1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Open"#) -}
dc7342e66a9961a4d437e7957d73d45e
  $tc'OpenIntervalValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9168917139647381266##
                   5403121119232946284##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'OpenIntervalValue1) -}
49c8f324a62d080a24c1169ce1fdd933
  $tc'OpenIntervalValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpenIntervalValue"#) -}
7d04fca502228a6c05a03bb2829ae7b3
  $tc'PM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7968016530832359853##
                   5361183940383528660##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'PM1) -}
22a611edb06b79822d88efc5d4fbdcc5
  $tc'PM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PM"#) -}
db0284d0dd5f0c93b22ea521ba2b7926
  $tc'PartOfDay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18038624881401922502##
                   3004799106660551006##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'PartOfDay1) -}
263f0f5e14d9b709d7ac964fea0e197f
  $tc'PartOfDay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PartOfDay"#) -}
656f5803582cfcb6383fff5e3cc2af0d
  $tc'ReplaceIntersectPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12582291853956062814##
                   9214057481849410722##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'ReplaceIntersectPredicate1) -}
00926b5d982b60c098ce57b5ab65ef94
  $tc'ReplaceIntersectPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ReplaceIntersectPredicate"#) -}
9108d6ab60959042173bcfecd6147381
  $tc'Season :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3858572306297688715##
                   9563401103278740777##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Season1) -}
c09574985d7e3af8fe27a47608d957b8
  $tc'Season1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Season"#) -}
d90ebdcb4886d417c9ef684486275c88
  $tc'SeriesPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6048519320402304625##
                   1725277882628329568##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'SeriesPredicate1) -}
9857e84d00264edbb170096d9f9d3a34
  $tc'SeriesPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SeriesPredicate"#) -}
0c8ab9bb9fddc473c37545b038927968
  $tc'SimpleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6708968433976581889##
                   9048485343075837098##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'SimpleValue1) -}
a50ddfd0fd86a4f797dab72a8620a635
  $tc'SimpleValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SimpleValue"#) -}
60a3e191a8971a739266f5479f59032a
  $tc'Spring :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   852472464361230652##
                   7853957418681650630##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Spring1) -}
7cbdb5041898ba25efd7a3be90434c2d
  $tc'Spring1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Spring"#) -}
584d0ab90437385a37f736bcf6584a71
  $tc'Summer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8986842459712994528##
                   6506901941436640689##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Summer1) -}
de391210f4c894976d190a47c89312a0
  $tc'Summer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Summer"#) -}
97fbdcff4bc3e39a6dec369f35ed626b
  $tc'TimeContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14013177618802463280##
                   17519539438405314358##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeContext1) -}
3811423ebd298b0fa7fca43307daca42
  $tc'TimeContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeContext"#) -}
715bfa093349cffe4cd4fc0fad00cbec
  $tc'TimeData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3217471087521842813##
                   14191200580566190372##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeData1) -}
2df3cded23a2099cf1a41e6d7b99ce57
  $tc'TimeData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeData"#) -}
a7822807f42a7d8fcef65595993d6bce
  $tc'TimeDatePredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10948471847115763391##
                   9484557943421021329##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeDatePredicate1) -}
914f97096477703808ec52e0e38530ff
  $tc'TimeDatePredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeDatePredicate"#) -}
c9ed100a7cc4a57b5ab6eeea16e17ceb
  $tc'TimeIntervalsPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5405037689667931743##
                   8895214112874386984##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeIntervalsPredicate1) -}
3ded4628c8fa8ea3fe44c9d1329b16c5
  $tc'TimeIntervalsPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeIntervalsPredicate"#) -}
e0135175bab7297c4132f5fe2e50f95d
  $tc'TimeObject :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3802934875286860053##
                   3867147482207109888##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeObject1) -}
8b86a4b319b5dbdfe32843c7f044d5cc
  $tc'TimeObject1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeObject"#) -}
da10b5f494acf39bbc82f3da77d8e2e9
  $tc'TimeOfDay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1847808744623913666##
                   3664809113255815971##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeOfDay1) -}
c9d75af26cf2db6aa30404a1c6506712
  $tc'TimeOfDay1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeOfDay"#) -}
dce97faae7246d62838418b62be75b6e
  $tc'TimeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12586449271145016679##
                   73782380520635484##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'TimeValue1) -}
41eeef1506fbed25608e81a7ad13f6a4
  $tc'TimeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimeValue"#) -}
1228123b5d996f455e26fc697783bdad
  $tc'Winter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4929637954093762917##
                   13611627709745480799##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tc'Winter1) -}
798773c4a3b113bd3f282e22d27c3346
  $tc'Winter1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Winter"#) -}
d1db809e4459431803dc50ab4c7c4413
  $tcAMPM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7759093825836182819##
                   5231712694866942529##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcAMPM1) -}
f1737cebff684c91e68024b3fa514a57
  $tcAMPM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AMPM"#) -}
832efad027dc145541e60486c7e6822d
  $tcForm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13728758652082305891##
                   16619411352790211290##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcForm1) -}
4368905348dbd8624b9cbc77a1e5f20c
  $tcForm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Form"#) -}
4f4d68fcbcaeb64be0ca6741b48176e9
  $tcInstantValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9703335974079993952##
                   1468594031196874029##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcInstantValue1) -}
58c4301a292995b37f0a1ae1aae2cd6f
  $tcInstantValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "InstantValue"#) -}
a2650a682210ecb58f802d2a8c47b651
  $tcIntervalDirection :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4657025330156674195##
                   3114004111996221831##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcIntervalDirection1) -}
01ad591dd32def06cae691f53ddf7203
  $tcIntervalDirection1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntervalDirection"#) -}
c79946e7303127cb8656cf6f8cd3c145
  $tcNoShow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15985359637022106434##
                   9731234320876902605##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcNoShow1) -}
8bd97ab2eb6c6920dacdd7269e6413e3
  $tcNoShow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NoShow"#) -}
91438dddb1bc51dd3388f0048209103d
  $tcPredicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17522944951745061741##
                   13160971344190804465##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcPredicate1) -}
b8dbcf0bcf933bacbcd1ea4ed77c20ae
  $tcPredicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Predicate"#) -}
0927b6687cac9fd24c8130e45a2201c1
  $tcSeason :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8920895471396223344##
                   4267643497209671868##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcSeason1) -}
d0bd363ae34ea29777578c0d6c1bf5a1
  $tcSeason1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Season"#) -}
76a44f75e09443375d2c5779afceab3e
  $tcSeasonName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4254632825443512983##
                   12826754064924339169##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcSeasonName1) -}
fbc88410e6aaf47e7b90886ea71ec408
  $tcSeasonName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SeasonName"#) -}
cec9bf0b8ebd18ae191a7d192dec158c
  $tcSingleTimeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11874865186203981713##
                   15983625583227202301##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcSingleTimeValue1) -}
76f4ffd7fe00fef531d1b707838d9182
  $tcSingleTimeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SingleTimeValue"#) -}
617b15fd0599f788da89ada26b5e7c36
  $tcTimeContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15662349035199787569##
                   12514132642584656351##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcTimeContext1) -}
925a3c16454b57f9083c2cde84a17746
  $tcTimeContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TimeContext"#) -}
030a14eca5d89047856543ae9f353190
  $tcTimeData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5697972262936297653##
                   9511598993257293829##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcTimeData1) -}
5107148b1f32996ac021f6e7be470d63
  $tcTimeData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TimeData"#) -}
adc61943bcea7c8eb275a897e827500c
  $tcTimeIntervalType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1502389167891372943##
                   16756578720791985897##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcTimeIntervalType1) -}
2e5a11ba5633d65e71a7c707418e2bdb
  $tcTimeIntervalType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TimeIntervalType"#) -}
42ca4256be86bfcbe282bbbe7c7ea8c6
  $tcTimeObject :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17335656176978539377##
                   18020015539649055680##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcTimeObject1) -}
3b97f5a2b7386365b93c07f8bbdafe98
  $tcTimeObject1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TimeObject"#) -}
3c84a298d74abb58124d40447b86e4ee
  $tcTimeValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15427986180262104218##
                   4972063833704475589##
                   Duckling.Time.Types.$trModule
                   Duckling.Time.Types.$tcTimeValue1) -}
186e1b26c2dce8256dad3903e449c382
  $tcTimeValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TimeValue"#) -}
11b404e3574f11ad13b06d057b2ca15a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Duckling.Time.Types.$trModule2
                   Duckling.Time.Types.$trModule1) -}
5dcc3e118ec54fd94f3f8f2cf2f24404
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Duckling.Time.Types"#) -}
9f9c9b24c52292f07781f4327128f4da
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"#) -}
60f6ec6913046bf6514602da2d2f4fbc
  $w$c< ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.compareInteger ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> Duckling.Time.Types.$fOrdSeason_$c<1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
78dd7819c76bc31b3379ba9917db40b9
  $w$c<= ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.compareInteger ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> Duckling.Time.Types.$fOrdSeason_$c<=1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
639e18300ac853b83e951492abf286c6
  $w$c== ::
    Data.Time.LocalTime.LocalTime.LocalTime
    -> Data.Time.LocalTime.TimeZone.TimeZone
    -> Duckling.TimeGrain.Types.Grain
    -> Data.Time.LocalTime.LocalTime.LocalTime
    -> Data.Time.LocalTime.TimeZone.TimeZone
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*U,1*U(1*U(U),1*U(U),1*U))><L,1*U(1*U(U),1*U,1*U)><S,1*U><L,1*U(1*U,1*U(1*U(U),1*U(U),1*U))><L,1*U(1*U(U),1*U,1*U)><S,1*U>,
     Inline: [0] -}
54465455beb6e90b3a53d895b44061ef
  $w$c==1 ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.eqInteger# ww ww2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Duckling.Time.Types.$fEqSeason_$c==1 ww1 ww3 } }) -}
5d4f408a46810efca09fc6be64d0fe34
  $w$c==2 ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
8e5062f02961566945468c496476442f
  $w$c==3 ::
    Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Time.Calendar.Days.Day)
                   (ww1 :: Data.Time.Clock.Scale.DiffTime)
                   (ww2 :: Duckling.TimeGrain.Types.Grain)
                   (ww3 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime)
                   (ww4 :: Data.Time.Calendar.Days.Day)
                   (ww5 :: Data.Time.Clock.Scale.DiffTime)
                   (ww6 :: Duckling.TimeGrain.Types.Grain)
                   (ww7 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 case GHC.Integer.Type.eqInteger#
                        ww `cast` (Data.Time.Calendar.Days.N:Day[0])
                        ww4 `cast` (Data.Time.Calendar.Days.N:Day[0]) of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Integer.Type.eqInteger#
                             ww1
                               `cast`
                             (Trans
                                  (Data.Time.Clock.Scale.N:DiffTime[0])
                                  (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                             ww5
                               `cast`
                             (Trans
                                  (Data.Time.Clock.Scale.N:DiffTime[0])
                                  (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P)) of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> let {
                             $j1 :: GHC.Prim.Void# -> GHC.Types.Bool
                               {- Arity: 1, Strictness: <L,A> -}
                             = \ (w :: GHC.Prim.Void#)[OneShot] ->
                               case ww3 of wild4 {
                                 GHC.Base.Nothing
                                 -> case ww7 of wild5 {
                                      GHC.Base.Nothing -> GHC.Types.True
                                      GHC.Base.Just ipv -> GHC.Types.False }
                                 GHC.Base.Just a1
                                 -> case ww7 of wild5 {
                                      GHC.Base.Nothing -> GHC.Types.False
                                      GHC.Base.Just b1
                                      -> Data.Time.Clock.UTC.$fEqUTCTime_$c== a1 b1 } }
                           } in
                           case ww2 of wild4 {
                             Duckling.TimeGrain.Types.NoGrain
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.NoGrain -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Second
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Second -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Minute
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Minute -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Hour
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Hour -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Day
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Day -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Week
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Week -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Month
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Month -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Quarter
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Quarter -> $j1 GHC.Prim.void# }
                             Duckling.TimeGrain.Types.Year
                             -> case ww6 of wild5 {
                                  DEFAULT -> GHC.Types.False
                                  Duckling.TimeGrain.Types.Year
                                  -> $j1 GHC.Prim.void# } } } } } }) -}
3412bbdede80a83685f277fdd21ef652
  $w$c==4 ::
    Duckling.Time.Types.SingleTimeValue
    -> [Duckling.Time.Types.SingleTimeValue]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> Duckling.Time.Types.SingleTimeValue
    -> [Duckling.Time.Types.SingleTimeValue]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Duckling.Time.Types.SingleTimeValue)
                   (ww1 :: [Duckling.Time.Types.SingleTimeValue])
                   (ww2 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww3 :: Duckling.Time.Types.SingleTimeValue)
                   (ww4 :: [Duckling.Time.Types.SingleTimeValue])
                   (ww5 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 case Duckling.Time.Types.$fEqSingleTimeValue_$c== ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Duckling.Time.Types.SingleTimeValue
                             Duckling.Time.Types.$fEqSingleTimeValue
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild2 {
                             GHC.Base.Nothing
                             -> case ww5 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a1
                             -> case ww5 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1 -> Data.Text.$fEqText_$c== a1 b1 } } } }) -}
dddd6fcec710c9481f2ae03d60d6a036
  $w$c> ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.compareInteger ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ -> Duckling.Time.Types.$fOrdSeason_$c>1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.True }) -}
517b32a4c52a903f618c49f8d9ce4e9d
  $w$c>= ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.compareInteger ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ -> Duckling.Time.Types.$fOrdSeason_$c>=1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.True }) -}
3dbc80fb677175db8c94b800b3ff79fc
  $w$ccompare ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Duckling.Time.Types.SeasonName) ->
                 case GHC.Integer.Type.compareInteger ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ -> Duckling.Time.Types.$fOrdSeason_$ccompare1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
51c5a59ecc654a479a7165e4023776bf
  $w$ccompare1 ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Types.Ordering
  {- Arity: 10, HasNoCafRefs,
     Strictness: <L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Base.Maybe Duckling.Time.Types.Form)
                   (ww4 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection)
                   (ww5 :: GHC.Types.Bool)
                   (ww6 :: Duckling.TimeGrain.Types.Grain)
                   (ww7 :: GHC.Types.Bool)
                   (ww8 :: GHC.Base.Maybe Duckling.Time.Types.Form)
                   (ww9 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection) ->
                 let {
                   b# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww6
                 } in
                 let {
                   a# :: GHC.Prim.Int#
                   = GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<# a# b#) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.==# a# b#) of wild1 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True
                        -> let {
                             $w$j :: GHC.Prim.Void# -> GHC.Types.Ordering
                               {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                             = \ (void :: GHC.Prim.Void#)[OneShot] ->
                               let {
                                 $w$j1 :: GHC.Prim.Void# -> GHC.Types.Ordering
                                   {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                                 = \ (void1 :: GHC.Prim.Void#)[OneShot] ->
                                   let {
                                     $w$j2 :: GHC.Prim.Void# -> GHC.Types.Ordering
                                       {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                                     = \ (void2 :: GHC.Prim.Void#)[OneShot] ->
                                       case ww4 of wild2 {
                                         GHC.Base.Nothing
                                         -> case ww9 of wild3 {
                                              GHC.Base.Nothing -> GHC.Types.EQ
                                              GHC.Base.Just ipv -> GHC.Types.LT }
                                         GHC.Base.Just a2
                                         -> case ww9 of wild3 {
                                              GHC.Base.Nothing -> GHC.Types.GT
                                              GHC.Base.Just b1
                                              -> Duckling.Time.Types.$fOrdIntervalDirection_$ccompare
                                                   a2
                                                   b1 } }
                                   } in
                                   case ww2 of wild2 {
                                     GHC.Types.False
                                     -> case ww7 of wild3 {
                                          GHC.Types.False -> $w$j2 GHC.Prim.void#
                                          GHC.Types.True -> GHC.Types.LT }
                                     GHC.Types.True
                                     -> case ww7 of wild3 {
                                          GHC.Types.False -> GHC.Types.GT
                                          GHC.Types.True -> $w$j2 GHC.Prim.void# } }
                               } in
                               case ww of wild2 {
                                 GHC.Types.False
                                 -> case ww5 of wild3 {
                                      GHC.Types.False -> $w$j1 GHC.Prim.void#
                                      GHC.Types.True -> GHC.Types.LT }
                                 GHC.Types.True
                                 -> case ww5 of wild3 {
                                      GHC.Types.False -> GHC.Types.GT
                                      GHC.Types.True -> $w$j1 GHC.Prim.void# } }
                           } in
                           case ww3 of wild2 {
                             GHC.Base.Nothing
                             -> case ww8 of wild3 {
                                  GHC.Base.Nothing -> $w$j GHC.Prim.void#
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a2
                             -> case ww8 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b1
                                  -> case Duckling.Time.Types.$fOrdForm_$ccompare a2 b1 of wild4 {
                                       DEFAULT -> wild4 GHC.Types.EQ -> $w$j GHC.Prim.void# } } } }
                   GHC.Types.True -> GHC.Types.LT }) -}
c80185ec1b344a03f6bbe3b44173e850
  $w$chashWithSalt ::
    GHC.Prim.Int# -> Duckling.Time.Types.Form -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Time.Types.Form) ->
                 case w of wild {
                   Duckling.Time.Types.DayOfWeek
                   -> GHC.Prim.*# (GHC.Prim.*# ww 16777619#) 16777619#
                   Duckling.Time.Types.TimeOfDay g1 g2
                   -> case g1 of wild1 {
                        GHC.Base.Nothing
                        -> case g2 of wild2 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#)
                                     16777619#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#)
                                        16777619#)
                                     16777619#)
                                  1# }
                        GHC.Base.Just a1
                        -> case a1 of wild2 { GHC.Types.I# y# ->
                           case g2 of wild3 {
                             GHC.Types.False
                             -> GHC.Prim.*#
                                  (GHC.Prim.xorI#
                                     (GHC.Prim.*#
                                        (GHC.Prim.xorI#
                                           (GHC.Prim.*#
                                              (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#)
                                              16777619#)
                                           6148914691236517205#)
                                        16777619#)
                                     y#)
                                  16777619#
                             GHC.Types.True
                             -> GHC.Prim.xorI#
                                  (GHC.Prim.*#
                                     (GHC.Prim.xorI#
                                        (GHC.Prim.*#
                                           (GHC.Prim.xorI#
                                              (GHC.Prim.*#
                                                 (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 1#)
                                                 16777619#)
                                              6148914691236517205#)
                                           16777619#)
                                        y#)
                                     16777619#)
                                  1# } } }
                   Duckling.Time.Types.Month g1
                   -> case g1 of wild1 { GHC.Types.I# y# ->
                      GHC.Prim.xorI#
                        (GHC.Prim.*#
                           (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 2#)
                           16777619#)
                        y# }
                   Duckling.Time.Types.PartOfDay
                   -> GHC.Prim.*#
                        (GHC.Prim.xorI# (GHC.Prim.*# ww 16777619#) 3#)
                        16777619# }) -}
caffb5fef78049a0a6316365af53da7d
  $w$chashWithSalt1 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Prim.Int#
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0] -}
30afdebe049cca4783f2b6e6cd997b57
  $w$cresolve ::
    Duckling.Resolve.Context
    -> Duckling.Resolve.Options
    -> Duckling.Time.Types.Predicate
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe
         (Duckling.Resolve.ResolvedValue Duckling.Time.Types.TimeData,
          GHC.Types.Bool)
  {- Arity: 7,
     Strictness: <L,1*U(1*U(U,U),A)><S,1*U><L,1*U><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
3a7f7db3e670e63112f41d7db3e19d48
  $w$crnf ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Bool
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Bool)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Base.Maybe Duckling.Time.Types.Form)
                   (ww4 :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection) ->
                 case ww of ds1 { DEFAULT ->
                 case case Duckling.TimeGrain.Types.$fGenericGrain1
                             @ GHC.Prim.Any
                             ww1 of wild {
                        GHC.Generics.L1 x1
                        -> Duckling.TimeGrain.Types.$fNFDataGrain4 @ GHC.Prim.Any x1
                        GHC.Generics.R1 x1
                        -> Duckling.TimeGrain.Types.$fNFDataGrain3
                             @ GHC.Prim.Any
                             x1 } of wild1 { () ->
                 case ww2 of ds2 { DEFAULT ->
                 case case ww3 of wild {
                        GHC.Base.Nothing -> GHC.Tuple.()
                        GHC.Base.Just x
                        -> case x of wild2 {
                             DEFAULT -> GHC.Tuple.()
                             Duckling.Time.Types.TimeOfDay g1 g2
                             -> case case g1 of wild3 {
                                       GHC.Base.Nothing -> GHC.Tuple.()
                                       GHC.Base.Just x1
                                       -> Control.DeepSeq.$fNFDataInt_$crnf x1 } of wild3 { () ->
                                case g2 of tpl { DEFAULT -> GHC.Tuple.() } }
                             Duckling.Time.Types.Month g1
                             -> case g1 of tpl { GHC.Types.I# ipv ->
                                GHC.Tuple.() } } } of wild3 { () ->
                 Duckling.Time.Types.$fNFDataTimeData1 ww4 } } } }) -}
22ce6bf96d0a12a5f7a9d61948bed6c9
  $w$cshow ::
    GHC.Types.Bool
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Duckling.Time.Types.Form
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
620ca95e986c8dbbed0f03e16ed914c9
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Duckling.Time.Types.SingleTimeValue
    -> [Duckling.Time.Types.SingleTimeValue]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Duckling.Time.Types.SingleTimeValue)
                   (ww2 :: [Duckling.Time.Types.SingleTimeValue])
                   (ww3 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       Duckling.Time.Types.$fShowTimeValue4
                       ww3
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     Duckling.Time.Types.$w$cshowsPrec1
                       11#
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (GHC.Show.showList__
                             @ Duckling.Time.Types.SingleTimeValue
                             Duckling.Time.Types.$fShowTimeValue3
                             ww2
                             (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowTimeValue2
                        (g1 x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Duckling.Time.Types.$fShowTimeValue2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
bdbf0c070c694d198978600704691028
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Duckling.Time.Types.SingleTimeValue
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
90d7f211e9ddafd1664f1d7e6242126f
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Data.Time.LocalTime.LocalTime.ZonedTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <S,U><L,1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,1*U))><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Time.LocalTime.LocalTime.ZonedTime)
                   (ww2 :: Duckling.TimeGrain.Types.Grain)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Time.Types.$fShowInstantValue4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Time.Types.$fShowInstantValue3
                          (case ww1 of ww3 { Data.Time.LocalTime.LocalTime.ZonedTime ww4 ww5 ->
                           case ww4 of ww6 { Data.Time.LocalTime.LocalTime.LocalTime ww7 ww8 ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             (Data.Time.LocalTime.LocalTime.$w$cshow1 ww7 ww8 ww5)
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Time.Types.$fShowForm8
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Time.Types.$fShowInstantValue2
                                   (Duckling.TimeGrain.Types.$w$cshowsPrec
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Time.Types.$fShowForm6
                                         x)))) } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
70d312df58fe4141d9b3f5bf296dbbf0
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: Duckling.Time.Types.SeasonName)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Time.Types.$fShowSeason8
                       (case GHC.Show.$w$cshowsPrec1
                               0#
                               ww1
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  Duckling.Time.Types.$fShowForm8
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Duckling.Time.Types.$fShowSeason7
                                     (Duckling.Time.Types.$w$cshowsPrec4
                                        ww2
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           Duckling.Time.Types.$fShowForm6
                                           x)))) of ww3 { (#,#) ww4 ww5 ->
                        GHC.Types.: @ GHC.Types.Char ww4 ww5 })
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowSeason2
                        (g w)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Duckling.Time.Types.$fShowSeason2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w))) }) -}
a824c814fefb773479920a17bad751eb
  $w$cshowsPrec4 ::
    Duckling.Time.Types.SeasonName
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.SeasonName)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Duckling.Time.Types.Spring
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowSeason6
                        w1
                   Duckling.Time.Types.Summer
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowSeason5
                        w1
                   Duckling.Time.Types.Fall
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowSeason4
                        w1
                   Duckling.Time.Types.Winter
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Duckling.Time.Types.$fShowSeason3
                        w1 }) -}
34e99d2a7aa312f31c4f65ab61d5c188
  $w$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Time.Clock.UTC.UTCTime)
                   (ww2 :: Duckling.TimeGrain.Types.Grain)
                   (ww3 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Time.Clock.UTC.UTCTime
                       Data.Time.LocalTime.LocalTime.$fShowUTCTime
                       Duckling.Time.Types.$fToJSONTimeValue11
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Duckling.Time.Types.$fShowTimeObject5
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Duckling.Time.Types.$fShowTimeObject4
                          (case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                           Data.Time.LocalTime.LocalTime.$w$cshowsPrec1
                             ww5
                             ww6
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Duckling.Time.Types.$fShowForm8
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Duckling.Time.Types.$fShowTimeObject3
                                   (Duckling.TimeGrain.Types.$w$cshowsPrec
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Duckling.Time.Types.$fShowForm8
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Duckling.Time.Types.$fShowTimeObject2
                                            (f (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Duckling.Time.Types.$fShowForm6
                                                  x))))))) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
a824c814fefb773479920a17bad751eb
  $w$ctoEnum :: GHC.Prim.Int# -> Duckling.Time.Types.SeasonName
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName5 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 3#) of wild1 {
                        GHC.Types.False -> Duckling.Time.Types.$fEnumSeasonName5 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ Duckling.Time.Types.SeasonName ww } }) -}
c0812baf175426bea662c1a4cc7a95ad
  $w$ctoJSON ::
    Duckling.Time.Types.SingleTimeValue
    -> [Duckling.Time.Types.SingleTimeValue]
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Duckling.Time.Types.SingleTimeValue)
                   (ww1 :: [Duckling.Time.Types.SingleTimeValue])
                   (ww2 :: GHC.Base.Maybe Data.Text.Internal.Text) ->
                 case Duckling.Time.Types.$w$ctoJSON1 ww of ww3 { Unit# ww4 ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                         case Duckling.Time.Types.$fToJSONTimeValue12
                                GHC.Types.SPEC
                                ((Data.Vector.Mutable.MVector
                                    @ (Control.Monad.Primitive.PrimState
                                         (GHC.ST.ST GHC.Prim.RealWorld))
                                    @ Data.Aeson.Types.Internal.Value
                                    0#
                                    0#
                                    ipv1)
                                   `cast`
                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N),
                                 Duckling.Time.Types.$fToJSONTimeValue11)
                                (GHC.Base.map
                                   @ Duckling.Time.Types.SingleTimeValue
                                   @ Data.Aeson.Types.Internal.Value
                                   Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON1
                                   ww1)
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                         case ipv7 of wild5 { (,) v' n ->
                         case v'
                                `cast`
                              (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                         case n of dt5 { GHC.Types.I# dt6 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                dt2
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              dt
                              dt6
                              ipv3 #) } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt1 { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Duckling.Time.Types.$fToJSONTimeValue2 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 let {
                   obj :: Data.Aeson.Types.Internal.Object
                   = Duckling.Time.Types.$w$sinsert
                       @ Data.Aeson.Types.Internal.Value
                       ww6
                       ww7
                       ww8
                       (Data.Aeson.Types.Internal.Array dt1)
                       ww4
                 } in
                 case case ww2 of wild {
                        GHC.Base.Nothing -> obj
                        GHC.Base.Just h
                        -> case h of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                           case Duckling.Time.Types.$fToJSONTimeValue1 of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                           Duckling.Time.Types.$w$sinsert
                             @ Data.Aeson.Types.Internal.Value
                             ww10
                             ww11
                             ww12
                             (Data.Aeson.Types.Internal.String dt)
                             obj } } } of dt { DEFAULT ->
                 (# dt #) } } } } }) -}
bdbf0c070c694d198978600704691028
  $w$ctoJSON1 ::
    Duckling.Time.Types.SingleTimeValue
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.SingleTimeValue) ->
                 case w of wild {
                   Duckling.Time.Types.SimpleValue value
                   -> case value of ww { Duckling.Time.Types.InstantValue ww1 ww2 ->
                      case Duckling.Time.Types.$w$ctoJSON2 ww1 ww2 of ww3 { Unit# ww4 ->
                      case Duckling.Time.Types.$fToJSONTimeValue10 of v2 { DEFAULT ->
                      case Duckling.Time.Types.$fToJSONTimeValue9 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                      case Duckling.Time.Types.$w$sinsert
                             @ Data.Aeson.Types.Internal.Value
                             ww6
                             ww7
                             ww8
                             v2
                             ww4 of dt { DEFAULT ->
                      (# dt #) } } } } }
                   Duckling.Time.Types.IntervalValue ds
                   -> case ds of wild1 { (,) from to ->
                      case Data.Aeson.Types.Internal.$sfromList1
                             @ Data.Aeson.Types.Internal.Value
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                Duckling.Time.Types.$fToJSONTimeValue7
                                (GHC.Types.:
                                   @ Data.Aeson.Types.Internal.Pair
                                   (Duckling.Time.Types.$fToJSONTimeValue6,
                                    Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 from)
                                   (GHC.Types.:
                                      @ Data.Aeson.Types.Internal.Pair
                                      (Duckling.Time.Types.$fToJSONTimeValue3,
                                       Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 to)
                                      (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                      (# dt #) } }
                   Duckling.Time.Types.OpenIntervalValue ds
                   -> case ds of wild1 { (,) instant ds1 ->
                      case ds1 of wild2 {
                        Duckling.Time.Types.Before
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Time.Types.$fToJSONTimeValue7
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Time.Types.$fToJSONTimeValue3,
                                         Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 instant)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) }
                        Duckling.Time.Types.After
                        -> case Data.Aeson.Types.Internal.$sfromList1
                                  @ Data.Aeson.Types.Internal.Value
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.Pair
                                     Duckling.Time.Types.$fToJSONTimeValue7
                                     (GHC.Types.:
                                        @ Data.Aeson.Types.Internal.Pair
                                        (Duckling.Time.Types.$fToJSONTimeValue6,
                                         Duckling.Time.Types.$fToJSONTimeValue_$ctoJSON2 instant)
                                        (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                                  (Data.HashMap.Base.Empty
                                     @ Data.Text.Internal.Text
                                     @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                           (# dt #) } } } }) -}
0d5f8796c5cae4c2d1d4157732adcd25
  $w$ctoJSON2 ::
    Data.Time.LocalTime.LocalTime.ZonedTime
    -> Duckling.TimeGrain.Types.Grain
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2,
     Strictness: <L,1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,A))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Time.LocalTime.LocalTime.ZonedTime)
                   (ww1 :: Duckling.TimeGrain.Types.Grain) ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Duckling.Time.Types.$fToJSONTimeValue5,
                            case ww of ww2 { Data.Time.LocalTime.LocalTime.ZonedTime ww3 ww4 ->
                            case ww3 of ww5 { Data.Time.LocalTime.LocalTime.LocalTime ww6 ww7 ->
                            case ww7 of ww8 { Data.Time.LocalTime.TimeOfDay.TimeOfDay ww9 ww10 ww11 ->
                            case Duckling.Time.Types.$wtoRFC3339
                                   ww6
                                   ww9
                                   ww10
                                   ww11
                                   ww4 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                            Data.Aeson.Types.Internal.String dt } } } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Duckling.Time.Types.$fToJSONTimeValue4,
                               Duckling.TimeGrain.Types.$fToJSONGrain_$ctoJSON ww1)
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
a077846db1729ce6158087f44f7a4c7a
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
156db9641aa61cc6d5c4a97325ecf26b
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Duckling.Time.Types.$wpoly_go1
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
9732b4423902abcbce54acf8c8e31774
  $wlvl ::
    Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> (# Data.Time.Clock.UTC.UTCTime, Duckling.TimeGrain.Types.Grain,
          GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime #)
  {- Arity: 3, Strictness: <L,1*U(1*U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Time.Clock.UTC.UTCTime)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 (# case Duckling.TimeGrain.Types.$wadd
                           ww
                           Duckling.TimeGrain.Types.Hour
                           Duckling.Time.Types.runAMPMPredicate4 of ww3 { (#,#) ww4 ww5 ->
                    Data.Time.Clock.UTC.UTCTime ww4 ww5 },
                    case ww1 of x1 { DEFAULT ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=#
                              (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain x1)
                              3#) of wild {
                      GHC.Types.False -> Duckling.TimeGrain.Types.Hour
                      GHC.Types.True -> x1 } },
                    case ww2 of wild {
                      GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime
                      GHC.Base.Just x
                      -> GHC.Base.Just
                           @ Data.Time.Clock.UTC.UTCTime
                           (case Duckling.TimeGrain.Types.$wadd
                                   x
                                   Duckling.TimeGrain.Types.Hour
                                   Duckling.Time.Types.runAMPMPredicate4 of ww3 { (#,#) ww4 ww5 ->
                            Data.Time.Clock.UTC.UTCTime ww4 ww5 }) } #)) -}
d4eac037b2ce5b1d7c4f791822415740
  $wpad :: GHC.Prim.Int# -> GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,U><L,1*U(U)>, Inline: [0] -}
bbc7dcf2ca26e006a23010660046ba25
  $wperiodicPredicate ::
    Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# Duckling.Time.Types.NoShow
            Duckling.Time.Types.SeriesPredicate #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,U(U(U,U),U,U)>,
     Inline: [0] -}
5e5779e8fa935f9c8d1aa78c80d2ad05
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
f35d7290be05e0d2fe4e81d6f3835101
  $wrunAMPMPredicate ::
    Duckling.Time.Types.AMPM
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,1*U><L,U(U(U,U),A,U)>, Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.AMPM)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 let {
                   lvl83 :: Duckling.Time.Types.TimeObject
                   = case w1 of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                     Duckling.Time.Types.TimeObject
                       ds
                       Duckling.TimeGrain.Types.Day
                       ds2 }
                 } in
                 let {
                   anchor :: Duckling.Time.Types.TimeObject
                   = case Duckling.Time.Types.$wtimeRound
                            w1
                            Duckling.TimeGrain.Types.Day of ww { (#,,#) ww1 ww2 ww3 ->
                     let {
                       ww4 :: Data.Time.Clock.UTC.UTCTime
                       = case Duckling.TimeGrain.Types.$wadd
                                ww1
                                Duckling.TimeGrain.Types.Hour
                                (case w of wild {
                                   Duckling.Time.Types.AM -> Duckling.Time.Types.runAMPMPredicate6
                                   Duckling.Time.Types.PM
                                   -> Duckling.Time.Types.runAMPMPredicate5 }) of ww5 { (#,#) ww6 ww7 ->
                         Data.Time.Clock.UTC.UTCTime ww6 ww7 }
                     } in
                     let {
                       anchorStart :: Duckling.TimeGrain.Types.Grain
                       = case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=#
                                   (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww2)
                                   3#) of wild {
                           GHC.Types.False -> Duckling.TimeGrain.Types.Hour
                           GHC.Types.True -> ww2 }
                     } in
                     let {
                       ww5 :: Duckling.TimeGrain.Types.Grain
                       = case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.<=#
                                   (GHC.Prim.dataToTag#
                                      @ Duckling.TimeGrain.Types.Grain
                                      anchorStart)
                                   3#) of wild {
                           GHC.Types.False -> Duckling.TimeGrain.Types.Hour
                           GHC.Types.True -> anchorStart }
                     } in
                     Duckling.Time.Types.TimeObject
                       ww4
                       (case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=#
                                  (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain anchorStart)
                                  (GHC.Prim.dataToTag#
                                     @ Duckling.TimeGrain.Types.Grain
                                     ww5)) of wild {
                          GHC.Types.False -> ww5 GHC.Types.True -> anchorStart })
                       (GHC.Base.Just
                          @ Data.Time.Clock.UTC.UTCTime
                          (case Duckling.TimeGrain.Types.$wadd
                                  ww4
                                  Duckling.TimeGrain.Types.Hour
                                  Duckling.Time.Types.runAMPMPredicate5 of ww6 { (#,#) ww7 ww8 ->
                           Data.Time.Clock.UTC.UTCTime ww7 ww8 })) }
                 } in
                 (# case GHC.List.$witerate
                           @ Duckling.Time.Types.TimeObject
                           Duckling.Time.Types.runAMPMPredicate3
                           anchor of ww { (#,#) ww1 ww2 ->
                    case lvl83 of ww4 { Duckling.Time.Types.TimeObject ww5 ww6 ww7 ->
                    case ww5 of ww8 { Data.Time.Clock.UTC.UTCTime ww9 ww10 ->
                    case ww1 of ww11 { Duckling.Time.Types.TimeObject ww12 ww13 ww14 ->
                    case ww12 of ww15 { Data.Time.Clock.UTC.UTCTime ww16 ww17 ->
                    case Duckling.Time.Types.$wtimeIntersect
                           ww9
                           ww10
                           ww6
                           ww7
                           ww16
                           ww17
                           ww13
                           ww14 of wild {
                      GHC.Base.Nothing -> ww2
                      GHC.Base.Just ii
                      -> GHC.Types.: @ Duckling.Time.Types.TimeObject ii ww2 } } } } } },
                    case GHC.List.$witerate
                           @ Duckling.Time.Types.TimeObject
                           Duckling.Time.Types.runAMPMPredicate1
                           anchor of ww { (#,#) ww1 ww2 ->
                    case lvl83 of ww4 { Duckling.Time.Types.TimeObject ww5 ww6 ww7 ->
                    case ww5 of ww8 { Data.Time.Clock.UTC.UTCTime ww9 ww10 ->
                    case ww1 of ww11 { Duckling.Time.Types.TimeObject ww12 ww13 ww14 ->
                    case ww12 of ww15 { Data.Time.Clock.UTC.UTCTime ww16 ww17 ->
                    case Duckling.Time.Types.$wtimeIntersect
                           ww9
                           ww10
                           ww6
                           ww7
                           ww16
                           ww17
                           ww13
                           ww14 of wild {
                      GHC.Base.Nothing -> ww2
                      GHC.Base.Just ii
                      -> GHC.Types.:
                           @ Duckling.Time.Types.TimeObject
                           ii
                           ww2 } } } } } } #)) -}
aac68e31fbd36e2dceffdff468a26681
  $wrunCompose ::
    Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 4,
     Strictness: <L,C(C1(U(A,1*U)))><L,1*C1(C1(U(U,U)))><L,U><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>,
     Inline: [0] -}
553b99465632ee716ffc4317ff479504
  $wrunComposeWithReplacement ::
    Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><L,U(U,U,U(U,U,U),U(U,U,U))>,
     Inline: [0] -}
934dbe922ad764083a3cf7d292242731
  $wrunDayOfTheMonthPredicate ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,U(U)><L,U(U(U,U),A,A)>, Inline: [0] -}
594c14580a2114d3b2cfb13c881d181e
  $wrunDayOfTheWeekPredicate ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.$wtimeSequence
                   Duckling.TimeGrain.Types.Day
                   Duckling.Time.Types.runDayOfTheWeekPredicate1
                   (case Duckling.Time.Types.$wtimeRound
                           w1
                           Duckling.TimeGrain.Types.Day of ww { (#,,#) ww1 ww2 ww3 ->
                    Duckling.Time.Types.TimeObject
                      (case Duckling.TimeGrain.Types.$wadd
                              ww1
                              Duckling.TimeGrain.Types.Day
                              (case w of wild { GHC.Types.I# x ->
                               case Data.Time.Calendar.WeekDate.$wtoWeekDate
                                      (case w1 of wild1 { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                                       case ds of wild2 { Data.Time.Clock.UTC.UTCTime day ds3 ->
                                       day } }) of ww4 { (#,,#) ww5 ww6 ww7 ->
                               case ww7 of wild1 { GHC.Types.I# y ->
                               case GHC.Classes.modInt# (GHC.Prim.-# x y) 7# of ww8 { DEFAULT ->
                               GHC.Integer.Type.smallInteger
                                 ww8 } } } }) of ww4 { (#,#) ww5 ww6 ->
                       Data.Time.Clock.UTC.UTCTime ww5 ww6 })
                      (case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=#
                                 (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww2)
                                 4#) of wild {
                         GHC.Types.False -> Duckling.TimeGrain.Types.Day
                         GHC.Types.True -> ww2 })
                      (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })) -}
46358543693713a164254a35f8e8aaf2
  $wrunHourPredicate ::
    GHC.Base.Maybe Duckling.Time.Types.AMPM
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 4, Strictness: <L,U><L,1*U><L,U(U)><L,U(U(U,U),A,A)>,
     Inline: [0] -}
d3771ade4894a61be7e2ed81711be824
  $wrunMinutePredicate ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.$wtimeSequence
                   Duckling.TimeGrain.Types.Hour
                   Duckling.Time.Types.runMinutePredicate1
                   (case Duckling.Time.Types.$wtimeRound
                           w1
                           Duckling.TimeGrain.Types.Minute of ww { (#,,#) ww1 ww2 ww3 ->
                    Duckling.Time.Types.TimeObject
                      (case Duckling.TimeGrain.Types.$wadd
                              ww1
                              Duckling.TimeGrain.Types.Minute
                              (case w of wild { GHC.Types.I# x ->
                               case w1 of wild1 { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                               case ds of wild2 { Data.Time.Clock.UTC.UTCTime ds3 diffTime ->
                               case Data.Time.LocalTime.TimeOfDay.$wtimeToTimeOfDay
                                      diffTime of ww4 { (#,,#) ww5 ww6 ww7 ->
                               case ww6 of wild3 { GHC.Types.I# y ->
                               case GHC.Classes.modInt# (GHC.Prim.-# x y) 60# of ww8 { DEFAULT ->
                               GHC.Integer.Type.smallInteger
                                 ww8 } } } } } }) of ww4 { (#,#) ww5 ww6 ->
                       Data.Time.Clock.UTC.UTCTime ww5 ww6 })
                      (case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=#
                                 (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww2)
                                 2#) of wild {
                         GHC.Types.False -> Duckling.TimeGrain.Types.Minute
                         GHC.Types.True -> ww2 })
                      (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })) -}
64697b642f7172de89442c7c7a2f377d
  $wrunMonthPredicate ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U(U,U),A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.$wtimeSequence
                   Duckling.TimeGrain.Types.Year
                   Duckling.Time.Types.runMinutePredicate1
                   (case w1 of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                    case ds of ww { Data.Time.Clock.UTC.UTCTime ww1 ww2 ->
                    case Duckling.Time.Types.$wtimeRound
                           wild
                           Duckling.TimeGrain.Types.Year of ww4 { (#,,#) ww5 ww6 ww7 ->
                    let {
                      start1 :: Data.Time.Clock.UTC.UTCTime
                      = case Duckling.TimeGrain.Types.$wadd
                               ww5
                               Duckling.TimeGrain.Types.Month
                               (case w of wild1 { GHC.Types.I# x ->
                                GHC.Integer.Type.smallInteger
                                  (GHC.Prim.-# x 1#) }) of ww8 { (#,#) ww9 ww10 ->
                        Data.Time.Clock.UTC.UTCTime ww9 ww10 }
                    } in
                    let {
                      grain1 :: Duckling.TimeGrain.Types.Grain
                      = case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=#
                                  (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww6)
                                  6#) of wild1 {
                          GHC.Types.False -> Duckling.TimeGrain.Types.Month
                          GHC.Types.True -> ww6 }
                    } in
                    case Duckling.TimeGrain.Types.$wadd
                           start1
                           grain1
                           Duckling.Time.Types.nextSeason1 of ww8 { (#,#) ww9 ww10 ->
                    case GHC.Integer.Type.compareInteger
                           ww1 `cast` (Data.Time.Calendar.Days.N:Day[0])
                           ww9 `cast` (Data.Time.Calendar.Days.N:Day[0]) of wild1 {
                      GHC.Types.LT
                      -> Duckling.Time.Types.TimeObject
                           start1
                           grain1
                           (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime)
                      GHC.Types.EQ
                      -> case GHC.Integer.Type.compareInteger
                                ww2
                                  `cast`
                                (Trans
                                     (Data.Time.Clock.Scale.N:DiffTime[0])
                                     (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                                ww10
                                  `cast`
                                (Trans
                                     (Data.Time.Clock.Scale.N:DiffTime[0])
                                     (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P)) of wild2 {
                           DEFAULT
                           -> Duckling.Time.Types.TimeObject
                                (case Duckling.TimeGrain.Types.$wadd
                                        start1
                                        Duckling.TimeGrain.Types.Year
                                        Duckling.Time.Types.nextSeason1 of ww11 { (#,#) ww12 ww13 ->
                                 Data.Time.Clock.UTC.UTCTime ww12 ww13 })
                                (case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<=#
                                           (GHC.Prim.dataToTag#
                                              @ Duckling.TimeGrain.Types.Grain
                                              grain1)
                                           8#) of wild3 {
                                   GHC.Types.False -> Duckling.TimeGrain.Types.Year
                                   GHC.Types.True -> grain1 })
                                (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime)
                           GHC.Types.LT
                           -> Duckling.Time.Types.TimeObject
                                start1
                                grain1
                                (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) }
                      GHC.Types.GT
                      -> Duckling.Time.Types.TimeObject
                           (case Duckling.TimeGrain.Types.$wadd
                                   start1
                                   Duckling.TimeGrain.Types.Year
                                   Duckling.Time.Types.nextSeason1 of ww11 { (#,#) ww12 ww13 ->
                            Data.Time.Clock.UTC.UTCTime ww12 ww13 })
                           (case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.<=#
                                      (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain grain1)
                                      8#) of wild2 {
                              GHC.Types.False -> Duckling.TimeGrain.Types.Year
                              GHC.Types.True -> grain1 })
                           (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) } } } } })) -}
ff72bc54779005d516302524527062b9
  $wrunSecondPredicate ::
    GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.$wtimeSequence
                   Duckling.TimeGrain.Types.Minute
                   Duckling.Time.Types.runMinutePredicate1
                   (case Duckling.Time.Types.$wtimeRound
                           w1
                           Duckling.TimeGrain.Types.Second of ww { (#,,#) ww1 ww2 ww3 ->
                    Duckling.Time.Types.TimeObject
                      (case Duckling.TimeGrain.Types.$wadd
                              ww1
                              Duckling.TimeGrain.Types.Second
                              (case w of wild { GHC.Types.I# i ->
                               case w1 of wild1 { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                               case ds of wild2 { Data.Time.Clock.UTC.UTCTime ds3 diffTime ->
                               case Data.Time.LocalTime.TimeOfDay.$wtimeToTimeOfDay
                                      diffTime of ww4 { (#,,#) ww5 ww6 ww7 ->
                               case GHC.Real.$w$s$c/
                                      ww7 `cast` (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P)
                                      GHC.Real.$fEnumRatio1
                                      Data.Fixed.$fHasResolutionE5
                                      GHC.Real.$fEnumRatio1 of ww8 { (#,#) ww9 ww10 ->
                               GHC.Integer.Type.modInteger
                                 (GHC.Integer.Type.minusInteger
                                    (GHC.Integer.Type.smallInteger i)
                                    (GHC.Real.$w$s$cfloor
                                       @ GHC.Integer.Type.Integer
                                       GHC.Real.$fIntegralInteger
                                       ww9
                                       ww10))
                                 Duckling.Time.Types.runSecondPredicate1 } } } } }) of ww4 { (#,#) ww5 ww6 ->
                       Data.Time.Clock.UTC.UTCTime ww5 ww6 })
                      (case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.<=#
                                 (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww2)
                                 1#) of wild {
                         GHC.Types.False -> Duckling.TimeGrain.Types.Second
                         GHC.Types.True -> ww2 })
                      (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })) -}
ca7176a039643f2f35be39295a7697ac
  $wrunTimeIntervalsPredicate ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 5,
     Strictness: <L,U><L,1*U><L,U><L,U(U(U,U),U,U)><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>,
     Inline: [0] -}
2c771b4f931f0f36b9eabbd132e1f067
  $wrunYearPredicate ::
    GHC.Prim.Int#
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 2, Strictness: <S,U><L,U(U(U,U),A,A)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Duckling.Time.Types.TimeObject) ->
                 case Data.Time.Calendar.Gregorian.$wtoGregorian
                        (case w of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                         case ds of wild1 { Data.Time.Clock.UTC.UTCTime day ds3 ->
                         day } }) of ww1 { (#,,#) ww2 ww3 ww4 ->
                 let {
                   year :: GHC.Integer.Type.Integer = GHC.Integer.Type.smallInteger ww
                 } in
                 case GHC.Integer.Type.leInteger# ww2 year of wild { DEFAULT ->
                 let {
                   y :: Duckling.Time.Types.TimeObject
                   = case Duckling.Time.Types.$wtimeRound
                            w
                            Duckling.TimeGrain.Types.Year of ww5 { (#,,#) ww6 ww7 ww8 ->
                     Duckling.Time.Types.TimeObject
                       (case Duckling.TimeGrain.Types.$wadd
                               ww6
                               Duckling.TimeGrain.Types.Year
                               (GHC.Integer.Type.minusInteger
                                  year
                                  ww2) of ww9 { (#,#) ww10 ww11 ->
                        Data.Time.Clock.UTC.UTCTime ww10 ww11 })
                       (case GHC.Prim.tagToEnum#
                               @ GHC.Types.Bool
                               (GHC.Prim.<=#
                                  (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww7)
                                  8#) of wild1 {
                          GHC.Types.False -> Duckling.TimeGrain.Types.Year
                          GHC.Types.True -> ww7 })
                       (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) }
                 } in
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> (# GHC.Types.:
                           @ Duckling.Time.Types.TimeObject
                           y
                           (GHC.Types.[] @ Duckling.Time.Types.TimeObject),
                         GHC.Types.[] @ Duckling.Time.Types.TimeObject #)
                   GHC.Types.True
                   -> (# GHC.Types.[] @ Duckling.Time.Types.TimeObject,
                         GHC.Types.:
                           @ Duckling.Time.Types.TimeObject
                           y
                           (GHC.Types.[] @ Duckling.Time.Types.TimeObject) #) } } }) -}
8a5f00bca800764ec68b847a3c47f69f
  $wseasonEnd ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName) ->
                 case ww1 of wild {
                   Duckling.Time.Types.Spring
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             6#
                             21# of ww4 { DEFAULT ->
                      GHC.Integer.Type.plusInteger
                        (Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4)
                          `cast`
                        (Data.Time.Calendar.Days.N:Day[0])
                        Duckling.Time.Types.seasonEnd2 }
                   Duckling.Time.Types.Summer
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             9#
                             23# of ww4 { DEFAULT ->
                      GHC.Integer.Type.plusInteger
                        (Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4)
                          `cast`
                        (Data.Time.Calendar.Days.N:Day[0])
                        Duckling.Time.Types.seasonEnd2 }
                   Duckling.Time.Types.Fall
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             12#
                             21# of ww4 { DEFAULT ->
                      GHC.Integer.Type.plusInteger
                        (Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4)
                          `cast`
                        (Data.Time.Calendar.Days.N:Day[0])
                        Duckling.Time.Types.seasonEnd2 }
                   Duckling.Time.Types.Winter
                   -> let {
                        ww2 :: GHC.Integer.Type.Integer
                        = GHC.Integer.Type.plusInteger ww Duckling.Time.Types.nextSeason1
                      } in
                      case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww2)
                             3#
                             20# of ww4 { DEFAULT ->
                      GHC.Integer.Type.plusInteger
                        (Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww2 ww4)
                          `cast`
                        (Data.Time.Calendar.Days.N:Day[0])
                        Duckling.Time.Types.seasonEnd2 } }) -}
6de469329364e2d3ba0a136d0e7bd91b
  $wseasonStart ::
    GHC.Integer.Type.Integer
    -> Duckling.Time.Types.SeasonName -> Data.Time.Calendar.Days.Day
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: Duckling.Time.Types.SeasonName) ->
                 case ww1 of wild {
                   Duckling.Time.Types.Spring
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             3#
                             20# of ww4 { DEFAULT ->
                      Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4 }
                   Duckling.Time.Types.Summer
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             6#
                             21# of ww4 { DEFAULT ->
                      Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4 }
                   Duckling.Time.Types.Fall
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             9#
                             23# of ww4 { DEFAULT ->
                      Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4 }
                   Duckling.Time.Types.Winter
                   -> case Data.Time.Calendar.MonthDay.$wmonthAndDayToDayOfYear
                             (Data.Time.Calendar.OrdinalDate.isLeapYear ww)
                             12#
                             21# of ww4 { DEFAULT ->
                      Data.Time.Calendar.OrdinalDate.$wfromOrdinalDate ww ww4 } }) -}
c3349c719f378b370644c23117833e99
  $wtimeBefore ::
    Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Time.Calendar.Days.Day)
                   (ww1 :: Data.Time.Clock.Scale.DiffTime)
                   (ww2 :: Data.Time.Calendar.Days.Day)
                   (ww3 :: Data.Time.Clock.Scale.DiffTime) ->
                 case GHC.Integer.Type.compareInteger
                        ww `cast` (Data.Time.Calendar.Days.N:Day[0])
                        ww2 `cast` (Data.Time.Calendar.Days.N:Day[0]) of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Integer.Type.compareInteger
                             ww1
                               `cast`
                             (Trans
                                  (Data.Time.Clock.Scale.N:DiffTime[0])
                                  (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                             ww3
                               `cast`
                             (Trans
                                  (Data.Time.Clock.Scale.N:DiffTime[0])
                                  (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P)) of wild1 {
                        DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                   GHC.Types.GT -> GHC.Types.False }) -}
d01e1d9ad1ce915053cb85030fbc7488
  $wtimeEnd ::
    Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> Data.Time.Clock.UTC.UTCTime
  {- Arity: 3, Strictness: <L,1*U(1*U,U)><L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Time.Clock.UTC.UTCTime)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 case ww2 of wild {
                   GHC.Base.Nothing
                   -> case Duckling.TimeGrain.Types.$wadd
                             ww
                             ww1
                             Duckling.Time.Types.nextSeason1 of ww3 { (#,#) ww4 ww5 ->
                      Data.Time.Clock.UTC.UTCTime ww4 ww5 }
                   GHC.Base.Just v -> v }) -}
46b316bbe4ebe54757aa4f2a786b755e
  $wtimeIntersect ::
    Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U>,
     Inline: [0] -}
29183f0dabc7538ef5235cf510a8257b
  $wtimeInterval ::
    Duckling.Time.Types.TimeIntervalType
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> (# Data.Time.Clock.UTC.UTCTime, Duckling.TimeGrain.Types.Grain,
          GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime #)
  {- Arity: 6, Strictness: <L,1*U><L,U><L,U><L,1*U(U,U)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Duckling.Time.Types.TimeIntervalType)
                   (ww :: Data.Time.Clock.UTC.UTCTime)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: Data.Time.Clock.UTC.UTCTime)
                   (ww3 :: Duckling.TimeGrain.Types.Grain)
                   (ww4 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 let {
                   g' :: Duckling.TimeGrain.Types.Grain
                   = case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=#
                               (GHC.Prim.dataToTag# @ Duckling.TimeGrain.Types.Grain ww1)
                               (GHC.Prim.dataToTag#
                                  @ Duckling.TimeGrain.Types.Grain
                                  ww3)) of wild {
                       GHC.Types.False -> ww3 GHC.Types.True -> ww1 }
                 } in
                 (# ww, g',
                    GHC.Base.Just
                      @ Data.Time.Clock.UTC.UTCTime
                      (case w of wild {
                         Duckling.Time.Types.Open -> ww2
                         Duckling.Time.Types.Closed
                         -> case ww4 of wild1 {
                              GHC.Base.Nothing
                              -> case GHC.Prim.tagToEnum#
                                        @ GHC.Types.Bool
                                        (GHC.Prim.<#
                                           (GHC.Prim.dataToTag#
                                              @ Duckling.TimeGrain.Types.Grain
                                              ww1)
                                           4#) of wild2 {
                                   GHC.Types.False
                                   -> case Duckling.TimeGrain.Types.$wadd
                                             ww2
                                             ww3
                                             Duckling.Time.Types.nextSeason1 of ww5 { (#,#) ww6 ww7 ->
                                      Data.Time.Clock.UTC.UTCTime ww6 ww7 }
                                   GHC.Types.True
                                   -> case GHC.Prim.tagToEnum#
                                             @ GHC.Types.Bool
                                             (GHC.Prim.<#
                                                (GHC.Prim.dataToTag#
                                                   @ Duckling.TimeGrain.Types.Grain
                                                   ww3)
                                                4#) of wild3 {
                                        GHC.Types.False
                                        -> case Duckling.TimeGrain.Types.$wadd
                                                  ww2
                                                  ww3
                                                  Duckling.Time.Types.nextSeason1 of ww5 { (#,#) ww6 ww7 ->
                                           Data.Time.Clock.UTC.UTCTime ww6 ww7 }
                                        GHC.Types.True
                                        -> case Duckling.TimeGrain.Types.$wadd
                                                  ww2
                                                  g'
                                                  Duckling.Time.Types.nextSeason1 of ww5 { (#,#) ww6 ww7 ->
                                           Data.Time.Clock.UTC.UTCTime ww6 ww7 } } }
                              GHC.Base.Just v -> v } }) #)) -}
3a912fc1d6493d14fc95654df11a22d2
  $wtimeRound ::
    Duckling.Time.Types.TimeObject
    -> Duckling.TimeGrain.Types.Grain
    -> (# Data.Time.Clock.UTC.UTCTime, Duckling.TimeGrain.Types.Grain,
          GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime #)
  {- Arity: 2, Strictness: <L,1*U(1*U(U,U),A,A)><S,1*U>,
     Inline: [0] -}
62ee62e7a7c6154058793158c4da7334
  $wtimeSeqMap ::
    GHC.Types.Bool
    -> (Duckling.Time.Types.TimeObject
        -> Duckling.Time.Types.TimeContext
        -> GHC.Base.Maybe Duckling.Time.Types.TimeObject)
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(U))><L,1*U><L,U(U(U,U),U,U)><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>,
     Inline: [0] -}
3153d081a6fbcb326983b8030988f5cd
  $wtimeSequence ::
    Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> (# [Duckling.Time.Types.TimeObject],
          [Duckling.Time.Types.TimeObject] #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (w :: Duckling.TimeGrain.Types.Grain)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Duckling.Time.Types.TimeObject) ->
                 (# case GHC.List.$witerate
                           @ Duckling.Time.Types.TimeObject
                           (let {
                              lvl83 :: GHC.Integer.Type.Integer
                              = case w1 of wild { GHC.Types.I# x ->
                                GHC.Integer.Type.smallInteger (GHC.Prim.negateInt# x) }
                            } in
                            \ (t :: Duckling.Time.Types.TimeObject) ->
                            case t of wild { Duckling.Time.Types.TimeObject start1 grain1 ds ->
                            Duckling.Time.Types.TimeObject
                              (case Duckling.TimeGrain.Types.$wadd
                                      start1
                                      w
                                      lvl83 of ww { (#,#) ww1 ww2 ->
                               Data.Time.Clock.UTC.UTCTime ww1 ww2 })
                              (Duckling.TimeGrain.Types.$fOrdGrain_$cmin grain1 w)
                              (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })
                           w2 of ww { (#,#) ww1 ww2 ->
                    Duckling.Time.Types.$wunsafeDrop
                      @ Duckling.Time.Types.TimeObject
                      1#
                      (GHC.Types.: @ Duckling.Time.Types.TimeObject ww1 ww2) },
                    let {
                      lvl83 :: GHC.Integer.Type.Integer
                      = case w1 of wild { GHC.Types.I# i ->
                        GHC.Integer.Type.smallInteger i }
                    } in
                    case GHC.List.$witerate
                           @ Duckling.Time.Types.TimeObject
                           (\ (t :: Duckling.Time.Types.TimeObject) ->
                            case t of wild { Duckling.Time.Types.TimeObject start1 grain1 ds ->
                            Duckling.Time.Types.TimeObject
                              (case Duckling.TimeGrain.Types.$wadd
                                      start1
                                      w
                                      lvl83 of ww { (#,#) ww1 ww2 ->
                               Data.Time.Clock.UTC.UTCTime ww1 ww2 })
                              (Duckling.TimeGrain.Types.$fOrdGrain_$cmin grain1 w)
                              (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) })
                           w2 of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ Duckling.Time.Types.TimeObject ww1 ww2 } #)) -}
e1d5b45f1a1529b695cbe1dfea9d8185
  $wtimeStartsBeforeTheEndOf ::
    Data.Time.Calendar.Days.Day
    -> Data.Time.Clock.Scale.DiffTime
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> GHC.Types.Bool
  {- Arity: 5,
     Strictness: <S,1*U><L,1*U><L,1*U(1*U,U)><L,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Time.Calendar.Days.Day)
                   (ww1 :: Data.Time.Clock.Scale.DiffTime)
                   (ww2 :: Data.Time.Clock.UTC.UTCTime)
                   (ww3 :: Duckling.TimeGrain.Types.Grain)
                   (ww4 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 let {
                   $j1 :: Data.Time.Calendar.Days.Day
                          -> Data.Time.Clock.Scale.DiffTime -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                   = \ (ww5 :: Data.Time.Calendar.Days.Day)[OneShot]
                       (ww6 :: Data.Time.Clock.Scale.DiffTime)[OneShot] ->
                     case GHC.Integer.Type.compareInteger
                            ww `cast` (Data.Time.Calendar.Days.N:Day[0])
                            ww5 `cast` (Data.Time.Calendar.Days.N:Day[0]) of wild {
                       GHC.Types.LT -> GHC.Types.True
                       GHC.Types.EQ
                       -> case GHC.Integer.Type.compareInteger
                                 ww1
                                   `cast`
                                 (Trans
                                      (Data.Time.Clock.Scale.N:DiffTime[0])
                                      (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                                 ww6
                                   `cast`
                                 (Trans
                                      (Data.Time.Clock.Scale.N:DiffTime[0])
                                      (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P)) of wild1 {
                            DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }
                       GHC.Types.GT -> GHC.Types.False }
                 } in
                 case ww4 of wild {
                   GHC.Base.Nothing
                   -> case Duckling.TimeGrain.Types.$wadd
                             ww2
                             ww3
                             Duckling.Time.Types.nextSeason1 of ww5 { (#,#) ww6 ww7 ->
                      $j1 ww6 ww7 }
                   GHC.Base.Just v
                   -> case v of ww5 { Data.Time.Clock.UTC.UTCTime ww6 ww7 ->
                      $j1 ww6 ww7 } }) -}
da3dc2bc42b04c2a2df48f510c672801
  $wtimeValue ::
    Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
    -> Duckling.Time.Types.SingleTimeValue
  {- Arity: 4, Strictness: <L,U(U(U,U,U),U)><L,1*U(U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries)
                   (ww :: Data.Time.Clock.UTC.UTCTime)
                   (ww1 :: Duckling.TimeGrain.Types.Grain)
                   (ww2 :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime) ->
                 case ww2 of wild {
                   GHC.Base.Nothing
                   -> Duckling.Time.Types.SimpleValue
                        (Duckling.Time.Types.instantValue w ww ww1)
                   GHC.Base.Just e
                   -> Duckling.Time.Types.IntervalValue
                        (Duckling.Time.Types.instantValue w ww ww1,
                         Duckling.Time.Types.instantValue w e ww1) }) -}
8a6b417ee4280ebc741b7d973fa3389e
  $wtimezoneOffset :: GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int) ->
                 let {
                   ds :: (Data.Text.Internal.Text, GHC.Types.Int)
                   = case ww of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<# x 0#) of wild1 {
                       GHC.Types.False -> (Duckling.Time.Types.timezoneOffset3, wild)
                       GHC.Types.True
                       -> (Duckling.Time.Types.timezoneOffset2,
                           GHC.Types.I# (GHC.Prim.negateInt# x)) } }
                 } in
                 let {
                   ds1 :: (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   = case ds of wild { (,) sign t' ->
                     case t' of ww1 { GHC.Types.I# ww2 ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.># ww2 0#) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# ww2 0#) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.quotRemInt# ww2 60# of ds2 { (#,#) ipv ipv1 ->
                               (Duckling.Time.Types.$wpad 2# (GHC.Types.I# ipv),
                                Duckling.Time.Types.$wpad 2# (GHC.Types.I# ipv1)) }
                            GHC.Types.True
                            -> case GHC.Prim.quotRemInt#
                                      (GHC.Prim.+# ww2 1#)
                                      60# of ds2 { (#,#) ipv ipv1 ->
                               (Duckling.Time.Types.$wpad 2# (GHC.Types.I# (GHC.Prim.-# ipv 1#)),
                                Duckling.Time.Types.$wpad
                                  2#
                                  (GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ipv1 60#) 1#))) } }
                       GHC.Types.True
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# ww2 0#) of wild3 {
                            GHC.Types.False
                            -> case GHC.Prim.quotRemInt# ww2 60# of ds2 { (#,#) ipv ipv1 ->
                               (Duckling.Time.Types.$wpad 2# (GHC.Types.I# ipv),
                                Duckling.Time.Types.$wpad 2# (GHC.Types.I# ipv1)) }
                            GHC.Types.True
                            -> case GHC.Prim.quotRemInt#
                                      (GHC.Prim.+# ww2 1#)
                                      60# of ds2 { (#,#) ipv ipv1 ->
                               (Duckling.Time.Types.$wpad 2# (GHC.Types.I# (GHC.Prim.-# ipv 1#)),
                                Duckling.Time.Types.$wpad
                                  2#
                                  (GHC.Types.I# (GHC.Prim.-# (GHC.Prim.+# ipv1 60#) 1#))) } } } } }
                 } in
                 Data.Text.concat
                   (GHC.Types.:
                      @ Data.Text.Internal.Text
                      (case ds of wild { (,) sign t' -> sign })
                      (GHC.Types.:
                         @ Data.Text.Internal.Text
                         (case ds1 of wild { (,) hh mm -> hh })
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            Duckling.Time.Types.timezoneOffset1
                            (GHC.Types.:
                               @ Data.Text.Internal.Text
                               (case ds1 of wild { (,) hh mm -> mm })
                               (GHC.Types.[] @ Data.Text.Internal.Text)))))) -}
91dd00a75ec9423d481e73554525ba68
  $wtoRFC3339 ::
    Data.Time.Calendar.Days.Day
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Fixed.Pico
    -> Data.Time.LocalTime.TimeZone.TimeZone
    -> Data.Text.Internal.Text
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U(U)><L,1*U(U)><L,U><L,1*U(1*U(U),A,A)>,
     Inline: [0] -}
94d7cf2ecd22661a994fe92c1aef65d8
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
33bd2d4717799d9d00463f5a488c3cf2
  data AMPM = AM | PM
30afdebe049cca4783f2b6e6cd997b57
  axiom D:R:ResolvedValueTimeData::
      Duckling.Resolve.ResolvedValue Duckling.Time.Types.TimeData
        = Duckling.Time.Types.TimeValue
c80185ec1b344a03f6bbe3b44173e850
  data Form
    = DayOfWeek
    | TimeOfDay {hours :: GHC.Base.Maybe GHC.Types.Int,
                 is12H :: GHC.Types.Bool}
    | Month {month :: GHC.Types.Int}
    | PartOfDay
d0f859179691e515a8b3fc5f8b42c1d9
  data InstantValue
    = InstantValue {vValue :: Data.Time.LocalTime.LocalTime.ZonedTime,
                    vGrain :: Duckling.TimeGrain.Types.Grain}
794da663254a4d37bc004d93a2fd1e20
  data IntervalDirection = Before | After
406784162425eaceb69fef4bfcf3fc69
  newtype NoShow a = NoShow a
533ec79e58f99d7c8cbf3906fba5ba38
  data Predicate
    = SeriesPredicate (Duckling.Time.Types.NoShow
                         Duckling.Time.Types.SeriesPredicate)
    | EmptyPredicate
    | TimeDatePredicate {tdSecond :: GHC.Base.Maybe GHC.Types.Int,
                         tdMinute :: GHC.Base.Maybe GHC.Types.Int,
                         tdHour :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int),
                         tdAMPM :: GHC.Base.Maybe Duckling.Time.Types.AMPM,
                         tdDayOfTheWeek :: GHC.Base.Maybe GHC.Types.Int,
                         tdDayOfTheMonth :: GHC.Base.Maybe GHC.Types.Int,
                         tdMonth :: GHC.Base.Maybe GHC.Types.Int,
                         tdYear :: GHC.Base.Maybe GHC.Types.Int}
    | IntersectPredicate Duckling.Time.Types.Predicate
                         Duckling.Time.Types.Predicate
    | TimeIntervalsPredicate Duckling.Time.Types.TimeIntervalType
                             Duckling.Time.Types.Predicate
                             Duckling.Time.Types.Predicate
    | ReplaceIntersectPredicate Duckling.Time.Types.Predicate
                                Duckling.Time.Types.Predicate
                                Duckling.Time.Types.Predicate
c80185ec1b344a03f6bbe3b44173e850
  axiom Rep_Form::
      GHC.Generics.Rep Duckling.Time.Types.Form
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Form"
               "Duckling.Time.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "DayOfWeek" 'GHC.Generics.PrefixI 'GHC.Types.False)
                GHC.Generics.U1
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "TimeOfDay" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "hours")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe GHC.Types.Int))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "is12H")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Types.Bool)))
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Month" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "month")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 GHC.Types.Int))
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "PartOfDay"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
794da663254a4d37bc004d93a2fd1e20
  axiom Rep_IntervalDirection::
      GHC.Generics.Rep Duckling.Time.Types.IntervalDirection
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "IntervalDirection"
               "Duckling.Time.Types"
               "duckling-0.1.6.1-FuuoxNkK08bIA0dGJuhBV1"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Before" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "After" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
973e527f0b8e86f8d0fe08affcec9f01
  data Season
    = Season {startYear :: GHC.Integer.Type.Integer,
              seasonName :: Duckling.Time.Types.SeasonName}
a824c814fefb773479920a17bad751eb
  data SeasonName = Spring | Summer | Fall | Winter
a0fecfab31f8192834b33165cb5516b4
  type SeriesPredicate =
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
bdbf0c070c694d198978600704691028
  data SingleTimeValue
    = SimpleValue Duckling.Time.Types.InstantValue
    | IntervalValue (Duckling.Time.Types.InstantValue,
                     Duckling.Time.Types.InstantValue)
    | OpenIntervalValue (Duckling.Time.Types.InstantValue,
                         Duckling.Time.Types.IntervalDirection)
4999a10408d1aab9bb91afde392d9166
  data TimeContext
    = TimeContext {refTime :: Duckling.Time.Types.TimeObject,
                   tzSeries :: Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries,
                   maxTime :: Duckling.Time.Types.TimeObject,
                   minTime :: Duckling.Time.Types.TimeObject}
30afdebe049cca4783f2b6e6cd997b57
  data TimeData
    = TimeData {timePred :: Duckling.Time.Types.Predicate,
                latent :: GHC.Types.Bool,
                timeGrain :: Duckling.TimeGrain.Types.Grain,
                notImmediate :: GHC.Types.Bool,
                form :: GHC.Base.Maybe Duckling.Time.Types.Form,
                direction :: GHC.Base.Maybe Duckling.Time.Types.IntervalDirection,
                okForThisNext :: GHC.Types.Bool,
                holiday :: GHC.Base.Maybe Data.Text.Internal.Text,
                hasTimezone :: GHC.Types.Bool}
c095d8efdfdd07a22d96cdf4e02bfd32
  data TimeIntervalType = Open | Closed
cebf1bb42889d6dda342d21248135915
  data TimeObject
    = TimeObject {start :: Data.Time.Clock.UTC.UTCTime,
                  grain :: Duckling.TimeGrain.Types.Grain,
                  end :: GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime}
d712de0b6b1b686da9f87f91641709f6
  data TimeValue
    = TimeValue Duckling.Time.Types.SingleTimeValue
                [Duckling.Time.Types.SingleTimeValue]
                (GHC.Base.Maybe Data.Text.Internal.Text)
cf216bd55386d1334e44e2d4a49e7215
  containsTimeIntervalsPredicate ::
    Duckling.Time.Types.Predicate -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2e6e48b681f76f4265c81db5f93f792b
  diffStartTime ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject
    -> Data.Time.Clock.UTC.NominalDiffTime
  {- Arity: 2,
     Strictness: <S(S(SS)LL),1*U(1*U(1*U,U),A,A)><S(S(SS)LL),1*U(1*U(1*U,U),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                 case w1 of ww7 { Duckling.Time.Types.TimeObject ww8 ww9 ww10 ->
                 case ww8 of ww11 { Data.Time.Clock.UTC.UTCTime ww12 ww13 ->
                 (GHC.Integer.Type.absInteger
                    (GHC.Integer.Type.minusInteger
                       (Data.Time.Clock.POSIX.$wutcTimeToPOSIXSeconds ww5 ww6)
                         `cast`
                       (Trans
                            (Data.Time.Clock.UTC.N:NominalDiffTime[0])
                            (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                       (Data.Time.Clock.POSIX.$wutcTimeToPOSIXSeconds ww12 ww13)
                         `cast`
                       (Trans
                            (Data.Time.Clock.UTC.N:NominalDiffTime[0])
                            (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))))
                   `cast`
                 (Trans
                      (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                      (Sym (Data.Time.Clock.UTC.N:NominalDiffTime[0]))) } } } }) -}
49aaf37331fbb17a8554f38ebcceb742
  direction ::
    Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.IntervalDirection
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
d70356705d94c5cff45d94aa5034a506
  emptyTimeDatePredicate :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
f7bd28bbfc0a186d8711d16afdc2834b
  end ::
    Duckling.Time.Types.TimeObject
    -> GHC.Base.Maybe Data.Time.Clock.UTC.UTCTime
  RecSel Left Duckling.Time.Types.TimeObject
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeObject) ->
                 case ds of wild { Duckling.Time.Types.TimeObject ds1 ds2 ds3 ->
                 ds3 }) -}
5d75858393e950a5dffdacc763c3c71c
  form ::
    Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Duckling.Time.Types.Form
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
aff9c459c6e426343fed71d8614711a2
  grain ::
    Duckling.Time.Types.TimeObject -> Duckling.TimeGrain.Types.Grain
  RecSel Left Duckling.Time.Types.TimeObject
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeObject) ->
                 case ds of wild { Duckling.Time.Types.TimeObject ds1 ds2 ds3 ->
                 ds2 }) -}
974094a4a88b970115b5ee4241f079bb
  hasTimezone :: Duckling.Time.Types.TimeData -> GHC.Types.Bool
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
e870b0e5dd86c7f1ab80374223a7c6ee
  holiday ::
    Duckling.Time.Types.TimeData
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
fa71ade54f9babe5af5de4e4d3aa2f13
  hours :: Duckling.Time.Types.Form -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Form
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Form) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.hours1
                   Duckling.Time.Types.TimeOfDay ds1 ds2 -> ds1 }) -}
0f8ba4245a7cd34af92a327d2b412723
  hours1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
0d35cf5a84f2066859d97f50781b35aa
  instantValue ::
    Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries
    -> Data.Time.Clock.UTC.UTCTime
    -> Duckling.TimeGrain.Types.Grain
    -> Duckling.Time.Types.InstantValue
  {- Arity: 3, Strictness: <L,1*U(1*U(U,U,U),1*U)><L,1*U(U,U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries)
                   (w1 :: Data.Time.Clock.UTC.UTCTime)
                   (w2 :: Duckling.TimeGrain.Types.Grain) ->
                 Duckling.Time.Types.InstantValue
                   (case w1 of wild { Data.Time.Clock.UTC.UTCTime day diffTime ->
                    Data.Time.LocalTime.LocalTime.ZonedTime
                      (Data.Time.LocalTime.LocalTime.LocalTime
                         day
                         (Data.Time.LocalTime.TimeOfDay.timeToTimeOfDay diffTime))
                      (case w of ww { Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries ww1 ww2 ->
                       Data.Time.LocalTime.TimeZone.Series.$wtimeZoneFromSeries
                         ww1
                         ww2
                         wild }) })
                   w2) -}
26411434d382aeb214da4839b7f0e9c9
  is12H :: Duckling.Time.Types.Form -> GHC.Types.Bool
  RecSel Left Duckling.Time.Types.Form
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Form) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.is12H1
                   Duckling.Time.Types.TimeOfDay ds1 ds2 -> ds2 }) -}
192879b91bee8dd4a69e932b890cfd7d
  is12H1 :: GHC.Types.Bool
  {- Strictness: x -}
ea04d4fe1871fd8e093faa4f4212b221
  isEmptyPredicate :: Duckling.Time.Types.Predicate -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Duckling.Time.Types.EmptyPredicate -> GHC.Types.True }) -}
987c7bf7ba813ade90ab5d6f328e5c3a
  latent :: Duckling.Time.Types.TimeData -> GHC.Types.Bool
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
ca8e3dfeba245fbe91efe9740d96f2d7
  maxTime ::
    Duckling.Time.Types.TimeContext -> Duckling.Time.Types.TimeObject
  RecSel Left Duckling.Time.Types.TimeContext
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeContext) ->
                 case ds of wild { Duckling.Time.Types.TimeContext ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
960f62b7409577e083bc55e1a19594d3
  minTime ::
    Duckling.Time.Types.TimeContext -> Duckling.Time.Types.TimeObject
  RecSel Left Duckling.Time.Types.TimeContext
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeContext) ->
                 case ds of wild { Duckling.Time.Types.TimeContext ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
e7d44180035c02cb6d6ba05f0cb71720
  mkAMPMPredicate ::
    Duckling.Time.Types.AMPM -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (ampm :: Duckling.Time.Types.AMPM) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Just @ Duckling.Time.Types.AMPM ampm)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
96cd4fba168336ae1ebe340757375e8c
  mkDayOfTheMonthPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Just @ GHC.Types.Int n)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
9dac1f62d71d10f4d9e28e12c129c4f9
  mkDayOfTheWeekPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Just @ GHC.Types.Int n)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
f10516d84f801e43aa73097904ca0343
  mkEmptyPredicate :: Duckling.Time.Types.Predicate
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.EmptyPredicate -}
965d4139291e7ff6ef3f18d6a4669268
  mkHourPredicate ::
    GHC.Types.Bool -> GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (is12H2 :: GHC.Types.Bool) (h :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Just @ (GHC.Types.Bool, GHC.Types.Int) (is12H2, h))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
fa91a0d34c215d90f4e387bbbf6ba9a8
  mkIntersectPredicate ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate -> Duckling.Time.Types.Predicate
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
17c39c5ce8269edf58fec88f24aaceb6
  mkMinutePredicate :: GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Just @ GHC.Types.Int n)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
cf118fcdb028764981f034d2d87a7f82
  mkMonthPredicate :: GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Just @ GHC.Types.Int n)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
208bf684ab498f1f451f8557766c0971
  mkReplaceIntersectPredicate ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m6,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.ReplaceIntersectPredicate -}
f2d98080a1f1b3675ccf859bf337c5ce
  mkSecondPredicate :: GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Just @ GHC.Types.Int n)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
0b9a7ad882f27f383da3a59a0e8705ca
  mkSeriesPredicate ::
    Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.SeriesPredicate
                  `cast`
                (Duckling.Time.Types.N:NoShow[0]
                     <Duckling.Time.Types.SeriesPredicate>_R
                 ->_R <Duckling.Time.Types.Predicate>_R) -}
3399fd9b6922536260c28c717fa05baa
  mkTimeIntervalsPredicate ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U>,
     Unfolding: (\ (ds :: Duckling.Time.Types.TimeIntervalType)
                   (a :: Duckling.Time.Types.Predicate)
                   (ds1 :: Duckling.Time.Types.Predicate) ->
                 case a of wild {
                   DEFAULT
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                  wild of wild2 {
                             GHC.Types.False
                             -> case Duckling.Time.Types.containsTimeIntervalsPredicate
                                       wild1 of wild3 {
                                  GHC.Types.False
                                  -> Duckling.Time.Types.TimeIntervalsPredicate ds wild wild1
                                  GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                             GHC.Types.True -> Duckling.Time.Types.EmptyPredicate }
                        Duckling.Time.Types.EmptyPredicate
                        -> Duckling.Time.Types.EmptyPredicate }
                   Duckling.Time.Types.EmptyPredicate
                   -> Duckling.Time.Types.EmptyPredicate }) -}
f290a8d397fca8018c654ef851605f38
  mkYearPredicate :: GHC.Types.Int -> Duckling.Time.Types.Predicate
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 Duckling.Time.Types.TimeDatePredicate
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ (GHC.Types.Bool, GHC.Types.Int))
                   (GHC.Base.Nothing @ Duckling.Time.Types.AMPM)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Just @ GHC.Types.Int n)) -}
c60d10cc754c3987cf88bd2f4e42df9c
  month :: Duckling.Time.Types.Form -> GHC.Types.Int
  RecSel Left Duckling.Time.Types.Form
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Form) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.month1
                   Duckling.Time.Types.Month ds1 -> ds1 }) -}
a5a67d7342db0435219d01321602f8bb
  month1 :: GHC.Types.Int
  {- Strictness: x -}
e7e8ce95d61784f750b637210722771b
  nextSeason ::
    Duckling.Time.Types.Season -> Duckling.Time.Types.Season
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case ww2 of wild {
                   DEFAULT
                   -> Duckling.Time.Types.Season
                        ww1
                        (case wild of wild1 {
                           Duckling.Time.Types.Spring -> Duckling.Time.Types.Summer
                           Duckling.Time.Types.Summer -> Duckling.Time.Types.Fall
                           Duckling.Time.Types.Fall -> Duckling.Time.Types.Winter })
                   Duckling.Time.Types.Winter
                   -> Duckling.Time.Types.Season
                        (GHC.Integer.Type.plusInteger ww1 Duckling.Time.Types.nextSeason1)
                        Duckling.Time.Types.Spring } }) -}
06780a44f0475872fea5f8e9feae413d
  nextSeason1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c89038909843728e7764ee386b4b9358
  notImmediate :: Duckling.Time.Types.TimeData -> GHC.Types.Bool
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
0b3e31b8f5c0de443a28690950f5d37b
  okForThisNext :: Duckling.Time.Types.TimeData -> GHC.Types.Bool
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
4816f3dd9fb2a95d4a31617ca59048c9
  openInterval ::
    Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries
    -> Duckling.Time.Types.IntervalDirection
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.SingleTimeValue
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U,U,U),1*U)><L,U><S,1*U(1*U(U,U),U,A)>m3,
     Unfolding: InlineRule (3, True, False)
                (\ (tzSeries1 :: Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries)
                   (direction1 :: Duckling.Time.Types.IntervalDirection)
                   (ds :: Duckling.Time.Types.TimeObject) ->
                 case ds of wild { Duckling.Time.Types.TimeObject s g ds1 ->
                 Duckling.Time.Types.OpenIntervalValue
                   (Duckling.Time.Types.instantValue tzSeries1 s g, direction1) }) -}
1b41f92cc5d2974841cff9bd25d872d1
  pad :: GHC.Types.Int -> GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Duckling.Time.Types.$wpad ww1 w1 }) -}
97534611374119647f6c14897f539d71
  periodicPredicate ::
    Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.Predicate
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,U(U(U,U),U,U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.TimeGrain.Types.Grain)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Duckling.Time.Types.TimeObject) ->
                 case Duckling.Time.Types.$wperiodicPredicate
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Duckling.Time.Types.SeriesPredicate ww1 }) -}
d3aff93286c7643dc69af5c0c4bafbfa
  prevSeason ::
    Duckling.Time.Types.Season -> Duckling.Time.Types.Season
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 case ww2 of wild {
                   DEFAULT
                   -> Duckling.Time.Types.Season
                        ww1
                        (case wild of wild1 {
                           Duckling.Time.Types.Summer -> Duckling.Time.Types.Spring
                           Duckling.Time.Types.Fall -> Duckling.Time.Types.Summer
                           Duckling.Time.Types.Winter -> Duckling.Time.Types.Fall })
                   Duckling.Time.Types.Spring
                   -> Duckling.Time.Types.Season
                        (GHC.Integer.Type.minusInteger ww1 Duckling.Time.Types.nextSeason1)
                        Duckling.Time.Types.Winter } }) -}
0d3635fdf72133e97a3839266128c429
  refTime ::
    Duckling.Time.Types.TimeContext -> Duckling.Time.Types.TimeObject
  RecSel Left Duckling.Time.Types.TimeContext
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeContext) ->
                 case ds of wild { Duckling.Time.Types.TimeContext ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
9e04723e0bfe1e47885e89edbad8aa0a
  runAMPMPredicate ::
    Duckling.Time.Types.AMPM -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U><L,U(U(U,U),A,U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Time.Types.AMPM)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunAMPMPredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
91ba4f88241aa38f428e3931e70cfe23
  runAMPMPredicate1 ::
    Duckling.Time.Types.TimeObject -> Duckling.Time.Types.TimeObject
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,U),1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (t :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.timePlusEnd
                   t
                   Duckling.TimeGrain.Types.Hour
                   Duckling.Time.Types.runAMPMPredicate2) -}
2c440623eb93dd2de0afb9535a0fe2a7
  runAMPMPredicate2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (24) -}
919f9d93aabb6243c312b66313b75db4
  runAMPMPredicate3 ::
    Duckling.Time.Types.TimeObject -> Duckling.Time.Types.TimeObject
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U,U),1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case Duckling.Time.Types.$wlvl
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Duckling.Time.Types.TimeObject ww5 ww6 ww7 } }) -}
aa58d7f9d34e8399e3598b3efc39d709
  runAMPMPredicate4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-24) -}
6f335ab0fb3ca424dd80d7e9087ddbc5
  runAMPMPredicate5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
0514df8d62743debe63080a6e8554573
  runAMPMPredicate6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
523199e1aedfab8ce5882e55e37c598d
  runCompose ::
    Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 4,
     Strictness: <L,C(C1(U(A,1*U)))><L,1*C1(C1(U(U,U)))><L,U><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Duckling.Time.Types.SeriesPredicate)
                   (w1 :: Duckling.Time.Types.SeriesPredicate)
                   (w2 :: Duckling.Time.Types.TimeObject)
                   (w3 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunCompose
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
6998ff7ed5bc7fe8291d0d83cfdae4f8
  runComposeWithReplacement ::
    Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><L,U(U,U,U(U,U,U),U(U,U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Duckling.Time.Types.SeriesPredicate)
                   (w1 :: Duckling.Time.Types.SeriesPredicate)
                   (w2 :: Duckling.Time.Types.SeriesPredicate)
                   (w3 :: Duckling.Time.Types.TimeObject)
                   (w4 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunComposeWithReplacement
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
c6c1967856abdaf87a54e1339e32fc8e
  runDayOfTheMonthPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunDayOfTheMonthPredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
83e2eee6a1adedc1a96179644ba386b0
  runDayOfTheWeekPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunDayOfTheWeekPredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d64b3c423fdaf700152ef611925e235a
  runDayOfTheWeekPredicate1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
032daa85da6b4633be4b77cb07aeba4f
  runHourPredicate ::
    GHC.Base.Maybe Duckling.Time.Types.AMPM
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 5,
     Strictness: <L,U><L,1*U><L,U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Base.Maybe Duckling.Time.Types.AMPM)
                   (w1 :: GHC.Types.Bool)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Duckling.Time.Types.TimeObject)
                   (w4 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunHourPredicate
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
ddf650216c7e9811de3012fddc9e7534
  runIntersectPredicate ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (pred1 :: Duckling.Time.Types.Predicate)
                   (pred2 :: Duckling.Time.Types.Predicate) ->
                 Duckling.Time.Types.runCompose
                   (Duckling.Time.Types.runPredicate pred1)
                   (Duckling.Time.Types.runPredicate pred2)) -}
4325769e12c0149d8a585e86f5b1d3c1
  runMinutePredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunMinutePredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
dea9b228c5d84d604cef9480ecd1d611
  runMinutePredicate1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
d91c618a7a617d35574b7dfed99abead
  runMonthPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunMonthPredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
596be755d4f7ad6759fbd23191e04465
  runPredicate ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 1, Strictness: <S,1*U> -}
890f263c0d1355f1c521b06f55849218
  runReplaceIntersectPredicate ::
    Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (pred1 :: Duckling.Time.Types.Predicate)
                   (pred2 :: Duckling.Time.Types.Predicate)
                   (pred3 :: Duckling.Time.Types.Predicate) ->
                 Duckling.Time.Types.runComposeWithReplacement
                   (Duckling.Time.Types.runPredicate pred1)
                   (Duckling.Time.Types.runPredicate pred2)
                   (Duckling.Time.Types.runPredicate pred3)) -}
677049f387c3d7eeaef22c8e1825cbae
  runSecondPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunSecondPredicate
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
c39bcb070ef95456fe5b9ce771155678
  runSecondPredicate1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (60) -}
62ee2d2efafad590a31e02378f277a8a
  runTimeIntervalsPredicate ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 5,
     Strictness: <L,U><L,1*U><L,U><L,U(U(U,U),U,U)><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Duckling.Time.Types.TimeIntervalType)
                   (w1 :: Duckling.Time.Types.Predicate)
                   (w2 :: Duckling.Time.Types.Predicate)
                   (w3 :: Duckling.Time.Types.TimeObject)
                   (w4 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wrunTimeIntervalsPredicate
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
8fe544b34c06f5fbc6188089e0f41a83
  runYearPredicate ::
    GHC.Types.Int -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,U(U(U,U),A,A)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeContext) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Duckling.Time.Types.$wrunYearPredicate
                        ww1
                        w1 of ww2 { (#,#) ww3 ww4 ->
                 (ww3, ww4) } }) -}
23b3ca7d69fd7e74d896476c965e19f7
  safeMax :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
bb9949178344fb1b56a2d1613990a267
  safeMaxInterval :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
0fdc498e82b2cd2d091d37d85041a790
  seasonEnd ::
    Duckling.Time.Types.Season -> Data.Time.Calendar.Days.Day
  {- Arity: 1, Strictness: <S(SS),1*U(U,1*U)>,
     Unfolding: InlineRule (0, True, True)
                Duckling.Time.Types.seasonEnd1
                  `cast`
                (<Duckling.Time.Types.Season>_R
                 ->_R Sym (Data.Time.Calendar.Days.N:Day[0])) -}
93728dead7b568a0904407ce38e32ee1
  seasonEnd1 ::
    Duckling.Time.Types.Season -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(SS),1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 Duckling.Time.Types.$wseasonEnd ww1 ww2 }) -}
0a97a9f792d6c6cc72ef23a844b09371
  seasonEnd2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
621ec05615661b301b0bf32ce6529da9
  seasonName ::
    Duckling.Time.Types.Season -> Duckling.Time.Types.SeasonName
  RecSel Left Duckling.Time.Types.Season
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Season) ->
                 case ds of wild { Duckling.Time.Types.Season ds1 ds2 -> ds2 }) -}
5edce34a5ce416f972f3975cd845858c
  seasonOf ::
    Data.Time.Calendar.Days.Day -> Duckling.Time.Types.Season
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (day :: Data.Time.Calendar.Days.Day) ->
                 let {
                   year :: GHC.Integer.Type.Integer
                   = case Data.Time.Calendar.Gregorian.$wtoGregorian
                            day of ww { (#,,#) ww1 ww2 ww3 ->
                     ww1 }
                 } in
                 letrec {
                   go11 :: [Duckling.Time.Types.SeasonName]
                           -> Data.Monoid.First Duckling.Time.Types.Season
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Duckling.Time.Types.SeasonName]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ Duckling.Time.Types.Season)
                            `cast`
                          (Sym (Data.Monoid.N:First[0]) <Duckling.Time.Types.Season>_N)
                       : y ys
                       -> case GHC.Integer.Type.leInteger#
                                 (Duckling.Time.Types.$wseasonStart year y)
                                   `cast`
                                 (Data.Time.Calendar.Days.N:Day[0])
                                 day `cast` (Data.Time.Calendar.Days.N:Day[0]) of wild1 { DEFAULT ->
                          case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                            GHC.Types.False -> go11 ys
                            GHC.Types.True
                            -> (GHC.Base.Just
                                  @ Duckling.Time.Types.Season
                                  (Duckling.Time.Types.Season year y))
                                 `cast`
                               (Sym (Data.Monoid.N:First[0]) <Duckling.Time.Types.Season>_N) } } }
                 } in
                 case (go11 Duckling.Time.Types.seasonOf1)
                        `cast`
                      (Data.Monoid.N:First[0] <Duckling.Time.Types.Season>_N) of wild {
                   GHC.Base.Nothing
                   -> Duckling.Time.Types.Season
                        (GHC.Integer.Type.minusInteger
                           year
                           Duckling.Time.Types.nextSeason1)
                        Duckling.Time.Types.Winter
                   GHC.Base.Just v -> v }) -}
5a8b16288fc05ac27f49721b55bfc162
  seasonOf1 :: [Duckling.Time.Types.SeasonName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Time.Types.SeasonName
                   Duckling.Time.Types.Winter
                   Duckling.Time.Types.seasonOf2) -}
9ab29d46ea5863a697686f92c8ea35d6
  seasonOf2 :: [Duckling.Time.Types.SeasonName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Time.Types.SeasonName
                   Duckling.Time.Types.Fall
                   Duckling.Time.Types.seasonOf3) -}
75460bf8c8f09f8ff77e704347369758
  seasonOf3 :: [Duckling.Time.Types.SeasonName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Time.Types.SeasonName
                   Duckling.Time.Types.Summer
                   Duckling.Time.Types.seasonOf4) -}
44cf991f28bf15223ab6f65a0be58411
  seasonOf4 :: [Duckling.Time.Types.SeasonName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Duckling.Time.Types.SeasonName
                   Duckling.Time.Types.Spring
                   (GHC.Types.[] @ Duckling.Time.Types.SeasonName)) -}
e114e6f4e3c64de43fb3f6e395aa9dc9
  seasonPredicate :: Duckling.Time.Types.Predicate
  {- Strictness: m1,
     Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Types.seasonPredicate1
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
68b46eeee85ce3d826d36a96bec32d55
  seasonPredicate1 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U,A),A,A)>,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject) ->
                 let {
                   current :: Duckling.Time.Types.Season
                   = Duckling.Time.Types.seasonOf
                       (case t of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                        case ds of wild1 { Data.Time.Clock.UTC.UTCTime ds3 ds4 -> ds3 } })
                 } in
                 let {
                   ds :: [Duckling.Time.Types.TimeObject]
                   = Duckling.Time.Types.seasonPredicate_go1
                       (case current of wild { Duckling.Time.Types.Season year ds1 ->
                        case ds1 of wild1 {
                          DEFAULT
                          -> Duckling.Time.Types.Season
                               year
                               (case wild1 of wild2 {
                                  Duckling.Time.Types.Summer -> Duckling.Time.Types.Spring
                                  Duckling.Time.Types.Fall -> Duckling.Time.Types.Summer
                                  Duckling.Time.Types.Winter -> Duckling.Time.Types.Fall })
                          Duckling.Time.Types.Spring
                          -> Duckling.Time.Types.Season
                               (GHC.Integer.Type.minusInteger
                                  year
                                  Duckling.Time.Types.nextSeason1)
                               Duckling.Time.Types.Winter } })
                 } in
                 let {
                   ds1 :: [Duckling.Time.Types.TimeObject]
                   = Duckling.Time.Types.seasonPredicate_go current
                 } in
                 let {
                   x :: ([Duckling.Time.Types.TimeObject],
                         [Duckling.Time.Types.TimeObject])
                     {- Strictness: m -}
                   = (ds, ds1)
                 } in
                 \ (ds2 :: Duckling.Time.Types.TimeContext) -> x) -}
52c363e836cfccc1a3929d2fa03a385f
  seasonPredicate_go ::
    Duckling.Time.Types.Season -> [Duckling.Time.Types.TimeObject]
  {- Arity: 1, Strictness: <L,U(U,U)> -}
e0833fc854820952074f1b169695da34
  seasonPredicate_go1 ::
    Duckling.Time.Types.Season -> [Duckling.Time.Types.TimeObject]
  {- Arity: 1, Strictness: <L,U(U,U)> -}
785b858d7832ed701b4831cff58b2efd
  seasonStart ::
    Duckling.Time.Types.Season -> Data.Time.Calendar.Days.Day
  {- Arity: 1, Strictness: <S(SS),1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.Season) ->
                 case w of ww { Duckling.Time.Types.Season ww1 ww2 ->
                 Duckling.Time.Types.$wseasonStart ww1 ww2 }) -}
e7231e294893810fe4c705d3d926e0b7
  start ::
    Duckling.Time.Types.TimeObject -> Data.Time.Clock.UTC.UTCTime
  RecSel Left Duckling.Time.Types.TimeObject
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeObject) ->
                 case ds of wild { Duckling.Time.Types.TimeObject ds1 ds2 ds3 ->
                 ds1 }) -}
fc84e241167251e2e7489d2b05d7cb81
  startYear :: Duckling.Time.Types.Season -> GHC.Integer.Type.Integer
  RecSel Left Duckling.Time.Types.Season
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Season) ->
                 case ds of wild { Duckling.Time.Types.Season ds1 ds2 -> ds1 }) -}
54117da16a50c6b2806b9582e30e89a3
  tdAMPM ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe Duckling.Time.Types.AMPM
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdAMPM1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds4 }) -}
77fffb853016d1fa7dd49c6923956795
  tdAMPM1 :: GHC.Base.Maybe Duckling.Time.Types.AMPM
  {- Strictness: x -}
8f5f139cab960d674acf46a92a9067a7
  tdDayOfTheMonth ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdDayOfTheMonth1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds6 }) -}
fc5351f19c13564b8fd2db51d9f39efa
  tdDayOfTheMonth1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
2c7704f07eabce04dde848ed05744559
  tdDayOfTheWeek ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdDayOfTheWeek1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds5 }) -}
8e35cb040de0cc106ec37c6fb9ae5956
  tdDayOfTheWeek1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
843a290b87c7f180129a2df37d39b74c
  tdHour ::
    Duckling.Time.Types.Predicate
    -> GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdHour1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds3 }) -}
44737533a294ed118abc2ec3278fdd09
  tdHour1 :: GHC.Base.Maybe (GHC.Types.Bool, GHC.Types.Int)
  {- Strictness: x -}
e68ba5c9ef80283be6383c184dd1b3fc
  tdMinute ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdMinute1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds2 }) -}
0061b1ce9acb680edb1e1843f40c8868
  tdMinute1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
a25cc7f24e3854229758f9c9d9d8e45d
  tdMonth ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdMonth1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds7 }) -}
ee2808ceba141f4244d95a66b5c5f9cb
  tdMonth1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
9ebad3b331e6034583baa821494ddfdf
  tdSecond ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdSecond1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds1 }) -}
0857507a2be7f91cf737583e144d0239
  tdSecond1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
52a8a90c52402bcbd78f43e85e73dcb0
  tdYear ::
    Duckling.Time.Types.Predicate -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Duckling.Time.Types.Predicate
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.Predicate) ->
                 case ds of wild {
                   DEFAULT -> Duckling.Time.Types.tdYear1
                   Duckling.Time.Types.TimeDatePredicate ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8
                   -> ds8 }) -}
2d4921e400ba280d39f66f73ce8705d8
  tdYear1 :: GHC.Base.Maybe GHC.Types.Int
  {- Strictness: x -}
ab85db0b49f1825d0dc44d79181fa6e1
  timeBefore ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),A,A)><S(S(SL)LL),1*U(1*U(1*U,1*U),A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                 case w1 of ww7 { Duckling.Time.Types.TimeObject ww8 ww9 ww10 ->
                 case ww8 of ww11 { Data.Time.Clock.UTC.UTCTime ww12 ww13 ->
                 Duckling.Time.Types.$wtimeBefore ww5 ww6 ww12 ww13 } } } }) -}
3e36123f767a9fe78af7a9de3ebf7858
  timeEnd ::
    Duckling.Time.Types.TimeObject -> Data.Time.Clock.UTC.UTCTime
  {- Arity: 1, Strictness: <S(LLS),1*U(1*U(1*U,U),1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 Duckling.Time.Types.$wtimeEnd ww1 ww2 ww3 }) -}
fefaa48c4f4a9379d8fdf0734504ea9f
  timeGrain ::
    Duckling.Time.Types.TimeData -> Duckling.TimeGrain.Types.Grain
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
e41fd52b8c083016300bbe0f6b294c46
  timeIntersect ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject
    -> GHC.Base.Maybe Duckling.Time.Types.TimeObject
  {- Arity: 2,
     Strictness: <S(S(SL)LL),1*U(U(U,U),U,U)><S(S(SL)LL),1*U(U(U,U),U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                 case w1 of ww7 { Duckling.Time.Types.TimeObject ww8 ww9 ww10 ->
                 case ww8 of ww11 { Data.Time.Clock.UTC.UTCTime ww12 ww13 ->
                 Duckling.Time.Types.$wtimeIntersect
                   ww5
                   ww6
                   ww2
                   ww3
                   ww12
                   ww13
                   ww9
                   ww10 } } } }) -}
9c4bf99f906b79eace5d08dfffa8b403
  timeInterval ::
    Duckling.Time.Types.TimeIntervalType
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject
  {- Arity: 3,
     Strictness: <L,1*U><S,1*U(U,U,A)><S,1*U(1*U(U,U),U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Time.Types.TimeIntervalType)
                   (w1 :: Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.TimeObject) ->
                 case w1 of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case w2 of ww4 { Duckling.Time.Types.TimeObject ww5 ww6 ww7 ->
                 case Duckling.Time.Types.$wtimeInterval
                        w
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 Duckling.Time.Types.TimeObject ww9 ww10 ww11 } } }) -}
556f0f10e7ad16e9bcaed40568e7e739
  timePlus ::
    Duckling.Time.Types.TimeObject
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.TimeObject
  {- Arity: 3, Strictness: <S,1*U(1*U(1*U,U),1*U,A)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Duckling.Time.Types.TimeObject)
                   (theGrain :: Duckling.TimeGrain.Types.Grain)
                   (n :: GHC.Integer.Type.Integer) ->
                 case ds of wild { Duckling.Time.Types.TimeObject start1 grain1 ds1 ->
                 Duckling.Time.Types.TimeObject
                   (Duckling.TimeGrain.Types.add start1 theGrain n)
                   (Duckling.TimeGrain.Types.$fOrdGrain_$cmin grain1 theGrain)
                   (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime) }) -}
71874422a441688a9ec8f79161d37eb6
  timePlusEnd ::
    Duckling.Time.Types.TimeObject
    -> Duckling.TimeGrain.Types.Grain
    -> GHC.Integer.Type.Integer
    -> Duckling.Time.Types.TimeObject
  {- Arity: 3, Strictness: <S,1*U(1*U(1*U,U),1*U,1*U)><L,U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.TimeGrain.Types.Grain)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 Duckling.Time.Types.TimeObject
                   (Duckling.TimeGrain.Types.add ww1 w1 w2)
                   (Duckling.TimeGrain.Types.$fOrdGrain_$cmin ww2 w1)
                   (case ww3 of wild {
                      GHC.Base.Nothing -> GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime
                      GHC.Base.Just x
                      -> GHC.Base.Just
                           @ Data.Time.Clock.UTC.UTCTime
                           (Duckling.TimeGrain.Types.add x w1 w2) }) }) -}
23dec17fd13d668dd1aaebf3f54d039e
  timePred ::
    Duckling.Time.Types.TimeData -> Duckling.Time.Types.Predicate
  RecSel Left Duckling.Time.Types.TimeData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeData) ->
                 case ds of wild { Duckling.Time.Types.TimeData ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
e230105aea1834fc774d3d019107b601
  timeRound ::
    Duckling.Time.Types.TimeObject
    -> Duckling.TimeGrain.Types.Grain -> Duckling.Time.Types.TimeObject
  {- Arity: 2, Strictness: <L,1*U(1*U(U,U),A,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.TimeGrain.Types.Grain) ->
                 case Duckling.Time.Types.$wtimeRound
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Duckling.Time.Types.TimeObject ww1 ww2 ww3 }) -}
1c231a860b8814456c7905f58526a7a0
  timeSeqMap ::
    GHC.Types.Bool
    -> (Duckling.Time.Types.TimeObject
        -> Duckling.Time.Types.TimeContext
        -> GHC.Base.Maybe Duckling.Time.Types.TimeObject)
    -> Duckling.Time.Types.Predicate
    -> Duckling.Time.Types.SeriesPredicate
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(U))><L,1*U><L,U(U(U,U),U,U)><L,U(U,U,U(U(U,U),U,U),U(U(U,U),U,U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: Duckling.Time.Types.TimeObject
                          -> Duckling.Time.Types.TimeContext
                          -> GHC.Base.Maybe Duckling.Time.Types.TimeObject)
                   (w2 :: Duckling.Time.Types.Predicate)
                   (w3 :: Duckling.Time.Types.TimeObject)
                   (w4 :: Duckling.Time.Types.TimeContext) ->
                 case Duckling.Time.Types.$wtimeSeqMap
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
85b0e7ea5d605994f0ad8caf1b71a2ad
  timeSequence ::
    Duckling.TimeGrain.Types.Grain
    -> GHC.Types.Int
    -> Duckling.Time.Types.TimeObject
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 3, Strictness: <L,U><L,U(U)><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Duckling.TimeGrain.Types.Grain)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Duckling.Time.Types.TimeObject) ->
                 case Duckling.Time.Types.$wtimeSequence
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e807889771f87fe793ff768ad2281074
  timeStartingAtTheEndOf ::
    Duckling.Time.Types.TimeObject -> Duckling.Time.Types.TimeObject
  {- Arity: 1, Strictness: <L,U(1*U(1*U,U),U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (t :: Duckling.Time.Types.TimeObject) ->
                 Duckling.Time.Types.TimeObject
                   (Duckling.Time.Types.timeEnd t)
                   (case t of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                    ds1 })
                   (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime)) -}
30ab70146374d84e3de6fe468bec8fa3
  timeStartsBeforeTheEndOf ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeObject -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(SL)LL),1*U(1*U(1*U,1*U),A,A)><S(LLS),1*U(1*U(1*U,U),1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Duckling.Time.Types.TimeObject)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Time.Clock.UTC.UTCTime ww5 ww6 ->
                 case w1 of ww7 { Duckling.Time.Types.TimeObject ww8 ww9 ww10 ->
                 Duckling.Time.Types.$wtimeStartsBeforeTheEndOf
                   ww5
                   ww6
                   ww8
                   ww9
                   ww10 } } }) -}
a5ddb5d5a056c4cab498fd8fc8093173
  timeValue ::
    Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries
    -> Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.SingleTimeValue
  {- Arity: 2,
     Strictness: <L,U(U(U,U,U),U)><S(LLS),1*U(1*U(U,U),U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries)
                   (w1 :: Duckling.Time.Types.TimeObject) ->
                 case w1 of ww { Duckling.Time.Types.TimeObject ww1 ww2 ww3 ->
                 Duckling.Time.Types.$wtimeValue w ww1 ww2 ww3 }) -}
62c1482eb36d980dd8d03a00db9190af
  timedata' :: Duckling.Time.Types.TimeData
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Duckling.Time.Types.TimeData
                   Duckling.Time.Types.EmptyPredicate
                   GHC.Types.False
                   Duckling.TimeGrain.Types.Second
                   GHC.Types.False
                   (GHC.Base.Nothing @ Duckling.Time.Types.Form)
                   (GHC.Base.Nothing @ Duckling.Time.Types.IntervalDirection)
                   GHC.Types.False
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   GHC.Types.False) -}
be978e4347025b6c89785e24f59d5694
  timezoneOffset ::
    Data.Time.LocalTime.TimeZone.TimeZone -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(1*U(U),A,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Time.LocalTime.TimeZone.TimeZone) ->
                 case w of ww { Data.Time.LocalTime.TimeZone.TimeZone ww1 ww2 ww3 ->
                 Duckling.Time.Types.$wtimezoneOffset ww1 }) -}
b7b805de8af1d235117519d420acf01a
  timezoneOffset1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ":"#) -}
b41ff1c17b82e10d9cc36fa842edd516
  timezoneOffset2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "-"#) -}
eaa1c0fd9909c61d74a448fc5fe33918
  timezoneOffset3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "+"#) -}
388549cacdda10a18593fe40d9ecaded
  toMidnight ::
    Data.Time.Calendar.Days.Day -> Data.Time.Clock.UTC.UTCTime
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: Data.Time.Calendar.Days.Day) ->
                 Data.Time.Clock.UTC.UTCTime
                   y
                   Duckling.Time.Types.toMidnight1
                     `cast`
                   (Trans
                        (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                        (Sym (Data.Time.Clock.Scale.N:DiffTime[0])))) -}
d8e432fc6a6499f3c3cdeaaee8c3f78c
  toMidnight1 :: GHC.Integer.Type.Integer
  {- Unfolding: (Data.Time.LocalTime.TimeOfDay.$wtimeOfDayToTime
                   0#
                   0#
                   Data.Time.LocalTime.TimeOfDay.makeTimeOfDayValid4
                     `cast`
                   (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))) -}
ba8d9259f21401c2db15495d504b931e
  toRFC3339 ::
    Data.Time.LocalTime.LocalTime.ZonedTime -> Data.Text.Internal.Text
  {- Arity: 1,
     Strictness: <S(S(LS)L),1*U(1*U(1*U,1*U(1*U(U),1*U(U),U)),1*U(1*U(U),A,A))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Time.LocalTime.LocalTime.ZonedTime) ->
                 case w of ww { Data.Time.LocalTime.LocalTime.ZonedTime ww1 ww2 ->
                 case ww1 of ww3 { Data.Time.LocalTime.LocalTime.LocalTime ww4 ww5 ->
                 case ww5 of ww6 { Data.Time.LocalTime.TimeOfDay.TimeOfDay ww7 ww8 ww9 ->
                 Duckling.Time.Types.$wtoRFC3339 ww4 ww7 ww8 ww9 ww2 } } }) -}
c5b008e39657b4c80a3dbccc92d3f891
  tzSeries ::
    Duckling.Time.Types.TimeContext
    -> Data.Time.LocalTime.TimeZone.Series.TimeZoneSeries
  RecSel Left Duckling.Time.Types.TimeContext
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.TimeContext) ->
                 case ds of wild { Duckling.Time.Types.TimeContext ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
dd5978f653fa030970c42d627ac366b6
  vGrain ::
    Duckling.Time.Types.InstantValue -> Duckling.TimeGrain.Types.Grain
  RecSel Left Duckling.Time.Types.InstantValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.InstantValue) ->
                 case ds of wild { Duckling.Time.Types.InstantValue ds1 ds2 ->
                 ds2 }) -}
0ba7c7b0ebc88c64af476969985bcb21
  vValue ::
    Duckling.Time.Types.InstantValue
    -> Data.Time.LocalTime.LocalTime.ZonedTime
  RecSel Left Duckling.Time.Types.InstantValue
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Duckling.Time.Types.InstantValue) ->
                 case ds of wild { Duckling.Time.Types.InstantValue ds1 ds2 ->
                 ds1 }) -}
629ef9ecfd92aeb8075e3921afe5f7ac
  weekdayPredicate :: Duckling.Time.Types.Predicate
  {- Strictness: m1,
     Unfolding: (Duckling.Time.Types.SeriesPredicate
                   Duckling.Time.Types.weekdayPredicate1
                     `cast`
                   (Sym (Duckling.Time.Types.N:NoShow[0]
                             <Duckling.Time.Types.SeriesPredicate>_R))) -}
290190cfbfb093f81cc2f5d848dbf7c9
  weekdayPredicate1 ::
    Duckling.Time.Types.TimeObject
    -> Duckling.Time.Types.TimeContext
    -> ([Duckling.Time.Types.TimeObject],
        [Duckling.Time.Types.TimeObject])
  {- Arity: 1, Strictness: <L,1*U(1*U(1*U,A),A,A)>,
     Unfolding: (\ (t :: Duckling.Time.Types.TimeObject) ->
                 let {
                   day :: Data.Time.Calendar.Days.Day
                   = case t of wild { Duckling.Time.Types.TimeObject ds ds1 ds2 ->
                     case ds of wild1 { Data.Time.Clock.UTC.UTCTime ds3 ds4 -> ds3 } }
                 } in
                 let {
                   dayOfWeek :: GHC.Types.Int
                   = case Data.Time.Calendar.WeekDate.$wtoWeekDate
                            day of ww { (#,,#) ww1 ww2 ww3 ->
                     ww3 }
                 } in
                 let {
                   x :: [Duckling.Time.Types.TimeObject]
                   = Duckling.Time.Types.weekdayPredicate_go1
                       (case dayOfWeek of wild { GHC.Types.I# x1 ->
                        case x1 of wild1 {
                          DEFAULT
                          -> ((GHC.Integer.Type.plusInteger
                                 day `cast` (Data.Time.Calendar.Days.N:Day[0])
                                 Duckling.Time.Types.seasonEnd2)
                                `cast`
                              (Sym (Data.Time.Calendar.Days.N:Day[0])),
                              GHC.Types.I# (GHC.Prim.-# wild1 1#))
                          1#
                          -> ((GHC.Integer.Type.plusInteger
                                 day `cast` (Data.Time.Calendar.Days.N:Day[0])
                                 Duckling.Time.Types.weekdayPredicate5)
                                `cast`
                              (Sym (Data.Time.Calendar.Days.N:Day[0])),
                              Duckling.Time.Types.weekdayPredicate4)
                          7#
                          -> ((GHC.Integer.Type.plusInteger
                                 day `cast` (Data.Time.Calendar.Days.N:Day[0])
                                 Duckling.Time.Types.weekdayPredicate3)
                                `cast`
                              (Sym (Data.Time.Calendar.Days.N:Day[0])),
                              Duckling.Time.Types.weekdayPredicate4) } })
                 } in
                 let {
                   x1 :: [Duckling.Time.Types.TimeObject]
                   = case dayOfWeek of wild { GHC.Types.I# x2 ->
                     let {
                       days :: [Data.Time.Calendar.Days.Day]
                       = Duckling.Time.Types.weekdayPredicate_go
                           (case GHC.Prim.tagToEnum#
                                   @ GHC.Types.Bool
                                   (GHC.Prim.<# x2 5#) of wild1 {
                              GHC.Types.False
                              -> ((GHC.Integer.Type.plusInteger
                                     day `cast` (Data.Time.Calendar.Days.N:Day[0])
                                     (GHC.Integer.Type.smallInteger (GHC.Prim.-# 8# x2)))
                                    `cast`
                                  (Sym (Data.Time.Calendar.Days.N:Day[0])),
                                  Duckling.Time.Types.runMinutePredicate1)
                              GHC.Types.True
                              -> ((GHC.Integer.Type.plusInteger
                                     day `cast` (Data.Time.Calendar.Days.N:Day[0])
                                     Duckling.Time.Types.nextSeason1)
                                    `cast`
                                  (Sym (Data.Time.Calendar.Days.N:Day[0])),
                                  GHC.Types.I# (GHC.Prim.+# x2 1#)) })
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x2 5#) of wild1 {
                       GHC.Types.False
                       -> GHC.Base.map
                            @ Data.Time.Calendar.Days.Day
                            @ Duckling.Time.Types.TimeObject
                            Duckling.Time.Types.weekdayPredicate2
                            days
                       GHC.Types.True
                       -> GHC.Base.map
                            @ Data.Time.Calendar.Days.Day
                            @ Duckling.Time.Types.TimeObject
                            Duckling.Time.Types.weekdayPredicate2
                            (GHC.Types.: @ Data.Time.Calendar.Days.Day day days) } }
                 } in
                 let {
                   x2 :: ([Duckling.Time.Types.TimeObject],
                          [Duckling.Time.Types.TimeObject])
                     {- Strictness: m -}
                   = (x, x1)
                 } in
                 \ (ds :: Duckling.Time.Types.TimeContext) -> x2) -}
c62224f3c48be620bcc07c3fcc0a2c21
  weekdayPredicate2 ::
    Data.Time.Calendar.Days.Day -> Duckling.Time.Types.TimeObject
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Time.Calendar.Days.Day) ->
                 Duckling.Time.Types.TimeObject
                   (Data.Time.Clock.UTC.UTCTime
                      x
                      Duckling.Time.Types.toMidnight1
                        `cast`
                      (Trans
                           (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                           (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))))
                   Duckling.TimeGrain.Types.Day
                   (GHC.Base.Nothing @ Data.Time.Clock.UTC.UTCTime)) -}
be5bc0ae777c6bace1087d089b2b704e
  weekdayPredicate3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-2) -}
4704e888660b7e75e1319ca86e8089b2
  weekdayPredicate4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
4370386b9475994b6ab9637535a3c5f6
  weekdayPredicate5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-3) -}
7a9f7cd2960d70fd031c08198ff9ded6
  weekdayPredicate_go ::
    (Data.Time.Calendar.Days.Day, GHC.Types.Int)
    -> [Data.Time.Calendar.Days.Day]
  {- Arity: 1, Strictness: <L,U(U,1*U(U))> -}
90099c7e01ac413c964bc662229184aa
  weekdayPredicate_go1 ::
    (Data.Time.Calendar.Days.Day, GHC.Types.Int)
    -> [Duckling.Time.Types.TimeObject]
  {- Arity: 1, Strictness: <L,U(U,1*U(1*U))> -}
instance GHC.Enum.Enum [Duckling.Time.Types.SeasonName]
  = Duckling.Time.Types.$fEnumSeasonName
instance GHC.Classes.Eq [Duckling.Time.Types.AMPM]
  = Duckling.Time.Types.$fEqAMPM
instance GHC.Classes.Eq [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fEqForm
instance GHC.Classes.Eq [Duckling.Time.Types.InstantValue]
  = Duckling.Time.Types.$fEqInstantValue
instance GHC.Classes.Eq [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fEqIntervalDirection
instance GHC.Classes.Eq [Duckling.Time.Types.Season]
  = Duckling.Time.Types.$fEqSeason
instance GHC.Classes.Eq [Duckling.Time.Types.SeasonName]
  = Duckling.Time.Types.$fEqSeasonName
instance GHC.Classes.Eq [Duckling.Time.Types.SingleTimeValue]
  = Duckling.Time.Types.$fEqSingleTimeValue
instance GHC.Classes.Eq [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fEqTimeData
instance GHC.Classes.Eq [Duckling.Time.Types.TimeIntervalType]
  = Duckling.Time.Types.$fEqTimeIntervalType
instance GHC.Classes.Eq [Duckling.Time.Types.TimeObject]
  = Duckling.Time.Types.$fEqTimeObject
instance GHC.Classes.Eq [Duckling.Time.Types.TimeValue]
  = Duckling.Time.Types.$fEqTimeValue
instance GHC.Generics.Generic [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fGenericForm
instance GHC.Generics.Generic [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fGenericIntervalDirection
instance Data.Hashable.Class.Hashable [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fHashableForm
instance Data.Hashable.Class.Hashable [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fHashableIntervalDirection
instance Data.Hashable.Class.Hashable [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fHashableTimeData
instance Control.DeepSeq.NFData [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fNFDataForm
instance Control.DeepSeq.NFData [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fNFDataIntervalDirection
instance Control.DeepSeq.NFData [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fNFDataTimeData
instance GHC.Classes.Ord [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fOrdForm
instance GHC.Classes.Ord [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fOrdIntervalDirection
instance GHC.Classes.Ord [Duckling.Time.Types.Season]
  = Duckling.Time.Types.$fOrdSeason
instance GHC.Classes.Ord [Duckling.Time.Types.SeasonName]
  = Duckling.Time.Types.$fOrdSeasonName
instance GHC.Classes.Ord [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fOrdTimeData
instance Duckling.Resolve.Resolve [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fResolveTimeData
instance GHC.Show.Show [Duckling.Time.Types.AMPM]
  = Duckling.Time.Types.$fShowAMPM
instance GHC.Show.Show [Duckling.Time.Types.Form]
  = Duckling.Time.Types.$fShowForm
instance GHC.Show.Show [Duckling.Time.Types.InstantValue]
  = Duckling.Time.Types.$fShowInstantValue
instance GHC.Show.Show [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.$fShowIntervalDirection
instance GHC.Show.Show [Duckling.Time.Types.NoShow]
  = Duckling.Time.Types.$fShowNoShow
instance GHC.Show.Show [Duckling.Time.Types.Predicate]
  = Duckling.Time.Types.$fShowPredicate
instance GHC.Show.Show [Duckling.Time.Types.Season]
  = Duckling.Time.Types.$fShowSeason
instance GHC.Show.Show [Duckling.Time.Types.SeasonName]
  = Duckling.Time.Types.$fShowSeasonName
instance GHC.Show.Show [Duckling.Time.Types.SingleTimeValue]
  = Duckling.Time.Types.$fShowSingleTimeValue
instance GHC.Show.Show [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.$fShowTimeData
instance GHC.Show.Show [Duckling.Time.Types.TimeIntervalType]
  = Duckling.Time.Types.$fShowTimeIntervalType
instance GHC.Show.Show [Duckling.Time.Types.TimeObject]
  = Duckling.Time.Types.$fShowTimeObject
instance GHC.Show.Show [Duckling.Time.Types.TimeValue]
  = Duckling.Time.Types.$fShowTimeValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Time.Types.InstantValue]
  = Duckling.Time.Types.$fToJSONInstantValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Time.Types.SingleTimeValue]
  = Duckling.Time.Types.$fToJSONSingleTimeValue
instance Data.Aeson.Types.ToJSON.ToJSON [Duckling.Time.Types.TimeValue]
  = Duckling.Time.Types.$fToJSONTimeValue
family instance GHC.Generics.Rep [Duckling.Time.Types.IntervalDirection]
  = Duckling.Time.Types.Rep_IntervalDirection
family instance GHC.Generics.Rep [Duckling.Time.Types.Form]
  = Duckling.Time.Types.Rep_Form
family instance Duckling.Resolve.ResolvedValue [Duckling.Time.Types.TimeData]
  = Duckling.Time.Types.D:R:ResolvedValueTimeData
"SPEC/Duckling.Time.Types $dmhashWithSalt @ IntervalDirection" [ALWAYS] forall ($dGHashable :: Data.Hashable.Class.GHashable
                                                                                                 Data.Hashable.Class.Zero
                                                                                                 (GHC.Generics.Rep
                                                                                                    Duckling.Time.Types.IntervalDirection))
                                                                               ($dGeneric :: GHC.Generics.Generic
                                                                                               Duckling.Time.Types.IntervalDirection)
                                                                               ($dHashable :: Data.Hashable.Class.Hashable
                                                                                                Duckling.Time.Types.IntervalDirection)
  Data.Hashable.Class.$dmhashWithSalt @ Duckling.Time.Types.IntervalDirection
                                      $dHashable
                                      $dGeneric
                                      $dGHashable
  = Duckling.Time.Types.$fHashableIntervalDirection_$s$dmhashWithSalt
"SPEC/Duckling.Time.Types $dmrnf @ Form" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                         (GHC.Generics.Rep
                                                                            Duckling.Time.Types.Form))
                                                         ($dGeneric :: GHC.Generics.Generic
                                                                         Duckling.Time.Types.Form)
                                                         ($dNFData :: Control.DeepSeq.NFData
                                                                        Duckling.Time.Types.Form)
  Control.DeepSeq.$dmrnf @ Duckling.Time.Types.Form
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Time.Types.$fNFDataForm_$s$dmrnf
"SPEC/Duckling.Time.Types $dmrnf @ IntervalDirection" [ALWAYS] forall ($dGNFData :: Control.DeepSeq.GNFData
                                                                                      (GHC.Generics.Rep
                                                                                         Duckling.Time.Types.IntervalDirection))
                                                                      ($dGeneric :: GHC.Generics.Generic
                                                                                      Duckling.Time.Types.IntervalDirection)
                                                                      ($dNFData :: Control.DeepSeq.NFData
                                                                                     Duckling.Time.Types.IntervalDirection)
  Control.DeepSeq.$dmrnf @ Duckling.Time.Types.IntervalDirection
                         $dNFData
                         $dGeneric
                         $dGNFData
  = Duckling.Time.Types.$fNFDataIntervalDirection_$s$dmrnf
"SPEC/Duckling.Time.Types $fShow(,) @ Bool @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                GHC.Types.Int)
                                                                  ($dShow :: GHC.Show.Show
                                                                               GHC.Types.Bool)
  GHC.Show.$fShow(,) @ GHC.Types.Bool @ GHC.Types.Int $dShow $dShow1
  = Duckling.Time.Types.$s$fShow(,)
"SPEC/Duckling.Time.Types $fShow(,)_$cshow @ Bool @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                       GHC.Types.Int)
                                                                         ($dShow :: GHC.Show.Show
                                                                                      GHC.Types.Bool)
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Bool
                            @ GHC.Types.Int
                            $dShow
                            $dShow1
  = Duckling.Time.Types.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Duckling.Time.Types $fShow(,)_$cshowList @ Bool @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                           GHC.Types.Int)
                                                                             ($dShow :: GHC.Show.Show
                                                                                          GHC.Types.Bool)
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Bool
                                @ GHC.Types.Int
                                $dShow
                                $dShow1
  = Duckling.Time.Types.$s$fShow(,)_$s$fShow(,)_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

